/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.organization;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.payabli.api.core.ClientOptions;
import com.payabli.api.core.MediaTypes;
import com.payabli.api.core.ObjectMappers;
import com.payabli.api.core.PayabliApiApiException;
import com.payabli.api.core.PayabliApiException;
import com.payabli.api.core.PayabliApiHttpResponse;
import com.payabli.api.core.RequestOptions;
import com.payabli.api.errors.BadRequestError;
import com.payabli.api.errors.InternalServerError;
import com.payabli.api.errors.ServiceUnavailableError;
import com.payabli.api.errors.UnauthorizedError;
import com.payabli.api.resources.organization.requests.AddOrganizationRequest;
import com.payabli.api.resources.organization.requests.OrganizationData;
import com.payabli.api.resources.organization.types.AddOrganizationResponse;
import com.payabli.api.resources.organization.types.DeleteOrganizationResponse;
import com.payabli.api.resources.organization.types.EditOrganizationResponse;
import com.payabli.api.types.OrganizationQueryRecord;
import com.payabli.api.types.PayabliApiResponse;
import com.payabli.api.types.SettingsQueryRecord;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawOrganizationClient {
    protected final ClientOptions clientOptions;

    public RawOrganizationClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Creates an organization under a parent organization. This is also referred to as a suborganization.
     */
    public PayabliApiHttpResponse<AddOrganizationResponse> addOrganization(AddOrganizationRequest request) {
        return addOrganization(request, null);
    }

    /**
     * Creates an organization under a parent organization. This is also referred to as a suborganization.
     */
    public PayabliApiHttpResponse<AddOrganizationResponse> addOrganization(
            AddOrganizationRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Organization")
                .build();
        Map<String, Object> properties = new HashMap<>();
        if (request.getServices().isPresent()) {
            properties.put("services", request.getServices());
        }
        if (request.getBillingInfo().isPresent()) {
            properties.put("billingInfo", request.getBillingInfo());
        }
        if (request.getContacts().isPresent()) {
            properties.put("contacts", request.getContacts());
        }
        if (request.getHasBilling().isPresent()) {
            properties.put("hasBilling", request.getHasBilling());
        }
        if (request.getHasResidual().isPresent()) {
            properties.put("hasResidual", request.getHasResidual());
        }
        if (request.getOrgAddress().isPresent()) {
            properties.put("orgAddress", request.getOrgAddress());
        }
        if (request.getOrgCity().isPresent()) {
            properties.put("orgCity", request.getOrgCity());
        }
        if (request.getOrgCountry().isPresent()) {
            properties.put("orgCountry", request.getOrgCountry());
        }
        if (request.getOrgEntryName().isPresent()) {
            properties.put("orgEntryName", request.getOrgEntryName());
        }
        if (request.getOrgId().isPresent()) {
            properties.put("orgId", request.getOrgId());
        }
        if (request.getOrgLogo().isPresent()) {
            properties.put("orgLogo", request.getOrgLogo());
        }
        properties.put("orgName", request.getOrgName());
        if (request.getOrgParentId().isPresent()) {
            properties.put("orgParentId", request.getOrgParentId());
        }
        if (request.getOrgState().isPresent()) {
            properties.put("orgState", request.getOrgState());
        }
        if (request.getOrgTimezone().isPresent()) {
            properties.put("orgTimezone", request.getOrgTimezone());
        }
        properties.put("orgType", request.getOrgType());
        if (request.getOrgWebsite().isPresent()) {
            properties.put("orgWebsite", request.getOrgWebsite());
        }
        if (request.getOrgZip().isPresent()) {
            properties.put("orgZip", request.getOrgZip());
        }
        properties.put("replyToEmail", request.getReplyToEmail());
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        if (request.getIdempotencyKey().isPresent()) {
            _requestBuilder.addHeader(
                    "idempotencyKey", request.getIdempotencyKey().get());
        }
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), AddOrganizationResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Delete an organization by ID.
     */
    public PayabliApiHttpResponse<DeleteOrganizationResponse> deleteOrganization(int orgId) {
        return deleteOrganization(orgId, null);
    }

    /**
     * Delete an organization by ID.
     */
    public PayabliApiHttpResponse<DeleteOrganizationResponse> deleteOrganization(
            int orgId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Organization")
                .addPathSegment(Integer.toString(orgId))
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), DeleteOrganizationResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Updates an organization's details by ID.
     */
    public PayabliApiHttpResponse<EditOrganizationResponse> editOrganization(int orgId) {
        return editOrganization(orgId, OrganizationData.builder().build());
    }

    /**
     * Updates an organization's details by ID.
     */
    public PayabliApiHttpResponse<EditOrganizationResponse> editOrganization(int orgId, OrganizationData request) {
        return editOrganization(orgId, request, null);
    }

    /**
     * Updates an organization's details by ID.
     */
    public PayabliApiHttpResponse<EditOrganizationResponse> editOrganization(
            int orgId, OrganizationData request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Organization")
                .addPathSegment(Integer.toString(orgId))
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new PayabliApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), EditOrganizationResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Gets an organization's basic information by entry name (entrypoint identifier).
     */
    public PayabliApiHttpResponse<OrganizationQueryRecord> getBasicOrganization(String entry) {
        return getBasicOrganization(entry, null);
    }

    /**
     * Gets an organization's basic information by entry name (entrypoint identifier).
     */
    public PayabliApiHttpResponse<OrganizationQueryRecord> getBasicOrganization(
            String entry, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Organization/basic")
                .addPathSegment(entry)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), OrganizationQueryRecord.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Gets an organizations basic details by org ID.
     */
    public PayabliApiHttpResponse<OrganizationQueryRecord> getBasicOrganizationById(int orgId) {
        return getBasicOrganizationById(orgId, null);
    }

    /**
     * Gets an organizations basic details by org ID.
     */
    public PayabliApiHttpResponse<OrganizationQueryRecord> getBasicOrganizationById(
            int orgId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Organization/basicById")
                .addPathSegment(Integer.toString(orgId))
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), OrganizationQueryRecord.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Retrieves details for an organization by ID.
     */
    public PayabliApiHttpResponse<OrganizationQueryRecord> getOrganization(int orgId) {
        return getOrganization(orgId, null);
    }

    /**
     * Retrieves details for an organization by ID.
     */
    public PayabliApiHttpResponse<OrganizationQueryRecord> getOrganization(int orgId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Organization/read")
                .addPathSegment(Integer.toString(orgId))
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), OrganizationQueryRecord.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Retrieves an organization's settings.
     */
    public PayabliApiHttpResponse<SettingsQueryRecord> getSettingsOrganization(int orgId) {
        return getSettingsOrganization(orgId, null);
    }

    /**
     * Retrieves an organization's settings.
     */
    public PayabliApiHttpResponse<SettingsQueryRecord> getSettingsOrganization(
            int orgId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Organization/settings")
                .addPathSegment(Integer.toString(orgId))
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), SettingsQueryRecord.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }
}
