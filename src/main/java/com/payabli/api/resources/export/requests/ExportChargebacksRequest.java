/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.export.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ExportChargebacksRequest.Builder.class)
public final class ExportChargebacksRequest {
    private final Optional<String> columnsExport;

    private final Optional<Integer> fromRecord;

    private final Optional<Integer> limitRecord;

    private final Optional<Map<String, Optional<String>>> parameters;

    private final Map<String, Object> additionalProperties;

    private ExportChargebacksRequest(
            Optional<String> columnsExport,
            Optional<Integer> fromRecord,
            Optional<Integer> limitRecord,
            Optional<Map<String, Optional<String>>> parameters,
            Map<String, Object> additionalProperties) {
        this.columnsExport = columnsExport;
        this.fromRecord = fromRecord;
        this.limitRecord = limitRecord;
        this.parameters = parameters;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("columnsExport")
    public Optional<String> getColumnsExport() {
        return columnsExport;
    }

    /**
     * @return The number of records to skip before starting to collect the result set.
     */
    @JsonProperty("fromRecord")
    public Optional<Integer> getFromRecord() {
        return fromRecord;
    }

    /**
     * @return The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.
     */
    @JsonProperty("limitRecord")
    public Optional<Integer> getLimitRecord() {
        return limitRecord;
    }

    /**
     * @return Collection of field names, conditions, and values used to filter the query
     * <p>&lt;Info&gt;
     *   **You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**</p>
     * <p>Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove <code>parameters=</code> and run the request in a different client.</p>
     * <p>For example:</p>
     * <p>--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&amp;limitRecord=20</p>
     * <p>should become:</p>
     * <p>--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&amp;limitRecord=20
     * &lt;/Info&gt;</p>
     * <p>See <a href="/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference">Filters and Conditions Reference</a> for help.</p>
     * <p>List of field names accepted:</p>
     * <ul>
     * <li><code>chargebackDate</code> (gt, ge, lt, le, eq, ne)</li>
     * <li><code>transId</code> (ne, eq, ct, nct)</li>
     * <li><code>method</code> (in, nin, eq, ne)</li>
     * <li><code>netAmount</code> (gt, ge, lt, le, eq, ne)</li>
     * <li><code>reasonCode</code> (in, nin, eq, ne)</li>
     * <li><code>reason</code> (ct, nct, eq, ne)</li>
     * <li><code>caseNumber</code> (ct, nct, eq, ne)</li>
     * <li><code>status</code> (in, nin, eq, ne)</li>
     * <li><code>accountType</code> (in, nin, eq, ne)</li>
     * <li><code>payaccountLastfour</code> (nct, ct)</li>
     * <li><code>payaccountType</code> (ne, eq, in, nin)</li>
     * <li><code>customerFirstname</code> (ct, nct, eq, ne)</li>
     * <li><code>customerLastname</code> (ct, nct, eq, ne)</li>
     * <li><code>customerName</code> (ct, nct)</li>
     * <li><code>customerId</code> (eq, ne)</li>
     * <li><code>customerNumber</code> (ct, nct, eq, ne)</li>
     * <li><code>customerCompanyname</code> (ct, nct, eq, ne)</li>
     * <li><code>customerAddress</code> (ct, nct, eq, ne)</li>
     * <li><code>customerCity</code> (ct, nct, eq, ne)</li>
     * <li><code>customerZip</code> (ct, nct, eq, ne)</li>
     * <li><code>customerState</code> (ct, nct, eq, ne)</li>
     * <li><code>customerCountry</code> (ct, nct, eq, ne)</li>
     * <li><code>customerPhone</code> (ct, nct, eq, ne)</li>
     * <li><code>customerEmail</code> (ct, nct, eq, ne)</li>
     * <li><code>customerShippingAddress</code> (ct, nct, eq, ne)</li>
     * <li><code>customerShippingCity</code> (ct, nct, eq, ne)</li>
     * <li><code>customerShippingZip</code> (ct, nct, eq, ne)</li>
     * <li><code>customerShippingState</code> (ct, nct, eq, ne)</li>
     * <li><code>customerShippingCountry</code> (ct, nct, eq, ne)</li>
     * <li><code>orgId</code> (eq) <em>mandatory when entry=org</em></li>
     * <li><code>paypointId</code> (ne, eq)</li>
     * <li><code>paypointLegal</code> (ne, eq, ct, nct)</li>
     * <li><code>paypointDba</code> (ne, eq, ct, nct)</li>
     * <li><code>orgName</code> (ne, eq, ct, nct)</li>
     * <li><code>additional-xxx</code> (ne, eq, ct, nct) where xxx is the additional field name</li>
     * </ul>
     * <p>List of comparison accepted - enclosed between parentheses:</p>
     * <ul>
     * <li>eq or empty =&gt; equal</li>
     * <li>gt =&gt; greater than</li>
     * <li>ge =&gt; greater or equal</li>
     * <li>lt =&gt; less than</li>
     * <li>le =&gt; less or equal</li>
     * <li>ne =&gt; not equal</li>
     * <li>ct =&gt; contains</li>
     * <li>nct =&gt; not contains</li>
     * <li>in =&gt; inside array separated by &quot;|&quot;</li>
     * <li>nin =&gt; not inside array separated by &quot;|&quot;</li>
     * </ul>
     * <p>List of parameters accepted:</p>
     * <ul>
     * <li>limitRecord : max number of records for query (default=&quot;20&quot;, &quot;0&quot; or negative value for all)</li>
     * <li>fromRecord : initial record in query</li>
     * </ul>
     * <p>Example: <code>netAmount(gt)=20</code> returns all records with a <code>netAmount</code> greater than 20.00</p>
     */
    @JsonProperty("parameters")
    public Optional<Map<String, Optional<String>>> getParameters() {
        return parameters;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ExportChargebacksRequest && equalTo((ExportChargebacksRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ExportChargebacksRequest other) {
        return columnsExport.equals(other.columnsExport)
                && fromRecord.equals(other.fromRecord)
                && limitRecord.equals(other.limitRecord)
                && parameters.equals(other.parameters);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.columnsExport, this.fromRecord, this.limitRecord, this.parameters);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> columnsExport = Optional.empty();

        private Optional<Integer> fromRecord = Optional.empty();

        private Optional<Integer> limitRecord = Optional.empty();

        private Optional<Map<String, Optional<String>>> parameters = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ExportChargebacksRequest other) {
            columnsExport(other.getColumnsExport());
            fromRecord(other.getFromRecord());
            limitRecord(other.getLimitRecord());
            parameters(other.getParameters());
            return this;
        }

        @JsonSetter(value = "columnsExport", nulls = Nulls.SKIP)
        public Builder columnsExport(Optional<String> columnsExport) {
            this.columnsExport = columnsExport;
            return this;
        }

        public Builder columnsExport(String columnsExport) {
            this.columnsExport = Optional.ofNullable(columnsExport);
            return this;
        }

        /**
         * <p>The number of records to skip before starting to collect the result set.</p>
         */
        @JsonSetter(value = "fromRecord", nulls = Nulls.SKIP)
        public Builder fromRecord(Optional<Integer> fromRecord) {
            this.fromRecord = fromRecord;
            return this;
        }

        public Builder fromRecord(Integer fromRecord) {
            this.fromRecord = Optional.ofNullable(fromRecord);
            return this;
        }

        /**
         * <p>The number of records to return for the query. The maximum is 30,000 records. When this parameter isn't sent, the API returns up to 25,000 records.</p>
         */
        @JsonSetter(value = "limitRecord", nulls = Nulls.SKIP)
        public Builder limitRecord(Optional<Integer> limitRecord) {
            this.limitRecord = limitRecord;
            return this;
        }

        public Builder limitRecord(Integer limitRecord) {
            this.limitRecord = Optional.ofNullable(limitRecord);
            return this;
        }

        /**
         * <p>Collection of field names, conditions, and values used to filter the query</p>
         * <p>&lt;Info&gt;
         *   **You must remove `parameters=` from the request before you send it, otherwise Payabli will ignore the filters.**</p>
         * <p>Because of a technical limitation, you can't make a request that includes filters from the API console on this page. The response won't be filtered. Instead, copy the request, remove <code>parameters=</code> and run the request in a different client.</p>
         * <p>For example:</p>
         * <p>--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?parameters=totalAmount(gt)=1000&amp;limitRecord=20</p>
         * <p>should become:</p>
         * <p>--url https://api-sandbox.payabli.com/api/Query/transactions/org/236?totalAmount(gt)=1000&amp;limitRecord=20
         * &lt;/Info&gt;</p>
         * <p>See <a href="/developers/developer-guides/pay-ops-reporting-engine-overview#filters-and-conditions-reference">Filters and Conditions Reference</a> for help.</p>
         * <p>List of field names accepted:</p>
         * <ul>
         * <li><code>chargebackDate</code> (gt, ge, lt, le, eq, ne)</li>
         * <li><code>transId</code> (ne, eq, ct, nct)</li>
         * <li><code>method</code> (in, nin, eq, ne)</li>
         * <li><code>netAmount</code> (gt, ge, lt, le, eq, ne)</li>
         * <li><code>reasonCode</code> (in, nin, eq, ne)</li>
         * <li><code>reason</code> (ct, nct, eq, ne)</li>
         * <li><code>caseNumber</code> (ct, nct, eq, ne)</li>
         * <li><code>status</code> (in, nin, eq, ne)</li>
         * <li><code>accountType</code> (in, nin, eq, ne)</li>
         * <li><code>payaccountLastfour</code> (nct, ct)</li>
         * <li><code>payaccountType</code> (ne, eq, in, nin)</li>
         * <li><code>customerFirstname</code> (ct, nct, eq, ne)</li>
         * <li><code>customerLastname</code> (ct, nct, eq, ne)</li>
         * <li><code>customerName</code> (ct, nct)</li>
         * <li><code>customerId</code> (eq, ne)</li>
         * <li><code>customerNumber</code> (ct, nct, eq, ne)</li>
         * <li><code>customerCompanyname</code> (ct, nct, eq, ne)</li>
         * <li><code>customerAddress</code> (ct, nct, eq, ne)</li>
         * <li><code>customerCity</code> (ct, nct, eq, ne)</li>
         * <li><code>customerZip</code> (ct, nct, eq, ne)</li>
         * <li><code>customerState</code> (ct, nct, eq, ne)</li>
         * <li><code>customerCountry</code> (ct, nct, eq, ne)</li>
         * <li><code>customerPhone</code> (ct, nct, eq, ne)</li>
         * <li><code>customerEmail</code> (ct, nct, eq, ne)</li>
         * <li><code>customerShippingAddress</code> (ct, nct, eq, ne)</li>
         * <li><code>customerShippingCity</code> (ct, nct, eq, ne)</li>
         * <li><code>customerShippingZip</code> (ct, nct, eq, ne)</li>
         * <li><code>customerShippingState</code> (ct, nct, eq, ne)</li>
         * <li><code>customerShippingCountry</code> (ct, nct, eq, ne)</li>
         * <li><code>orgId</code> (eq) <em>mandatory when entry=org</em></li>
         * <li><code>paypointId</code> (ne, eq)</li>
         * <li><code>paypointLegal</code> (ne, eq, ct, nct)</li>
         * <li><code>paypointDba</code> (ne, eq, ct, nct)</li>
         * <li><code>orgName</code> (ne, eq, ct, nct)</li>
         * <li><code>additional-xxx</code> (ne, eq, ct, nct) where xxx is the additional field name</li>
         * </ul>
         * <p>List of comparison accepted - enclosed between parentheses:</p>
         * <ul>
         * <li>eq or empty =&gt; equal</li>
         * <li>gt =&gt; greater than</li>
         * <li>ge =&gt; greater or equal</li>
         * <li>lt =&gt; less than</li>
         * <li>le =&gt; less or equal</li>
         * <li>ne =&gt; not equal</li>
         * <li>ct =&gt; contains</li>
         * <li>nct =&gt; not contains</li>
         * <li>in =&gt; inside array separated by &quot;|&quot;</li>
         * <li>nin =&gt; not inside array separated by &quot;|&quot;</li>
         * </ul>
         * <p>List of parameters accepted:</p>
         * <ul>
         * <li>limitRecord : max number of records for query (default=&quot;20&quot;, &quot;0&quot; or negative value for all)</li>
         * <li>fromRecord : initial record in query</li>
         * </ul>
         * <p>Example: <code>netAmount(gt)=20</code> returns all records with a <code>netAmount</code> greater than 20.00</p>
         */
        @JsonSetter(value = "parameters", nulls = Nulls.SKIP)
        public Builder parameters(Optional<Map<String, Optional<String>>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(Map<String, Optional<String>> parameters) {
            this.parameters = Optional.ofNullable(parameters);
            return this;
        }

        public ExportChargebacksRequest build() {
            return new ExportChargebacksRequest(
                    columnsExport, fromRecord, limitRecord, parameters, additionalProperties);
        }
    }
}
