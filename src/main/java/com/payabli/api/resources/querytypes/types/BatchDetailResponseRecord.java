/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.querytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.Nullable;
import com.payabli.api.core.NullableNonemptyFilter;
import com.payabli.api.core.ObjectMappers;
import com.payabli.api.types.AchHolderType;
import com.payabli.api.types.BillData;
import com.payabli.api.types.QueryCFeeTransaction;
import com.payabli.api.types.QueryPaymentData;
import com.payabli.api.types.QueryResponseData;
import com.payabli.api.types.QueryTransactionEvents;
import com.payabli.api.types.QueryTransactionPayorData;
import com.payabli.api.types.SplitFundingContent;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BatchDetailResponseRecord.Builder.class)
public final class BatchDetailResponseRecord {
    private final int id;

    private final String method;

    private final Optional<String> walletType;

    private final double settledAmount;

    private final String type;

    private final String batchNumber;

    private final double batchAmount;

    private final String paymentTransId;

    private final int paymentTransStatus;

    private final int scheduleReference;

    private final String gatewayTransId;

    private final String orderId;

    private final String transMethod;

    private final Optional<QueryPaymentData> paymentData;

    private final Optional<Double> netAmount;

    private final String operation;

    private final String category;

    private final Optional<String> source;

    private final int status;

    private final OffsetDateTime transactionTime;

    private final Optional<QueryTransactionPayorData> customer;

    private final OffsetDateTime settlementDate;

    private final int paymentSettlementStatus;

    private final int batchStatus;

    private final OffsetDateTime depositDate;

    private final OffsetDateTime expectedDepositDate;

    private final String maskedAccount;

    private final OffsetDateTime createdAt;

    private final String paypointLegalname;

    private final Optional<QueryResponseData> responseData;

    private final String paypointDbaname;

    private final String parentOrgName;

    private final int parentOrgId;

    private final String paypointEntryname;

    private final Optional<String> deviceId;

    private final long retrievalId;

    private final long chargebackId;

    private final AchHolderType achHolderType;

    private final String achSecCode;

    private final String connectorName;

    private final long entrypageId;

    private final double feeAmount;

    private final long orgId;

    private final long payorId;

    private final long paypointId;

    private final Optional<Double> pendingFeeAmount;

    private final long refundId;

    private final long returnedId;

    private final Optional<List<SplitFundingContent>> splitFundingInstructions;

    private final double totalAmount;

    private final List<QueryCFeeTransaction> cfeeTransactions;

    private final Optional<BillData> invoiceData;

    private final List<QueryTransactionEvents> transactionEvents;

    private final String externalPaypointId;

    private final int isHold;

    private final Map<String, Object> additionalProperties;

    private BatchDetailResponseRecord(
            int id,
            String method,
            Optional<String> walletType,
            double settledAmount,
            String type,
            String batchNumber,
            double batchAmount,
            String paymentTransId,
            int paymentTransStatus,
            int scheduleReference,
            String gatewayTransId,
            String orderId,
            String transMethod,
            Optional<QueryPaymentData> paymentData,
            Optional<Double> netAmount,
            String operation,
            String category,
            Optional<String> source,
            int status,
            OffsetDateTime transactionTime,
            Optional<QueryTransactionPayorData> customer,
            OffsetDateTime settlementDate,
            int paymentSettlementStatus,
            int batchStatus,
            OffsetDateTime depositDate,
            OffsetDateTime expectedDepositDate,
            String maskedAccount,
            OffsetDateTime createdAt,
            String paypointLegalname,
            Optional<QueryResponseData> responseData,
            String paypointDbaname,
            String parentOrgName,
            int parentOrgId,
            String paypointEntryname,
            Optional<String> deviceId,
            long retrievalId,
            long chargebackId,
            AchHolderType achHolderType,
            String achSecCode,
            String connectorName,
            long entrypageId,
            double feeAmount,
            long orgId,
            long payorId,
            long paypointId,
            Optional<Double> pendingFeeAmount,
            long refundId,
            long returnedId,
            Optional<List<SplitFundingContent>> splitFundingInstructions,
            double totalAmount,
            List<QueryCFeeTransaction> cfeeTransactions,
            Optional<BillData> invoiceData,
            List<QueryTransactionEvents> transactionEvents,
            String externalPaypointId,
            int isHold,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.method = method;
        this.walletType = walletType;
        this.settledAmount = settledAmount;
        this.type = type;
        this.batchNumber = batchNumber;
        this.batchAmount = batchAmount;
        this.paymentTransId = paymentTransId;
        this.paymentTransStatus = paymentTransStatus;
        this.scheduleReference = scheduleReference;
        this.gatewayTransId = gatewayTransId;
        this.orderId = orderId;
        this.transMethod = transMethod;
        this.paymentData = paymentData;
        this.netAmount = netAmount;
        this.operation = operation;
        this.category = category;
        this.source = source;
        this.status = status;
        this.transactionTime = transactionTime;
        this.customer = customer;
        this.settlementDate = settlementDate;
        this.paymentSettlementStatus = paymentSettlementStatus;
        this.batchStatus = batchStatus;
        this.depositDate = depositDate;
        this.expectedDepositDate = expectedDepositDate;
        this.maskedAccount = maskedAccount;
        this.createdAt = createdAt;
        this.paypointLegalname = paypointLegalname;
        this.responseData = responseData;
        this.paypointDbaname = paypointDbaname;
        this.parentOrgName = parentOrgName;
        this.parentOrgId = parentOrgId;
        this.paypointEntryname = paypointEntryname;
        this.deviceId = deviceId;
        this.retrievalId = retrievalId;
        this.chargebackId = chargebackId;
        this.achHolderType = achHolderType;
        this.achSecCode = achSecCode;
        this.connectorName = connectorName;
        this.entrypageId = entrypageId;
        this.feeAmount = feeAmount;
        this.orgId = orgId;
        this.payorId = payorId;
        this.paypointId = paypointId;
        this.pendingFeeAmount = pendingFeeAmount;
        this.refundId = refundId;
        this.returnedId = returnedId;
        this.splitFundingInstructions = splitFundingInstructions;
        this.totalAmount = totalAmount;
        this.cfeeTransactions = cfeeTransactions;
        this.invoiceData = invoiceData;
        this.transactionEvents = transactionEvents;
        this.externalPaypointId = externalPaypointId;
        this.isHold = isHold;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("Id")
    public int getId() {
        return id;
    }

    @JsonProperty("Method")
    public String getMethod() {
        return method;
    }

    @JsonProperty("WalletType")
    public Optional<String> getWalletType() {
        return walletType;
    }

    @JsonProperty("SettledAmount")
    public double getSettledAmount() {
        return settledAmount;
    }

    @JsonProperty("Type")
    public String getType() {
        return type;
    }

    @JsonProperty("BatchNumber")
    public String getBatchNumber() {
        return batchNumber;
    }

    @JsonProperty("BatchAmount")
    public double getBatchAmount() {
        return batchAmount;
    }

    @JsonProperty("PaymentTransId")
    public String getPaymentTransId() {
        return paymentTransId;
    }

    @JsonProperty("PaymentTransStatus")
    public int getPaymentTransStatus() {
        return paymentTransStatus;
    }

    @JsonProperty("ScheduleReference")
    public int getScheduleReference() {
        return scheduleReference;
    }

    @JsonProperty("GatewayTransId")
    public String getGatewayTransId() {
        return gatewayTransId;
    }

    @JsonProperty("OrderId")
    public String getOrderId() {
        return orderId;
    }

    @JsonProperty("TransMethod")
    public String getTransMethod() {
        return transMethod;
    }

    @JsonIgnore
    public Optional<QueryPaymentData> getPaymentData() {
        if (paymentData == null) {
            return Optional.empty();
        }
        return paymentData;
    }

    @JsonProperty("NetAmount")
    public Optional<Double> getNetAmount() {
        return netAmount;
    }

    @JsonProperty("Operation")
    public String getOperation() {
        return operation;
    }

    @JsonProperty("Category")
    public String getCategory() {
        return category;
    }

    @JsonProperty("Source")
    public Optional<String> getSource() {
        return source;
    }

    @JsonProperty("Status")
    public int getStatus() {
        return status;
    }

    @JsonProperty("TransactionTime")
    public OffsetDateTime getTransactionTime() {
        return transactionTime;
    }

    @JsonProperty("Customer")
    public Optional<QueryTransactionPayorData> getCustomer() {
        return customer;
    }

    @JsonProperty("SettlementDate")
    public OffsetDateTime getSettlementDate() {
        return settlementDate;
    }

    @JsonProperty("PaymentSettlementStatus")
    public int getPaymentSettlementStatus() {
        return paymentSettlementStatus;
    }

    @JsonProperty("BatchStatus")
    public int getBatchStatus() {
        return batchStatus;
    }

    @JsonProperty("DepositDate")
    public OffsetDateTime getDepositDate() {
        return depositDate;
    }

    @JsonProperty("ExpectedDepositDate")
    public OffsetDateTime getExpectedDepositDate() {
        return expectedDepositDate;
    }

    @JsonProperty("MaskedAccount")
    public String getMaskedAccount() {
        return maskedAccount;
    }

    @JsonProperty("CreatedAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("PaypointLegalname")
    public String getPaypointLegalname() {
        return paypointLegalname;
    }

    @JsonProperty("ResponseData")
    public Optional<QueryResponseData> getResponseData() {
        return responseData;
    }

    @JsonProperty("PaypointDbaname")
    public String getPaypointDbaname() {
        return paypointDbaname;
    }

    @JsonProperty("ParentOrgName")
    public String getParentOrgName() {
        return parentOrgName;
    }

    @JsonProperty("ParentOrgId")
    public int getParentOrgId() {
        return parentOrgId;
    }

    @JsonProperty("PaypointEntryname")
    public String getPaypointEntryname() {
        return paypointEntryname;
    }

    @JsonProperty("DeviceId")
    public Optional<String> getDeviceId() {
        return deviceId;
    }

    @JsonProperty("RetrievalId")
    public long getRetrievalId() {
        return retrievalId;
    }

    @JsonProperty("ChargebackId")
    public long getChargebackId() {
        return chargebackId;
    }

    @JsonProperty("AchHolderType")
    public AchHolderType getAchHolderType() {
        return achHolderType;
    }

    @JsonProperty("AchSecCode")
    public String getAchSecCode() {
        return achSecCode;
    }

    @JsonProperty("ConnectorName")
    public String getConnectorName() {
        return connectorName;
    }

    @JsonProperty("EntrypageId")
    public long getEntrypageId() {
        return entrypageId;
    }

    @JsonProperty("FeeAmount")
    public double getFeeAmount() {
        return feeAmount;
    }

    @JsonProperty("OrgId")
    public long getOrgId() {
        return orgId;
    }

    @JsonProperty("PayorId")
    public long getPayorId() {
        return payorId;
    }

    @JsonProperty("PaypointId")
    public long getPaypointId() {
        return paypointId;
    }

    @JsonProperty("PendingFeeAmount")
    public Optional<Double> getPendingFeeAmount() {
        return pendingFeeAmount;
    }

    @JsonProperty("RefundId")
    public long getRefundId() {
        return refundId;
    }

    @JsonProperty("ReturnedId")
    public long getReturnedId() {
        return returnedId;
    }

    @JsonProperty("splitFundingInstructions")
    public Optional<List<SplitFundingContent>> getSplitFundingInstructions() {
        return splitFundingInstructions;
    }

    @JsonProperty("TotalAmount")
    public double getTotalAmount() {
        return totalAmount;
    }

    @JsonProperty("CfeeTransactions")
    public List<QueryCFeeTransaction> getCfeeTransactions() {
        return cfeeTransactions;
    }

    @JsonProperty("invoiceData")
    public Optional<BillData> getInvoiceData() {
        return invoiceData;
    }

    @JsonProperty("TransactionEvents")
    public List<QueryTransactionEvents> getTransactionEvents() {
        return transactionEvents;
    }

    @JsonProperty("externalPaypointID")
    public String getExternalPaypointId() {
        return externalPaypointId;
    }

    @JsonProperty("isHold")
    public int getIsHold() {
        return isHold;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PaymentData")
    private Optional<QueryPaymentData> _getPaymentData() {
        return paymentData;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BatchDetailResponseRecord && equalTo((BatchDetailResponseRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BatchDetailResponseRecord other) {
        return id == other.id
                && method.equals(other.method)
                && walletType.equals(other.walletType)
                && settledAmount == other.settledAmount
                && type.equals(other.type)
                && batchNumber.equals(other.batchNumber)
                && batchAmount == other.batchAmount
                && paymentTransId.equals(other.paymentTransId)
                && paymentTransStatus == other.paymentTransStatus
                && scheduleReference == other.scheduleReference
                && gatewayTransId.equals(other.gatewayTransId)
                && orderId.equals(other.orderId)
                && transMethod.equals(other.transMethod)
                && paymentData.equals(other.paymentData)
                && netAmount.equals(other.netAmount)
                && operation.equals(other.operation)
                && category.equals(other.category)
                && source.equals(other.source)
                && status == other.status
                && transactionTime.equals(other.transactionTime)
                && customer.equals(other.customer)
                && settlementDate.equals(other.settlementDate)
                && paymentSettlementStatus == other.paymentSettlementStatus
                && batchStatus == other.batchStatus
                && depositDate.equals(other.depositDate)
                && expectedDepositDate.equals(other.expectedDepositDate)
                && maskedAccount.equals(other.maskedAccount)
                && createdAt.equals(other.createdAt)
                && paypointLegalname.equals(other.paypointLegalname)
                && responseData.equals(other.responseData)
                && paypointDbaname.equals(other.paypointDbaname)
                && parentOrgName.equals(other.parentOrgName)
                && parentOrgId == other.parentOrgId
                && paypointEntryname.equals(other.paypointEntryname)
                && deviceId.equals(other.deviceId)
                && retrievalId == other.retrievalId
                && chargebackId == other.chargebackId
                && achHolderType.equals(other.achHolderType)
                && achSecCode.equals(other.achSecCode)
                && connectorName.equals(other.connectorName)
                && entrypageId == other.entrypageId
                && feeAmount == other.feeAmount
                && orgId == other.orgId
                && payorId == other.payorId
                && paypointId == other.paypointId
                && pendingFeeAmount.equals(other.pendingFeeAmount)
                && refundId == other.refundId
                && returnedId == other.returnedId
                && splitFundingInstructions.equals(other.splitFundingInstructions)
                && totalAmount == other.totalAmount
                && cfeeTransactions.equals(other.cfeeTransactions)
                && invoiceData.equals(other.invoiceData)
                && transactionEvents.equals(other.transactionEvents)
                && externalPaypointId.equals(other.externalPaypointId)
                && isHold == other.isHold;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.method,
                this.walletType,
                this.settledAmount,
                this.type,
                this.batchNumber,
                this.batchAmount,
                this.paymentTransId,
                this.paymentTransStatus,
                this.scheduleReference,
                this.gatewayTransId,
                this.orderId,
                this.transMethod,
                this.paymentData,
                this.netAmount,
                this.operation,
                this.category,
                this.source,
                this.status,
                this.transactionTime,
                this.customer,
                this.settlementDate,
                this.paymentSettlementStatus,
                this.batchStatus,
                this.depositDate,
                this.expectedDepositDate,
                this.maskedAccount,
                this.createdAt,
                this.paypointLegalname,
                this.responseData,
                this.paypointDbaname,
                this.parentOrgName,
                this.parentOrgId,
                this.paypointEntryname,
                this.deviceId,
                this.retrievalId,
                this.chargebackId,
                this.achHolderType,
                this.achSecCode,
                this.connectorName,
                this.entrypageId,
                this.feeAmount,
                this.orgId,
                this.payorId,
                this.paypointId,
                this.pendingFeeAmount,
                this.refundId,
                this.returnedId,
                this.splitFundingInstructions,
                this.totalAmount,
                this.cfeeTransactions,
                this.invoiceData,
                this.transactionEvents,
                this.externalPaypointId,
                this.isHold);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        MethodStage id(int id);

        Builder from(BatchDetailResponseRecord other);
    }

    public interface MethodStage {
        SettledAmountStage method(@NotNull String method);
    }

    public interface SettledAmountStage {
        TypeStage settledAmount(double settledAmount);
    }

    public interface TypeStage {
        BatchNumberStage type(@NotNull String type);
    }

    public interface BatchNumberStage {
        BatchAmountStage batchNumber(@NotNull String batchNumber);
    }

    public interface BatchAmountStage {
        PaymentTransIdStage batchAmount(double batchAmount);
    }

    public interface PaymentTransIdStage {
        PaymentTransStatusStage paymentTransId(@NotNull String paymentTransId);
    }

    public interface PaymentTransStatusStage {
        ScheduleReferenceStage paymentTransStatus(int paymentTransStatus);
    }

    public interface ScheduleReferenceStage {
        GatewayTransIdStage scheduleReference(int scheduleReference);
    }

    public interface GatewayTransIdStage {
        OrderIdStage gatewayTransId(@NotNull String gatewayTransId);
    }

    public interface OrderIdStage {
        TransMethodStage orderId(@NotNull String orderId);
    }

    public interface TransMethodStage {
        OperationStage transMethod(@NotNull String transMethod);
    }

    public interface OperationStage {
        CategoryStage operation(@NotNull String operation);
    }

    public interface CategoryStage {
        StatusStage category(@NotNull String category);
    }

    public interface StatusStage {
        TransactionTimeStage status(int status);
    }

    public interface TransactionTimeStage {
        SettlementDateStage transactionTime(@NotNull OffsetDateTime transactionTime);
    }

    public interface SettlementDateStage {
        PaymentSettlementStatusStage settlementDate(@NotNull OffsetDateTime settlementDate);
    }

    public interface PaymentSettlementStatusStage {
        BatchStatusStage paymentSettlementStatus(int paymentSettlementStatus);
    }

    public interface BatchStatusStage {
        DepositDateStage batchStatus(int batchStatus);
    }

    public interface DepositDateStage {
        ExpectedDepositDateStage depositDate(@NotNull OffsetDateTime depositDate);
    }

    public interface ExpectedDepositDateStage {
        MaskedAccountStage expectedDepositDate(@NotNull OffsetDateTime expectedDepositDate);
    }

    public interface MaskedAccountStage {
        CreatedAtStage maskedAccount(@NotNull String maskedAccount);
    }

    public interface CreatedAtStage {
        PaypointLegalnameStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface PaypointLegalnameStage {
        PaypointDbanameStage paypointLegalname(@NotNull String paypointLegalname);
    }

    public interface PaypointDbanameStage {
        ParentOrgNameStage paypointDbaname(@NotNull String paypointDbaname);
    }

    public interface ParentOrgNameStage {
        ParentOrgIdStage parentOrgName(@NotNull String parentOrgName);
    }

    public interface ParentOrgIdStage {
        PaypointEntrynameStage parentOrgId(int parentOrgId);
    }

    public interface PaypointEntrynameStage {
        RetrievalIdStage paypointEntryname(@NotNull String paypointEntryname);
    }

    public interface RetrievalIdStage {
        ChargebackIdStage retrievalId(long retrievalId);
    }

    public interface ChargebackIdStage {
        AchHolderTypeStage chargebackId(long chargebackId);
    }

    public interface AchHolderTypeStage {
        AchSecCodeStage achHolderType(@NotNull AchHolderType achHolderType);
    }

    public interface AchSecCodeStage {
        ConnectorNameStage achSecCode(@NotNull String achSecCode);
    }

    public interface ConnectorNameStage {
        EntrypageIdStage connectorName(@NotNull String connectorName);
    }

    public interface EntrypageIdStage {
        FeeAmountStage entrypageId(long entrypageId);
    }

    public interface FeeAmountStage {
        OrgIdStage feeAmount(double feeAmount);
    }

    public interface OrgIdStage {
        PayorIdStage orgId(long orgId);
    }

    public interface PayorIdStage {
        PaypointIdStage payorId(long payorId);
    }

    public interface PaypointIdStage {
        RefundIdStage paypointId(long paypointId);
    }

    public interface RefundIdStage {
        ReturnedIdStage refundId(long refundId);
    }

    public interface ReturnedIdStage {
        TotalAmountStage returnedId(long returnedId);
    }

    public interface TotalAmountStage {
        ExternalPaypointIdStage totalAmount(double totalAmount);
    }

    public interface ExternalPaypointIdStage {
        IsHoldStage externalPaypointId(@NotNull String externalPaypointId);
    }

    public interface IsHoldStage {
        _FinalStage isHold(int isHold);
    }

    public interface _FinalStage {
        BatchDetailResponseRecord build();

        _FinalStage walletType(Optional<String> walletType);

        _FinalStage walletType(String walletType);

        _FinalStage paymentData(Optional<QueryPaymentData> paymentData);

        _FinalStage paymentData(QueryPaymentData paymentData);

        _FinalStage paymentData(Nullable<QueryPaymentData> paymentData);

        _FinalStage netAmount(Optional<Double> netAmount);

        _FinalStage netAmount(Double netAmount);

        _FinalStage source(Optional<String> source);

        _FinalStage source(String source);

        _FinalStage customer(Optional<QueryTransactionPayorData> customer);

        _FinalStage customer(QueryTransactionPayorData customer);

        _FinalStage responseData(Optional<QueryResponseData> responseData);

        _FinalStage responseData(QueryResponseData responseData);

        _FinalStage deviceId(Optional<String> deviceId);

        _FinalStage deviceId(String deviceId);

        _FinalStage pendingFeeAmount(Optional<Double> pendingFeeAmount);

        _FinalStage pendingFeeAmount(Double pendingFeeAmount);

        _FinalStage splitFundingInstructions(Optional<List<SplitFundingContent>> splitFundingInstructions);

        _FinalStage splitFundingInstructions(List<SplitFundingContent> splitFundingInstructions);

        _FinalStage cfeeTransactions(List<QueryCFeeTransaction> cfeeTransactions);

        _FinalStage addCfeeTransactions(QueryCFeeTransaction cfeeTransactions);

        _FinalStage addAllCfeeTransactions(List<QueryCFeeTransaction> cfeeTransactions);

        _FinalStage invoiceData(Optional<BillData> invoiceData);

        _FinalStage invoiceData(BillData invoiceData);

        _FinalStage transactionEvents(List<QueryTransactionEvents> transactionEvents);

        _FinalStage addTransactionEvents(QueryTransactionEvents transactionEvents);

        _FinalStage addAllTransactionEvents(List<QueryTransactionEvents> transactionEvents);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    MethodStage,
                    SettledAmountStage,
                    TypeStage,
                    BatchNumberStage,
                    BatchAmountStage,
                    PaymentTransIdStage,
                    PaymentTransStatusStage,
                    ScheduleReferenceStage,
                    GatewayTransIdStage,
                    OrderIdStage,
                    TransMethodStage,
                    OperationStage,
                    CategoryStage,
                    StatusStage,
                    TransactionTimeStage,
                    SettlementDateStage,
                    PaymentSettlementStatusStage,
                    BatchStatusStage,
                    DepositDateStage,
                    ExpectedDepositDateStage,
                    MaskedAccountStage,
                    CreatedAtStage,
                    PaypointLegalnameStage,
                    PaypointDbanameStage,
                    ParentOrgNameStage,
                    ParentOrgIdStage,
                    PaypointEntrynameStage,
                    RetrievalIdStage,
                    ChargebackIdStage,
                    AchHolderTypeStage,
                    AchSecCodeStage,
                    ConnectorNameStage,
                    EntrypageIdStage,
                    FeeAmountStage,
                    OrgIdStage,
                    PayorIdStage,
                    PaypointIdStage,
                    RefundIdStage,
                    ReturnedIdStage,
                    TotalAmountStage,
                    ExternalPaypointIdStage,
                    IsHoldStage,
                    _FinalStage {
        private int id;

        private String method;

        private double settledAmount;

        private String type;

        private String batchNumber;

        private double batchAmount;

        private String paymentTransId;

        private int paymentTransStatus;

        private int scheduleReference;

        private String gatewayTransId;

        private String orderId;

        private String transMethod;

        private String operation;

        private String category;

        private int status;

        private OffsetDateTime transactionTime;

        private OffsetDateTime settlementDate;

        private int paymentSettlementStatus;

        private int batchStatus;

        private OffsetDateTime depositDate;

        private OffsetDateTime expectedDepositDate;

        private String maskedAccount;

        private OffsetDateTime createdAt;

        private String paypointLegalname;

        private String paypointDbaname;

        private String parentOrgName;

        private int parentOrgId;

        private String paypointEntryname;

        private long retrievalId;

        private long chargebackId;

        private AchHolderType achHolderType;

        private String achSecCode;

        private String connectorName;

        private long entrypageId;

        private double feeAmount;

        private long orgId;

        private long payorId;

        private long paypointId;

        private long refundId;

        private long returnedId;

        private double totalAmount;

        private String externalPaypointId;

        private int isHold;

        private List<QueryTransactionEvents> transactionEvents = new ArrayList<>();

        private Optional<BillData> invoiceData = Optional.empty();

        private List<QueryCFeeTransaction> cfeeTransactions = new ArrayList<>();

        private Optional<List<SplitFundingContent>> splitFundingInstructions = Optional.empty();

        private Optional<Double> pendingFeeAmount = Optional.empty();

        private Optional<String> deviceId = Optional.empty();

        private Optional<QueryResponseData> responseData = Optional.empty();

        private Optional<QueryTransactionPayorData> customer = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<Double> netAmount = Optional.empty();

        private Optional<QueryPaymentData> paymentData = Optional.empty();

        private Optional<String> walletType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BatchDetailResponseRecord other) {
            id(other.getId());
            method(other.getMethod());
            walletType(other.getWalletType());
            settledAmount(other.getSettledAmount());
            type(other.getType());
            batchNumber(other.getBatchNumber());
            batchAmount(other.getBatchAmount());
            paymentTransId(other.getPaymentTransId());
            paymentTransStatus(other.getPaymentTransStatus());
            scheduleReference(other.getScheduleReference());
            gatewayTransId(other.getGatewayTransId());
            orderId(other.getOrderId());
            transMethod(other.getTransMethod());
            paymentData(other.getPaymentData());
            netAmount(other.getNetAmount());
            operation(other.getOperation());
            category(other.getCategory());
            source(other.getSource());
            status(other.getStatus());
            transactionTime(other.getTransactionTime());
            customer(other.getCustomer());
            settlementDate(other.getSettlementDate());
            paymentSettlementStatus(other.getPaymentSettlementStatus());
            batchStatus(other.getBatchStatus());
            depositDate(other.getDepositDate());
            expectedDepositDate(other.getExpectedDepositDate());
            maskedAccount(other.getMaskedAccount());
            createdAt(other.getCreatedAt());
            paypointLegalname(other.getPaypointLegalname());
            responseData(other.getResponseData());
            paypointDbaname(other.getPaypointDbaname());
            parentOrgName(other.getParentOrgName());
            parentOrgId(other.getParentOrgId());
            paypointEntryname(other.getPaypointEntryname());
            deviceId(other.getDeviceId());
            retrievalId(other.getRetrievalId());
            chargebackId(other.getChargebackId());
            achHolderType(other.getAchHolderType());
            achSecCode(other.getAchSecCode());
            connectorName(other.getConnectorName());
            entrypageId(other.getEntrypageId());
            feeAmount(other.getFeeAmount());
            orgId(other.getOrgId());
            payorId(other.getPayorId());
            paypointId(other.getPaypointId());
            pendingFeeAmount(other.getPendingFeeAmount());
            refundId(other.getRefundId());
            returnedId(other.getReturnedId());
            splitFundingInstructions(other.getSplitFundingInstructions());
            totalAmount(other.getTotalAmount());
            cfeeTransactions(other.getCfeeTransactions());
            invoiceData(other.getInvoiceData());
            transactionEvents(other.getTransactionEvents());
            externalPaypointId(other.getExternalPaypointId());
            isHold(other.getIsHold());
            return this;
        }

        @java.lang.Override
        @JsonSetter("Id")
        public MethodStage id(int id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        @JsonSetter("Method")
        public SettledAmountStage method(@NotNull String method) {
            this.method = Objects.requireNonNull(method, "method must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("SettledAmount")
        public TypeStage settledAmount(double settledAmount) {
            this.settledAmount = settledAmount;
            return this;
        }

        @java.lang.Override
        @JsonSetter("Type")
        public BatchNumberStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("BatchNumber")
        public BatchAmountStage batchNumber(@NotNull String batchNumber) {
            this.batchNumber = Objects.requireNonNull(batchNumber, "batchNumber must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("BatchAmount")
        public PaymentTransIdStage batchAmount(double batchAmount) {
            this.batchAmount = batchAmount;
            return this;
        }

        @java.lang.Override
        @JsonSetter("PaymentTransId")
        public PaymentTransStatusStage paymentTransId(@NotNull String paymentTransId) {
            this.paymentTransId = Objects.requireNonNull(paymentTransId, "paymentTransId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("PaymentTransStatus")
        public ScheduleReferenceStage paymentTransStatus(int paymentTransStatus) {
            this.paymentTransStatus = paymentTransStatus;
            return this;
        }

        @java.lang.Override
        @JsonSetter("ScheduleReference")
        public GatewayTransIdStage scheduleReference(int scheduleReference) {
            this.scheduleReference = scheduleReference;
            return this;
        }

        @java.lang.Override
        @JsonSetter("GatewayTransId")
        public OrderIdStage gatewayTransId(@NotNull String gatewayTransId) {
            this.gatewayTransId = Objects.requireNonNull(gatewayTransId, "gatewayTransId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("OrderId")
        public TransMethodStage orderId(@NotNull String orderId) {
            this.orderId = Objects.requireNonNull(orderId, "orderId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("TransMethod")
        public OperationStage transMethod(@NotNull String transMethod) {
            this.transMethod = Objects.requireNonNull(transMethod, "transMethod must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("Operation")
        public CategoryStage operation(@NotNull String operation) {
            this.operation = Objects.requireNonNull(operation, "operation must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("Category")
        public StatusStage category(@NotNull String category) {
            this.category = Objects.requireNonNull(category, "category must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("Status")
        public TransactionTimeStage status(int status) {
            this.status = status;
            return this;
        }

        @java.lang.Override
        @JsonSetter("TransactionTime")
        public SettlementDateStage transactionTime(@NotNull OffsetDateTime transactionTime) {
            this.transactionTime = Objects.requireNonNull(transactionTime, "transactionTime must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("SettlementDate")
        public PaymentSettlementStatusStage settlementDate(@NotNull OffsetDateTime settlementDate) {
            this.settlementDate = Objects.requireNonNull(settlementDate, "settlementDate must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("PaymentSettlementStatus")
        public BatchStatusStage paymentSettlementStatus(int paymentSettlementStatus) {
            this.paymentSettlementStatus = paymentSettlementStatus;
            return this;
        }

        @java.lang.Override
        @JsonSetter("BatchStatus")
        public DepositDateStage batchStatus(int batchStatus) {
            this.batchStatus = batchStatus;
            return this;
        }

        @java.lang.Override
        @JsonSetter("DepositDate")
        public ExpectedDepositDateStage depositDate(@NotNull OffsetDateTime depositDate) {
            this.depositDate = Objects.requireNonNull(depositDate, "depositDate must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("ExpectedDepositDate")
        public MaskedAccountStage expectedDepositDate(@NotNull OffsetDateTime expectedDepositDate) {
            this.expectedDepositDate =
                    Objects.requireNonNull(expectedDepositDate, "expectedDepositDate must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("MaskedAccount")
        public CreatedAtStage maskedAccount(@NotNull String maskedAccount) {
            this.maskedAccount = Objects.requireNonNull(maskedAccount, "maskedAccount must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("CreatedAt")
        public PaypointLegalnameStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("PaypointLegalname")
        public PaypointDbanameStage paypointLegalname(@NotNull String paypointLegalname) {
            this.paypointLegalname = Objects.requireNonNull(paypointLegalname, "paypointLegalname must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("PaypointDbaname")
        public ParentOrgNameStage paypointDbaname(@NotNull String paypointDbaname) {
            this.paypointDbaname = Objects.requireNonNull(paypointDbaname, "paypointDbaname must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("ParentOrgName")
        public ParentOrgIdStage parentOrgName(@NotNull String parentOrgName) {
            this.parentOrgName = Objects.requireNonNull(parentOrgName, "parentOrgName must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("ParentOrgId")
        public PaypointEntrynameStage parentOrgId(int parentOrgId) {
            this.parentOrgId = parentOrgId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("PaypointEntryname")
        public RetrievalIdStage paypointEntryname(@NotNull String paypointEntryname) {
            this.paypointEntryname = Objects.requireNonNull(paypointEntryname, "paypointEntryname must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("RetrievalId")
        public ChargebackIdStage retrievalId(long retrievalId) {
            this.retrievalId = retrievalId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("ChargebackId")
        public AchHolderTypeStage chargebackId(long chargebackId) {
            this.chargebackId = chargebackId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("AchHolderType")
        public AchSecCodeStage achHolderType(@NotNull AchHolderType achHolderType) {
            this.achHolderType = Objects.requireNonNull(achHolderType, "achHolderType must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("AchSecCode")
        public ConnectorNameStage achSecCode(@NotNull String achSecCode) {
            this.achSecCode = Objects.requireNonNull(achSecCode, "achSecCode must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("ConnectorName")
        public EntrypageIdStage connectorName(@NotNull String connectorName) {
            this.connectorName = Objects.requireNonNull(connectorName, "connectorName must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("EntrypageId")
        public FeeAmountStage entrypageId(long entrypageId) {
            this.entrypageId = entrypageId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("FeeAmount")
        public OrgIdStage feeAmount(double feeAmount) {
            this.feeAmount = feeAmount;
            return this;
        }

        @java.lang.Override
        @JsonSetter("OrgId")
        public PayorIdStage orgId(long orgId) {
            this.orgId = orgId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("PayorId")
        public PaypointIdStage payorId(long payorId) {
            this.payorId = payorId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("PaypointId")
        public RefundIdStage paypointId(long paypointId) {
            this.paypointId = paypointId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("RefundId")
        public ReturnedIdStage refundId(long refundId) {
            this.refundId = refundId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("ReturnedId")
        public TotalAmountStage returnedId(long returnedId) {
            this.returnedId = returnedId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("TotalAmount")
        public ExternalPaypointIdStage totalAmount(double totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        @java.lang.Override
        @JsonSetter("externalPaypointID")
        public IsHoldStage externalPaypointId(@NotNull String externalPaypointId) {
            this.externalPaypointId = Objects.requireNonNull(externalPaypointId, "externalPaypointId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("isHold")
        public _FinalStage isHold(int isHold) {
            this.isHold = isHold;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllTransactionEvents(List<QueryTransactionEvents> transactionEvents) {
            if (transactionEvents != null) {
                this.transactionEvents.addAll(transactionEvents);
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage addTransactionEvents(QueryTransactionEvents transactionEvents) {
            this.transactionEvents.add(transactionEvents);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "TransactionEvents", nulls = Nulls.SKIP)
        public _FinalStage transactionEvents(List<QueryTransactionEvents> transactionEvents) {
            this.transactionEvents.clear();
            this.transactionEvents.addAll(transactionEvents);
            return this;
        }

        @java.lang.Override
        public _FinalStage invoiceData(BillData invoiceData) {
            this.invoiceData = Optional.ofNullable(invoiceData);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "invoiceData", nulls = Nulls.SKIP)
        public _FinalStage invoiceData(Optional<BillData> invoiceData) {
            this.invoiceData = invoiceData;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllCfeeTransactions(List<QueryCFeeTransaction> cfeeTransactions) {
            if (cfeeTransactions != null) {
                this.cfeeTransactions.addAll(cfeeTransactions);
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage addCfeeTransactions(QueryCFeeTransaction cfeeTransactions) {
            this.cfeeTransactions.add(cfeeTransactions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "CfeeTransactions", nulls = Nulls.SKIP)
        public _FinalStage cfeeTransactions(List<QueryCFeeTransaction> cfeeTransactions) {
            this.cfeeTransactions.clear();
            this.cfeeTransactions.addAll(cfeeTransactions);
            return this;
        }

        @java.lang.Override
        public _FinalStage splitFundingInstructions(List<SplitFundingContent> splitFundingInstructions) {
            this.splitFundingInstructions = Optional.ofNullable(splitFundingInstructions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "splitFundingInstructions", nulls = Nulls.SKIP)
        public _FinalStage splitFundingInstructions(Optional<List<SplitFundingContent>> splitFundingInstructions) {
            this.splitFundingInstructions = splitFundingInstructions;
            return this;
        }

        @java.lang.Override
        public _FinalStage pendingFeeAmount(Double pendingFeeAmount) {
            this.pendingFeeAmount = Optional.ofNullable(pendingFeeAmount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "PendingFeeAmount", nulls = Nulls.SKIP)
        public _FinalStage pendingFeeAmount(Optional<Double> pendingFeeAmount) {
            this.pendingFeeAmount = pendingFeeAmount;
            return this;
        }

        @java.lang.Override
        public _FinalStage deviceId(String deviceId) {
            this.deviceId = Optional.ofNullable(deviceId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "DeviceId", nulls = Nulls.SKIP)
        public _FinalStage deviceId(Optional<String> deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        @java.lang.Override
        public _FinalStage responseData(QueryResponseData responseData) {
            this.responseData = Optional.ofNullable(responseData);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ResponseData", nulls = Nulls.SKIP)
        public _FinalStage responseData(Optional<QueryResponseData> responseData) {
            this.responseData = responseData;
            return this;
        }

        @java.lang.Override
        public _FinalStage customer(QueryTransactionPayorData customer) {
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "Customer", nulls = Nulls.SKIP)
        public _FinalStage customer(Optional<QueryTransactionPayorData> customer) {
            this.customer = customer;
            return this;
        }

        @java.lang.Override
        public _FinalStage source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "Source", nulls = Nulls.SKIP)
        public _FinalStage source(Optional<String> source) {
            this.source = source;
            return this;
        }

        @java.lang.Override
        public _FinalStage netAmount(Double netAmount) {
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "NetAmount", nulls = Nulls.SKIP)
        public _FinalStage netAmount(Optional<Double> netAmount) {
            this.netAmount = netAmount;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentData(Nullable<QueryPaymentData> paymentData) {
            if (paymentData.isNull()) {
                this.paymentData = null;
            } else if (paymentData.isEmpty()) {
                this.paymentData = Optional.empty();
            } else {
                this.paymentData = Optional.of(paymentData.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentData(QueryPaymentData paymentData) {
            this.paymentData = Optional.ofNullable(paymentData);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "PaymentData", nulls = Nulls.SKIP)
        public _FinalStage paymentData(Optional<QueryPaymentData> paymentData) {
            this.paymentData = paymentData;
            return this;
        }

        @java.lang.Override
        public _FinalStage walletType(String walletType) {
            this.walletType = Optional.ofNullable(walletType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "WalletType", nulls = Nulls.SKIP)
        public _FinalStage walletType(Optional<String> walletType) {
            this.walletType = walletType;
            return this;
        }

        @java.lang.Override
        public BatchDetailResponseRecord build() {
            return new BatchDetailResponseRecord(
                    id,
                    method,
                    walletType,
                    settledAmount,
                    type,
                    batchNumber,
                    batchAmount,
                    paymentTransId,
                    paymentTransStatus,
                    scheduleReference,
                    gatewayTransId,
                    orderId,
                    transMethod,
                    paymentData,
                    netAmount,
                    operation,
                    category,
                    source,
                    status,
                    transactionTime,
                    customer,
                    settlementDate,
                    paymentSettlementStatus,
                    batchStatus,
                    depositDate,
                    expectedDepositDate,
                    maskedAccount,
                    createdAt,
                    paypointLegalname,
                    responseData,
                    paypointDbaname,
                    parentOrgName,
                    parentOrgId,
                    paypointEntryname,
                    deviceId,
                    retrievalId,
                    chargebackId,
                    achHolderType,
                    achSecCode,
                    connectorName,
                    entrypageId,
                    feeAmount,
                    orgId,
                    payorId,
                    paypointId,
                    pendingFeeAmount,
                    refundId,
                    returnedId,
                    splitFundingInstructions,
                    totalAmount,
                    cfeeTransactions,
                    invoiceData,
                    transactionEvents,
                    externalPaypointId,
                    isHold,
                    additionalProperties);
        }
    }
}
