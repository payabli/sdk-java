/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.querytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.Nullable;
import com.payabli.api.core.NullableNonemptyFilter;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryBatchesTransfer.Builder.class)
public final class QueryBatchesTransfer {
    private final Optional<Integer> transferId;

    private final Optional<OffsetDateTime> transferDate;

    private final Optional<String> processor;

    private final Optional<Integer> transferStatus;

    private final Optional<Double> grossAmount;

    private final Optional<Double> chargeBackAmount;

    private final Optional<Double> returnedAmount;

    private final Optional<Double> refundAmount;

    private final Optional<Double> holdAmount;

    private final Optional<Double> releasedAmount;

    private final Optional<Double> billingFeesAmount;

    private final Optional<Double> thirdPartyPaidAmount;

    private final Optional<Double> adjustmentsAmount;

    private final Optional<Double> netFundedAmount;

    private final Map<String, Object> additionalProperties;

    private QueryBatchesTransfer(
            Optional<Integer> transferId,
            Optional<OffsetDateTime> transferDate,
            Optional<String> processor,
            Optional<Integer> transferStatus,
            Optional<Double> grossAmount,
            Optional<Double> chargeBackAmount,
            Optional<Double> returnedAmount,
            Optional<Double> refundAmount,
            Optional<Double> holdAmount,
            Optional<Double> releasedAmount,
            Optional<Double> billingFeesAmount,
            Optional<Double> thirdPartyPaidAmount,
            Optional<Double> adjustmentsAmount,
            Optional<Double> netFundedAmount,
            Map<String, Object> additionalProperties) {
        this.transferId = transferId;
        this.transferDate = transferDate;
        this.processor = processor;
        this.transferStatus = transferStatus;
        this.grossAmount = grossAmount;
        this.chargeBackAmount = chargeBackAmount;
        this.returnedAmount = returnedAmount;
        this.refundAmount = refundAmount;
        this.holdAmount = holdAmount;
        this.releasedAmount = releasedAmount;
        this.billingFeesAmount = billingFeesAmount;
        this.thirdPartyPaidAmount = thirdPartyPaidAmount;
        this.adjustmentsAmount = adjustmentsAmount;
        this.netFundedAmount = netFundedAmount;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The transfer ID.
     */
    @JsonIgnore
    public Optional<Integer> getTransferId() {
        if (transferId == null) {
            return Optional.empty();
        }
        return transferId;
    }

    /**
     * @return The transfer date.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> getTransferDate() {
        if (transferDate == null) {
            return Optional.empty();
        }
        return transferDate;
    }

    /**
     * @return The processor used for the transfer.
     */
    @JsonIgnore
    public Optional<String> getProcessor() {
        if (processor == null) {
            return Optional.empty();
        }
        return processor;
    }

    /**
     * @return The transfer status.
     */
    @JsonIgnore
    public Optional<Integer> getTransferStatus() {
        if (transferStatus == null) {
            return Optional.empty();
        }
        return transferStatus;
    }

    /**
     * @return The gross amount of the transfer.
     */
    @JsonIgnore
    public Optional<Double> getGrossAmount() {
        if (grossAmount == null) {
            return Optional.empty();
        }
        return grossAmount;
    }

    /**
     * @return The chargeback amount.
     */
    @JsonIgnore
    public Optional<Double> getChargeBackAmount() {
        if (chargeBackAmount == null) {
            return Optional.empty();
        }
        return chargeBackAmount;
    }

    /**
     * @return The returned amount.
     */
    @JsonIgnore
    public Optional<Double> getReturnedAmount() {
        if (returnedAmount == null) {
            return Optional.empty();
        }
        return returnedAmount;
    }

    /**
     * @return The refund amount.
     */
    @JsonIgnore
    public Optional<Double> getRefundAmount() {
        if (refundAmount == null) {
            return Optional.empty();
        }
        return refundAmount;
    }

    /**
     * @return The amount being held.
     */
    @JsonIgnore
    public Optional<Double> getHoldAmount() {
        if (holdAmount == null) {
            return Optional.empty();
        }
        return holdAmount;
    }

    /**
     * @return The amount that has been released.
     */
    @JsonIgnore
    public Optional<Double> getReleasedAmount() {
        if (releasedAmount == null) {
            return Optional.empty();
        }
        return releasedAmount;
    }

    /**
     * @return The billing fees amount.
     */
    @JsonIgnore
    public Optional<Double> getBillingFeesAmount() {
        if (billingFeesAmount == null) {
            return Optional.empty();
        }
        return billingFeesAmount;
    }

    /**
     * @return The third party paid amount.
     */
    @JsonIgnore
    public Optional<Double> getThirdPartyPaidAmount() {
        if (thirdPartyPaidAmount == null) {
            return Optional.empty();
        }
        return thirdPartyPaidAmount;
    }

    /**
     * @return The adjustments amount.
     */
    @JsonIgnore
    public Optional<Double> getAdjustmentsAmount() {
        if (adjustmentsAmount == null) {
            return Optional.empty();
        }
        return adjustmentsAmount;
    }

    /**
     * @return The net funded amount.
     */
    @JsonIgnore
    public Optional<Double> getNetFundedAmount() {
        if (netFundedAmount == null) {
            return Optional.empty();
        }
        return netFundedAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("TransferId")
    private Optional<Integer> _getTransferId() {
        return transferId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("TransferDate")
    private Optional<OffsetDateTime> _getTransferDate() {
        return transferDate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("Processor")
    private Optional<String> _getProcessor() {
        return processor;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("TransferStatus")
    private Optional<Integer> _getTransferStatus() {
        return transferStatus;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("GrossAmount")
    private Optional<Double> _getGrossAmount() {
        return grossAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ChargeBackAmount")
    private Optional<Double> _getChargeBackAmount() {
        return chargeBackAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ReturnedAmount")
    private Optional<Double> _getReturnedAmount() {
        return returnedAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("RefundAmount")
    private Optional<Double> _getRefundAmount() {
        return refundAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("HoldAmount")
    private Optional<Double> _getHoldAmount() {
        return holdAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ReleasedAmount")
    private Optional<Double> _getReleasedAmount() {
        return releasedAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BillingFeesAmount")
    private Optional<Double> _getBillingFeesAmount() {
        return billingFeesAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ThirdPartyPaidAmount")
    private Optional<Double> _getThirdPartyPaidAmount() {
        return thirdPartyPaidAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("AdjustmentsAmount")
    private Optional<Double> _getAdjustmentsAmount() {
        return adjustmentsAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("NetFundedAmount")
    private Optional<Double> _getNetFundedAmount() {
        return netFundedAmount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryBatchesTransfer && equalTo((QueryBatchesTransfer) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryBatchesTransfer other) {
        return transferId.equals(other.transferId)
                && transferDate.equals(other.transferDate)
                && processor.equals(other.processor)
                && transferStatus.equals(other.transferStatus)
                && grossAmount.equals(other.grossAmount)
                && chargeBackAmount.equals(other.chargeBackAmount)
                && returnedAmount.equals(other.returnedAmount)
                && refundAmount.equals(other.refundAmount)
                && holdAmount.equals(other.holdAmount)
                && releasedAmount.equals(other.releasedAmount)
                && billingFeesAmount.equals(other.billingFeesAmount)
                && thirdPartyPaidAmount.equals(other.thirdPartyPaidAmount)
                && adjustmentsAmount.equals(other.adjustmentsAmount)
                && netFundedAmount.equals(other.netFundedAmount);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.transferId,
                this.transferDate,
                this.processor,
                this.transferStatus,
                this.grossAmount,
                this.chargeBackAmount,
                this.returnedAmount,
                this.refundAmount,
                this.holdAmount,
                this.releasedAmount,
                this.billingFeesAmount,
                this.thirdPartyPaidAmount,
                this.adjustmentsAmount,
                this.netFundedAmount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> transferId = Optional.empty();

        private Optional<OffsetDateTime> transferDate = Optional.empty();

        private Optional<String> processor = Optional.empty();

        private Optional<Integer> transferStatus = Optional.empty();

        private Optional<Double> grossAmount = Optional.empty();

        private Optional<Double> chargeBackAmount = Optional.empty();

        private Optional<Double> returnedAmount = Optional.empty();

        private Optional<Double> refundAmount = Optional.empty();

        private Optional<Double> holdAmount = Optional.empty();

        private Optional<Double> releasedAmount = Optional.empty();

        private Optional<Double> billingFeesAmount = Optional.empty();

        private Optional<Double> thirdPartyPaidAmount = Optional.empty();

        private Optional<Double> adjustmentsAmount = Optional.empty();

        private Optional<Double> netFundedAmount = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryBatchesTransfer other) {
            transferId(other.getTransferId());
            transferDate(other.getTransferDate());
            processor(other.getProcessor());
            transferStatus(other.getTransferStatus());
            grossAmount(other.getGrossAmount());
            chargeBackAmount(other.getChargeBackAmount());
            returnedAmount(other.getReturnedAmount());
            refundAmount(other.getRefundAmount());
            holdAmount(other.getHoldAmount());
            releasedAmount(other.getReleasedAmount());
            billingFeesAmount(other.getBillingFeesAmount());
            thirdPartyPaidAmount(other.getThirdPartyPaidAmount());
            adjustmentsAmount(other.getAdjustmentsAmount());
            netFundedAmount(other.getNetFundedAmount());
            return this;
        }

        /**
         * <p>The transfer ID.</p>
         */
        @JsonSetter(value = "TransferId", nulls = Nulls.SKIP)
        public Builder transferId(Optional<Integer> transferId) {
            this.transferId = transferId;
            return this;
        }

        public Builder transferId(Integer transferId) {
            this.transferId = Optional.ofNullable(transferId);
            return this;
        }

        public Builder transferId(Nullable<Integer> transferId) {
            if (transferId.isNull()) {
                this.transferId = null;
            } else if (transferId.isEmpty()) {
                this.transferId = Optional.empty();
            } else {
                this.transferId = Optional.of(transferId.get());
            }
            return this;
        }

        /**
         * <p>The transfer date.</p>
         */
        @JsonSetter(value = "TransferDate", nulls = Nulls.SKIP)
        public Builder transferDate(Optional<OffsetDateTime> transferDate) {
            this.transferDate = transferDate;
            return this;
        }

        public Builder transferDate(OffsetDateTime transferDate) {
            this.transferDate = Optional.ofNullable(transferDate);
            return this;
        }

        public Builder transferDate(Nullable<OffsetDateTime> transferDate) {
            if (transferDate.isNull()) {
                this.transferDate = null;
            } else if (transferDate.isEmpty()) {
                this.transferDate = Optional.empty();
            } else {
                this.transferDate = Optional.of(transferDate.get());
            }
            return this;
        }

        /**
         * <p>The processor used for the transfer.</p>
         */
        @JsonSetter(value = "Processor", nulls = Nulls.SKIP)
        public Builder processor(Optional<String> processor) {
            this.processor = processor;
            return this;
        }

        public Builder processor(String processor) {
            this.processor = Optional.ofNullable(processor);
            return this;
        }

        public Builder processor(Nullable<String> processor) {
            if (processor.isNull()) {
                this.processor = null;
            } else if (processor.isEmpty()) {
                this.processor = Optional.empty();
            } else {
                this.processor = Optional.of(processor.get());
            }
            return this;
        }

        /**
         * <p>The transfer status.</p>
         */
        @JsonSetter(value = "TransferStatus", nulls = Nulls.SKIP)
        public Builder transferStatus(Optional<Integer> transferStatus) {
            this.transferStatus = transferStatus;
            return this;
        }

        public Builder transferStatus(Integer transferStatus) {
            this.transferStatus = Optional.ofNullable(transferStatus);
            return this;
        }

        public Builder transferStatus(Nullable<Integer> transferStatus) {
            if (transferStatus.isNull()) {
                this.transferStatus = null;
            } else if (transferStatus.isEmpty()) {
                this.transferStatus = Optional.empty();
            } else {
                this.transferStatus = Optional.of(transferStatus.get());
            }
            return this;
        }

        /**
         * <p>The gross amount of the transfer.</p>
         */
        @JsonSetter(value = "GrossAmount", nulls = Nulls.SKIP)
        public Builder grossAmount(Optional<Double> grossAmount) {
            this.grossAmount = grossAmount;
            return this;
        }

        public Builder grossAmount(Double grossAmount) {
            this.grossAmount = Optional.ofNullable(grossAmount);
            return this;
        }

        public Builder grossAmount(Nullable<Double> grossAmount) {
            if (grossAmount.isNull()) {
                this.grossAmount = null;
            } else if (grossAmount.isEmpty()) {
                this.grossAmount = Optional.empty();
            } else {
                this.grossAmount = Optional.of(grossAmount.get());
            }
            return this;
        }

        /**
         * <p>The chargeback amount.</p>
         */
        @JsonSetter(value = "ChargeBackAmount", nulls = Nulls.SKIP)
        public Builder chargeBackAmount(Optional<Double> chargeBackAmount) {
            this.chargeBackAmount = chargeBackAmount;
            return this;
        }

        public Builder chargeBackAmount(Double chargeBackAmount) {
            this.chargeBackAmount = Optional.ofNullable(chargeBackAmount);
            return this;
        }

        public Builder chargeBackAmount(Nullable<Double> chargeBackAmount) {
            if (chargeBackAmount.isNull()) {
                this.chargeBackAmount = null;
            } else if (chargeBackAmount.isEmpty()) {
                this.chargeBackAmount = Optional.empty();
            } else {
                this.chargeBackAmount = Optional.of(chargeBackAmount.get());
            }
            return this;
        }

        /**
         * <p>The returned amount.</p>
         */
        @JsonSetter(value = "ReturnedAmount", nulls = Nulls.SKIP)
        public Builder returnedAmount(Optional<Double> returnedAmount) {
            this.returnedAmount = returnedAmount;
            return this;
        }

        public Builder returnedAmount(Double returnedAmount) {
            this.returnedAmount = Optional.ofNullable(returnedAmount);
            return this;
        }

        public Builder returnedAmount(Nullable<Double> returnedAmount) {
            if (returnedAmount.isNull()) {
                this.returnedAmount = null;
            } else if (returnedAmount.isEmpty()) {
                this.returnedAmount = Optional.empty();
            } else {
                this.returnedAmount = Optional.of(returnedAmount.get());
            }
            return this;
        }

        /**
         * <p>The refund amount.</p>
         */
        @JsonSetter(value = "RefundAmount", nulls = Nulls.SKIP)
        public Builder refundAmount(Optional<Double> refundAmount) {
            this.refundAmount = refundAmount;
            return this;
        }

        public Builder refundAmount(Double refundAmount) {
            this.refundAmount = Optional.ofNullable(refundAmount);
            return this;
        }

        public Builder refundAmount(Nullable<Double> refundAmount) {
            if (refundAmount.isNull()) {
                this.refundAmount = null;
            } else if (refundAmount.isEmpty()) {
                this.refundAmount = Optional.empty();
            } else {
                this.refundAmount = Optional.of(refundAmount.get());
            }
            return this;
        }

        /**
         * <p>The amount being held.</p>
         */
        @JsonSetter(value = "HoldAmount", nulls = Nulls.SKIP)
        public Builder holdAmount(Optional<Double> holdAmount) {
            this.holdAmount = holdAmount;
            return this;
        }

        public Builder holdAmount(Double holdAmount) {
            this.holdAmount = Optional.ofNullable(holdAmount);
            return this;
        }

        public Builder holdAmount(Nullable<Double> holdAmount) {
            if (holdAmount.isNull()) {
                this.holdAmount = null;
            } else if (holdAmount.isEmpty()) {
                this.holdAmount = Optional.empty();
            } else {
                this.holdAmount = Optional.of(holdAmount.get());
            }
            return this;
        }

        /**
         * <p>The amount that has been released.</p>
         */
        @JsonSetter(value = "ReleasedAmount", nulls = Nulls.SKIP)
        public Builder releasedAmount(Optional<Double> releasedAmount) {
            this.releasedAmount = releasedAmount;
            return this;
        }

        public Builder releasedAmount(Double releasedAmount) {
            this.releasedAmount = Optional.ofNullable(releasedAmount);
            return this;
        }

        public Builder releasedAmount(Nullable<Double> releasedAmount) {
            if (releasedAmount.isNull()) {
                this.releasedAmount = null;
            } else if (releasedAmount.isEmpty()) {
                this.releasedAmount = Optional.empty();
            } else {
                this.releasedAmount = Optional.of(releasedAmount.get());
            }
            return this;
        }

        /**
         * <p>The billing fees amount.</p>
         */
        @JsonSetter(value = "BillingFeesAmount", nulls = Nulls.SKIP)
        public Builder billingFeesAmount(Optional<Double> billingFeesAmount) {
            this.billingFeesAmount = billingFeesAmount;
            return this;
        }

        public Builder billingFeesAmount(Double billingFeesAmount) {
            this.billingFeesAmount = Optional.ofNullable(billingFeesAmount);
            return this;
        }

        public Builder billingFeesAmount(Nullable<Double> billingFeesAmount) {
            if (billingFeesAmount.isNull()) {
                this.billingFeesAmount = null;
            } else if (billingFeesAmount.isEmpty()) {
                this.billingFeesAmount = Optional.empty();
            } else {
                this.billingFeesAmount = Optional.of(billingFeesAmount.get());
            }
            return this;
        }

        /**
         * <p>The third party paid amount.</p>
         */
        @JsonSetter(value = "ThirdPartyPaidAmount", nulls = Nulls.SKIP)
        public Builder thirdPartyPaidAmount(Optional<Double> thirdPartyPaidAmount) {
            this.thirdPartyPaidAmount = thirdPartyPaidAmount;
            return this;
        }

        public Builder thirdPartyPaidAmount(Double thirdPartyPaidAmount) {
            this.thirdPartyPaidAmount = Optional.ofNullable(thirdPartyPaidAmount);
            return this;
        }

        public Builder thirdPartyPaidAmount(Nullable<Double> thirdPartyPaidAmount) {
            if (thirdPartyPaidAmount.isNull()) {
                this.thirdPartyPaidAmount = null;
            } else if (thirdPartyPaidAmount.isEmpty()) {
                this.thirdPartyPaidAmount = Optional.empty();
            } else {
                this.thirdPartyPaidAmount = Optional.of(thirdPartyPaidAmount.get());
            }
            return this;
        }

        /**
         * <p>The adjustments amount.</p>
         */
        @JsonSetter(value = "AdjustmentsAmount", nulls = Nulls.SKIP)
        public Builder adjustmentsAmount(Optional<Double> adjustmentsAmount) {
            this.adjustmentsAmount = adjustmentsAmount;
            return this;
        }

        public Builder adjustmentsAmount(Double adjustmentsAmount) {
            this.adjustmentsAmount = Optional.ofNullable(adjustmentsAmount);
            return this;
        }

        public Builder adjustmentsAmount(Nullable<Double> adjustmentsAmount) {
            if (adjustmentsAmount.isNull()) {
                this.adjustmentsAmount = null;
            } else if (adjustmentsAmount.isEmpty()) {
                this.adjustmentsAmount = Optional.empty();
            } else {
                this.adjustmentsAmount = Optional.of(adjustmentsAmount.get());
            }
            return this;
        }

        /**
         * <p>The net funded amount.</p>
         */
        @JsonSetter(value = "NetFundedAmount", nulls = Nulls.SKIP)
        public Builder netFundedAmount(Optional<Double> netFundedAmount) {
            this.netFundedAmount = netFundedAmount;
            return this;
        }

        public Builder netFundedAmount(Double netFundedAmount) {
            this.netFundedAmount = Optional.ofNullable(netFundedAmount);
            return this;
        }

        public Builder netFundedAmount(Nullable<Double> netFundedAmount) {
            if (netFundedAmount.isNull()) {
                this.netFundedAmount = null;
            } else if (netFundedAmount.isEmpty()) {
                this.netFundedAmount = Optional.empty();
            } else {
                this.netFundedAmount = Optional.of(netFundedAmount.get());
            }
            return this;
        }

        public QueryBatchesTransfer build() {
            return new QueryBatchesTransfer(
                    transferId,
                    transferDate,
                    processor,
                    transferStatus,
                    grossAmount,
                    chargeBackAmount,
                    returnedAmount,
                    refundAmount,
                    holdAmount,
                    releasedAmount,
                    billingFeesAmount,
                    thirdPartyPaidAmount,
                    adjustmentsAmount,
                    netFundedAmount,
                    additionalProperties);
        }
    }
}
