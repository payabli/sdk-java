/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.ocr.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OcrBillItemAdditionalData.Builder.class)
public final class OcrBillItemAdditionalData {
    private final Optional<String> category;

    private final Optional<String> currencyCode;

    private final Optional<String> type;

    private final Optional<String> referenceNumber;

    private final Map<String, Object> additionalProperties;

    private OcrBillItemAdditionalData(
            Optional<String> category,
            Optional<String> currencyCode,
            Optional<String> type,
            Optional<String> referenceNumber,
            Map<String, Object> additionalProperties) {
        this.category = category;
        this.currencyCode = currencyCode;
        this.type = type;
        this.referenceNumber = referenceNumber;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("category")
    public Optional<String> getCategory() {
        return category;
    }

    @JsonProperty("currency_code")
    public Optional<String> getCurrencyCode() {
        return currencyCode;
    }

    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    @JsonProperty("reference_number")
    public Optional<String> getReferenceNumber() {
        return referenceNumber;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OcrBillItemAdditionalData && equalTo((OcrBillItemAdditionalData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OcrBillItemAdditionalData other) {
        return category.equals(other.category)
                && currencyCode.equals(other.currencyCode)
                && type.equals(other.type)
                && referenceNumber.equals(other.referenceNumber);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.category, this.currencyCode, this.type, this.referenceNumber);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> category = Optional.empty();

        private Optional<String> currencyCode = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<String> referenceNumber = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OcrBillItemAdditionalData other) {
            category(other.getCategory());
            currencyCode(other.getCurrencyCode());
            type(other.getType());
            referenceNumber(other.getReferenceNumber());
            return this;
        }

        @JsonSetter(value = "category", nulls = Nulls.SKIP)
        public Builder category(Optional<String> category) {
            this.category = category;
            return this;
        }

        public Builder category(String category) {
            this.category = Optional.ofNullable(category);
            return this;
        }

        @JsonSetter(value = "currency_code", nulls = Nulls.SKIP)
        public Builder currencyCode(Optional<String> currencyCode) {
            this.currencyCode = currencyCode;
            return this;
        }

        public Builder currencyCode(String currencyCode) {
            this.currencyCode = Optional.ofNullable(currencyCode);
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @JsonSetter(value = "reference_number", nulls = Nulls.SKIP)
        public Builder referenceNumber(Optional<String> referenceNumber) {
            this.referenceNumber = referenceNumber;
            return this;
        }

        public Builder referenceNumber(String referenceNumber) {
            this.referenceNumber = Optional.ofNullable(referenceNumber);
            return this;
        }

        public OcrBillItemAdditionalData build() {
            return new OcrBillItemAdditionalData(category, currencyCode, type, referenceNumber, additionalProperties);
        }
    }
}
