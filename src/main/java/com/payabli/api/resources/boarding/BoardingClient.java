/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.boarding;

import com.payabli.api.core.ClientOptions;
import com.payabli.api.core.RequestOptions;
import com.payabli.api.resources.boarding.requests.GetExternalApplicationRequest;
import com.payabli.api.resources.boarding.requests.ListApplicationsRequest;
import com.payabli.api.resources.boarding.requests.ListBoardingLinksRequest;
import com.payabli.api.resources.boarding.requests.RequestAppByAuth;
import com.payabli.api.resources.boarding.types.AddApplicationRequest;
import com.payabli.api.types.ApplicationData;
import com.payabli.api.types.ApplicationDetailsRecord;
import com.payabli.api.types.ApplicationQueryRecord;
import com.payabli.api.types.BoardingLinkQueryRecord;
import com.payabli.api.types.PayabliApiResponse00;
import com.payabli.api.types.PayabliApiResponse00Responsedatanonobject;
import com.payabli.api.types.QueryBoardingAppsListResponse;
import com.payabli.api.types.QueryBoardingLinksResponse;

public class BoardingClient {
    protected final ClientOptions clientOptions;

    private final RawBoardingClient rawClient;

    public BoardingClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawBoardingClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawBoardingClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Creates a boarding application in an organization. This endpoint requires an application API token.
     */
    public PayabliApiResponse00Responsedatanonobject addApplication(AddApplicationRequest request) {
        return this.rawClient.addApplication(request).body();
    }

    /**
     * Creates a boarding application in an organization. This endpoint requires an application API token.
     */
    public PayabliApiResponse00Responsedatanonobject addApplication(
            AddApplicationRequest request, RequestOptions requestOptions) {
        return this.rawClient.addApplication(request, requestOptions).body();
    }

    /**
     * Deletes a boarding application by ID.
     */
    public PayabliApiResponse00Responsedatanonobject deleteApplication(int appId) {
        return this.rawClient.deleteApplication(appId).body();
    }

    /**
     * Deletes a boarding application by ID.
     */
    public PayabliApiResponse00Responsedatanonobject deleteApplication(int appId, RequestOptions requestOptions) {
        return this.rawClient.deleteApplication(appId, requestOptions).body();
    }

    /**
     * Retrieves the details for a boarding application by ID.
     */
    public ApplicationDetailsRecord getApplication(int appId) {
        return this.rawClient.getApplication(appId).body();
    }

    /**
     * Retrieves the details for a boarding application by ID.
     */
    public ApplicationDetailsRecord getApplication(int appId, RequestOptions requestOptions) {
        return this.rawClient.getApplication(appId, requestOptions).body();
    }

    /**
     * Gets a boarding application by authentication information. This endpoint requires an <code>application</code> API token.
     */
    public ApplicationQueryRecord getApplicationByAuth(String xId) {
        return this.rawClient.getApplicationByAuth(xId).body();
    }

    /**
     * Gets a boarding application by authentication information. This endpoint requires an <code>application</code> API token.
     */
    public ApplicationQueryRecord getApplicationByAuth(String xId, RequestAppByAuth request) {
        return this.rawClient.getApplicationByAuth(xId, request).body();
    }

    /**
     * Gets a boarding application by authentication information. This endpoint requires an <code>application</code> API token.
     */
    public ApplicationQueryRecord getApplicationByAuth(
            String xId, RequestAppByAuth request, RequestOptions requestOptions) {
        return this.rawClient.getApplicationByAuth(xId, request, requestOptions).body();
    }

    /**
     * Retrieves details for a boarding link, by ID.
     */
    public BoardingLinkQueryRecord getByIdLinkApplication(int boardingLinkId) {
        return this.rawClient.getByIdLinkApplication(boardingLinkId).body();
    }

    /**
     * Retrieves details for a boarding link, by ID.
     */
    public BoardingLinkQueryRecord getByIdLinkApplication(int boardingLinkId, RequestOptions requestOptions) {
        return this.rawClient
                .getByIdLinkApplication(boardingLinkId, requestOptions)
                .body();
    }

    /**
     * Get details for a boarding link using the boarding template ID. This endpoint requires an application API token.
     */
    public BoardingLinkQueryRecord getByTemplateIdLinkApplication(double templateId) {
        return this.rawClient.getByTemplateIdLinkApplication(templateId).body();
    }

    /**
     * Get details for a boarding link using the boarding template ID. This endpoint requires an application API token.
     */
    public BoardingLinkQueryRecord getByTemplateIdLinkApplication(double templateId, RequestOptions requestOptions) {
        return this.rawClient
                .getByTemplateIdLinkApplication(templateId, requestOptions)
                .body();
    }

    /**
     * Retrieves a link and the verification code used to log into an existing boarding application. You can also use this endpoint to send a link and referenceId for an existing boarding application to an email address. The recipient can use the referenceId and email address to access and edit the application.
     */
    public PayabliApiResponse00 getExternalApplication(int appId, String mail2) {
        return this.rawClient.getExternalApplication(appId, mail2).body();
    }

    /**
     * Retrieves a link and the verification code used to log into an existing boarding application. You can also use this endpoint to send a link and referenceId for an existing boarding application to an email address. The recipient can use the referenceId and email address to access and edit the application.
     */
    public PayabliApiResponse00 getExternalApplication(int appId, String mail2, GetExternalApplicationRequest request) {
        return this.rawClient.getExternalApplication(appId, mail2, request).body();
    }

    /**
     * Retrieves a link and the verification code used to log into an existing boarding application. You can also use this endpoint to send a link and referenceId for an existing boarding application to an email address. The recipient can use the referenceId and email address to access and edit the application.
     */
    public PayabliApiResponse00 getExternalApplication(
            int appId, String mail2, GetExternalApplicationRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .getExternalApplication(appId, mail2, request, requestOptions)
                .body();
    }

    /**
     * Retrieves the details for a boarding link, by reference name. This endpoint requires an application API token.
     */
    public BoardingLinkQueryRecord getLinkApplication(String boardingLinkReference) {
        return this.rawClient.getLinkApplication(boardingLinkReference).body();
    }

    /**
     * Retrieves the details for a boarding link, by reference name. This endpoint requires an application API token.
     */
    public BoardingLinkQueryRecord getLinkApplication(String boardingLinkReference, RequestOptions requestOptions) {
        return this.rawClient
                .getLinkApplication(boardingLinkReference, requestOptions)
                .body();
    }

    /**
     * Returns a list of boarding applications for an organization. Use filters to limit results.
     */
    public QueryBoardingAppsListResponse listApplications(int orgId) {
        return this.rawClient.listApplications(orgId).body();
    }

    /**
     * Returns a list of boarding applications for an organization. Use filters to limit results.
     */
    public QueryBoardingAppsListResponse listApplications(int orgId, ListApplicationsRequest request) {
        return this.rawClient.listApplications(orgId, request).body();
    }

    /**
     * Returns a list of boarding applications for an organization. Use filters to limit results.
     */
    public QueryBoardingAppsListResponse listApplications(
            int orgId, ListApplicationsRequest request, RequestOptions requestOptions) {
        return this.rawClient.listApplications(orgId, request, requestOptions).body();
    }

    /**
     * Return a list of boarding links for an organization. Use filters to limit results.
     */
    public QueryBoardingLinksResponse listBoardingLinks(int orgId) {
        return this.rawClient.listBoardingLinks(orgId).body();
    }

    /**
     * Return a list of boarding links for an organization. Use filters to limit results.
     */
    public QueryBoardingLinksResponse listBoardingLinks(int orgId, ListBoardingLinksRequest request) {
        return this.rawClient.listBoardingLinks(orgId, request).body();
    }

    /**
     * Return a list of boarding links for an organization. Use filters to limit results.
     */
    public QueryBoardingLinksResponse listBoardingLinks(
            int orgId, ListBoardingLinksRequest request, RequestOptions requestOptions) {
        return this.rawClient.listBoardingLinks(orgId, request, requestOptions).body();
    }

    /**
     * Updates a boarding application by ID. This endpoint requires an application API token.
     */
    public PayabliApiResponse00Responsedatanonobject updateApplication(int appId) {
        return this.rawClient.updateApplication(appId).body();
    }

    /**
     * Updates a boarding application by ID. This endpoint requires an application API token.
     */
    public PayabliApiResponse00Responsedatanonobject updateApplication(int appId, ApplicationData request) {
        return this.rawClient.updateApplication(appId, request).body();
    }

    /**
     * Updates a boarding application by ID. This endpoint requires an application API token.
     */
    public PayabliApiResponse00Responsedatanonobject updateApplication(
            int appId, ApplicationData request, RequestOptions requestOptions) {
        return this.rawClient.updateApplication(appId, request, requestOptions).body();
    }
}
