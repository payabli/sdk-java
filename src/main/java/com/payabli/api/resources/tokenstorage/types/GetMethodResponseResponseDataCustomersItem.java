/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.tokenstorage.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import com.payabli.api.types.CustomerSummaryRecord;
import com.payabli.api.types.IPayorDataRequest;
import com.payabli.api.types.MethodQueryRecords;
import com.payabli.api.types.SubscriptionQueryRecords;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetMethodResponseResponseDataCustomersItem.Builder.class)
public final class GetMethodResponseResponseDataCustomersItem implements IPayorDataRequest {
    private final Optional<Map<String, Optional<Map<String, Object>>>> additionalData;

    private final Optional<String> billingAddress1;

    private final Optional<String> billingAddress2;

    private final Optional<String> billingCity;

    private final Optional<String> billingCountry;

    private final Optional<String> billingEmail;

    private final Optional<String> billingPhone;

    private final Optional<String> billingState;

    private final Optional<String> billingZip;

    private final Optional<String> company;

    private final Optional<Long> customerId;

    private final Optional<String> customerNumber;

    private final Optional<String> firstName;

    private final Optional<List<Optional<String>>> identifierFields;

    private final Optional<String> lastName;

    private final Optional<String> shippingAddress1;

    private final Optional<String> shippingAddress2;

    private final Optional<String> shippingCity;

    private final Optional<String> shippingCountry;

    private final Optional<String> shippingState;

    private final Optional<String> shippingZip;

    private final Optional<Float> balance;

    private final Optional<OffsetDateTime> created;

    private final Optional<Map<String, Object>> customerConsent;

    private final Optional<Integer> customerStatus;

    private final Optional<CustomerSummaryRecord> customerSummary;

    private final Optional<String> customerUsername;

    private final Optional<String> externalPaypointId;

    private final Optional<OffsetDateTime> lastUpdated;

    private final Optional<Boolean> mfa;

    private final Optional<Integer> mfaMode;

    private final Optional<String> pageindentifier;

    private final Optional<Integer> parentOrgId;

    private final Optional<String> parentOrgName;

    private final Optional<String> paypointDbaname;

    private final Optional<String> paypointEntryname;

    private final Optional<String> paypointLegalname;

    private final Optional<Map<String, Object>> snData;

    private final Optional<String> snIdentifier;

    private final Optional<String> snProvider;

    private final Optional<List<MethodQueryRecords>> storedMethods;

    private final Optional<List<SubscriptionQueryRecords>> subscriptions;

    private final Optional<Integer> timeZone;

    private final Map<String, Object> additionalProperties;

    private GetMethodResponseResponseDataCustomersItem(
            Optional<Map<String, Optional<Map<String, Object>>>> additionalData,
            Optional<String> billingAddress1,
            Optional<String> billingAddress2,
            Optional<String> billingCity,
            Optional<String> billingCountry,
            Optional<String> billingEmail,
            Optional<String> billingPhone,
            Optional<String> billingState,
            Optional<String> billingZip,
            Optional<String> company,
            Optional<Long> customerId,
            Optional<String> customerNumber,
            Optional<String> firstName,
            Optional<List<Optional<String>>> identifierFields,
            Optional<String> lastName,
            Optional<String> shippingAddress1,
            Optional<String> shippingAddress2,
            Optional<String> shippingCity,
            Optional<String> shippingCountry,
            Optional<String> shippingState,
            Optional<String> shippingZip,
            Optional<Float> balance,
            Optional<OffsetDateTime> created,
            Optional<Map<String, Object>> customerConsent,
            Optional<Integer> customerStatus,
            Optional<CustomerSummaryRecord> customerSummary,
            Optional<String> customerUsername,
            Optional<String> externalPaypointId,
            Optional<OffsetDateTime> lastUpdated,
            Optional<Boolean> mfa,
            Optional<Integer> mfaMode,
            Optional<String> pageindentifier,
            Optional<Integer> parentOrgId,
            Optional<String> parentOrgName,
            Optional<String> paypointDbaname,
            Optional<String> paypointEntryname,
            Optional<String> paypointLegalname,
            Optional<Map<String, Object>> snData,
            Optional<String> snIdentifier,
            Optional<String> snProvider,
            Optional<List<MethodQueryRecords>> storedMethods,
            Optional<List<SubscriptionQueryRecords>> subscriptions,
            Optional<Integer> timeZone,
            Map<String, Object> additionalProperties) {
        this.additionalData = additionalData;
        this.billingAddress1 = billingAddress1;
        this.billingAddress2 = billingAddress2;
        this.billingCity = billingCity;
        this.billingCountry = billingCountry;
        this.billingEmail = billingEmail;
        this.billingPhone = billingPhone;
        this.billingState = billingState;
        this.billingZip = billingZip;
        this.company = company;
        this.customerId = customerId;
        this.customerNumber = customerNumber;
        this.firstName = firstName;
        this.identifierFields = identifierFields;
        this.lastName = lastName;
        this.shippingAddress1 = shippingAddress1;
        this.shippingAddress2 = shippingAddress2;
        this.shippingCity = shippingCity;
        this.shippingCountry = shippingCountry;
        this.shippingState = shippingState;
        this.shippingZip = shippingZip;
        this.balance = balance;
        this.created = created;
        this.customerConsent = customerConsent;
        this.customerStatus = customerStatus;
        this.customerSummary = customerSummary;
        this.customerUsername = customerUsername;
        this.externalPaypointId = externalPaypointId;
        this.lastUpdated = lastUpdated;
        this.mfa = mfa;
        this.mfaMode = mfaMode;
        this.pageindentifier = pageindentifier;
        this.parentOrgId = parentOrgId;
        this.parentOrgName = parentOrgName;
        this.paypointDbaname = paypointDbaname;
        this.paypointEntryname = paypointEntryname;
        this.paypointLegalname = paypointLegalname;
        this.snData = snData;
        this.snIdentifier = snIdentifier;
        this.snProvider = snProvider;
        this.storedMethods = storedMethods;
        this.subscriptions = subscriptions;
        this.timeZone = timeZone;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("additionalData")
    @java.lang.Override
    public Optional<Map<String, Optional<Map<String, Object>>>> getAdditionalData() {
        return additionalData;
    }

    @JsonProperty("billingAddress1")
    @java.lang.Override
    public Optional<String> getBillingAddress1() {
        return billingAddress1;
    }

    @JsonProperty("billingAddress2")
    @java.lang.Override
    public Optional<String> getBillingAddress2() {
        return billingAddress2;
    }

    @JsonProperty("billingCity")
    @java.lang.Override
    public Optional<String> getBillingCity() {
        return billingCity;
    }

    @JsonProperty("billingCountry")
    @java.lang.Override
    public Optional<String> getBillingCountry() {
        return billingCountry;
    }

    @JsonProperty("billingEmail")
    @java.lang.Override
    public Optional<String> getBillingEmail() {
        return billingEmail;
    }

    @JsonProperty("billingPhone")
    @java.lang.Override
    public Optional<String> getBillingPhone() {
        return billingPhone;
    }

    @JsonProperty("billingState")
    @java.lang.Override
    public Optional<String> getBillingState() {
        return billingState;
    }

    /**
     * @return Customer's billing ZIP code. For Pay In functions, this field supports 5-digit and 9-digit ZIP codes and alphanumeric Canadian postal codes. For example: &quot;37615-1234&quot; or &quot;37615&quot;.
     */
    @JsonProperty("billingZip")
    @java.lang.Override
    public Optional<String> getBillingZip() {
        return billingZip;
    }

    /**
     * @return Customer's company name.
     */
    @JsonProperty("company")
    @java.lang.Override
    public Optional<String> getCompany() {
        return company;
    }

    @JsonProperty("customerId")
    @java.lang.Override
    public Optional<Long> getCustomerId() {
        return customerId;
    }

    @JsonProperty("customerNumber")
    @java.lang.Override
    public Optional<String> getCustomerNumber() {
        return customerNumber;
    }

    /**
     * @return Customer/Payor first name.
     */
    @JsonProperty("firstName")
    @java.lang.Override
    public Optional<String> getFirstName() {
        return firstName;
    }

    @JsonProperty("identifierFields")
    @java.lang.Override
    public Optional<List<Optional<String>>> getIdentifierFields() {
        return identifierFields;
    }

    /**
     * @return Customer/Payor last name.
     */
    @JsonProperty("lastName")
    @java.lang.Override
    public Optional<String> getLastName() {
        return lastName;
    }

    @JsonProperty("shippingAddress1")
    @java.lang.Override
    public Optional<String> getShippingAddress1() {
        return shippingAddress1;
    }

    @JsonProperty("shippingAddress2")
    @java.lang.Override
    public Optional<String> getShippingAddress2() {
        return shippingAddress2;
    }

    @JsonProperty("shippingCity")
    @java.lang.Override
    public Optional<String> getShippingCity() {
        return shippingCity;
    }

    @JsonProperty("shippingCountry")
    @java.lang.Override
    public Optional<String> getShippingCountry() {
        return shippingCountry;
    }

    @JsonProperty("shippingState")
    @java.lang.Override
    public Optional<String> getShippingState() {
        return shippingState;
    }

    @JsonProperty("shippingZip")
    @java.lang.Override
    public Optional<String> getShippingZip() {
        return shippingZip;
    }

    /**
     * @return Customer's current balance
     */
    @JsonProperty("balance")
    public Optional<Float> getBalance() {
        return balance;
    }

    /**
     * @return Creation timestamp
     */
    @JsonProperty("created")
    public Optional<OffsetDateTime> getCreated() {
        return created;
    }

    /**
     * @return Customer consent information
     */
    @JsonProperty("customerConsent")
    public Optional<Map<String, Object>> getCustomerConsent() {
        return customerConsent;
    }

    /**
     * @return Status code for the customer
     */
    @JsonProperty("customerStatus")
    public Optional<Integer> getCustomerStatus() {
        return customerStatus;
    }

    @JsonProperty("customerSummary")
    public Optional<CustomerSummaryRecord> getCustomerSummary() {
        return customerSummary;
    }

    /**
     * @return Username of the customer
     */
    @JsonProperty("customerUsername")
    public Optional<String> getCustomerUsername() {
        return customerUsername;
    }

    @JsonProperty("externalPaypointID")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    /**
     * @return Last update timestamp
     */
    @JsonProperty("lastUpdated")
    public Optional<OffsetDateTime> getLastUpdated() {
        return lastUpdated;
    }

    /**
     * @return Multi-factor authentication status
     */
    @JsonProperty("mfa")
    public Optional<Boolean> getMfa() {
        return mfa;
    }

    /**
     * @return MFA mode setting
     */
    @JsonProperty("mfaMode")
    public Optional<Integer> getMfaMode() {
        return mfaMode;
    }

    @JsonProperty("pageindentifier")
    public Optional<String> getPageindentifier() {
        return pageindentifier;
    }

    /**
     * @return Parent organization ID
     */
    @JsonProperty("parentOrgId")
    public Optional<Integer> getParentOrgId() {
        return parentOrgId;
    }

    @JsonProperty("parentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    @JsonProperty("paypointDbaname")
    public Optional<String> getPaypointDbaname() {
        return paypointDbaname;
    }

    /**
     * @return The paypoint entryname the customer is associated with
     */
    @JsonProperty("paypointEntryname")
    public Optional<String> getPaypointEntryname() {
        return paypointEntryname;
    }

    @JsonProperty("paypointLegalname")
    public Optional<String> getPaypointLegalname() {
        return paypointLegalname;
    }

    /**
     * @return Social network data
     */
    @JsonProperty("snData")
    public Optional<Map<String, Object>> getSnData() {
        return snData;
    }

    /**
     * @return Social network identifier
     */
    @JsonProperty("snIdentifier")
    public Optional<String> getSnIdentifier() {
        return snIdentifier;
    }

    /**
     * @return Social network provider
     */
    @JsonProperty("snProvider")
    public Optional<String> getSnProvider() {
        return snProvider;
    }

    /**
     * @return List of payment methods associated to the customer
     */
    @JsonProperty("storedMethods")
    public Optional<List<MethodQueryRecords>> getStoredMethods() {
        return storedMethods;
    }

    /**
     * @return List of subscriptions associated to the customer
     */
    @JsonProperty("subscriptions")
    public Optional<List<SubscriptionQueryRecords>> getSubscriptions() {
        return subscriptions;
    }

    /**
     * @return Customer's timezone
     */
    @JsonProperty("timeZone")
    public Optional<Integer> getTimeZone() {
        return timeZone;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetMethodResponseResponseDataCustomersItem
                && equalTo((GetMethodResponseResponseDataCustomersItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetMethodResponseResponseDataCustomersItem other) {
        return additionalData.equals(other.additionalData)
                && billingAddress1.equals(other.billingAddress1)
                && billingAddress2.equals(other.billingAddress2)
                && billingCity.equals(other.billingCity)
                && billingCountry.equals(other.billingCountry)
                && billingEmail.equals(other.billingEmail)
                && billingPhone.equals(other.billingPhone)
                && billingState.equals(other.billingState)
                && billingZip.equals(other.billingZip)
                && company.equals(other.company)
                && customerId.equals(other.customerId)
                && customerNumber.equals(other.customerNumber)
                && firstName.equals(other.firstName)
                && identifierFields.equals(other.identifierFields)
                && lastName.equals(other.lastName)
                && shippingAddress1.equals(other.shippingAddress1)
                && shippingAddress2.equals(other.shippingAddress2)
                && shippingCity.equals(other.shippingCity)
                && shippingCountry.equals(other.shippingCountry)
                && shippingState.equals(other.shippingState)
                && shippingZip.equals(other.shippingZip)
                && balance.equals(other.balance)
                && created.equals(other.created)
                && customerConsent.equals(other.customerConsent)
                && customerStatus.equals(other.customerStatus)
                && customerSummary.equals(other.customerSummary)
                && customerUsername.equals(other.customerUsername)
                && externalPaypointId.equals(other.externalPaypointId)
                && lastUpdated.equals(other.lastUpdated)
                && mfa.equals(other.mfa)
                && mfaMode.equals(other.mfaMode)
                && pageindentifier.equals(other.pageindentifier)
                && parentOrgId.equals(other.parentOrgId)
                && parentOrgName.equals(other.parentOrgName)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointEntryname.equals(other.paypointEntryname)
                && paypointLegalname.equals(other.paypointLegalname)
                && snData.equals(other.snData)
                && snIdentifier.equals(other.snIdentifier)
                && snProvider.equals(other.snProvider)
                && storedMethods.equals(other.storedMethods)
                && subscriptions.equals(other.subscriptions)
                && timeZone.equals(other.timeZone);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.additionalData,
                this.billingAddress1,
                this.billingAddress2,
                this.billingCity,
                this.billingCountry,
                this.billingEmail,
                this.billingPhone,
                this.billingState,
                this.billingZip,
                this.company,
                this.customerId,
                this.customerNumber,
                this.firstName,
                this.identifierFields,
                this.lastName,
                this.shippingAddress1,
                this.shippingAddress2,
                this.shippingCity,
                this.shippingCountry,
                this.shippingState,
                this.shippingZip,
                this.balance,
                this.created,
                this.customerConsent,
                this.customerStatus,
                this.customerSummary,
                this.customerUsername,
                this.externalPaypointId,
                this.lastUpdated,
                this.mfa,
                this.mfaMode,
                this.pageindentifier,
                this.parentOrgId,
                this.parentOrgName,
                this.paypointDbaname,
                this.paypointEntryname,
                this.paypointLegalname,
                this.snData,
                this.snIdentifier,
                this.snProvider,
                this.storedMethods,
                this.subscriptions,
                this.timeZone);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, Optional<Map<String, Object>>>> additionalData = Optional.empty();

        private Optional<String> billingAddress1 = Optional.empty();

        private Optional<String> billingAddress2 = Optional.empty();

        private Optional<String> billingCity = Optional.empty();

        private Optional<String> billingCountry = Optional.empty();

        private Optional<String> billingEmail = Optional.empty();

        private Optional<String> billingPhone = Optional.empty();

        private Optional<String> billingState = Optional.empty();

        private Optional<String> billingZip = Optional.empty();

        private Optional<String> company = Optional.empty();

        private Optional<Long> customerId = Optional.empty();

        private Optional<String> customerNumber = Optional.empty();

        private Optional<String> firstName = Optional.empty();

        private Optional<List<Optional<String>>> identifierFields = Optional.empty();

        private Optional<String> lastName = Optional.empty();

        private Optional<String> shippingAddress1 = Optional.empty();

        private Optional<String> shippingAddress2 = Optional.empty();

        private Optional<String> shippingCity = Optional.empty();

        private Optional<String> shippingCountry = Optional.empty();

        private Optional<String> shippingState = Optional.empty();

        private Optional<String> shippingZip = Optional.empty();

        private Optional<Float> balance = Optional.empty();

        private Optional<OffsetDateTime> created = Optional.empty();

        private Optional<Map<String, Object>> customerConsent = Optional.empty();

        private Optional<Integer> customerStatus = Optional.empty();

        private Optional<CustomerSummaryRecord> customerSummary = Optional.empty();

        private Optional<String> customerUsername = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<OffsetDateTime> lastUpdated = Optional.empty();

        private Optional<Boolean> mfa = Optional.empty();

        private Optional<Integer> mfaMode = Optional.empty();

        private Optional<String> pageindentifier = Optional.empty();

        private Optional<Integer> parentOrgId = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> paypointEntryname = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<Map<String, Object>> snData = Optional.empty();

        private Optional<String> snIdentifier = Optional.empty();

        private Optional<String> snProvider = Optional.empty();

        private Optional<List<MethodQueryRecords>> storedMethods = Optional.empty();

        private Optional<List<SubscriptionQueryRecords>> subscriptions = Optional.empty();

        private Optional<Integer> timeZone = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetMethodResponseResponseDataCustomersItem other) {
            additionalData(other.getAdditionalData());
            billingAddress1(other.getBillingAddress1());
            billingAddress2(other.getBillingAddress2());
            billingCity(other.getBillingCity());
            billingCountry(other.getBillingCountry());
            billingEmail(other.getBillingEmail());
            billingPhone(other.getBillingPhone());
            billingState(other.getBillingState());
            billingZip(other.getBillingZip());
            company(other.getCompany());
            customerId(other.getCustomerId());
            customerNumber(other.getCustomerNumber());
            firstName(other.getFirstName());
            identifierFields(other.getIdentifierFields());
            lastName(other.getLastName());
            shippingAddress1(other.getShippingAddress1());
            shippingAddress2(other.getShippingAddress2());
            shippingCity(other.getShippingCity());
            shippingCountry(other.getShippingCountry());
            shippingState(other.getShippingState());
            shippingZip(other.getShippingZip());
            balance(other.getBalance());
            created(other.getCreated());
            customerConsent(other.getCustomerConsent());
            customerStatus(other.getCustomerStatus());
            customerSummary(other.getCustomerSummary());
            customerUsername(other.getCustomerUsername());
            externalPaypointId(other.getExternalPaypointId());
            lastUpdated(other.getLastUpdated());
            mfa(other.getMfa());
            mfaMode(other.getMfaMode());
            pageindentifier(other.getPageindentifier());
            parentOrgId(other.getParentOrgId());
            parentOrgName(other.getParentOrgName());
            paypointDbaname(other.getPaypointDbaname());
            paypointEntryname(other.getPaypointEntryname());
            paypointLegalname(other.getPaypointLegalname());
            snData(other.getSnData());
            snIdentifier(other.getSnIdentifier());
            snProvider(other.getSnProvider());
            storedMethods(other.getStoredMethods());
            subscriptions(other.getSubscriptions());
            timeZone(other.getTimeZone());
            return this;
        }

        @JsonSetter(value = "additionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<Map<String, Optional<Map<String, Object>>>> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(Map<String, Optional<Map<String, Object>>> additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        @JsonSetter(value = "billingAddress1", nulls = Nulls.SKIP)
        public Builder billingAddress1(Optional<String> billingAddress1) {
            this.billingAddress1 = billingAddress1;
            return this;
        }

        public Builder billingAddress1(String billingAddress1) {
            this.billingAddress1 = Optional.ofNullable(billingAddress1);
            return this;
        }

        @JsonSetter(value = "billingAddress2", nulls = Nulls.SKIP)
        public Builder billingAddress2(Optional<String> billingAddress2) {
            this.billingAddress2 = billingAddress2;
            return this;
        }

        public Builder billingAddress2(String billingAddress2) {
            this.billingAddress2 = Optional.ofNullable(billingAddress2);
            return this;
        }

        @JsonSetter(value = "billingCity", nulls = Nulls.SKIP)
        public Builder billingCity(Optional<String> billingCity) {
            this.billingCity = billingCity;
            return this;
        }

        public Builder billingCity(String billingCity) {
            this.billingCity = Optional.ofNullable(billingCity);
            return this;
        }

        @JsonSetter(value = "billingCountry", nulls = Nulls.SKIP)
        public Builder billingCountry(Optional<String> billingCountry) {
            this.billingCountry = billingCountry;
            return this;
        }

        public Builder billingCountry(String billingCountry) {
            this.billingCountry = Optional.ofNullable(billingCountry);
            return this;
        }

        @JsonSetter(value = "billingEmail", nulls = Nulls.SKIP)
        public Builder billingEmail(Optional<String> billingEmail) {
            this.billingEmail = billingEmail;
            return this;
        }

        public Builder billingEmail(String billingEmail) {
            this.billingEmail = Optional.ofNullable(billingEmail);
            return this;
        }

        @JsonSetter(value = "billingPhone", nulls = Nulls.SKIP)
        public Builder billingPhone(Optional<String> billingPhone) {
            this.billingPhone = billingPhone;
            return this;
        }

        public Builder billingPhone(String billingPhone) {
            this.billingPhone = Optional.ofNullable(billingPhone);
            return this;
        }

        @JsonSetter(value = "billingState", nulls = Nulls.SKIP)
        public Builder billingState(Optional<String> billingState) {
            this.billingState = billingState;
            return this;
        }

        public Builder billingState(String billingState) {
            this.billingState = Optional.ofNullable(billingState);
            return this;
        }

        /**
         * <p>Customer's billing ZIP code. For Pay In functions, this field supports 5-digit and 9-digit ZIP codes and alphanumeric Canadian postal codes. For example: &quot;37615-1234&quot; or &quot;37615&quot;.</p>
         */
        @JsonSetter(value = "billingZip", nulls = Nulls.SKIP)
        public Builder billingZip(Optional<String> billingZip) {
            this.billingZip = billingZip;
            return this;
        }

        public Builder billingZip(String billingZip) {
            this.billingZip = Optional.ofNullable(billingZip);
            return this;
        }

        /**
         * <p>Customer's company name.</p>
         */
        @JsonSetter(value = "company", nulls = Nulls.SKIP)
        public Builder company(Optional<String> company) {
            this.company = company;
            return this;
        }

        public Builder company(String company) {
            this.company = Optional.ofNullable(company);
            return this;
        }

        @JsonSetter(value = "customerId", nulls = Nulls.SKIP)
        public Builder customerId(Optional<Long> customerId) {
            this.customerId = customerId;
            return this;
        }

        public Builder customerId(Long customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        @JsonSetter(value = "customerNumber", nulls = Nulls.SKIP)
        public Builder customerNumber(Optional<String> customerNumber) {
            this.customerNumber = customerNumber;
            return this;
        }

        public Builder customerNumber(String customerNumber) {
            this.customerNumber = Optional.ofNullable(customerNumber);
            return this;
        }

        /**
         * <p>Customer/Payor first name.</p>
         */
        @JsonSetter(value = "firstName", nulls = Nulls.SKIP)
        public Builder firstName(Optional<String> firstName) {
            this.firstName = firstName;
            return this;
        }

        public Builder firstName(String firstName) {
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        @JsonSetter(value = "identifierFields", nulls = Nulls.SKIP)
        public Builder identifierFields(Optional<List<Optional<String>>> identifierFields) {
            this.identifierFields = identifierFields;
            return this;
        }

        public Builder identifierFields(List<Optional<String>> identifierFields) {
            this.identifierFields = Optional.ofNullable(identifierFields);
            return this;
        }

        /**
         * <p>Customer/Payor last name.</p>
         */
        @JsonSetter(value = "lastName", nulls = Nulls.SKIP)
        public Builder lastName(Optional<String> lastName) {
            this.lastName = lastName;
            return this;
        }

        public Builder lastName(String lastName) {
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        @JsonSetter(value = "shippingAddress1", nulls = Nulls.SKIP)
        public Builder shippingAddress1(Optional<String> shippingAddress1) {
            this.shippingAddress1 = shippingAddress1;
            return this;
        }

        public Builder shippingAddress1(String shippingAddress1) {
            this.shippingAddress1 = Optional.ofNullable(shippingAddress1);
            return this;
        }

        @JsonSetter(value = "shippingAddress2", nulls = Nulls.SKIP)
        public Builder shippingAddress2(Optional<String> shippingAddress2) {
            this.shippingAddress2 = shippingAddress2;
            return this;
        }

        public Builder shippingAddress2(String shippingAddress2) {
            this.shippingAddress2 = Optional.ofNullable(shippingAddress2);
            return this;
        }

        @JsonSetter(value = "shippingCity", nulls = Nulls.SKIP)
        public Builder shippingCity(Optional<String> shippingCity) {
            this.shippingCity = shippingCity;
            return this;
        }

        public Builder shippingCity(String shippingCity) {
            this.shippingCity = Optional.ofNullable(shippingCity);
            return this;
        }

        @JsonSetter(value = "shippingCountry", nulls = Nulls.SKIP)
        public Builder shippingCountry(Optional<String> shippingCountry) {
            this.shippingCountry = shippingCountry;
            return this;
        }

        public Builder shippingCountry(String shippingCountry) {
            this.shippingCountry = Optional.ofNullable(shippingCountry);
            return this;
        }

        @JsonSetter(value = "shippingState", nulls = Nulls.SKIP)
        public Builder shippingState(Optional<String> shippingState) {
            this.shippingState = shippingState;
            return this;
        }

        public Builder shippingState(String shippingState) {
            this.shippingState = Optional.ofNullable(shippingState);
            return this;
        }

        @JsonSetter(value = "shippingZip", nulls = Nulls.SKIP)
        public Builder shippingZip(Optional<String> shippingZip) {
            this.shippingZip = shippingZip;
            return this;
        }

        public Builder shippingZip(String shippingZip) {
            this.shippingZip = Optional.ofNullable(shippingZip);
            return this;
        }

        /**
         * <p>Customer's current balance</p>
         */
        @JsonSetter(value = "balance", nulls = Nulls.SKIP)
        public Builder balance(Optional<Float> balance) {
            this.balance = balance;
            return this;
        }

        public Builder balance(Float balance) {
            this.balance = Optional.ofNullable(balance);
            return this;
        }

        /**
         * <p>Creation timestamp</p>
         */
        @JsonSetter(value = "created", nulls = Nulls.SKIP)
        public Builder created(Optional<OffsetDateTime> created) {
            this.created = created;
            return this;
        }

        public Builder created(OffsetDateTime created) {
            this.created = Optional.ofNullable(created);
            return this;
        }

        /**
         * <p>Customer consent information</p>
         */
        @JsonSetter(value = "customerConsent", nulls = Nulls.SKIP)
        public Builder customerConsent(Optional<Map<String, Object>> customerConsent) {
            this.customerConsent = customerConsent;
            return this;
        }

        public Builder customerConsent(Map<String, Object> customerConsent) {
            this.customerConsent = Optional.ofNullable(customerConsent);
            return this;
        }

        /**
         * <p>Status code for the customer</p>
         */
        @JsonSetter(value = "customerStatus", nulls = Nulls.SKIP)
        public Builder customerStatus(Optional<Integer> customerStatus) {
            this.customerStatus = customerStatus;
            return this;
        }

        public Builder customerStatus(Integer customerStatus) {
            this.customerStatus = Optional.ofNullable(customerStatus);
            return this;
        }

        @JsonSetter(value = "customerSummary", nulls = Nulls.SKIP)
        public Builder customerSummary(Optional<CustomerSummaryRecord> customerSummary) {
            this.customerSummary = customerSummary;
            return this;
        }

        public Builder customerSummary(CustomerSummaryRecord customerSummary) {
            this.customerSummary = Optional.ofNullable(customerSummary);
            return this;
        }

        /**
         * <p>Username of the customer</p>
         */
        @JsonSetter(value = "customerUsername", nulls = Nulls.SKIP)
        public Builder customerUsername(Optional<String> customerUsername) {
            this.customerUsername = customerUsername;
            return this;
        }

        public Builder customerUsername(String customerUsername) {
            this.customerUsername = Optional.ofNullable(customerUsername);
            return this;
        }

        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        /**
         * <p>Last update timestamp</p>
         */
        @JsonSetter(value = "lastUpdated", nulls = Nulls.SKIP)
        public Builder lastUpdated(Optional<OffsetDateTime> lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }

        public Builder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = Optional.ofNullable(lastUpdated);
            return this;
        }

        /**
         * <p>Multi-factor authentication status</p>
         */
        @JsonSetter(value = "mfa", nulls = Nulls.SKIP)
        public Builder mfa(Optional<Boolean> mfa) {
            this.mfa = mfa;
            return this;
        }

        public Builder mfa(Boolean mfa) {
            this.mfa = Optional.ofNullable(mfa);
            return this;
        }

        /**
         * <p>MFA mode setting</p>
         */
        @JsonSetter(value = "mfaMode", nulls = Nulls.SKIP)
        public Builder mfaMode(Optional<Integer> mfaMode) {
            this.mfaMode = mfaMode;
            return this;
        }

        public Builder mfaMode(Integer mfaMode) {
            this.mfaMode = Optional.ofNullable(mfaMode);
            return this;
        }

        @JsonSetter(value = "pageindentifier", nulls = Nulls.SKIP)
        public Builder pageindentifier(Optional<String> pageindentifier) {
            this.pageindentifier = pageindentifier;
            return this;
        }

        public Builder pageindentifier(String pageindentifier) {
            this.pageindentifier = Optional.ofNullable(pageindentifier);
            return this;
        }

        /**
         * <p>Parent organization ID</p>
         */
        @JsonSetter(value = "parentOrgId", nulls = Nulls.SKIP)
        public Builder parentOrgId(Optional<Integer> parentOrgId) {
            this.parentOrgId = parentOrgId;
            return this;
        }

        public Builder parentOrgId(Integer parentOrgId) {
            this.parentOrgId = Optional.ofNullable(parentOrgId);
            return this;
        }

        @JsonSetter(value = "parentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        @JsonSetter(value = "paypointDbaname", nulls = Nulls.SKIP)
        public Builder paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        public Builder paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        /**
         * <p>The paypoint entryname the customer is associated with</p>
         */
        @JsonSetter(value = "paypointEntryname", nulls = Nulls.SKIP)
        public Builder paypointEntryname(Optional<String> paypointEntryname) {
            this.paypointEntryname = paypointEntryname;
            return this;
        }

        public Builder paypointEntryname(String paypointEntryname) {
            this.paypointEntryname = Optional.ofNullable(paypointEntryname);
            return this;
        }

        @JsonSetter(value = "paypointLegalname", nulls = Nulls.SKIP)
        public Builder paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        public Builder paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        /**
         * <p>Social network data</p>
         */
        @JsonSetter(value = "snData", nulls = Nulls.SKIP)
        public Builder snData(Optional<Map<String, Object>> snData) {
            this.snData = snData;
            return this;
        }

        public Builder snData(Map<String, Object> snData) {
            this.snData = Optional.ofNullable(snData);
            return this;
        }

        /**
         * <p>Social network identifier</p>
         */
        @JsonSetter(value = "snIdentifier", nulls = Nulls.SKIP)
        public Builder snIdentifier(Optional<String> snIdentifier) {
            this.snIdentifier = snIdentifier;
            return this;
        }

        public Builder snIdentifier(String snIdentifier) {
            this.snIdentifier = Optional.ofNullable(snIdentifier);
            return this;
        }

        /**
         * <p>Social network provider</p>
         */
        @JsonSetter(value = "snProvider", nulls = Nulls.SKIP)
        public Builder snProvider(Optional<String> snProvider) {
            this.snProvider = snProvider;
            return this;
        }

        public Builder snProvider(String snProvider) {
            this.snProvider = Optional.ofNullable(snProvider);
            return this;
        }

        /**
         * <p>List of payment methods associated to the customer</p>
         */
        @JsonSetter(value = "storedMethods", nulls = Nulls.SKIP)
        public Builder storedMethods(Optional<List<MethodQueryRecords>> storedMethods) {
            this.storedMethods = storedMethods;
            return this;
        }

        public Builder storedMethods(List<MethodQueryRecords> storedMethods) {
            this.storedMethods = Optional.ofNullable(storedMethods);
            return this;
        }

        /**
         * <p>List of subscriptions associated to the customer</p>
         */
        @JsonSetter(value = "subscriptions", nulls = Nulls.SKIP)
        public Builder subscriptions(Optional<List<SubscriptionQueryRecords>> subscriptions) {
            this.subscriptions = subscriptions;
            return this;
        }

        public Builder subscriptions(List<SubscriptionQueryRecords> subscriptions) {
            this.subscriptions = Optional.ofNullable(subscriptions);
            return this;
        }

        /**
         * <p>Customer's timezone</p>
         */
        @JsonSetter(value = "timeZone", nulls = Nulls.SKIP)
        public Builder timeZone(Optional<Integer> timeZone) {
            this.timeZone = timeZone;
            return this;
        }

        public Builder timeZone(Integer timeZone) {
            this.timeZone = Optional.ofNullable(timeZone);
            return this;
        }

        public GetMethodResponseResponseDataCustomersItem build() {
            return new GetMethodResponseResponseDataCustomersItem(
                    additionalData,
                    billingAddress1,
                    billingAddress2,
                    billingCity,
                    billingCountry,
                    billingEmail,
                    billingPhone,
                    billingState,
                    billingZip,
                    company,
                    customerId,
                    customerNumber,
                    firstName,
                    identifierFields,
                    lastName,
                    shippingAddress1,
                    shippingAddress2,
                    shippingCity,
                    shippingCountry,
                    shippingState,
                    shippingZip,
                    balance,
                    created,
                    customerConsent,
                    customerStatus,
                    customerSummary,
                    customerUsername,
                    externalPaypointId,
                    lastUpdated,
                    mfa,
                    mfaMode,
                    pageindentifier,
                    parentOrgId,
                    parentOrgName,
                    paypointDbaname,
                    paypointEntryname,
                    paypointLegalname,
                    snData,
                    snIdentifier,
                    snProvider,
                    storedMethods,
                    subscriptions,
                    timeZone,
                    additionalProperties);
        }
    }
}
