/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.invoice.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.Nullable;
import com.payabli.api.core.NullableNonemptyFilter;
import com.payabli.api.core.ObjectMappers;
import com.payabli.api.types.BillItem;
import com.payabli.api.types.BillOptions;
import com.payabli.api.types.DocumentsRef;
import com.payabli.api.types.Frequency;
import com.payabli.api.types.GeneralEvents;
import com.payabli.api.types.PayorDataResponse;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetInvoiceRecord.Builder.class)
public final class GetInvoiceRecord {
    private final long invoiceId;

    private final long customerId;

    private final long paypointId;

    private final String invoiceNumber;

    private final Optional<String> invoiceDate;

    private final Optional<String> invoiceDueDate;

    private final Optional<OffsetDateTime> invoiceSentDate;

    private final Optional<String> invoiceEndDate;

    private final Optional<OffsetDateTime> lastPaymentDate;

    private final OffsetDateTime createdAt;

    private final int invoiceStatus;

    private final int invoiceType;

    private final Frequency frequency;

    private final String paymentTerms;

    private final Optional<String> termsConditions;

    private final Optional<String> notes;

    private final Optional<Double> tax;

    private final Optional<Double> discount;

    private final double invoiceAmount;

    private final double invoicePaidAmount;

    private final Optional<Double> freightAmount;

    private final Optional<Double> dutyAmount;

    private final String purchaseOrder;

    private final Optional<String> firstName;

    private final Optional<String> lastName;

    private final Optional<String> company;

    private final String shippingAddress1;

    private final String shippingAddress2;

    private final String shippingCity;

    private final String shippingState;

    private final String shippingZip;

    private final String shippingFromZip;

    private final String shippingCountry;

    private final String shippingEmail;

    private final String shippingPhone;

    private final String summaryCommodityCode;

    private final List<BillItem> items;

    private final PayorDataResponse customer;

    private final String paylinkId;

    private final Optional<List<GeneralEvents>> billEvents;

    private final BillOptions scheduledOptions;

    private final String paypointLegalname;

    private final String paypointDbaname;

    private final String paypointEntryname;

    private final String parentOrgName;

    private final Optional<String> additionalData;

    private final DocumentsRef documentsRef;

    private final Optional<String> externalPaypointId;

    private final Map<String, Object> additionalProperties;

    private GetInvoiceRecord(
            long invoiceId,
            long customerId,
            long paypointId,
            String invoiceNumber,
            Optional<String> invoiceDate,
            Optional<String> invoiceDueDate,
            Optional<OffsetDateTime> invoiceSentDate,
            Optional<String> invoiceEndDate,
            Optional<OffsetDateTime> lastPaymentDate,
            OffsetDateTime createdAt,
            int invoiceStatus,
            int invoiceType,
            Frequency frequency,
            String paymentTerms,
            Optional<String> termsConditions,
            Optional<String> notes,
            Optional<Double> tax,
            Optional<Double> discount,
            double invoiceAmount,
            double invoicePaidAmount,
            Optional<Double> freightAmount,
            Optional<Double> dutyAmount,
            String purchaseOrder,
            Optional<String> firstName,
            Optional<String> lastName,
            Optional<String> company,
            String shippingAddress1,
            String shippingAddress2,
            String shippingCity,
            String shippingState,
            String shippingZip,
            String shippingFromZip,
            String shippingCountry,
            String shippingEmail,
            String shippingPhone,
            String summaryCommodityCode,
            List<BillItem> items,
            PayorDataResponse customer,
            String paylinkId,
            Optional<List<GeneralEvents>> billEvents,
            BillOptions scheduledOptions,
            String paypointLegalname,
            String paypointDbaname,
            String paypointEntryname,
            String parentOrgName,
            Optional<String> additionalData,
            DocumentsRef documentsRef,
            Optional<String> externalPaypointId,
            Map<String, Object> additionalProperties) {
        this.invoiceId = invoiceId;
        this.customerId = customerId;
        this.paypointId = paypointId;
        this.invoiceNumber = invoiceNumber;
        this.invoiceDate = invoiceDate;
        this.invoiceDueDate = invoiceDueDate;
        this.invoiceSentDate = invoiceSentDate;
        this.invoiceEndDate = invoiceEndDate;
        this.lastPaymentDate = lastPaymentDate;
        this.createdAt = createdAt;
        this.invoiceStatus = invoiceStatus;
        this.invoiceType = invoiceType;
        this.frequency = frequency;
        this.paymentTerms = paymentTerms;
        this.termsConditions = termsConditions;
        this.notes = notes;
        this.tax = tax;
        this.discount = discount;
        this.invoiceAmount = invoiceAmount;
        this.invoicePaidAmount = invoicePaidAmount;
        this.freightAmount = freightAmount;
        this.dutyAmount = dutyAmount;
        this.purchaseOrder = purchaseOrder;
        this.firstName = firstName;
        this.lastName = lastName;
        this.company = company;
        this.shippingAddress1 = shippingAddress1;
        this.shippingAddress2 = shippingAddress2;
        this.shippingCity = shippingCity;
        this.shippingState = shippingState;
        this.shippingZip = shippingZip;
        this.shippingFromZip = shippingFromZip;
        this.shippingCountry = shippingCountry;
        this.shippingEmail = shippingEmail;
        this.shippingPhone = shippingPhone;
        this.summaryCommodityCode = summaryCommodityCode;
        this.items = items;
        this.customer = customer;
        this.paylinkId = paylinkId;
        this.billEvents = billEvents;
        this.scheduledOptions = scheduledOptions;
        this.paypointLegalname = paypointLegalname;
        this.paypointDbaname = paypointDbaname;
        this.paypointEntryname = paypointEntryname;
        this.parentOrgName = parentOrgName;
        this.additionalData = additionalData;
        this.documentsRef = documentsRef;
        this.externalPaypointId = externalPaypointId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("invoiceId")
    public long getInvoiceId() {
        return invoiceId;
    }

    @JsonProperty("customerId")
    public long getCustomerId() {
        return customerId;
    }

    @JsonProperty("paypointId")
    public long getPaypointId() {
        return paypointId;
    }

    @JsonProperty("invoiceNumber")
    public String getInvoiceNumber() {
        return invoiceNumber;
    }

    @JsonProperty("invoiceDate")
    public Optional<String> getInvoiceDate() {
        return invoiceDate;
    }

    @JsonProperty("invoiceDueDate")
    public Optional<String> getInvoiceDueDate() {
        return invoiceDueDate;
    }

    @JsonProperty("invoiceSentDate")
    public Optional<OffsetDateTime> getInvoiceSentDate() {
        return invoiceSentDate;
    }

    @JsonProperty("invoiceEndDate")
    public Optional<String> getInvoiceEndDate() {
        return invoiceEndDate;
    }

    @JsonProperty("lastPaymentDate")
    public Optional<OffsetDateTime> getLastPaymentDate() {
        return lastPaymentDate;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("invoiceStatus")
    public int getInvoiceStatus() {
        return invoiceStatus;
    }

    @JsonProperty("invoiceType")
    public int getInvoiceType() {
        return invoiceType;
    }

    @JsonProperty("frequency")
    public Frequency getFrequency() {
        return frequency;
    }

    @JsonProperty("paymentTerms")
    public String getPaymentTerms() {
        return paymentTerms;
    }

    @JsonIgnore
    public Optional<String> getTermsConditions() {
        if (termsConditions == null) {
            return Optional.empty();
        }
        return termsConditions;
    }

    @JsonIgnore
    public Optional<String> getNotes() {
        if (notes == null) {
            return Optional.empty();
        }
        return notes;
    }

    @JsonProperty("tax")
    public Optional<Double> getTax() {
        return tax;
    }

    @JsonProperty("discount")
    public Optional<Double> getDiscount() {
        return discount;
    }

    @JsonProperty("invoiceAmount")
    public double getInvoiceAmount() {
        return invoiceAmount;
    }

    @JsonProperty("invoicePaidAmount")
    public double getInvoicePaidAmount() {
        return invoicePaidAmount;
    }

    @JsonProperty("freightAmount")
    public Optional<Double> getFreightAmount() {
        return freightAmount;
    }

    @JsonProperty("dutyAmount")
    public Optional<Double> getDutyAmount() {
        return dutyAmount;
    }

    @JsonProperty("purchaseOrder")
    public String getPurchaseOrder() {
        return purchaseOrder;
    }

    /**
     * @return First name of the recipient of the invoice.
     */
    @JsonProperty("firstName")
    public Optional<String> getFirstName() {
        return firstName;
    }

    /**
     * @return Last name of the recipient of the invoice.
     */
    @JsonProperty("lastName")
    public Optional<String> getLastName() {
        return lastName;
    }

    /**
     * @return Company name of the recipient of the invoice.
     */
    @JsonProperty("company")
    public Optional<String> getCompany() {
        return company;
    }

    @JsonProperty("shippingAddress1")
    public String getShippingAddress1() {
        return shippingAddress1;
    }

    @JsonProperty("shippingAddress2")
    public String getShippingAddress2() {
        return shippingAddress2;
    }

    @JsonProperty("shippingCity")
    public String getShippingCity() {
        return shippingCity;
    }

    @JsonProperty("shippingState")
    public String getShippingState() {
        return shippingState;
    }

    @JsonProperty("shippingZip")
    public String getShippingZip() {
        return shippingZip;
    }

    @JsonProperty("shippingFromZip")
    public String getShippingFromZip() {
        return shippingFromZip;
    }

    @JsonProperty("shippingCountry")
    public String getShippingCountry() {
        return shippingCountry;
    }

    @JsonProperty("shippingEmail")
    public String getShippingEmail() {
        return shippingEmail;
    }

    @JsonProperty("shippingPhone")
    public String getShippingPhone() {
        return shippingPhone;
    }

    @JsonProperty("summaryCommodityCode")
    public String getSummaryCommodityCode() {
        return summaryCommodityCode;
    }

    @JsonProperty("items")
    public List<BillItem> getItems() {
        return items;
    }

    @JsonProperty("Customer")
    public PayorDataResponse getCustomer() {
        return customer;
    }

    @JsonProperty("paylinkId")
    public String getPaylinkId() {
        return paylinkId;
    }

    @JsonProperty("billEvents")
    public Optional<List<GeneralEvents>> getBillEvents() {
        return billEvents;
    }

    @JsonProperty("scheduledOptions")
    public BillOptions getScheduledOptions() {
        return scheduledOptions;
    }

    @JsonProperty("PaypointLegalname")
    public String getPaypointLegalname() {
        return paypointLegalname;
    }

    @JsonProperty("PaypointDbaname")
    public String getPaypointDbaname() {
        return paypointDbaname;
    }

    @JsonProperty("PaypointEntryname")
    public String getPaypointEntryname() {
        return paypointEntryname;
    }

    @JsonProperty("ParentOrgName")
    public String getParentOrgName() {
        return parentOrgName;
    }

    @JsonProperty("AdditionalData")
    public Optional<String> getAdditionalData() {
        return additionalData;
    }

    @JsonProperty("DocumentsRef")
    public DocumentsRef getDocumentsRef() {
        return documentsRef;
    }

    @JsonProperty("externalPaypointID")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("termsConditions")
    private Optional<String> _getTermsConditions() {
        return termsConditions;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("notes")
    private Optional<String> _getNotes() {
        return notes;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetInvoiceRecord && equalTo((GetInvoiceRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetInvoiceRecord other) {
        return invoiceId == other.invoiceId
                && customerId == other.customerId
                && paypointId == other.paypointId
                && invoiceNumber.equals(other.invoiceNumber)
                && invoiceDate.equals(other.invoiceDate)
                && invoiceDueDate.equals(other.invoiceDueDate)
                && invoiceSentDate.equals(other.invoiceSentDate)
                && invoiceEndDate.equals(other.invoiceEndDate)
                && lastPaymentDate.equals(other.lastPaymentDate)
                && createdAt.equals(other.createdAt)
                && invoiceStatus == other.invoiceStatus
                && invoiceType == other.invoiceType
                && frequency.equals(other.frequency)
                && paymentTerms.equals(other.paymentTerms)
                && termsConditions.equals(other.termsConditions)
                && notes.equals(other.notes)
                && tax.equals(other.tax)
                && discount.equals(other.discount)
                && invoiceAmount == other.invoiceAmount
                && invoicePaidAmount == other.invoicePaidAmount
                && freightAmount.equals(other.freightAmount)
                && dutyAmount.equals(other.dutyAmount)
                && purchaseOrder.equals(other.purchaseOrder)
                && firstName.equals(other.firstName)
                && lastName.equals(other.lastName)
                && company.equals(other.company)
                && shippingAddress1.equals(other.shippingAddress1)
                && shippingAddress2.equals(other.shippingAddress2)
                && shippingCity.equals(other.shippingCity)
                && shippingState.equals(other.shippingState)
                && shippingZip.equals(other.shippingZip)
                && shippingFromZip.equals(other.shippingFromZip)
                && shippingCountry.equals(other.shippingCountry)
                && shippingEmail.equals(other.shippingEmail)
                && shippingPhone.equals(other.shippingPhone)
                && summaryCommodityCode.equals(other.summaryCommodityCode)
                && items.equals(other.items)
                && customer.equals(other.customer)
                && paylinkId.equals(other.paylinkId)
                && billEvents.equals(other.billEvents)
                && scheduledOptions.equals(other.scheduledOptions)
                && paypointLegalname.equals(other.paypointLegalname)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointEntryname.equals(other.paypointEntryname)
                && parentOrgName.equals(other.parentOrgName)
                && additionalData.equals(other.additionalData)
                && documentsRef.equals(other.documentsRef)
                && externalPaypointId.equals(other.externalPaypointId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.invoiceId,
                this.customerId,
                this.paypointId,
                this.invoiceNumber,
                this.invoiceDate,
                this.invoiceDueDate,
                this.invoiceSentDate,
                this.invoiceEndDate,
                this.lastPaymentDate,
                this.createdAt,
                this.invoiceStatus,
                this.invoiceType,
                this.frequency,
                this.paymentTerms,
                this.termsConditions,
                this.notes,
                this.tax,
                this.discount,
                this.invoiceAmount,
                this.invoicePaidAmount,
                this.freightAmount,
                this.dutyAmount,
                this.purchaseOrder,
                this.firstName,
                this.lastName,
                this.company,
                this.shippingAddress1,
                this.shippingAddress2,
                this.shippingCity,
                this.shippingState,
                this.shippingZip,
                this.shippingFromZip,
                this.shippingCountry,
                this.shippingEmail,
                this.shippingPhone,
                this.summaryCommodityCode,
                this.items,
                this.customer,
                this.paylinkId,
                this.billEvents,
                this.scheduledOptions,
                this.paypointLegalname,
                this.paypointDbaname,
                this.paypointEntryname,
                this.parentOrgName,
                this.additionalData,
                this.documentsRef,
                this.externalPaypointId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static InvoiceIdStage builder() {
        return new Builder();
    }

    public interface InvoiceIdStage {
        CustomerIdStage invoiceId(long invoiceId);

        Builder from(GetInvoiceRecord other);
    }

    public interface CustomerIdStage {
        PaypointIdStage customerId(long customerId);
    }

    public interface PaypointIdStage {
        InvoiceNumberStage paypointId(long paypointId);
    }

    public interface InvoiceNumberStage {
        CreatedAtStage invoiceNumber(@NotNull String invoiceNumber);
    }

    public interface CreatedAtStage {
        InvoiceStatusStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface InvoiceStatusStage {
        InvoiceTypeStage invoiceStatus(int invoiceStatus);
    }

    public interface InvoiceTypeStage {
        FrequencyStage invoiceType(int invoiceType);
    }

    public interface FrequencyStage {
        PaymentTermsStage frequency(@NotNull Frequency frequency);
    }

    public interface PaymentTermsStage {
        InvoiceAmountStage paymentTerms(@NotNull String paymentTerms);
    }

    public interface InvoiceAmountStage {
        InvoicePaidAmountStage invoiceAmount(double invoiceAmount);
    }

    public interface InvoicePaidAmountStage {
        PurchaseOrderStage invoicePaidAmount(double invoicePaidAmount);
    }

    public interface PurchaseOrderStage {
        ShippingAddress1Stage purchaseOrder(@NotNull String purchaseOrder);
    }

    public interface ShippingAddress1Stage {
        ShippingAddress2Stage shippingAddress1(@NotNull String shippingAddress1);
    }

    public interface ShippingAddress2Stage {
        ShippingCityStage shippingAddress2(@NotNull String shippingAddress2);
    }

    public interface ShippingCityStage {
        ShippingStateStage shippingCity(@NotNull String shippingCity);
    }

    public interface ShippingStateStage {
        ShippingZipStage shippingState(@NotNull String shippingState);
    }

    public interface ShippingZipStage {
        ShippingFromZipStage shippingZip(@NotNull String shippingZip);
    }

    public interface ShippingFromZipStage {
        ShippingCountryStage shippingFromZip(@NotNull String shippingFromZip);
    }

    public interface ShippingCountryStage {
        ShippingEmailStage shippingCountry(@NotNull String shippingCountry);
    }

    public interface ShippingEmailStage {
        ShippingPhoneStage shippingEmail(@NotNull String shippingEmail);
    }

    public interface ShippingPhoneStage {
        SummaryCommodityCodeStage shippingPhone(@NotNull String shippingPhone);
    }

    public interface SummaryCommodityCodeStage {
        CustomerStage summaryCommodityCode(@NotNull String summaryCommodityCode);
    }

    public interface CustomerStage {
        PaylinkIdStage customer(@NotNull PayorDataResponse customer);
    }

    public interface PaylinkIdStage {
        ScheduledOptionsStage paylinkId(@NotNull String paylinkId);
    }

    public interface ScheduledOptionsStage {
        PaypointLegalnameStage scheduledOptions(@NotNull BillOptions scheduledOptions);
    }

    public interface PaypointLegalnameStage {
        PaypointDbanameStage paypointLegalname(@NotNull String paypointLegalname);
    }

    public interface PaypointDbanameStage {
        PaypointEntrynameStage paypointDbaname(@NotNull String paypointDbaname);
    }

    public interface PaypointEntrynameStage {
        ParentOrgNameStage paypointEntryname(@NotNull String paypointEntryname);
    }

    public interface ParentOrgNameStage {
        DocumentsRefStage parentOrgName(@NotNull String parentOrgName);
    }

    public interface DocumentsRefStage {
        _FinalStage documentsRef(@NotNull DocumentsRef documentsRef);
    }

    public interface _FinalStage {
        GetInvoiceRecord build();

        _FinalStage invoiceDate(Optional<String> invoiceDate);

        _FinalStage invoiceDate(String invoiceDate);

        _FinalStage invoiceDueDate(Optional<String> invoiceDueDate);

        _FinalStage invoiceDueDate(String invoiceDueDate);

        _FinalStage invoiceSentDate(Optional<OffsetDateTime> invoiceSentDate);

        _FinalStage invoiceSentDate(OffsetDateTime invoiceSentDate);

        _FinalStage invoiceEndDate(Optional<String> invoiceEndDate);

        _FinalStage invoiceEndDate(String invoiceEndDate);

        _FinalStage lastPaymentDate(Optional<OffsetDateTime> lastPaymentDate);

        _FinalStage lastPaymentDate(OffsetDateTime lastPaymentDate);

        _FinalStage termsConditions(Optional<String> termsConditions);

        _FinalStage termsConditions(String termsConditions);

        _FinalStage termsConditions(Nullable<String> termsConditions);

        _FinalStage notes(Optional<String> notes);

        _FinalStage notes(String notes);

        _FinalStage notes(Nullable<String> notes);

        _FinalStage tax(Optional<Double> tax);

        _FinalStage tax(Double tax);

        _FinalStage discount(Optional<Double> discount);

        _FinalStage discount(Double discount);

        _FinalStage freightAmount(Optional<Double> freightAmount);

        _FinalStage freightAmount(Double freightAmount);

        _FinalStage dutyAmount(Optional<Double> dutyAmount);

        _FinalStage dutyAmount(Double dutyAmount);

        /**
         * <p>First name of the recipient of the invoice.</p>
         */
        _FinalStage firstName(Optional<String> firstName);

        _FinalStage firstName(String firstName);

        /**
         * <p>Last name of the recipient of the invoice.</p>
         */
        _FinalStage lastName(Optional<String> lastName);

        _FinalStage lastName(String lastName);

        /**
         * <p>Company name of the recipient of the invoice.</p>
         */
        _FinalStage company(Optional<String> company);

        _FinalStage company(String company);

        _FinalStage items(List<BillItem> items);

        _FinalStage addItems(BillItem items);

        _FinalStage addAllItems(List<BillItem> items);

        _FinalStage billEvents(Optional<List<GeneralEvents>> billEvents);

        _FinalStage billEvents(List<GeneralEvents> billEvents);

        _FinalStage additionalData(Optional<String> additionalData);

        _FinalStage additionalData(String additionalData);

        _FinalStage externalPaypointId(Optional<String> externalPaypointId);

        _FinalStage externalPaypointId(String externalPaypointId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements InvoiceIdStage,
                    CustomerIdStage,
                    PaypointIdStage,
                    InvoiceNumberStage,
                    CreatedAtStage,
                    InvoiceStatusStage,
                    InvoiceTypeStage,
                    FrequencyStage,
                    PaymentTermsStage,
                    InvoiceAmountStage,
                    InvoicePaidAmountStage,
                    PurchaseOrderStage,
                    ShippingAddress1Stage,
                    ShippingAddress2Stage,
                    ShippingCityStage,
                    ShippingStateStage,
                    ShippingZipStage,
                    ShippingFromZipStage,
                    ShippingCountryStage,
                    ShippingEmailStage,
                    ShippingPhoneStage,
                    SummaryCommodityCodeStage,
                    CustomerStage,
                    PaylinkIdStage,
                    ScheduledOptionsStage,
                    PaypointLegalnameStage,
                    PaypointDbanameStage,
                    PaypointEntrynameStage,
                    ParentOrgNameStage,
                    DocumentsRefStage,
                    _FinalStage {
        private long invoiceId;

        private long customerId;

        private long paypointId;

        private String invoiceNumber;

        private OffsetDateTime createdAt;

        private int invoiceStatus;

        private int invoiceType;

        private Frequency frequency;

        private String paymentTerms;

        private double invoiceAmount;

        private double invoicePaidAmount;

        private String purchaseOrder;

        private String shippingAddress1;

        private String shippingAddress2;

        private String shippingCity;

        private String shippingState;

        private String shippingZip;

        private String shippingFromZip;

        private String shippingCountry;

        private String shippingEmail;

        private String shippingPhone;

        private String summaryCommodityCode;

        private PayorDataResponse customer;

        private String paylinkId;

        private BillOptions scheduledOptions;

        private String paypointLegalname;

        private String paypointDbaname;

        private String paypointEntryname;

        private String parentOrgName;

        private DocumentsRef documentsRef;

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<String> additionalData = Optional.empty();

        private Optional<List<GeneralEvents>> billEvents = Optional.empty();

        private List<BillItem> items = new ArrayList<>();

        private Optional<String> company = Optional.empty();

        private Optional<String> lastName = Optional.empty();

        private Optional<String> firstName = Optional.empty();

        private Optional<Double> dutyAmount = Optional.empty();

        private Optional<Double> freightAmount = Optional.empty();

        private Optional<Double> discount = Optional.empty();

        private Optional<Double> tax = Optional.empty();

        private Optional<String> notes = Optional.empty();

        private Optional<String> termsConditions = Optional.empty();

        private Optional<OffsetDateTime> lastPaymentDate = Optional.empty();

        private Optional<String> invoiceEndDate = Optional.empty();

        private Optional<OffsetDateTime> invoiceSentDate = Optional.empty();

        private Optional<String> invoiceDueDate = Optional.empty();

        private Optional<String> invoiceDate = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(GetInvoiceRecord other) {
            invoiceId(other.getInvoiceId());
            customerId(other.getCustomerId());
            paypointId(other.getPaypointId());
            invoiceNumber(other.getInvoiceNumber());
            invoiceDate(other.getInvoiceDate());
            invoiceDueDate(other.getInvoiceDueDate());
            invoiceSentDate(other.getInvoiceSentDate());
            invoiceEndDate(other.getInvoiceEndDate());
            lastPaymentDate(other.getLastPaymentDate());
            createdAt(other.getCreatedAt());
            invoiceStatus(other.getInvoiceStatus());
            invoiceType(other.getInvoiceType());
            frequency(other.getFrequency());
            paymentTerms(other.getPaymentTerms());
            termsConditions(other.getTermsConditions());
            notes(other.getNotes());
            tax(other.getTax());
            discount(other.getDiscount());
            invoiceAmount(other.getInvoiceAmount());
            invoicePaidAmount(other.getInvoicePaidAmount());
            freightAmount(other.getFreightAmount());
            dutyAmount(other.getDutyAmount());
            purchaseOrder(other.getPurchaseOrder());
            firstName(other.getFirstName());
            lastName(other.getLastName());
            company(other.getCompany());
            shippingAddress1(other.getShippingAddress1());
            shippingAddress2(other.getShippingAddress2());
            shippingCity(other.getShippingCity());
            shippingState(other.getShippingState());
            shippingZip(other.getShippingZip());
            shippingFromZip(other.getShippingFromZip());
            shippingCountry(other.getShippingCountry());
            shippingEmail(other.getShippingEmail());
            shippingPhone(other.getShippingPhone());
            summaryCommodityCode(other.getSummaryCommodityCode());
            items(other.getItems());
            customer(other.getCustomer());
            paylinkId(other.getPaylinkId());
            billEvents(other.getBillEvents());
            scheduledOptions(other.getScheduledOptions());
            paypointLegalname(other.getPaypointLegalname());
            paypointDbaname(other.getPaypointDbaname());
            paypointEntryname(other.getPaypointEntryname());
            parentOrgName(other.getParentOrgName());
            additionalData(other.getAdditionalData());
            documentsRef(other.getDocumentsRef());
            externalPaypointId(other.getExternalPaypointId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("invoiceId")
        public CustomerIdStage invoiceId(long invoiceId) {
            this.invoiceId = invoiceId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("customerId")
        public PaypointIdStage customerId(long customerId) {
            this.customerId = customerId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("paypointId")
        public InvoiceNumberStage paypointId(long paypointId) {
            this.paypointId = paypointId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("invoiceNumber")
        public CreatedAtStage invoiceNumber(@NotNull String invoiceNumber) {
            this.invoiceNumber = Objects.requireNonNull(invoiceNumber, "invoiceNumber must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public InvoiceStatusStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("invoiceStatus")
        public InvoiceTypeStage invoiceStatus(int invoiceStatus) {
            this.invoiceStatus = invoiceStatus;
            return this;
        }

        @java.lang.Override
        @JsonSetter("invoiceType")
        public FrequencyStage invoiceType(int invoiceType) {
            this.invoiceType = invoiceType;
            return this;
        }

        @java.lang.Override
        @JsonSetter("frequency")
        public PaymentTermsStage frequency(@NotNull Frequency frequency) {
            this.frequency = Objects.requireNonNull(frequency, "frequency must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("paymentTerms")
        public InvoiceAmountStage paymentTerms(@NotNull String paymentTerms) {
            this.paymentTerms = Objects.requireNonNull(paymentTerms, "paymentTerms must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("invoiceAmount")
        public InvoicePaidAmountStage invoiceAmount(double invoiceAmount) {
            this.invoiceAmount = invoiceAmount;
            return this;
        }

        @java.lang.Override
        @JsonSetter("invoicePaidAmount")
        public PurchaseOrderStage invoicePaidAmount(double invoicePaidAmount) {
            this.invoicePaidAmount = invoicePaidAmount;
            return this;
        }

        @java.lang.Override
        @JsonSetter("purchaseOrder")
        public ShippingAddress1Stage purchaseOrder(@NotNull String purchaseOrder) {
            this.purchaseOrder = Objects.requireNonNull(purchaseOrder, "purchaseOrder must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("shippingAddress1")
        public ShippingAddress2Stage shippingAddress1(@NotNull String shippingAddress1) {
            this.shippingAddress1 = Objects.requireNonNull(shippingAddress1, "shippingAddress1 must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("shippingAddress2")
        public ShippingCityStage shippingAddress2(@NotNull String shippingAddress2) {
            this.shippingAddress2 = Objects.requireNonNull(shippingAddress2, "shippingAddress2 must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("shippingCity")
        public ShippingStateStage shippingCity(@NotNull String shippingCity) {
            this.shippingCity = Objects.requireNonNull(shippingCity, "shippingCity must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("shippingState")
        public ShippingZipStage shippingState(@NotNull String shippingState) {
            this.shippingState = Objects.requireNonNull(shippingState, "shippingState must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("shippingZip")
        public ShippingFromZipStage shippingZip(@NotNull String shippingZip) {
            this.shippingZip = Objects.requireNonNull(shippingZip, "shippingZip must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("shippingFromZip")
        public ShippingCountryStage shippingFromZip(@NotNull String shippingFromZip) {
            this.shippingFromZip = Objects.requireNonNull(shippingFromZip, "shippingFromZip must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("shippingCountry")
        public ShippingEmailStage shippingCountry(@NotNull String shippingCountry) {
            this.shippingCountry = Objects.requireNonNull(shippingCountry, "shippingCountry must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("shippingEmail")
        public ShippingPhoneStage shippingEmail(@NotNull String shippingEmail) {
            this.shippingEmail = Objects.requireNonNull(shippingEmail, "shippingEmail must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("shippingPhone")
        public SummaryCommodityCodeStage shippingPhone(@NotNull String shippingPhone) {
            this.shippingPhone = Objects.requireNonNull(shippingPhone, "shippingPhone must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("summaryCommodityCode")
        public CustomerStage summaryCommodityCode(@NotNull String summaryCommodityCode) {
            this.summaryCommodityCode =
                    Objects.requireNonNull(summaryCommodityCode, "summaryCommodityCode must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("Customer")
        public PaylinkIdStage customer(@NotNull PayorDataResponse customer) {
            this.customer = Objects.requireNonNull(customer, "customer must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("paylinkId")
        public ScheduledOptionsStage paylinkId(@NotNull String paylinkId) {
            this.paylinkId = Objects.requireNonNull(paylinkId, "paylinkId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("scheduledOptions")
        public PaypointLegalnameStage scheduledOptions(@NotNull BillOptions scheduledOptions) {
            this.scheduledOptions = Objects.requireNonNull(scheduledOptions, "scheduledOptions must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("PaypointLegalname")
        public PaypointDbanameStage paypointLegalname(@NotNull String paypointLegalname) {
            this.paypointLegalname = Objects.requireNonNull(paypointLegalname, "paypointLegalname must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("PaypointDbaname")
        public PaypointEntrynameStage paypointDbaname(@NotNull String paypointDbaname) {
            this.paypointDbaname = Objects.requireNonNull(paypointDbaname, "paypointDbaname must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("PaypointEntryname")
        public ParentOrgNameStage paypointEntryname(@NotNull String paypointEntryname) {
            this.paypointEntryname = Objects.requireNonNull(paypointEntryname, "paypointEntryname must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("ParentOrgName")
        public DocumentsRefStage parentOrgName(@NotNull String parentOrgName) {
            this.parentOrgName = Objects.requireNonNull(parentOrgName, "parentOrgName must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("DocumentsRef")
        public _FinalStage documentsRef(@NotNull DocumentsRef documentsRef) {
            this.documentsRef = Objects.requireNonNull(documentsRef, "documentsRef must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public _FinalStage externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        @java.lang.Override
        public _FinalStage additionalData(String additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "AdditionalData", nulls = Nulls.SKIP)
        public _FinalStage additionalData(Optional<String> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        @java.lang.Override
        public _FinalStage billEvents(List<GeneralEvents> billEvents) {
            this.billEvents = Optional.ofNullable(billEvents);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "billEvents", nulls = Nulls.SKIP)
        public _FinalStage billEvents(Optional<List<GeneralEvents>> billEvents) {
            this.billEvents = billEvents;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllItems(List<BillItem> items) {
            this.items.addAll(items);
            return this;
        }

        @java.lang.Override
        public _FinalStage addItems(BillItem items) {
            this.items.add(items);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "items", nulls = Nulls.SKIP)
        public _FinalStage items(List<BillItem> items) {
            this.items.clear();
            this.items.addAll(items);
            return this;
        }

        /**
         * <p>Company name of the recipient of the invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage company(String company) {
            this.company = Optional.ofNullable(company);
            return this;
        }

        /**
         * <p>Company name of the recipient of the invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "company", nulls = Nulls.SKIP)
        public _FinalStage company(Optional<String> company) {
            this.company = company;
            return this;
        }

        /**
         * <p>Last name of the recipient of the invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage lastName(String lastName) {
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        /**
         * <p>Last name of the recipient of the invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "lastName", nulls = Nulls.SKIP)
        public _FinalStage lastName(Optional<String> lastName) {
            this.lastName = lastName;
            return this;
        }

        /**
         * <p>First name of the recipient of the invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage firstName(String firstName) {
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        /**
         * <p>First name of the recipient of the invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "firstName", nulls = Nulls.SKIP)
        public _FinalStage firstName(Optional<String> firstName) {
            this.firstName = firstName;
            return this;
        }

        @java.lang.Override
        public _FinalStage dutyAmount(Double dutyAmount) {
            this.dutyAmount = Optional.ofNullable(dutyAmount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "dutyAmount", nulls = Nulls.SKIP)
        public _FinalStage dutyAmount(Optional<Double> dutyAmount) {
            this.dutyAmount = dutyAmount;
            return this;
        }

        @java.lang.Override
        public _FinalStage freightAmount(Double freightAmount) {
            this.freightAmount = Optional.ofNullable(freightAmount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "freightAmount", nulls = Nulls.SKIP)
        public _FinalStage freightAmount(Optional<Double> freightAmount) {
            this.freightAmount = freightAmount;
            return this;
        }

        @java.lang.Override
        public _FinalStage discount(Double discount) {
            this.discount = Optional.ofNullable(discount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "discount", nulls = Nulls.SKIP)
        public _FinalStage discount(Optional<Double> discount) {
            this.discount = discount;
            return this;
        }

        @java.lang.Override
        public _FinalStage tax(Double tax) {
            this.tax = Optional.ofNullable(tax);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "tax", nulls = Nulls.SKIP)
        public _FinalStage tax(Optional<Double> tax) {
            this.tax = tax;
            return this;
        }

        @java.lang.Override
        public _FinalStage notes(Nullable<String> notes) {
            if (notes.isNull()) {
                this.notes = null;
            } else if (notes.isEmpty()) {
                this.notes = Optional.empty();
            } else {
                this.notes = Optional.of(notes.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage notes(String notes) {
            this.notes = Optional.ofNullable(notes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "notes", nulls = Nulls.SKIP)
        public _FinalStage notes(Optional<String> notes) {
            this.notes = notes;
            return this;
        }

        @java.lang.Override
        public _FinalStage termsConditions(Nullable<String> termsConditions) {
            if (termsConditions.isNull()) {
                this.termsConditions = null;
            } else if (termsConditions.isEmpty()) {
                this.termsConditions = Optional.empty();
            } else {
                this.termsConditions = Optional.of(termsConditions.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage termsConditions(String termsConditions) {
            this.termsConditions = Optional.ofNullable(termsConditions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "termsConditions", nulls = Nulls.SKIP)
        public _FinalStage termsConditions(Optional<String> termsConditions) {
            this.termsConditions = termsConditions;
            return this;
        }

        @java.lang.Override
        public _FinalStage lastPaymentDate(OffsetDateTime lastPaymentDate) {
            this.lastPaymentDate = Optional.ofNullable(lastPaymentDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "lastPaymentDate", nulls = Nulls.SKIP)
        public _FinalStage lastPaymentDate(Optional<OffsetDateTime> lastPaymentDate) {
            this.lastPaymentDate = lastPaymentDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage invoiceEndDate(String invoiceEndDate) {
            this.invoiceEndDate = Optional.ofNullable(invoiceEndDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "invoiceEndDate", nulls = Nulls.SKIP)
        public _FinalStage invoiceEndDate(Optional<String> invoiceEndDate) {
            this.invoiceEndDate = invoiceEndDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage invoiceSentDate(OffsetDateTime invoiceSentDate) {
            this.invoiceSentDate = Optional.ofNullable(invoiceSentDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "invoiceSentDate", nulls = Nulls.SKIP)
        public _FinalStage invoiceSentDate(Optional<OffsetDateTime> invoiceSentDate) {
            this.invoiceSentDate = invoiceSentDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage invoiceDueDate(String invoiceDueDate) {
            this.invoiceDueDate = Optional.ofNullable(invoiceDueDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "invoiceDueDate", nulls = Nulls.SKIP)
        public _FinalStage invoiceDueDate(Optional<String> invoiceDueDate) {
            this.invoiceDueDate = invoiceDueDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage invoiceDate(String invoiceDate) {
            this.invoiceDate = Optional.ofNullable(invoiceDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "invoiceDate", nulls = Nulls.SKIP)
        public _FinalStage invoiceDate(Optional<String> invoiceDate) {
            this.invoiceDate = invoiceDate;
            return this;
        }

        @java.lang.Override
        public GetInvoiceRecord build() {
            return new GetInvoiceRecord(
                    invoiceId,
                    customerId,
                    paypointId,
                    invoiceNumber,
                    invoiceDate,
                    invoiceDueDate,
                    invoiceSentDate,
                    invoiceEndDate,
                    lastPaymentDate,
                    createdAt,
                    invoiceStatus,
                    invoiceType,
                    frequency,
                    paymentTerms,
                    termsConditions,
                    notes,
                    tax,
                    discount,
                    invoiceAmount,
                    invoicePaidAmount,
                    freightAmount,
                    dutyAmount,
                    purchaseOrder,
                    firstName,
                    lastName,
                    company,
                    shippingAddress1,
                    shippingAddress2,
                    shippingCity,
                    shippingState,
                    shippingZip,
                    shippingFromZip,
                    shippingCountry,
                    shippingEmail,
                    shippingPhone,
                    summaryCommodityCode,
                    items,
                    customer,
                    paylinkId,
                    billEvents,
                    scheduledOptions,
                    paypointLegalname,
                    paypointDbaname,
                    paypointEntryname,
                    parentOrgName,
                    additionalData,
                    documentsRef,
                    externalPaypointId,
                    additionalProperties);
        }
    }
}
