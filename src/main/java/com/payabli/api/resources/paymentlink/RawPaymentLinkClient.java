/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.paymentlink;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.payabli.api.core.ClientOptions;
import com.payabli.api.core.MediaTypes;
import com.payabli.api.core.ObjectMappers;
import com.payabli.api.core.PayabliApiApiException;
import com.payabli.api.core.PayabliApiException;
import com.payabli.api.core.PayabliApiHttpResponse;
import com.payabli.api.core.QueryStringMapper;
import com.payabli.api.core.RequestOptions;
import com.payabli.api.errors.BadRequestError;
import com.payabli.api.errors.InternalServerError;
import com.payabli.api.errors.ServiceUnavailableError;
import com.payabli.api.errors.UnauthorizedError;
import com.payabli.api.resources.paymentlink.requests.PayLinkDataBill;
import com.payabli.api.resources.paymentlink.requests.PayLinkDataInvoice;
import com.payabli.api.resources.paymentlink.requests.PayLinkDataOut;
import com.payabli.api.resources.paymentlink.requests.PayLinkUpdateData;
import com.payabli.api.resources.paymentlink.requests.RefreshPayLinkFromIdRequest;
import com.payabli.api.resources.paymentlink.requests.SendPayLinkFromIdRequest;
import com.payabli.api.resources.paymentlink.types.GetPayLinkFromIdResponse;
import com.payabli.api.resources.paymentlink.types.PayabliApiResponsePaymentLinks;
import com.payabli.api.types.PayabliApiResponse;
import com.payabli.api.types.PushPayLinkRequest;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawPaymentLinkClient {
    protected final ClientOptions clientOptions;

    public RawPaymentLinkClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Generates a payment link for an invoice from the invoice ID.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> addPayLinkFromInvoice(
            int idInvoice, PayLinkDataInvoice request) {
        return addPayLinkFromInvoice(idInvoice, request, null);
    }

    /**
     * Generates a payment link for an invoice from the invoice ID.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> addPayLinkFromInvoice(
            int idInvoice, PayLinkDataInvoice request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("PaymentLink")
                .addPathSegment(Integer.toString(idInvoice));
        if (request.getAmountFixed().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "amountFixed", request.getAmountFixed().get(), false);
        }
        if (request.getMail2().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "mail2", request.getMail2().get(), false);
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        if (request.getIdempotencyKey().isPresent()) {
            _requestBuilder.addHeader(
                    "idempotencyKey", request.getIdempotencyKey().get());
        }
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PayabliApiResponsePaymentLinks.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Generates a payment link for a bill from the bill ID.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> addPayLinkFromBill(
            int billId, PayLinkDataBill request) {
        return addPayLinkFromBill(billId, request, null);
    }

    /**
     * Generates a payment link for a bill from the bill ID.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> addPayLinkFromBill(
            int billId, PayLinkDataBill request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("PaymentLink/bill")
                .addPathSegment(Integer.toString(billId));
        if (request.getAmountFixed().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "amountFixed", request.getAmountFixed().get(), false);
        }
        if (request.getMail2().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "mail2", request.getMail2().get(), false);
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        if (request.getIdempotencyKey().isPresent()) {
            _requestBuilder.addHeader(
                    "idempotencyKey", request.getIdempotencyKey().get());
        }
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PayabliApiResponsePaymentLinks.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Deletes a payment link by ID.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> deletePayLinkFromId(String payLinkId) {
        return deletePayLinkFromId(payLinkId, null);
    }

    /**
     * Deletes a payment link by ID.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> deletePayLinkFromId(
            String payLinkId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("PaymentLink")
                .addPathSegment(payLinkId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PayabliApiResponsePaymentLinks.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Retrieves a payment link by ID.
     */
    public PayabliApiHttpResponse<GetPayLinkFromIdResponse> getPayLinkFromId(String paylinkId) {
        return getPayLinkFromId(paylinkId, null);
    }

    /**
     * Retrieves a payment link by ID.
     */
    public PayabliApiHttpResponse<GetPayLinkFromIdResponse> getPayLinkFromId(
            String paylinkId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("PaymentLink/load")
                .addPathSegment(paylinkId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetPayLinkFromIdResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Send a payment link to the specified email addresses or phone numbers.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> pushPayLinkFromId(
            String payLinkId, PushPayLinkRequest request) {
        return pushPayLinkFromId(payLinkId, request, null);
    }

    /**
     * Send a payment link to the specified email addresses or phone numbers.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> pushPayLinkFromId(
            String payLinkId, PushPayLinkRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("PaymentLink/push")
                .addPathSegment(payLinkId)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new PayabliApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PayabliApiResponsePaymentLinks.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Refresh a payment link's content after an update.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> refreshPayLinkFromId(String payLinkId) {
        return refreshPayLinkFromId(
                payLinkId, RefreshPayLinkFromIdRequest.builder().build());
    }

    /**
     * Refresh a payment link's content after an update.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> refreshPayLinkFromId(
            String payLinkId, RefreshPayLinkFromIdRequest request) {
        return refreshPayLinkFromId(payLinkId, request, null);
    }

    /**
     * Refresh a payment link's content after an update.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> refreshPayLinkFromId(
            String payLinkId, RefreshPayLinkFromIdRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("PaymentLink/refresh")
                .addPathSegment(payLinkId);
        if (request.getAmountFixed().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "amountFixed", request.getAmountFixed().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PayabliApiResponsePaymentLinks.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Sends a payment link to the specified email addresses.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> sendPayLinkFromId(String payLinkId) {
        return sendPayLinkFromId(payLinkId, SendPayLinkFromIdRequest.builder().build());
    }

    /**
     * Sends a payment link to the specified email addresses.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> sendPayLinkFromId(
            String payLinkId, SendPayLinkFromIdRequest request) {
        return sendPayLinkFromId(payLinkId, request, null);
    }

    /**
     * Sends a payment link to the specified email addresses.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> sendPayLinkFromId(
            String payLinkId, SendPayLinkFromIdRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("PaymentLink/send")
                .addPathSegment(payLinkId);
        if (request.getAttachfile().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "attachfile", request.getAttachfile().get(), false);
        }
        if (request.getMail2().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "mail2", request.getMail2().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PayabliApiResponsePaymentLinks.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Updates a payment link's details.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> updatePayLinkFromId(String payLinkId) {
        return updatePayLinkFromId(payLinkId, PayLinkUpdateData.builder().build());
    }

    /**
     * Updates a payment link's details.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> updatePayLinkFromId(
            String payLinkId, PayLinkUpdateData request) {
        return updatePayLinkFromId(payLinkId, request, null);
    }

    /**
     * Updates a payment link's details.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> updatePayLinkFromId(
            String payLinkId, PayLinkUpdateData request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("PaymentLink/update")
                .addPathSegment(payLinkId)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new PayabliApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PayabliApiResponsePaymentLinks.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Generates a vendor payment link for a specific bill lot number. This allows you to pay all bills with the same lot number for a vendor with a single payment link.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> addPayLinkFromBillLotNumber(
            String lotNumber, PayLinkDataOut request) {
        return addPayLinkFromBillLotNumber(lotNumber, request, null);
    }

    /**
     * Generates a vendor payment link for a specific bill lot number. This allows you to pay all bills with the same lot number for a vendor with a single payment link.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymentLinks> addPayLinkFromBillLotNumber(
            String lotNumber, PayLinkDataOut request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("PaymentLink/bill/lotNumber")
                .addPathSegment(lotNumber);
        QueryStringMapper.addQueryParameter(httpUrl, "entryPoint", request.getEntryPoint(), false);
        QueryStringMapper.addQueryParameter(httpUrl, "vendorNumber", request.getVendorNumber(), false);
        if (request.getMail2().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "mail2", request.getMail2().get(), false);
        }
        if (request.getAmountFixed().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "amountFixed", request.getAmountFixed().get(), false);
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PayabliApiResponsePaymentLinks.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }
}
