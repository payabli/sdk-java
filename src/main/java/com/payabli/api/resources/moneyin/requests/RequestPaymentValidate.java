/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.moneyin.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import com.payabli.api.resources.moneyin.types.RequestPaymentValidatePaymentMethod;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RequestPaymentValidate.Builder.class)
public final class RequestPaymentValidate {
    private final Optional<String> idempotencyKey;

    private final Optional<String> accountId;

    private final String entryPoint;

    private final Optional<String> orderDescription;

    private final Optional<String> orderId;

    private final RequestPaymentValidatePaymentMethod paymentMethod;

    private final Map<String, Object> additionalProperties;

    private RequestPaymentValidate(
            Optional<String> idempotencyKey,
            Optional<String> accountId,
            String entryPoint,
            Optional<String> orderDescription,
            Optional<String> orderId,
            RequestPaymentValidatePaymentMethod paymentMethod,
            Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.accountId = accountId;
        this.entryPoint = entryPoint;
        this.orderDescription = orderDescription;
        this.orderId = orderId;
        this.paymentMethod = paymentMethod;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("idempotencyKey")
    public Optional<String> getIdempotencyKey() {
        return idempotencyKey;
    }

    @JsonProperty("accountId")
    public Optional<String> getAccountId() {
        return accountId;
    }

    @JsonProperty("entryPoint")
    public String getEntryPoint() {
        return entryPoint;
    }

    @JsonProperty("orderDescription")
    public Optional<String> getOrderDescription() {
        return orderDescription;
    }

    @JsonProperty("orderId")
    public Optional<String> getOrderId() {
        return orderId;
    }

    /**
     * @return Object describing payment method to use for transaction.
     */
    @JsonProperty("paymentMethod")
    public RequestPaymentValidatePaymentMethod getPaymentMethod() {
        return paymentMethod;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RequestPaymentValidate && equalTo((RequestPaymentValidate) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RequestPaymentValidate other) {
        return idempotencyKey.equals(other.idempotencyKey)
                && accountId.equals(other.accountId)
                && entryPoint.equals(other.entryPoint)
                && orderDescription.equals(other.orderDescription)
                && orderId.equals(other.orderId)
                && paymentMethod.equals(other.paymentMethod);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.idempotencyKey,
                this.accountId,
                this.entryPoint,
                this.orderDescription,
                this.orderId,
                this.paymentMethod);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EntryPointStage builder() {
        return new Builder();
    }

    public interface EntryPointStage {
        PaymentMethodStage entryPoint(@NotNull String entryPoint);

        Builder from(RequestPaymentValidate other);
    }

    public interface PaymentMethodStage {
        /**
         * <p>Object describing payment method to use for transaction.</p>
         */
        _FinalStage paymentMethod(@NotNull RequestPaymentValidatePaymentMethod paymentMethod);
    }

    public interface _FinalStage {
        RequestPaymentValidate build();

        _FinalStage idempotencyKey(Optional<String> idempotencyKey);

        _FinalStage idempotencyKey(String idempotencyKey);

        _FinalStage accountId(Optional<String> accountId);

        _FinalStage accountId(String accountId);

        _FinalStage orderDescription(Optional<String> orderDescription);

        _FinalStage orderDescription(String orderDescription);

        _FinalStage orderId(Optional<String> orderId);

        _FinalStage orderId(String orderId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EntryPointStage, PaymentMethodStage, _FinalStage {
        private String entryPoint;

        private RequestPaymentValidatePaymentMethod paymentMethod;

        private Optional<String> orderId = Optional.empty();

        private Optional<String> orderDescription = Optional.empty();

        private Optional<String> accountId = Optional.empty();

        private Optional<String> idempotencyKey = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RequestPaymentValidate other) {
            idempotencyKey(other.getIdempotencyKey());
            accountId(other.getAccountId());
            entryPoint(other.getEntryPoint());
            orderDescription(other.getOrderDescription());
            orderId(other.getOrderId());
            paymentMethod(other.getPaymentMethod());
            return this;
        }

        @java.lang.Override
        @JsonSetter("entryPoint")
        public PaymentMethodStage entryPoint(@NotNull String entryPoint) {
            this.entryPoint = Objects.requireNonNull(entryPoint, "entryPoint must not be null");
            return this;
        }

        /**
         * <p>Object describing payment method to use for transaction.</p>
         * <p>Object describing payment method to use for transaction.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("paymentMethod")
        public _FinalStage paymentMethod(@NotNull RequestPaymentValidatePaymentMethod paymentMethod) {
            this.paymentMethod = Objects.requireNonNull(paymentMethod, "paymentMethod must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "orderId", nulls = Nulls.SKIP)
        public _FinalStage orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        @java.lang.Override
        public _FinalStage orderDescription(String orderDescription) {
            this.orderDescription = Optional.ofNullable(orderDescription);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "orderDescription", nulls = Nulls.SKIP)
        public _FinalStage orderDescription(Optional<String> orderDescription) {
            this.orderDescription = orderDescription;
            return this;
        }

        @java.lang.Override
        public _FinalStage accountId(String accountId) {
            this.accountId = Optional.ofNullable(accountId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "accountId", nulls = Nulls.SKIP)
        public _FinalStage accountId(Optional<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        @java.lang.Override
        public _FinalStage idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "idempotencyKey", nulls = Nulls.SKIP)
        public _FinalStage idempotencyKey(Optional<String> idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        @java.lang.Override
        public RequestPaymentValidate build() {
            return new RequestPaymentValidate(
                    idempotencyKey,
                    accountId,
                    entryPoint,
                    orderDescription,
                    orderId,
                    paymentMethod,
                    additionalProperties);
        }
    }
}
