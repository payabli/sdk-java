/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.moneyin;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.payabli.api.core.ClientOptions;
import com.payabli.api.core.MediaTypes;
import com.payabli.api.core.ObjectMappers;
import com.payabli.api.core.PayabliApiApiException;
import com.payabli.api.core.PayabliApiException;
import com.payabli.api.core.PayabliApiHttpResponse;
import com.payabli.api.core.QueryStringMapper;
import com.payabli.api.core.RequestOptions;
import com.payabli.api.errors.BadRequestError;
import com.payabli.api.errors.InternalServerError;
import com.payabli.api.errors.ServiceUnavailableError;
import com.payabli.api.errors.UnauthorizedError;
import com.payabli.api.resources.moneyin.requests.RequestCredit;
import com.payabli.api.resources.moneyin.requests.RequestPayment;
import com.payabli.api.resources.moneyin.requests.RequestPaymentAuthorize;
import com.payabli.api.resources.moneyin.requests.RequestPaymentValidate;
import com.payabli.api.resources.moneyin.requests.RequestRefund;
import com.payabli.api.resources.moneyin.requests.SendReceipt2TransRequest;
import com.payabli.api.resources.moneyin.types.AuthResponse;
import com.payabli.api.resources.moneyin.types.CaptureResponse;
import com.payabli.api.resources.moneyin.types.PayabliApiResponseGetPaid;
import com.payabli.api.resources.moneyin.types.ReceiptResponse;
import com.payabli.api.resources.moneyin.types.RefundResponse;
import com.payabli.api.resources.moneyin.types.RefundWithInstructionsResponse;
import com.payabli.api.resources.moneyin.types.ReverseResponse;
import com.payabli.api.resources.moneyin.types.ValidateResponse;
import com.payabli.api.resources.moneyin.types.VoidResponse;
import com.payabli.api.types.PayabliApiResponse;
import com.payabli.api.types.PayabliApiResponse0;
import com.payabli.api.types.TransactionQueryRecords;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawMoneyInClient {
    protected final ClientOptions clientOptions;

    public RawMoneyInClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Authorize a card transaction. This returns an authorization code and reserves funds for the merchant. Authorized transactions aren't flagged for settlement until <a href="/api-reference/moneyin/capture-an-authorized-transaction">captured</a>.
     * <p><strong>Note</strong>: Only card transactions can be authorized. This endpoint can't be used for ACH transactions.</p>
     */
    public PayabliApiHttpResponse<AuthResponse> authorize(RequestPaymentAuthorize request) {
        return authorize(request, null);
    }

    /**
     * Authorize a card transaction. This returns an authorization code and reserves funds for the merchant. Authorized transactions aren't flagged for settlement until <a href="/api-reference/moneyin/capture-an-authorized-transaction">captured</a>.
     * <p><strong>Note</strong>: Only card transactions can be authorized. This endpoint can't be used for ACH transactions.</p>
     */
    public PayabliApiHttpResponse<AuthResponse> authorize(
            RequestPaymentAuthorize request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyIn/authorize");
        if (request.getForceCustomerCreation().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "forceCustomerCreation",
                    request.getForceCustomerCreation().get(),
                    false);
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        if (request.getIdempotencyKey().isPresent()) {
            _requestBuilder.addHeader(
                    "idempotencyKey", request.getIdempotencyKey().get());
        }
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), AuthResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Capture an <a href="/api-reference/moneyin/authorize-a-transaction">authorized transaction</a> to complete the transaction and move funds from the customer to merchant account.
     */
    public PayabliApiHttpResponse<CaptureResponse> capture(double amount, String transId) {
        return capture(amount, transId, null);
    }

    /**
     * Capture an <a href="/api-reference/moneyin/authorize-a-transaction">authorized transaction</a> to complete the transaction and move funds from the customer to merchant account.
     */
    public PayabliApiHttpResponse<CaptureResponse> capture(
            double amount, String transId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyIn/capture")
                .addPathSegment(transId)
                .addPathSegment(Double.toString(amount))
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), CaptureResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Make a temporary microdeposit in a customer account to verify the customer's ownership and access to the target account. Reverse the microdeposit with <code>reverseCredit</code>.
     * <p>This feature must be enabled by Payabli on a per-merchant basis. Contact support for help.</p>
     */
    public PayabliApiHttpResponse<PayabliApiResponse0> credit(RequestCredit request) {
        return credit(request, null);
    }

    /**
     * Make a temporary microdeposit in a customer account to verify the customer's ownership and access to the target account. Reverse the microdeposit with <code>reverseCredit</code>.
     * <p>This feature must be enabled by Payabli on a per-merchant basis. Contact support for help.</p>
     */
    public PayabliApiHttpResponse<PayabliApiResponse0> credit(RequestCredit request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyIn/makecredit");
        if (request.getForceCustomerCreation().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "forceCustomerCreation",
                    request.getForceCustomerCreation().get(),
                    false);
        }
        Map<String, Object> properties = new HashMap<>();
        if (request.getAccountId().isPresent()) {
            properties.put("accountId", request.getAccountId());
        }
        properties.put("customerData", request.getCustomerData());
        if (request.getEntrypoint().isPresent()) {
            properties.put("entrypoint", request.getEntrypoint());
        }
        if (request.getOrderDescription().isPresent()) {
            properties.put("orderDescription", request.getOrderDescription());
        }
        if (request.getOrderId().isPresent()) {
            properties.put("orderId", request.getOrderId());
        }
        properties.put("paymentDetails", request.getPaymentDetails());
        properties.put("paymentMethod", request.getPaymentMethod());
        if (request.getSource().isPresent()) {
            properties.put("source", request.getSource());
        }
        if (request.getSubdomain().isPresent()) {
            properties.put("subdomain", request.getSubdomain());
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        if (request.getIdempotencyKey().isPresent()) {
            _requestBuilder.addHeader(
                    "idempotencyKey", request.getIdempotencyKey().get());
        }
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), PayabliApiResponse0.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Retrieve a processed transaction's details.
     */
    public PayabliApiHttpResponse<TransactionQueryRecords> details(String transId) {
        return details(transId, null);
    }

    /**
     * Retrieve a processed transaction's details.
     */
    public PayabliApiHttpResponse<TransactionQueryRecords> details(String transId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyIn/details")
                .addPathSegment(transId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), TransactionQueryRecords.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Make a single transaction. This method authorizes and captures a payment in one step.
     */
    public PayabliApiHttpResponse<PayabliApiResponseGetPaid> getpaid(RequestPayment request) {
        return getpaid(request, null);
    }

    /**
     * Make a single transaction. This method authorizes and captures a payment in one step.
     */
    public PayabliApiHttpResponse<PayabliApiResponseGetPaid> getpaid(
            RequestPayment request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyIn/getpaid");
        if (request.getAchValidation().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "achValidation", request.getAchValidation().get(), false);
        }
        if (request.getForceCustomerCreation().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "forceCustomerCreation",
                    request.getForceCustomerCreation().get(),
                    false);
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        if (request.getIdempotencyKey().isPresent()) {
            _requestBuilder.addHeader(
                    "idempotencyKey", request.getIdempotencyKey().get());
        }
        if (request.getValidationCode().isPresent()) {
            _requestBuilder.addHeader(
                    "validationCode", request.getValidationCode().get());
        }
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), PayabliApiResponseGetPaid.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * A reversal either refunds or voids a transaction independent of the transaction's settlement status. Send a reversal request for a transaction, and Payabli automatically determines whether it's a refund or void. You don't need to know whether the transaction is settled or not.
     */
    public PayabliApiHttpResponse<ReverseResponse> reverse(double amount, String transId) {
        return reverse(amount, transId, null);
    }

    /**
     * A reversal either refunds or voids a transaction independent of the transaction's settlement status. Send a reversal request for a transaction, and Payabli automatically determines whether it's a refund or void. You don't need to know whether the transaction is settled or not.
     */
    public PayabliApiHttpResponse<ReverseResponse> reverse(
            double amount, String transId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyIn/reverse")
                .addPathSegment(transId)
                .addPathSegment(Double.toString(amount))
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ReverseResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Refund a transaction that has settled and send money back to the account holder. If a transaction hasn't been settled, void it instead.
     */
    public PayabliApiHttpResponse<RefundResponse> refund(double amount, String transId) {
        return refund(amount, transId, null);
    }

    /**
     * Refund a transaction that has settled and send money back to the account holder. If a transaction hasn't been settled, void it instead.
     */
    public PayabliApiHttpResponse<RefundResponse> refund(double amount, String transId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyIn/refund")
                .addPathSegment(transId)
                .addPathSegment(Double.toString(amount))
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), RefundResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Refunds a settled transaction with split instructions.
     */
    public PayabliApiHttpResponse<RefundWithInstructionsResponse> refundWithInstructions(String transId) {
        return refundWithInstructions(transId, RequestRefund.builder().build());
    }

    /**
     * Refunds a settled transaction with split instructions.
     */
    public PayabliApiHttpResponse<RefundWithInstructionsResponse> refundWithInstructions(
            String transId, RequestRefund request) {
        return refundWithInstructions(transId, request, null);
    }

    /**
     * Refunds a settled transaction with split instructions.
     */
    public PayabliApiHttpResponse<RefundWithInstructionsResponse> refundWithInstructions(
            String transId, RequestRefund request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyIn/refund")
                .addPathSegment(transId)
                .build();
        Map<String, Object> properties = new HashMap<>();
        if (request.getAmount().isPresent()) {
            properties.put("amount", request.getAmount());
        }
        if (request.getIpaddress().isPresent()) {
            properties.put("ipaddress", request.getIpaddress());
        }
        if (request.getOrderDescription().isPresent()) {
            properties.put("orderDescription", request.getOrderDescription());
        }
        if (request.getOrderId().isPresent()) {
            properties.put("orderId", request.getOrderId());
        }
        if (request.getRefundDetails().isPresent()) {
            properties.put("refundDetails", request.getRefundDetails());
        }
        if (request.getSource().isPresent()) {
            properties.put("source", request.getSource());
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        if (request.getIdempotencyKey().isPresent()) {
            _requestBuilder.addHeader(
                    "idempotencyKey", request.getIdempotencyKey().get());
        }
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), RefundWithInstructionsResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Reverse microdeposits that are used to verify customer account ownership and access. The <code>transId</code> value is returned in the success response for the original credit transaction made with <code>api/MoneyIn/makecredit</code>.
     */
    public PayabliApiHttpResponse<PayabliApiResponse> reverseCredit(String transId) {
        return reverseCredit(transId, null);
    }

    /**
     * Reverse microdeposits that are used to verify customer account ownership and access. The <code>transId</code> value is returned in the success response for the original credit transaction made with <code>api/MoneyIn/makecredit</code>.
     */
    public PayabliApiHttpResponse<PayabliApiResponse> reverseCredit(String transId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyIn/reverseCredit")
                .addPathSegment(transId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), PayabliApiResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Send a payment receipt for a transaction.
     */
    public PayabliApiHttpResponse<ReceiptResponse> sendReceipt2Trans(String transId) {
        return sendReceipt2Trans(transId, SendReceipt2TransRequest.builder().build());
    }

    /**
     * Send a payment receipt for a transaction.
     */
    public PayabliApiHttpResponse<ReceiptResponse> sendReceipt2Trans(String transId, SendReceipt2TransRequest request) {
        return sendReceipt2Trans(transId, request, null);
    }

    /**
     * Send a payment receipt for a transaction.
     */
    public PayabliApiHttpResponse<ReceiptResponse> sendReceipt2Trans(
            String transId, SendReceipt2TransRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyIn/sendreceipt")
                .addPathSegment(transId);
        if (request.getEmail().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "email", request.getEmail().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ReceiptResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Validates a card number without running a transaction or authorizing a charge.
     */
    public PayabliApiHttpResponse<ValidateResponse> validate(RequestPaymentValidate request) {
        return validate(request, null);
    }

    /**
     * Validates a card number without running a transaction or authorizing a charge.
     */
    public PayabliApiHttpResponse<ValidateResponse> validate(
            RequestPaymentValidate request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyIn/validate")
                .build();
        Map<String, Object> properties = new HashMap<>();
        if (request.getAccountId().isPresent()) {
            properties.put("accountId", request.getAccountId());
        }
        properties.put("entryPoint", request.getEntryPoint());
        if (request.getOrderDescription().isPresent()) {
            properties.put("orderDescription", request.getOrderDescription());
        }
        if (request.getOrderId().isPresent()) {
            properties.put("orderId", request.getOrderId());
        }
        properties.put("paymentMethod", request.getPaymentMethod());
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        if (request.getIdempotencyKey().isPresent()) {
            _requestBuilder.addHeader(
                    "idempotencyKey", request.getIdempotencyKey().get());
        }
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ValidateResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Cancel a transaction that hasn't been settled yet. Voiding non-captured authorizations prevents future captures. If a transaction has been settled, refund it instead.
     */
    public PayabliApiHttpResponse<VoidResponse> void_(String transId) {
        return void_(transId, null);
    }

    /**
     * Cancel a transaction that hasn't been settled yet. Voiding non-captured authorizations prevents future captures. If a transaction has been settled, refund it instead.
     */
    public PayabliApiHttpResponse<VoidResponse> void_(String transId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyIn/void")
                .addPathSegment(transId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), VoidResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }
}
