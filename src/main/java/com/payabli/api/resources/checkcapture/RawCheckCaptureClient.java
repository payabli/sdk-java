/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.checkcapture;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.payabli.api.core.ClientOptions;
import com.payabli.api.core.MediaTypes;
import com.payabli.api.core.ObjectMappers;
import com.payabli.api.core.PayabliApiApiException;
import com.payabli.api.core.PayabliApiException;
import com.payabli.api.core.PayabliApiHttpResponse;
import com.payabli.api.core.RequestOptions;
import com.payabli.api.errors.BadRequestError;
import com.payabli.api.errors.InternalServerError;
import com.payabli.api.errors.ServiceUnavailableError;
import com.payabli.api.errors.UnauthorizedError;
import com.payabli.api.resources.checkcapture.requests.CheckCaptureRequestBody;
import com.payabli.api.resources.checkcapture.types.CheckCaptureResponse;
import com.payabli.api.types.PayabliApiResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawCheckCaptureClient {
    protected final ClientOptions clientOptions;

    public RawCheckCaptureClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Captures a check for Remote Deposit Capture (RDC) using the provided check images and details. This endpoint handles the OCR extraction of check data including MICR, routing number, account number, and amount. See the <a href="/developers/developer-guides/pay-in-rdc">RDC guide</a> for more details.
     */
    public PayabliApiHttpResponse<CheckCaptureResponse> checkProcessing(CheckCaptureRequestBody request) {
        return checkProcessing(request, null);
    }

    /**
     * Captures a check for Remote Deposit Capture (RDC) using the provided check images and details. This endpoint handles the OCR extraction of check data including MICR, routing number, account number, and amount. See the <a href="/developers/developer-guides/pay-in-rdc">RDC guide</a> for more details.
     */
    public PayabliApiHttpResponse<CheckCaptureResponse> checkProcessing(
            CheckCaptureRequestBody request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("CheckCapture/CheckProcessing")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new PayabliApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), CheckCaptureResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }
}
