/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.subscription.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import com.payabli.api.types.PaymentDetail;
import com.payabli.api.types.ScheduleDetail;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RequestUpdateSchedule.Builder.class)
public final class RequestUpdateSchedule {
    private final Optional<PaymentDetail> paymentDetails;

    private final Optional<ScheduleDetail> scheduleDetails;

    private final Optional<Boolean> setPause;

    private final Map<String, Object> additionalProperties;

    private RequestUpdateSchedule(
            Optional<PaymentDetail> paymentDetails,
            Optional<ScheduleDetail> scheduleDetails,
            Optional<Boolean> setPause,
            Map<String, Object> additionalProperties) {
        this.paymentDetails = paymentDetails;
        this.scheduleDetails = scheduleDetails;
        this.setPause = setPause;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Object describing details of the payment. To skip the payment, set the <code>totalAmount</code> to 0. Payments will be paused until the amount is updated to a non-zero value. When <code>totalAmount</code> is set to 0, the <code>serviceFee</code> must also be set to 0.
     */
    @JsonProperty("paymentDetails")
    public Optional<PaymentDetail> getPaymentDetails() {
        return paymentDetails;
    }

    /**
     * @return Object describing the schedule for subscription
     */
    @JsonProperty("scheduleDetails")
    public Optional<ScheduleDetail> getScheduleDetails() {
        return scheduleDetails;
    }

    @JsonProperty("setPause")
    public Optional<Boolean> getSetPause() {
        return setPause;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RequestUpdateSchedule && equalTo((RequestUpdateSchedule) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RequestUpdateSchedule other) {
        return paymentDetails.equals(other.paymentDetails)
                && scheduleDetails.equals(other.scheduleDetails)
                && setPause.equals(other.setPause);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.paymentDetails, this.scheduleDetails, this.setPause);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<PaymentDetail> paymentDetails = Optional.empty();

        private Optional<ScheduleDetail> scheduleDetails = Optional.empty();

        private Optional<Boolean> setPause = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RequestUpdateSchedule other) {
            paymentDetails(other.getPaymentDetails());
            scheduleDetails(other.getScheduleDetails());
            setPause(other.getSetPause());
            return this;
        }

        /**
         * <p>Object describing details of the payment. To skip the payment, set the <code>totalAmount</code> to 0. Payments will be paused until the amount is updated to a non-zero value. When <code>totalAmount</code> is set to 0, the <code>serviceFee</code> must also be set to 0.</p>
         */
        @JsonSetter(value = "paymentDetails", nulls = Nulls.SKIP)
        public Builder paymentDetails(Optional<PaymentDetail> paymentDetails) {
            this.paymentDetails = paymentDetails;
            return this;
        }

        public Builder paymentDetails(PaymentDetail paymentDetails) {
            this.paymentDetails = Optional.ofNullable(paymentDetails);
            return this;
        }

        /**
         * <p>Object describing the schedule for subscription</p>
         */
        @JsonSetter(value = "scheduleDetails", nulls = Nulls.SKIP)
        public Builder scheduleDetails(Optional<ScheduleDetail> scheduleDetails) {
            this.scheduleDetails = scheduleDetails;
            return this;
        }

        public Builder scheduleDetails(ScheduleDetail scheduleDetails) {
            this.scheduleDetails = Optional.ofNullable(scheduleDetails);
            return this;
        }

        @JsonSetter(value = "setPause", nulls = Nulls.SKIP)
        public Builder setPause(Optional<Boolean> setPause) {
            this.setPause = setPause;
            return this;
        }

        public Builder setPause(Boolean setPause) {
            this.setPause = Optional.ofNullable(setPause);
            return this;
        }

        public RequestUpdateSchedule build() {
            return new RequestUpdateSchedule(paymentDetails, scheduleDetails, setPause, additionalProperties);
        }
    }
}
