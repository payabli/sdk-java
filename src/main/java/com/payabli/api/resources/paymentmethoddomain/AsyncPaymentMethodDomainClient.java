/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.paymentmethoddomain;

import com.payabli.api.core.ClientOptions;
import com.payabli.api.core.RequestOptions;
import com.payabli.api.resources.paymentmethoddomain.requests.AddPaymentMethodDomainRequest;
import com.payabli.api.resources.paymentmethoddomain.requests.ListPaymentMethodDomainsRequest;
import com.payabli.api.resources.paymentmethoddomain.requests.UpdatePaymentMethodDomainRequest;
import com.payabli.api.resources.paymentmethoddomain.types.DeletePaymentMethodDomainResponse;
import com.payabli.api.resources.paymentmethoddomain.types.ListPaymentMethodDomainsResponse;
import com.payabli.api.types.AddPaymentMethodDomainApiResponse;
import com.payabli.api.types.PaymentMethodDomainApiResponse;
import com.payabli.api.types.PaymentMethodDomainGeneralResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncPaymentMethodDomainClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawPaymentMethodDomainClient rawClient;

    public AsyncPaymentMethodDomainClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawPaymentMethodDomainClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawPaymentMethodDomainClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Add a payment method domain to an organization or paypoint.
     */
    public CompletableFuture<AddPaymentMethodDomainApiResponse> addPaymentMethodDomain() {
        return this.rawClient.addPaymentMethodDomain().thenApply(response -> response.body());
    }

    /**
     * Add a payment method domain to an organization or paypoint.
     */
    public CompletableFuture<AddPaymentMethodDomainApiResponse> addPaymentMethodDomain(
            AddPaymentMethodDomainRequest request) {
        return this.rawClient.addPaymentMethodDomain(request).thenApply(response -> response.body());
    }

    /**
     * Add a payment method domain to an organization or paypoint.
     */
    public CompletableFuture<AddPaymentMethodDomainApiResponse> addPaymentMethodDomain(
            AddPaymentMethodDomainRequest request, RequestOptions requestOptions) {
        return this.rawClient.addPaymentMethodDomain(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Cascades a payment method domain to all child entities. All paypoints and suborganization under this parent will inherit this domain and its settings.
     */
    public CompletableFuture<PaymentMethodDomainGeneralResponse> cascadePaymentMethodDomain(String domainId) {
        return this.rawClient.cascadePaymentMethodDomain(domainId).thenApply(response -> response.body());
    }

    /**
     * Cascades a payment method domain to all child entities. All paypoints and suborganization under this parent will inherit this domain and its settings.
     */
    public CompletableFuture<PaymentMethodDomainGeneralResponse> cascadePaymentMethodDomain(
            String domainId, RequestOptions requestOptions) {
        return this.rawClient
                .cascadePaymentMethodDomain(domainId, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Delete a payment method domain. You can't delete an inherited domain, you must delete a domain at the organization level.
     */
    public CompletableFuture<DeletePaymentMethodDomainResponse> deletePaymentMethodDomain(String domainId) {
        return this.rawClient.deletePaymentMethodDomain(domainId).thenApply(response -> response.body());
    }

    /**
     * Delete a payment method domain. You can't delete an inherited domain, you must delete a domain at the organization level.
     */
    public CompletableFuture<DeletePaymentMethodDomainResponse> deletePaymentMethodDomain(
            String domainId, RequestOptions requestOptions) {
        return this.rawClient
                .deletePaymentMethodDomain(domainId, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Get the details for a payment method domain.
     */
    public CompletableFuture<PaymentMethodDomainApiResponse> getPaymentMethodDomain(String domainId) {
        return this.rawClient.getPaymentMethodDomain(domainId).thenApply(response -> response.body());
    }

    /**
     * Get the details for a payment method domain.
     */
    public CompletableFuture<PaymentMethodDomainApiResponse> getPaymentMethodDomain(
            String domainId, RequestOptions requestOptions) {
        return this.rawClient.getPaymentMethodDomain(domainId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Get a list of payment method domains that belong to a PSP, organization, or paypoint.
     */
    public CompletableFuture<ListPaymentMethodDomainsResponse> listPaymentMethodDomains() {
        return this.rawClient.listPaymentMethodDomains().thenApply(response -> response.body());
    }

    /**
     * Get a list of payment method domains that belong to a PSP, organization, or paypoint.
     */
    public CompletableFuture<ListPaymentMethodDomainsResponse> listPaymentMethodDomains(
            ListPaymentMethodDomainsRequest request) {
        return this.rawClient.listPaymentMethodDomains(request).thenApply(response -> response.body());
    }

    /**
     * Get a list of payment method domains that belong to a PSP, organization, or paypoint.
     */
    public CompletableFuture<ListPaymentMethodDomainsResponse> listPaymentMethodDomains(
            ListPaymentMethodDomainsRequest request, RequestOptions requestOptions) {
        return this.rawClient.listPaymentMethodDomains(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Update a payment method domain's configuration values.
     */
    public CompletableFuture<PaymentMethodDomainGeneralResponse> updatePaymentMethodDomain(String domainId) {
        return this.rawClient.updatePaymentMethodDomain(domainId).thenApply(response -> response.body());
    }

    /**
     * Update a payment method domain's configuration values.
     */
    public CompletableFuture<PaymentMethodDomainGeneralResponse> updatePaymentMethodDomain(
            String domainId, UpdatePaymentMethodDomainRequest request) {
        return this.rawClient.updatePaymentMethodDomain(domainId, request).thenApply(response -> response.body());
    }

    /**
     * Update a payment method domain's configuration values.
     */
    public CompletableFuture<PaymentMethodDomainGeneralResponse> updatePaymentMethodDomain(
            String domainId, UpdatePaymentMethodDomainRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .updatePaymentMethodDomain(domainId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Verify a new payment method domain. If verification is successful, Apple Pay is automatically activated for the domain.
     */
    public CompletableFuture<PaymentMethodDomainGeneralResponse> verifyPaymentMethodDomain(String domainId) {
        return this.rawClient.verifyPaymentMethodDomain(domainId).thenApply(response -> response.body());
    }

    /**
     * Verify a new payment method domain. If verification is successful, Apple Pay is automatically activated for the domain.
     */
    public CompletableFuture<PaymentMethodDomainGeneralResponse> verifyPaymentMethodDomain(
            String domainId, RequestOptions requestOptions) {
        return this.rawClient
                .verifyPaymentMethodDomain(domainId, requestOptions)
                .thenApply(response -> response.body());
    }
}
