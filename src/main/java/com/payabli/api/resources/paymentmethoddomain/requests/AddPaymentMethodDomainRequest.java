/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.paymentmethoddomain.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import com.payabli.api.resources.paymentmethoddomain.types.AddPaymentMethodDomainRequestApplePay;
import com.payabli.api.resources.paymentmethoddomain.types.AddPaymentMethodDomainRequestGooglePay;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AddPaymentMethodDomainRequest.Builder.class)
public final class AddPaymentMethodDomainRequest {
    private final Optional<AddPaymentMethodDomainRequestApplePay> applePay;

    private final Optional<AddPaymentMethodDomainRequestGooglePay> googlePay;

    private final Optional<String> domainName;

    private final Optional<Long> entityId;

    private final Optional<String> entityType;

    private final Map<String, Object> additionalProperties;

    private AddPaymentMethodDomainRequest(
            Optional<AddPaymentMethodDomainRequestApplePay> applePay,
            Optional<AddPaymentMethodDomainRequestGooglePay> googlePay,
            Optional<String> domainName,
            Optional<Long> entityId,
            Optional<String> entityType,
            Map<String, Object> additionalProperties) {
        this.applePay = applePay;
        this.googlePay = googlePay;
        this.domainName = domainName;
        this.entityId = entityId;
        this.entityType = entityType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Apple Pay configuration information.
     */
    @JsonProperty("applePay")
    public Optional<AddPaymentMethodDomainRequestApplePay> getApplePay() {
        return applePay;
    }

    /**
     * @return Google Pay configuration information.
     */
    @JsonProperty("googlePay")
    public Optional<AddPaymentMethodDomainRequestGooglePay> getGooglePay() {
        return googlePay;
    }

    @JsonProperty("domainName")
    public Optional<String> getDomainName() {
        return domainName;
    }

    @JsonProperty("entityId")
    public Optional<Long> getEntityId() {
        return entityId;
    }

    @JsonProperty("entityType")
    public Optional<String> getEntityType() {
        return entityType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AddPaymentMethodDomainRequest && equalTo((AddPaymentMethodDomainRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AddPaymentMethodDomainRequest other) {
        return applePay.equals(other.applePay)
                && googlePay.equals(other.googlePay)
                && domainName.equals(other.domainName)
                && entityId.equals(other.entityId)
                && entityType.equals(other.entityType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.applePay, this.googlePay, this.domainName, this.entityId, this.entityType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<AddPaymentMethodDomainRequestApplePay> applePay = Optional.empty();

        private Optional<AddPaymentMethodDomainRequestGooglePay> googlePay = Optional.empty();

        private Optional<String> domainName = Optional.empty();

        private Optional<Long> entityId = Optional.empty();

        private Optional<String> entityType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AddPaymentMethodDomainRequest other) {
            applePay(other.getApplePay());
            googlePay(other.getGooglePay());
            domainName(other.getDomainName());
            entityId(other.getEntityId());
            entityType(other.getEntityType());
            return this;
        }

        /**
         * <p>Apple Pay configuration information.</p>
         */
        @JsonSetter(value = "applePay", nulls = Nulls.SKIP)
        public Builder applePay(Optional<AddPaymentMethodDomainRequestApplePay> applePay) {
            this.applePay = applePay;
            return this;
        }

        public Builder applePay(AddPaymentMethodDomainRequestApplePay applePay) {
            this.applePay = Optional.ofNullable(applePay);
            return this;
        }

        /**
         * <p>Google Pay configuration information.</p>
         */
        @JsonSetter(value = "googlePay", nulls = Nulls.SKIP)
        public Builder googlePay(Optional<AddPaymentMethodDomainRequestGooglePay> googlePay) {
            this.googlePay = googlePay;
            return this;
        }

        public Builder googlePay(AddPaymentMethodDomainRequestGooglePay googlePay) {
            this.googlePay = Optional.ofNullable(googlePay);
            return this;
        }

        @JsonSetter(value = "domainName", nulls = Nulls.SKIP)
        public Builder domainName(Optional<String> domainName) {
            this.domainName = domainName;
            return this;
        }

        public Builder domainName(String domainName) {
            this.domainName = Optional.ofNullable(domainName);
            return this;
        }

        @JsonSetter(value = "entityId", nulls = Nulls.SKIP)
        public Builder entityId(Optional<Long> entityId) {
            this.entityId = entityId;
            return this;
        }

        public Builder entityId(Long entityId) {
            this.entityId = Optional.ofNullable(entityId);
            return this;
        }

        @JsonSetter(value = "entityType", nulls = Nulls.SKIP)
        public Builder entityType(Optional<String> entityType) {
            this.entityType = entityType;
            return this;
        }

        public Builder entityType(String entityType) {
            this.entityType = Optional.ofNullable(entityType);
            return this;
        }

        public AddPaymentMethodDomainRequest build() {
            return new AddPaymentMethodDomainRequest(
                    applePay, googlePay, domainName, entityId, entityType, additionalProperties);
        }
    }
}
