/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.statistic;

import com.payabli.api.core.ClientOptions;
import com.payabli.api.core.RequestOptions;
import com.payabli.api.resources.statistic.requests.BasicStatsRequest;
import com.payabli.api.resources.statistic.requests.CustomerBasicStatsRequest;
import com.payabli.api.resources.statistic.requests.SubStatsRequest;
import com.payabli.api.resources.statistic.requests.VendorBasicStatsRequest;
import com.payabli.api.resources.statistic.types.StatBasicQueryRecord;
import com.payabli.api.resources.statistic.types.StatisticsVendorQueryRecord;
import com.payabli.api.resources.statistic.types.SubscriptionStatsQueryRecord;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class AsyncStatisticClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawStatisticClient rawClient;

    public AsyncStatisticClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawStatisticClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawStatisticClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Retrieves the basic statistics for an organization or a paypoint, for a given time period, grouped by a particular frequency.
     */
    public CompletableFuture<List<StatBasicQueryRecord>> basicStats(long entryId, String freq, int level, String mode) {
        return this.rawClient.basicStats(entryId, freq, level, mode).thenApply(response -> response.body());
    }

    /**
     * Retrieves the basic statistics for an organization or a paypoint, for a given time period, grouped by a particular frequency.
     */
    public CompletableFuture<List<StatBasicQueryRecord>> basicStats(
            long entryId, String freq, int level, String mode, BasicStatsRequest request) {
        return this.rawClient.basicStats(entryId, freq, level, mode, request).thenApply(response -> response.body());
    }

    /**
     * Retrieves the basic statistics for an organization or a paypoint, for a given time period, grouped by a particular frequency.
     */
    public CompletableFuture<List<StatBasicQueryRecord>> basicStats(
            long entryId,
            String freq,
            int level,
            String mode,
            BasicStatsRequest request,
            RequestOptions requestOptions) {
        return this.rawClient
                .basicStats(entryId, freq, level, mode, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Retrieves the basic statistics for a customer for a specific time period, grouped by a selected frequency.
     */
    public CompletableFuture<List<SubscriptionStatsQueryRecord>> customerBasicStats(
            int customerId, String freq, String mode) {
        return this.rawClient.customerBasicStats(customerId, freq, mode).thenApply(response -> response.body());
    }

    /**
     * Retrieves the basic statistics for a customer for a specific time period, grouped by a selected frequency.
     */
    public CompletableFuture<List<SubscriptionStatsQueryRecord>> customerBasicStats(
            int customerId, String freq, String mode, CustomerBasicStatsRequest request) {
        return this.rawClient
                .customerBasicStats(customerId, freq, mode, request)
                .thenApply(response -> response.body());
    }

    /**
     * Retrieves the basic statistics for a customer for a specific time period, grouped by a selected frequency.
     */
    public CompletableFuture<List<SubscriptionStatsQueryRecord>> customerBasicStats(
            int customerId,
            String freq,
            String mode,
            CustomerBasicStatsRequest request,
            RequestOptions requestOptions) {
        return this.rawClient
                .customerBasicStats(customerId, freq, mode, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Retrieves the subscription statistics for a given interval for a paypoint or organization.
     */
    public CompletableFuture<List<StatBasicQueryRecord>> subStats(long entryId, String interval, int level) {
        return this.rawClient.subStats(entryId, interval, level).thenApply(response -> response.body());
    }

    /**
     * Retrieves the subscription statistics for a given interval for a paypoint or organization.
     */
    public CompletableFuture<List<StatBasicQueryRecord>> subStats(
            long entryId, String interval, int level, SubStatsRequest request) {
        return this.rawClient.subStats(entryId, interval, level, request).thenApply(response -> response.body());
    }

    /**
     * Retrieves the subscription statistics for a given interval for a paypoint or organization.
     */
    public CompletableFuture<List<StatBasicQueryRecord>> subStats(
            long entryId, String interval, int level, SubStatsRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .subStats(entryId, interval, level, request, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Retrieve the basic statistics about a vendor for a given time period, grouped by frequency.
     */
    public CompletableFuture<List<StatisticsVendorQueryRecord>> vendorBasicStats(
            String freq, int idVendor, String mode) {
        return this.rawClient.vendorBasicStats(freq, idVendor, mode).thenApply(response -> response.body());
    }

    /**
     * Retrieve the basic statistics about a vendor for a given time period, grouped by frequency.
     */
    public CompletableFuture<List<StatisticsVendorQueryRecord>> vendorBasicStats(
            String freq, int idVendor, String mode, VendorBasicStatsRequest request) {
        return this.rawClient.vendorBasicStats(freq, idVendor, mode, request).thenApply(response -> response.body());
    }

    /**
     * Retrieve the basic statistics about a vendor for a given time period, grouped by frequency.
     */
    public CompletableFuture<List<StatisticsVendorQueryRecord>> vendorBasicStats(
            String freq, int idVendor, String mode, VendorBasicStatsRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .vendorBasicStats(freq, idVendor, mode, request, requestOptions)
                .thenApply(response -> response.body());
    }
}
