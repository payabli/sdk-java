/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.statistic.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = StatBasicQueryRecord.Builder.class)
public final class StatBasicQueryRecord {
    private final String statX;

    private final int inTransactions;

    private final double inTransactionsVolume;

    private final Map<String, Object> additionalProperties;

    private StatBasicQueryRecord(
            String statX, int inTransactions, double inTransactionsVolume, Map<String, Object> additionalProperties) {
        this.statX = statX;
        this.inTransactions = inTransactions;
        this.inTransactionsVolume = inTransactionsVolume;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Statistical grouping identifier
     */
    @JsonProperty("statX")
    public String getStatX() {
        return statX;
    }

    /**
     * @return Number of incoming transactions
     */
    @JsonProperty("inTransactions")
    public int getInTransactions() {
        return inTransactions;
    }

    /**
     * @return Volume of incoming transactions
     */
    @JsonProperty("inTransactionsVolume")
    public double getInTransactionsVolume() {
        return inTransactionsVolume;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof StatBasicQueryRecord && equalTo((StatBasicQueryRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(StatBasicQueryRecord other) {
        return statX.equals(other.statX)
                && inTransactions == other.inTransactions
                && inTransactionsVolume == other.inTransactionsVolume;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.statX, this.inTransactions, this.inTransactionsVolume);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StatXStage builder() {
        return new Builder();
    }

    public interface StatXStage {
        /**
         * <p>Statistical grouping identifier</p>
         */
        InTransactionsStage statX(@NotNull String statX);

        Builder from(StatBasicQueryRecord other);
    }

    public interface InTransactionsStage {
        /**
         * <p>Number of incoming transactions</p>
         */
        InTransactionsVolumeStage inTransactions(int inTransactions);
    }

    public interface InTransactionsVolumeStage {
        /**
         * <p>Volume of incoming transactions</p>
         */
        _FinalStage inTransactionsVolume(double inTransactionsVolume);
    }

    public interface _FinalStage {
        StatBasicQueryRecord build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements StatXStage, InTransactionsStage, InTransactionsVolumeStage, _FinalStage {
        private String statX;

        private int inTransactions;

        private double inTransactionsVolume;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(StatBasicQueryRecord other) {
            statX(other.getStatX());
            inTransactions(other.getInTransactions());
            inTransactionsVolume(other.getInTransactionsVolume());
            return this;
        }

        /**
         * <p>Statistical grouping identifier</p>
         * <p>Statistical grouping identifier</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("statX")
        public InTransactionsStage statX(@NotNull String statX) {
            this.statX = Objects.requireNonNull(statX, "statX must not be null");
            return this;
        }

        /**
         * <p>Number of incoming transactions</p>
         * <p>Number of incoming transactions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("inTransactions")
        public InTransactionsVolumeStage inTransactions(int inTransactions) {
            this.inTransactions = inTransactions;
            return this;
        }

        /**
         * <p>Volume of incoming transactions</p>
         * <p>Volume of incoming transactions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("inTransactionsVolume")
        public _FinalStage inTransactionsVolume(double inTransactionsVolume) {
            this.inTransactionsVolume = inTransactionsVolume;
            return this;
        }

        @java.lang.Override
        public StatBasicQueryRecord build() {
            return new StatBasicQueryRecord(statX, inTransactions, inTransactionsVolume, additionalProperties);
        }
    }
}
