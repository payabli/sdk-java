/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.resources.statistic.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SubscriptionStatsQueryRecord.Builder.class)
public final class SubscriptionStatsQueryRecord {
    private final String interval;

    private final int count;

    private final double volume;

    private final Map<String, Object> additionalProperties;

    private SubscriptionStatsQueryRecord(
            String interval, int count, double volume, Map<String, Object> additionalProperties) {
        this.interval = interval;
        this.count = count;
        this.volume = volume;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Time interval identifier
     */
    @JsonProperty("interval")
    public String getInterval() {
        return interval;
    }

    /**
     * @return Number of subscriptions
     */
    @JsonProperty("count")
    public int getCount() {
        return count;
    }

    /**
     * @return Subscription volume
     */
    @JsonProperty("volume")
    public double getVolume() {
        return volume;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SubscriptionStatsQueryRecord && equalTo((SubscriptionStatsQueryRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SubscriptionStatsQueryRecord other) {
        return interval.equals(other.interval) && count == other.count && volume == other.volume;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.interval, this.count, this.volume);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IntervalStage builder() {
        return new Builder();
    }

    public interface IntervalStage {
        /**
         * <p>Time interval identifier</p>
         */
        CountStage interval(@NotNull String interval);

        Builder from(SubscriptionStatsQueryRecord other);
    }

    public interface CountStage {
        /**
         * <p>Number of subscriptions</p>
         */
        VolumeStage count(int count);
    }

    public interface VolumeStage {
        /**
         * <p>Subscription volume</p>
         */
        _FinalStage volume(double volume);
    }

    public interface _FinalStage {
        SubscriptionStatsQueryRecord build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IntervalStage, CountStage, VolumeStage, _FinalStage {
        private String interval;

        private int count;

        private double volume;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(SubscriptionStatsQueryRecord other) {
            interval(other.getInterval());
            count(other.getCount());
            volume(other.getVolume());
            return this;
        }

        /**
         * <p>Time interval identifier</p>
         * <p>Time interval identifier</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("interval")
        public CountStage interval(@NotNull String interval) {
            this.interval = Objects.requireNonNull(interval, "interval must not be null");
            return this;
        }

        /**
         * <p>Number of subscriptions</p>
         * <p>Number of subscriptions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("count")
        public VolumeStage count(int count) {
            this.count = count;
            return this;
        }

        /**
         * <p>Subscription volume</p>
         * <p>Subscription volume</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("volume")
        public _FinalStage volume(double volume) {
            this.volume = volume;
            return this;
        }

        @java.lang.Override
        public SubscriptionStatsQueryRecord build() {
            return new SubscriptionStatsQueryRecord(interval, count, volume, additionalProperties);
        }
    }
}
