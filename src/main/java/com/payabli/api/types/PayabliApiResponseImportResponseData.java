/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PayabliApiResponseImportResponseData.Builder.class)
public final class PayabliApiResponseImportResponseData {
    private final Optional<Integer> added;

    private final Optional<List<String>> errors;

    private final Optional<Integer> rejected;

    private final Map<String, Object> additionalProperties;

    private PayabliApiResponseImportResponseData(
            Optional<Integer> added,
            Optional<List<String>> errors,
            Optional<Integer> rejected,
            Map<String, Object> additionalProperties) {
        this.added = added;
        this.errors = errors;
        this.rejected = rejected;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The number of records successfully added.
     */
    @JsonProperty("added")
    public Optional<Integer> getAdded() {
        return added;
    }

    /**
     * @return List of errors, if any.
     */
    @JsonProperty("errors")
    public Optional<List<String>> getErrors() {
        return errors;
    }

    /**
     * @return The number of records that were rejected.
     */
    @JsonProperty("rejected")
    public Optional<Integer> getRejected() {
        return rejected;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PayabliApiResponseImportResponseData
                && equalTo((PayabliApiResponseImportResponseData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PayabliApiResponseImportResponseData other) {
        return added.equals(other.added) && errors.equals(other.errors) && rejected.equals(other.rejected);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.added, this.errors, this.rejected);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> added = Optional.empty();

        private Optional<List<String>> errors = Optional.empty();

        private Optional<Integer> rejected = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PayabliApiResponseImportResponseData other) {
            added(other.getAdded());
            errors(other.getErrors());
            rejected(other.getRejected());
            return this;
        }

        /**
         * <p>The number of records successfully added.</p>
         */
        @JsonSetter(value = "added", nulls = Nulls.SKIP)
        public Builder added(Optional<Integer> added) {
            this.added = added;
            return this;
        }

        public Builder added(Integer added) {
            this.added = Optional.ofNullable(added);
            return this;
        }

        /**
         * <p>List of errors, if any.</p>
         */
        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public Builder errors(Optional<List<String>> errors) {
            this.errors = errors;
            return this;
        }

        public Builder errors(List<String> errors) {
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        /**
         * <p>The number of records that were rejected.</p>
         */
        @JsonSetter(value = "rejected", nulls = Nulls.SKIP)
        public Builder rejected(Optional<Integer> rejected) {
            this.rejected = rejected;
            return this;
        }

        public Builder rejected(Integer rejected) {
            this.rejected = Optional.ofNullable(rejected);
            return this;
        }

        public PayabliApiResponseImportResponseData build() {
            return new PayabliApiResponseImportResponseData(added, errors, rejected, additionalProperties);
        }
    }
}
