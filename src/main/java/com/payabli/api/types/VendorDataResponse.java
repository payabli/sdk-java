/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VendorDataResponse.Builder.class)
public final class VendorDataResponse {
    private final String vendorNumber;

    private final String name1;

    private final String name2;

    private final String ein;

    private final String phone;

    private final String email;

    private final Optional<String> remitEmail;

    private final String address1;

    private final String address2;

    private final String city;

    private final String state;

    private final String zip;

    private final String country;

    private final String mcc;

    private final String locationCode;

    private final List<ContactsResponse> contacts;

    private final VendorResponseBillingData billingData;

    private final VendorDataResponsePaymentMethod paymentMethod;

    private final Optional<Integer> vendorStatus;

    private final Optional<Integer> vendorId;

    private final Optional<String> enrollmentStatus;

    private final VendorResponseSummary summary;

    private final String paypointLegalname;

    private final String paypointDbaname;

    private final String paypointEntryname;

    private final String parentOrgName;

    private final int parentOrgId;

    private final OffsetDateTime createdDate;

    private final OffsetDateTime lastUpdated;

    private final String remitAddress1;

    private final String remitAddress2;

    private final String remitCity;

    private final String remitState;

    private final String remitZip;

    private final String remitCountry;

    private final String payeeName1;

    private final String payeeName2;

    private final String customField1;

    private final String customField2;

    private final Optional<String> customerVendorAccount;

    private final long internalReferenceId;

    private final Map<String, String> additionalData;

    private final String externalPaypointId;

    private final List<VendorResponseStoredMethod> storedMethods;

    private final Map<String, Object> additionalProperties;

    private VendorDataResponse(
            String vendorNumber,
            String name1,
            String name2,
            String ein,
            String phone,
            String email,
            Optional<String> remitEmail,
            String address1,
            String address2,
            String city,
            String state,
            String zip,
            String country,
            String mcc,
            String locationCode,
            List<ContactsResponse> contacts,
            VendorResponseBillingData billingData,
            VendorDataResponsePaymentMethod paymentMethod,
            Optional<Integer> vendorStatus,
            Optional<Integer> vendorId,
            Optional<String> enrollmentStatus,
            VendorResponseSummary summary,
            String paypointLegalname,
            String paypointDbaname,
            String paypointEntryname,
            String parentOrgName,
            int parentOrgId,
            OffsetDateTime createdDate,
            OffsetDateTime lastUpdated,
            String remitAddress1,
            String remitAddress2,
            String remitCity,
            String remitState,
            String remitZip,
            String remitCountry,
            String payeeName1,
            String payeeName2,
            String customField1,
            String customField2,
            Optional<String> customerVendorAccount,
            long internalReferenceId,
            Map<String, String> additionalData,
            String externalPaypointId,
            List<VendorResponseStoredMethod> storedMethods,
            Map<String, Object> additionalProperties) {
        this.vendorNumber = vendorNumber;
        this.name1 = name1;
        this.name2 = name2;
        this.ein = ein;
        this.phone = phone;
        this.email = email;
        this.remitEmail = remitEmail;
        this.address1 = address1;
        this.address2 = address2;
        this.city = city;
        this.state = state;
        this.zip = zip;
        this.country = country;
        this.mcc = mcc;
        this.locationCode = locationCode;
        this.contacts = contacts;
        this.billingData = billingData;
        this.paymentMethod = paymentMethod;
        this.vendorStatus = vendorStatus;
        this.vendorId = vendorId;
        this.enrollmentStatus = enrollmentStatus;
        this.summary = summary;
        this.paypointLegalname = paypointLegalname;
        this.paypointDbaname = paypointDbaname;
        this.paypointEntryname = paypointEntryname;
        this.parentOrgName = parentOrgName;
        this.parentOrgId = parentOrgId;
        this.createdDate = createdDate;
        this.lastUpdated = lastUpdated;
        this.remitAddress1 = remitAddress1;
        this.remitAddress2 = remitAddress2;
        this.remitCity = remitCity;
        this.remitState = remitState;
        this.remitZip = remitZip;
        this.remitCountry = remitCountry;
        this.payeeName1 = payeeName1;
        this.payeeName2 = payeeName2;
        this.customField1 = customField1;
        this.customField2 = customField2;
        this.customerVendorAccount = customerVendorAccount;
        this.internalReferenceId = internalReferenceId;
        this.additionalData = additionalData;
        this.externalPaypointId = externalPaypointId;
        this.storedMethods = storedMethods;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("VendorNumber")
    public String getVendorNumber() {
        return vendorNumber;
    }

    /**
     * @return Primary name for vendor.
     */
    @JsonProperty("Name1")
    public String getName1() {
        return name1;
    }

    /**
     * @return Secondary name for vendor.
     */
    @JsonProperty("Name2")
    public String getName2() {
        return name2;
    }

    /**
     * @return EIN/Tax ID for vendor. In responses, this field is masked, and looks like: <code>&quot;ein&quot;: &quot;XXXXX6789&quot;</code>.
     */
    @JsonProperty("EIN")
    public String getEin() {
        return ein;
    }

    /**
     * @return Vendor's phone number.
     */
    @JsonProperty("Phone")
    public String getPhone() {
        return phone;
    }

    @JsonProperty("Email")
    public String getEmail() {
        return email;
    }

    /**
     * @return Email address for remittance
     */
    @JsonProperty("RemitEmail")
    public Optional<String> getRemitEmail() {
        return remitEmail;
    }

    /**
     * @return Vendor's address.
     */
    @JsonProperty("Address1")
    public String getAddress1() {
        return address1;
    }

    /**
     * @return Additional line for vendor's address.
     */
    @JsonProperty("Address2")
    public String getAddress2() {
        return address2;
    }

    /**
     * @return Vendor's city.
     */
    @JsonProperty("City")
    public String getCity() {
        return city;
    }

    /**
     * @return Vendor's state. Must be a two-character state code.
     */
    @JsonProperty("State")
    public String getState() {
        return state;
    }

    /**
     * @return Vendor's zip code.
     */
    @JsonProperty("Zip")
    public String getZip() {
        return zip;
    }

    /**
     * @return Vendor's country. Payabli supports only US and Canadian vendors.
     */
    @JsonProperty("Country")
    public String getCountry() {
        return country;
    }

    @JsonProperty("Mcc")
    public String getMcc() {
        return mcc;
    }

    /**
     * @return Additional location code used to identify the vendor.
     */
    @JsonProperty("LocationCode")
    public String getLocationCode() {
        return locationCode;
    }

    /**
     * @return Array of objects describing the vendor's contacts.
     */
    @JsonProperty("Contacts")
    public List<ContactsResponse> getContacts() {
        return contacts;
    }

    /**
     * @return Object containing vendor's bank information.
     */
    @JsonProperty("BillingData")
    public VendorResponseBillingData getBillingData() {
        return billingData;
    }

    /**
     * @return Preferred payment method for vendor.
     */
    @JsonProperty("PaymentMethod")
    public VendorDataResponsePaymentMethod getPaymentMethod() {
        return paymentMethod;
    }

    @JsonProperty("VendorStatus")
    public Optional<Integer> getVendorStatus() {
        return vendorStatus;
    }

    @JsonProperty("VendorId")
    public Optional<Integer> getVendorId() {
        return vendorId;
    }

    /**
     * @return Vendor enrollment status
     */
    @JsonProperty("EnrollmentStatus")
    public Optional<String> getEnrollmentStatus() {
        return enrollmentStatus;
    }

    /**
     * @return Vendor bill summary statistics
     */
    @JsonProperty("Summary")
    public VendorResponseSummary getSummary() {
        return summary;
    }

    /**
     * @return Legal name of the paypoint
     */
    @JsonProperty("PaypointLegalname")
    public String getPaypointLegalname() {
        return paypointLegalname;
    }

    /**
     * @return DBA name of the paypoint
     */
    @JsonProperty("PaypointDbaname")
    public String getPaypointDbaname() {
        return paypointDbaname;
    }

    /**
     * @return Entry name of the paypoint
     */
    @JsonProperty("PaypointEntryname")
    public String getPaypointEntryname() {
        return paypointEntryname;
    }

    /**
     * @return Name of the parent organization
     */
    @JsonProperty("ParentOrgName")
    public String getParentOrgName() {
        return parentOrgName;
    }

    /**
     * @return ID of the parent organization
     */
    @JsonProperty("ParentOrgId")
    public int getParentOrgId() {
        return parentOrgId;
    }

    /**
     * @return Date when vendor was created
     */
    @JsonProperty("CreatedDate")
    public OffsetDateTime getCreatedDate() {
        return createdDate;
    }

    /**
     * @return Date when vendor was last updated
     */
    @JsonProperty("LastUpdated")
    public OffsetDateTime getLastUpdated() {
        return lastUpdated;
    }

    @JsonProperty("remitAddress1")
    public String getRemitAddress1() {
        return remitAddress1;
    }

    @JsonProperty("remitAddress2")
    public String getRemitAddress2() {
        return remitAddress2;
    }

    @JsonProperty("remitCity")
    public String getRemitCity() {
        return remitCity;
    }

    @JsonProperty("remitState")
    public String getRemitState() {
        return remitState;
    }

    @JsonProperty("remitZip")
    public String getRemitZip() {
        return remitZip;
    }

    @JsonProperty("remitCountry")
    public String getRemitCountry() {
        return remitCountry;
    }

    @JsonProperty("payeeName1")
    public String getPayeeName1() {
        return payeeName1;
    }

    @JsonProperty("payeeName2")
    public String getPayeeName2() {
        return payeeName2;
    }

    /**
     * @return Custom field 1 for vendor
     */
    @JsonProperty("customField1")
    public String getCustomField1() {
        return customField1;
    }

    /**
     * @return Custom field 2 for vendor
     */
    @JsonProperty("customField2")
    public String getCustomField2() {
        return customField2;
    }

    /**
     * @return Account number of paypoint in the Vendor side.
     */
    @JsonProperty("customerVendorAccount")
    public Optional<String> getCustomerVendorAccount() {
        return customerVendorAccount;
    }

    @JsonProperty("InternalReferenceId")
    public long getInternalReferenceId() {
        return internalReferenceId;
    }

    @JsonProperty("additionalData")
    public Map<String, String> getAdditionalData() {
        return additionalData;
    }

    /**
     * @return External paypoint identifier
     */
    @JsonProperty("externalPaypointID")
    public String getExternalPaypointId() {
        return externalPaypointId;
    }

    /**
     * @return Array of stored payment methods for vendor
     */
    @JsonProperty("StoredMethods")
    public List<VendorResponseStoredMethod> getStoredMethods() {
        return storedMethods;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VendorDataResponse && equalTo((VendorDataResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VendorDataResponse other) {
        return vendorNumber.equals(other.vendorNumber)
                && name1.equals(other.name1)
                && name2.equals(other.name2)
                && ein.equals(other.ein)
                && phone.equals(other.phone)
                && email.equals(other.email)
                && remitEmail.equals(other.remitEmail)
                && address1.equals(other.address1)
                && address2.equals(other.address2)
                && city.equals(other.city)
                && state.equals(other.state)
                && zip.equals(other.zip)
                && country.equals(other.country)
                && mcc.equals(other.mcc)
                && locationCode.equals(other.locationCode)
                && contacts.equals(other.contacts)
                && billingData.equals(other.billingData)
                && paymentMethod.equals(other.paymentMethod)
                && vendorStatus.equals(other.vendorStatus)
                && vendorId.equals(other.vendorId)
                && enrollmentStatus.equals(other.enrollmentStatus)
                && summary.equals(other.summary)
                && paypointLegalname.equals(other.paypointLegalname)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointEntryname.equals(other.paypointEntryname)
                && parentOrgName.equals(other.parentOrgName)
                && parentOrgId == other.parentOrgId
                && createdDate.equals(other.createdDate)
                && lastUpdated.equals(other.lastUpdated)
                && remitAddress1.equals(other.remitAddress1)
                && remitAddress2.equals(other.remitAddress2)
                && remitCity.equals(other.remitCity)
                && remitState.equals(other.remitState)
                && remitZip.equals(other.remitZip)
                && remitCountry.equals(other.remitCountry)
                && payeeName1.equals(other.payeeName1)
                && payeeName2.equals(other.payeeName2)
                && customField1.equals(other.customField1)
                && customField2.equals(other.customField2)
                && customerVendorAccount.equals(other.customerVendorAccount)
                && internalReferenceId == other.internalReferenceId
                && additionalData.equals(other.additionalData)
                && externalPaypointId.equals(other.externalPaypointId)
                && storedMethods.equals(other.storedMethods);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.vendorNumber,
                this.name1,
                this.name2,
                this.ein,
                this.phone,
                this.email,
                this.remitEmail,
                this.address1,
                this.address2,
                this.city,
                this.state,
                this.zip,
                this.country,
                this.mcc,
                this.locationCode,
                this.contacts,
                this.billingData,
                this.paymentMethod,
                this.vendorStatus,
                this.vendorId,
                this.enrollmentStatus,
                this.summary,
                this.paypointLegalname,
                this.paypointDbaname,
                this.paypointEntryname,
                this.parentOrgName,
                this.parentOrgId,
                this.createdDate,
                this.lastUpdated,
                this.remitAddress1,
                this.remitAddress2,
                this.remitCity,
                this.remitState,
                this.remitZip,
                this.remitCountry,
                this.payeeName1,
                this.payeeName2,
                this.customField1,
                this.customField2,
                this.customerVendorAccount,
                this.internalReferenceId,
                this.additionalData,
                this.externalPaypointId,
                this.storedMethods);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static VendorNumberStage builder() {
        return new Builder();
    }

    public interface VendorNumberStage {
        Name1Stage vendorNumber(@NotNull String vendorNumber);

        Builder from(VendorDataResponse other);
    }

    public interface Name1Stage {
        /**
         * <p>Primary name for vendor.</p>
         */
        Name2Stage name1(@NotNull String name1);
    }

    public interface Name2Stage {
        /**
         * <p>Secondary name for vendor.</p>
         */
        EinStage name2(@NotNull String name2);
    }

    public interface EinStage {
        /**
         * <p>EIN/Tax ID for vendor. In responses, this field is masked, and looks like: <code>&quot;ein&quot;: &quot;XXXXX6789&quot;</code>.</p>
         */
        PhoneStage ein(@NotNull String ein);
    }

    public interface PhoneStage {
        /**
         * <p>Vendor's phone number.</p>
         */
        EmailStage phone(@NotNull String phone);
    }

    public interface EmailStage {
        Address1Stage email(@NotNull String email);
    }

    public interface Address1Stage {
        /**
         * <p>Vendor's address.</p>
         */
        Address2Stage address1(@NotNull String address1);
    }

    public interface Address2Stage {
        /**
         * <p>Additional line for vendor's address.</p>
         */
        CityStage address2(@NotNull String address2);
    }

    public interface CityStage {
        /**
         * <p>Vendor's city.</p>
         */
        StateStage city(@NotNull String city);
    }

    public interface StateStage {
        /**
         * <p>Vendor's state. Must be a two-character state code.</p>
         */
        ZipStage state(@NotNull String state);
    }

    public interface ZipStage {
        /**
         * <p>Vendor's zip code.</p>
         */
        CountryStage zip(@NotNull String zip);
    }

    public interface CountryStage {
        /**
         * <p>Vendor's country. Payabli supports only US and Canadian vendors.</p>
         */
        MccStage country(@NotNull String country);
    }

    public interface MccStage {
        LocationCodeStage mcc(@NotNull String mcc);
    }

    public interface LocationCodeStage {
        /**
         * <p>Additional location code used to identify the vendor.</p>
         */
        BillingDataStage locationCode(@NotNull String locationCode);
    }

    public interface BillingDataStage {
        /**
         * <p>Object containing vendor's bank information.</p>
         */
        PaymentMethodStage billingData(@NotNull VendorResponseBillingData billingData);
    }

    public interface PaymentMethodStage {
        /**
         * <p>Preferred payment method for vendor.</p>
         */
        SummaryStage paymentMethod(@NotNull VendorDataResponsePaymentMethod paymentMethod);
    }

    public interface SummaryStage {
        /**
         * <p>Vendor bill summary statistics</p>
         */
        PaypointLegalnameStage summary(@NotNull VendorResponseSummary summary);
    }

    public interface PaypointLegalnameStage {
        /**
         * <p>Legal name of the paypoint</p>
         */
        PaypointDbanameStage paypointLegalname(@NotNull String paypointLegalname);
    }

    public interface PaypointDbanameStage {
        /**
         * <p>DBA name of the paypoint</p>
         */
        PaypointEntrynameStage paypointDbaname(@NotNull String paypointDbaname);
    }

    public interface PaypointEntrynameStage {
        /**
         * <p>Entry name of the paypoint</p>
         */
        ParentOrgNameStage paypointEntryname(@NotNull String paypointEntryname);
    }

    public interface ParentOrgNameStage {
        /**
         * <p>Name of the parent organization</p>
         */
        ParentOrgIdStage parentOrgName(@NotNull String parentOrgName);
    }

    public interface ParentOrgIdStage {
        /**
         * <p>ID of the parent organization</p>
         */
        CreatedDateStage parentOrgId(int parentOrgId);
    }

    public interface CreatedDateStage {
        /**
         * <p>Date when vendor was created</p>
         */
        LastUpdatedStage createdDate(@NotNull OffsetDateTime createdDate);
    }

    public interface LastUpdatedStage {
        /**
         * <p>Date when vendor was last updated</p>
         */
        RemitAddress1Stage lastUpdated(@NotNull OffsetDateTime lastUpdated);
    }

    public interface RemitAddress1Stage {
        RemitAddress2Stage remitAddress1(@NotNull String remitAddress1);
    }

    public interface RemitAddress2Stage {
        RemitCityStage remitAddress2(@NotNull String remitAddress2);
    }

    public interface RemitCityStage {
        RemitStateStage remitCity(@NotNull String remitCity);
    }

    public interface RemitStateStage {
        RemitZipStage remitState(@NotNull String remitState);
    }

    public interface RemitZipStage {
        RemitCountryStage remitZip(@NotNull String remitZip);
    }

    public interface RemitCountryStage {
        PayeeName1Stage remitCountry(@NotNull String remitCountry);
    }

    public interface PayeeName1Stage {
        PayeeName2Stage payeeName1(@NotNull String payeeName1);
    }

    public interface PayeeName2Stage {
        CustomField1Stage payeeName2(@NotNull String payeeName2);
    }

    public interface CustomField1Stage {
        /**
         * <p>Custom field 1 for vendor</p>
         */
        CustomField2Stage customField1(@NotNull String customField1);
    }

    public interface CustomField2Stage {
        /**
         * <p>Custom field 2 for vendor</p>
         */
        InternalReferenceIdStage customField2(@NotNull String customField2);
    }

    public interface InternalReferenceIdStage {
        ExternalPaypointIdStage internalReferenceId(long internalReferenceId);
    }

    public interface ExternalPaypointIdStage {
        /**
         * <p>External paypoint identifier</p>
         */
        _FinalStage externalPaypointId(@NotNull String externalPaypointId);
    }

    public interface _FinalStage {
        VendorDataResponse build();

        /**
         * <p>Email address for remittance</p>
         */
        _FinalStage remitEmail(Optional<String> remitEmail);

        _FinalStage remitEmail(String remitEmail);

        /**
         * <p>Array of objects describing the vendor's contacts.</p>
         */
        _FinalStage contacts(List<ContactsResponse> contacts);

        _FinalStage addContacts(ContactsResponse contacts);

        _FinalStage addAllContacts(List<ContactsResponse> contacts);

        _FinalStage vendorStatus(Optional<Integer> vendorStatus);

        _FinalStage vendorStatus(Integer vendorStatus);

        _FinalStage vendorId(Optional<Integer> vendorId);

        _FinalStage vendorId(Integer vendorId);

        /**
         * <p>Vendor enrollment status</p>
         */
        _FinalStage enrollmentStatus(Optional<String> enrollmentStatus);

        _FinalStage enrollmentStatus(String enrollmentStatus);

        /**
         * <p>Account number of paypoint in the Vendor side.</p>
         */
        _FinalStage customerVendorAccount(Optional<String> customerVendorAccount);

        _FinalStage customerVendorAccount(String customerVendorAccount);

        _FinalStage additionalData(Map<String, String> additionalData);

        _FinalStage putAllAdditionalData(Map<String, String> additionalData);

        _FinalStage additionalData(String key, String value);

        /**
         * <p>Array of stored payment methods for vendor</p>
         */
        _FinalStage storedMethods(List<VendorResponseStoredMethod> storedMethods);

        _FinalStage addStoredMethods(VendorResponseStoredMethod storedMethods);

        _FinalStage addAllStoredMethods(List<VendorResponseStoredMethod> storedMethods);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements VendorNumberStage,
                    Name1Stage,
                    Name2Stage,
                    EinStage,
                    PhoneStage,
                    EmailStage,
                    Address1Stage,
                    Address2Stage,
                    CityStage,
                    StateStage,
                    ZipStage,
                    CountryStage,
                    MccStage,
                    LocationCodeStage,
                    BillingDataStage,
                    PaymentMethodStage,
                    SummaryStage,
                    PaypointLegalnameStage,
                    PaypointDbanameStage,
                    PaypointEntrynameStage,
                    ParentOrgNameStage,
                    ParentOrgIdStage,
                    CreatedDateStage,
                    LastUpdatedStage,
                    RemitAddress1Stage,
                    RemitAddress2Stage,
                    RemitCityStage,
                    RemitStateStage,
                    RemitZipStage,
                    RemitCountryStage,
                    PayeeName1Stage,
                    PayeeName2Stage,
                    CustomField1Stage,
                    CustomField2Stage,
                    InternalReferenceIdStage,
                    ExternalPaypointIdStage,
                    _FinalStage {
        private String vendorNumber;

        private String name1;

        private String name2;

        private String ein;

        private String phone;

        private String email;

        private String address1;

        private String address2;

        private String city;

        private String state;

        private String zip;

        private String country;

        private String mcc;

        private String locationCode;

        private VendorResponseBillingData billingData;

        private VendorDataResponsePaymentMethod paymentMethod;

        private VendorResponseSummary summary;

        private String paypointLegalname;

        private String paypointDbaname;

        private String paypointEntryname;

        private String parentOrgName;

        private int parentOrgId;

        private OffsetDateTime createdDate;

        private OffsetDateTime lastUpdated;

        private String remitAddress1;

        private String remitAddress2;

        private String remitCity;

        private String remitState;

        private String remitZip;

        private String remitCountry;

        private String payeeName1;

        private String payeeName2;

        private String customField1;

        private String customField2;

        private long internalReferenceId;

        private String externalPaypointId;

        private List<VendorResponseStoredMethod> storedMethods = new ArrayList<>();

        private Map<String, String> additionalData = new LinkedHashMap<>();

        private Optional<String> customerVendorAccount = Optional.empty();

        private Optional<String> enrollmentStatus = Optional.empty();

        private Optional<Integer> vendorId = Optional.empty();

        private Optional<Integer> vendorStatus = Optional.empty();

        private List<ContactsResponse> contacts = new ArrayList<>();

        private Optional<String> remitEmail = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(VendorDataResponse other) {
            vendorNumber(other.getVendorNumber());
            name1(other.getName1());
            name2(other.getName2());
            ein(other.getEin());
            phone(other.getPhone());
            email(other.getEmail());
            remitEmail(other.getRemitEmail());
            address1(other.getAddress1());
            address2(other.getAddress2());
            city(other.getCity());
            state(other.getState());
            zip(other.getZip());
            country(other.getCountry());
            mcc(other.getMcc());
            locationCode(other.getLocationCode());
            contacts(other.getContacts());
            billingData(other.getBillingData());
            paymentMethod(other.getPaymentMethod());
            vendorStatus(other.getVendorStatus());
            vendorId(other.getVendorId());
            enrollmentStatus(other.getEnrollmentStatus());
            summary(other.getSummary());
            paypointLegalname(other.getPaypointLegalname());
            paypointDbaname(other.getPaypointDbaname());
            paypointEntryname(other.getPaypointEntryname());
            parentOrgName(other.getParentOrgName());
            parentOrgId(other.getParentOrgId());
            createdDate(other.getCreatedDate());
            lastUpdated(other.getLastUpdated());
            remitAddress1(other.getRemitAddress1());
            remitAddress2(other.getRemitAddress2());
            remitCity(other.getRemitCity());
            remitState(other.getRemitState());
            remitZip(other.getRemitZip());
            remitCountry(other.getRemitCountry());
            payeeName1(other.getPayeeName1());
            payeeName2(other.getPayeeName2());
            customField1(other.getCustomField1());
            customField2(other.getCustomField2());
            customerVendorAccount(other.getCustomerVendorAccount());
            internalReferenceId(other.getInternalReferenceId());
            additionalData(other.getAdditionalData());
            externalPaypointId(other.getExternalPaypointId());
            storedMethods(other.getStoredMethods());
            return this;
        }

        @java.lang.Override
        @JsonSetter("VendorNumber")
        public Name1Stage vendorNumber(@NotNull String vendorNumber) {
            this.vendorNumber = Objects.requireNonNull(vendorNumber, "vendorNumber must not be null");
            return this;
        }

        /**
         * <p>Primary name for vendor.</p>
         * <p>Primary name for vendor.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("Name1")
        public Name2Stage name1(@NotNull String name1) {
            this.name1 = Objects.requireNonNull(name1, "name1 must not be null");
            return this;
        }

        /**
         * <p>Secondary name for vendor.</p>
         * <p>Secondary name for vendor.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("Name2")
        public EinStage name2(@NotNull String name2) {
            this.name2 = Objects.requireNonNull(name2, "name2 must not be null");
            return this;
        }

        /**
         * <p>EIN/Tax ID for vendor. In responses, this field is masked, and looks like: <code>&quot;ein&quot;: &quot;XXXXX6789&quot;</code>.</p>
         * <p>EIN/Tax ID for vendor. In responses, this field is masked, and looks like: <code>&quot;ein&quot;: &quot;XXXXX6789&quot;</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("EIN")
        public PhoneStage ein(@NotNull String ein) {
            this.ein = Objects.requireNonNull(ein, "ein must not be null");
            return this;
        }

        /**
         * <p>Vendor's phone number.</p>
         * <p>Vendor's phone number.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("Phone")
        public EmailStage phone(@NotNull String phone) {
            this.phone = Objects.requireNonNull(phone, "phone must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("Email")
        public Address1Stage email(@NotNull String email) {
            this.email = Objects.requireNonNull(email, "email must not be null");
            return this;
        }

        /**
         * <p>Vendor's address.</p>
         * <p>Vendor's address.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("Address1")
        public Address2Stage address1(@NotNull String address1) {
            this.address1 = Objects.requireNonNull(address1, "address1 must not be null");
            return this;
        }

        /**
         * <p>Additional line for vendor's address.</p>
         * <p>Additional line for vendor's address.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("Address2")
        public CityStage address2(@NotNull String address2) {
            this.address2 = Objects.requireNonNull(address2, "address2 must not be null");
            return this;
        }

        /**
         * <p>Vendor's city.</p>
         * <p>Vendor's city.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("City")
        public StateStage city(@NotNull String city) {
            this.city = Objects.requireNonNull(city, "city must not be null");
            return this;
        }

        /**
         * <p>Vendor's state. Must be a two-character state code.</p>
         * <p>Vendor's state. Must be a two-character state code.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("State")
        public ZipStage state(@NotNull String state) {
            this.state = Objects.requireNonNull(state, "state must not be null");
            return this;
        }

        /**
         * <p>Vendor's zip code.</p>
         * <p>Vendor's zip code.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("Zip")
        public CountryStage zip(@NotNull String zip) {
            this.zip = Objects.requireNonNull(zip, "zip must not be null");
            return this;
        }

        /**
         * <p>Vendor's country. Payabli supports only US and Canadian vendors.</p>
         * <p>Vendor's country. Payabli supports only US and Canadian vendors.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("Country")
        public MccStage country(@NotNull String country) {
            this.country = Objects.requireNonNull(country, "country must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("Mcc")
        public LocationCodeStage mcc(@NotNull String mcc) {
            this.mcc = Objects.requireNonNull(mcc, "mcc must not be null");
            return this;
        }

        /**
         * <p>Additional location code used to identify the vendor.</p>
         * <p>Additional location code used to identify the vendor.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("LocationCode")
        public BillingDataStage locationCode(@NotNull String locationCode) {
            this.locationCode = Objects.requireNonNull(locationCode, "locationCode must not be null");
            return this;
        }

        /**
         * <p>Object containing vendor's bank information.</p>
         * <p>Object containing vendor's bank information.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("BillingData")
        public PaymentMethodStage billingData(@NotNull VendorResponseBillingData billingData) {
            this.billingData = Objects.requireNonNull(billingData, "billingData must not be null");
            return this;
        }

        /**
         * <p>Preferred payment method for vendor.</p>
         * <p>Preferred payment method for vendor.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("PaymentMethod")
        public SummaryStage paymentMethod(@NotNull VendorDataResponsePaymentMethod paymentMethod) {
            this.paymentMethod = Objects.requireNonNull(paymentMethod, "paymentMethod must not be null");
            return this;
        }

        /**
         * <p>Vendor bill summary statistics</p>
         * <p>Vendor bill summary statistics</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("Summary")
        public PaypointLegalnameStage summary(@NotNull VendorResponseSummary summary) {
            this.summary = Objects.requireNonNull(summary, "summary must not be null");
            return this;
        }

        /**
         * <p>Legal name of the paypoint</p>
         * <p>Legal name of the paypoint</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("PaypointLegalname")
        public PaypointDbanameStage paypointLegalname(@NotNull String paypointLegalname) {
            this.paypointLegalname = Objects.requireNonNull(paypointLegalname, "paypointLegalname must not be null");
            return this;
        }

        /**
         * <p>DBA name of the paypoint</p>
         * <p>DBA name of the paypoint</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("PaypointDbaname")
        public PaypointEntrynameStage paypointDbaname(@NotNull String paypointDbaname) {
            this.paypointDbaname = Objects.requireNonNull(paypointDbaname, "paypointDbaname must not be null");
            return this;
        }

        /**
         * <p>Entry name of the paypoint</p>
         * <p>Entry name of the paypoint</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("PaypointEntryname")
        public ParentOrgNameStage paypointEntryname(@NotNull String paypointEntryname) {
            this.paypointEntryname = Objects.requireNonNull(paypointEntryname, "paypointEntryname must not be null");
            return this;
        }

        /**
         * <p>Name of the parent organization</p>
         * <p>Name of the parent organization</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("ParentOrgName")
        public ParentOrgIdStage parentOrgName(@NotNull String parentOrgName) {
            this.parentOrgName = Objects.requireNonNull(parentOrgName, "parentOrgName must not be null");
            return this;
        }

        /**
         * <p>ID of the parent organization</p>
         * <p>ID of the parent organization</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("ParentOrgId")
        public CreatedDateStage parentOrgId(int parentOrgId) {
            this.parentOrgId = parentOrgId;
            return this;
        }

        /**
         * <p>Date when vendor was created</p>
         * <p>Date when vendor was created</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("CreatedDate")
        public LastUpdatedStage createdDate(@NotNull OffsetDateTime createdDate) {
            this.createdDate = Objects.requireNonNull(createdDate, "createdDate must not be null");
            return this;
        }

        /**
         * <p>Date when vendor was last updated</p>
         * <p>Date when vendor was last updated</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("LastUpdated")
        public RemitAddress1Stage lastUpdated(@NotNull OffsetDateTime lastUpdated) {
            this.lastUpdated = Objects.requireNonNull(lastUpdated, "lastUpdated must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("remitAddress1")
        public RemitAddress2Stage remitAddress1(@NotNull String remitAddress1) {
            this.remitAddress1 = Objects.requireNonNull(remitAddress1, "remitAddress1 must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("remitAddress2")
        public RemitCityStage remitAddress2(@NotNull String remitAddress2) {
            this.remitAddress2 = Objects.requireNonNull(remitAddress2, "remitAddress2 must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("remitCity")
        public RemitStateStage remitCity(@NotNull String remitCity) {
            this.remitCity = Objects.requireNonNull(remitCity, "remitCity must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("remitState")
        public RemitZipStage remitState(@NotNull String remitState) {
            this.remitState = Objects.requireNonNull(remitState, "remitState must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("remitZip")
        public RemitCountryStage remitZip(@NotNull String remitZip) {
            this.remitZip = Objects.requireNonNull(remitZip, "remitZip must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("remitCountry")
        public PayeeName1Stage remitCountry(@NotNull String remitCountry) {
            this.remitCountry = Objects.requireNonNull(remitCountry, "remitCountry must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("payeeName1")
        public PayeeName2Stage payeeName1(@NotNull String payeeName1) {
            this.payeeName1 = Objects.requireNonNull(payeeName1, "payeeName1 must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("payeeName2")
        public CustomField1Stage payeeName2(@NotNull String payeeName2) {
            this.payeeName2 = Objects.requireNonNull(payeeName2, "payeeName2 must not be null");
            return this;
        }

        /**
         * <p>Custom field 1 for vendor</p>
         * <p>Custom field 1 for vendor</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("customField1")
        public CustomField2Stage customField1(@NotNull String customField1) {
            this.customField1 = Objects.requireNonNull(customField1, "customField1 must not be null");
            return this;
        }

        /**
         * <p>Custom field 2 for vendor</p>
         * <p>Custom field 2 for vendor</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("customField2")
        public InternalReferenceIdStage customField2(@NotNull String customField2) {
            this.customField2 = Objects.requireNonNull(customField2, "customField2 must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("InternalReferenceId")
        public ExternalPaypointIdStage internalReferenceId(long internalReferenceId) {
            this.internalReferenceId = internalReferenceId;
            return this;
        }

        /**
         * <p>External paypoint identifier</p>
         * <p>External paypoint identifier</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("externalPaypointID")
        public _FinalStage externalPaypointId(@NotNull String externalPaypointId) {
            this.externalPaypointId = Objects.requireNonNull(externalPaypointId, "externalPaypointId must not be null");
            return this;
        }

        /**
         * <p>Array of stored payment methods for vendor</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllStoredMethods(List<VendorResponseStoredMethod> storedMethods) {
            if (storedMethods != null) {
                this.storedMethods.addAll(storedMethods);
            }
            return this;
        }

        /**
         * <p>Array of stored payment methods for vendor</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addStoredMethods(VendorResponseStoredMethod storedMethods) {
            this.storedMethods.add(storedMethods);
            return this;
        }

        /**
         * <p>Array of stored payment methods for vendor</p>
         */
        @java.lang.Override
        @JsonSetter(value = "StoredMethods", nulls = Nulls.SKIP)
        public _FinalStage storedMethods(List<VendorResponseStoredMethod> storedMethods) {
            this.storedMethods.clear();
            this.storedMethods.addAll(storedMethods);
            return this;
        }

        @java.lang.Override
        public _FinalStage additionalData(String key, String value) {
            this.additionalData.put(key, value);
            return this;
        }

        @java.lang.Override
        public _FinalStage putAllAdditionalData(Map<String, String> additionalData) {
            if (additionalData != null) {
                this.additionalData.putAll(additionalData);
            }
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "additionalData", nulls = Nulls.SKIP)
        public _FinalStage additionalData(Map<String, String> additionalData) {
            this.additionalData.clear();
            this.additionalData.putAll(additionalData);
            return this;
        }

        /**
         * <p>Account number of paypoint in the Vendor side.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerVendorAccount(String customerVendorAccount) {
            this.customerVendorAccount = Optional.ofNullable(customerVendorAccount);
            return this;
        }

        /**
         * <p>Account number of paypoint in the Vendor side.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customerVendorAccount", nulls = Nulls.SKIP)
        public _FinalStage customerVendorAccount(Optional<String> customerVendorAccount) {
            this.customerVendorAccount = customerVendorAccount;
            return this;
        }

        /**
         * <p>Vendor enrollment status</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage enrollmentStatus(String enrollmentStatus) {
            this.enrollmentStatus = Optional.ofNullable(enrollmentStatus);
            return this;
        }

        /**
         * <p>Vendor enrollment status</p>
         */
        @java.lang.Override
        @JsonSetter(value = "EnrollmentStatus", nulls = Nulls.SKIP)
        public _FinalStage enrollmentStatus(Optional<String> enrollmentStatus) {
            this.enrollmentStatus = enrollmentStatus;
            return this;
        }

        @java.lang.Override
        public _FinalStage vendorId(Integer vendorId) {
            this.vendorId = Optional.ofNullable(vendorId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "VendorId", nulls = Nulls.SKIP)
        public _FinalStage vendorId(Optional<Integer> vendorId) {
            this.vendorId = vendorId;
            return this;
        }

        @java.lang.Override
        public _FinalStage vendorStatus(Integer vendorStatus) {
            this.vendorStatus = Optional.ofNullable(vendorStatus);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "VendorStatus", nulls = Nulls.SKIP)
        public _FinalStage vendorStatus(Optional<Integer> vendorStatus) {
            this.vendorStatus = vendorStatus;
            return this;
        }

        /**
         * <p>Array of objects describing the vendor's contacts.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllContacts(List<ContactsResponse> contacts) {
            if (contacts != null) {
                this.contacts.addAll(contacts);
            }
            return this;
        }

        /**
         * <p>Array of objects describing the vendor's contacts.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addContacts(ContactsResponse contacts) {
            this.contacts.add(contacts);
            return this;
        }

        /**
         * <p>Array of objects describing the vendor's contacts.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "Contacts", nulls = Nulls.SKIP)
        public _FinalStage contacts(List<ContactsResponse> contacts) {
            this.contacts.clear();
            this.contacts.addAll(contacts);
            return this;
        }

        /**
         * <p>Email address for remittance</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage remitEmail(String remitEmail) {
            this.remitEmail = Optional.ofNullable(remitEmail);
            return this;
        }

        /**
         * <p>Email address for remittance</p>
         */
        @java.lang.Override
        @JsonSetter(value = "RemitEmail", nulls = Nulls.SKIP)
        public _FinalStage remitEmail(Optional<String> remitEmail) {
            this.remitEmail = remitEmail;
            return this;
        }

        @java.lang.Override
        public VendorDataResponse build() {
            return new VendorDataResponse(
                    vendorNumber,
                    name1,
                    name2,
                    ein,
                    phone,
                    email,
                    remitEmail,
                    address1,
                    address2,
                    city,
                    state,
                    zip,
                    country,
                    mcc,
                    locationCode,
                    contacts,
                    billingData,
                    paymentMethod,
                    vendorStatus,
                    vendorId,
                    enrollmentStatus,
                    summary,
                    paypointLegalname,
                    paypointDbaname,
                    paypointEntryname,
                    parentOrgName,
                    parentOrgId,
                    createdDate,
                    lastUpdated,
                    remitAddress1,
                    remitAddress2,
                    remitCity,
                    remitState,
                    remitZip,
                    remitCountry,
                    payeeName1,
                    payeeName2,
                    customField1,
                    customField2,
                    customerVendorAccount,
                    internalReferenceId,
                    additionalData,
                    externalPaypointId,
                    storedMethods,
                    additionalProperties);
        }
    }
}
