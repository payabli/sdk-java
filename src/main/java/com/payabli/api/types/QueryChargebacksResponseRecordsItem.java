/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryChargebacksResponseRecordsItem.Builder.class)
public final class QueryChargebacksResponseRecordsItem {
    private final Optional<String> accountType;

    private final Optional<String> caseNumber;

    private final Optional<OffsetDateTime> chargebackDate;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<QueryTransactionPayorData> customer;

    private final Optional<String> externalPaypointId;

    private final Optional<Integer> id;

    private final Optional<String> lastFour;

    private final Optional<String> method;

    private final Optional<Float> netAmount;

    private final Optional<String> orderId;

    private final Optional<String> pageidentifier;

    private final Optional<String> parentOrgName;

    private final Optional<QueryPaymentData> paymentData;

    private final Optional<String> paymentTransId;

    private final Optional<String> paypointDbaname;

    private final Optional<String> paypointEntryname;

    private final Optional<String> paypointLegalname;

    private final Optional<String> reason;

    private final Optional<String> reasonCode;

    private final Optional<String> referenceNumber;

    private final Optional<OffsetDateTime> replyBy;

    private final Optional<String> responses;

    private final Optional<Integer> scheduleReference;

    private final Optional<Integer> status;

    private final Optional<TransactionQueryRecords> transaction;

    private final Optional<OffsetDateTime> transactionTime;

    private final Map<String, Object> additionalProperties;

    private QueryChargebacksResponseRecordsItem(
            Optional<String> accountType,
            Optional<String> caseNumber,
            Optional<OffsetDateTime> chargebackDate,
            Optional<OffsetDateTime> createdAt,
            Optional<QueryTransactionPayorData> customer,
            Optional<String> externalPaypointId,
            Optional<Integer> id,
            Optional<String> lastFour,
            Optional<String> method,
            Optional<Float> netAmount,
            Optional<String> orderId,
            Optional<String> pageidentifier,
            Optional<String> parentOrgName,
            Optional<QueryPaymentData> paymentData,
            Optional<String> paymentTransId,
            Optional<String> paypointDbaname,
            Optional<String> paypointEntryname,
            Optional<String> paypointLegalname,
            Optional<String> reason,
            Optional<String> reasonCode,
            Optional<String> referenceNumber,
            Optional<OffsetDateTime> replyBy,
            Optional<String> responses,
            Optional<Integer> scheduleReference,
            Optional<Integer> status,
            Optional<TransactionQueryRecords> transaction,
            Optional<OffsetDateTime> transactionTime,
            Map<String, Object> additionalProperties) {
        this.accountType = accountType;
        this.caseNumber = caseNumber;
        this.chargebackDate = chargebackDate;
        this.createdAt = createdAt;
        this.customer = customer;
        this.externalPaypointId = externalPaypointId;
        this.id = id;
        this.lastFour = lastFour;
        this.method = method;
        this.netAmount = netAmount;
        this.orderId = orderId;
        this.pageidentifier = pageidentifier;
        this.parentOrgName = parentOrgName;
        this.paymentData = paymentData;
        this.paymentTransId = paymentTransId;
        this.paypointDbaname = paypointDbaname;
        this.paypointEntryname = paypointEntryname;
        this.paypointLegalname = paypointLegalname;
        this.reason = reason;
        this.reasonCode = reasonCode;
        this.referenceNumber = referenceNumber;
        this.replyBy = replyBy;
        this.responses = responses;
        this.scheduleReference = scheduleReference;
        this.status = status;
        this.transaction = transaction;
        this.transactionTime = transactionTime;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Type of account.
     */
    @JsonProperty("AccountType")
    public Optional<String> getAccountType() {
        return accountType;
    }

    /**
     * @return Case number of the chargeback.
     */
    @JsonProperty("CaseNumber")
    public Optional<String> getCaseNumber() {
        return caseNumber;
    }

    /**
     * @return Date of the chargeback.
     */
    @JsonProperty("ChargebackDate")
    public Optional<OffsetDateTime> getChargebackDate() {
        return chargebackDate;
    }

    @JsonProperty("CreatedAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("Customer")
    public Optional<QueryTransactionPayorData> getCustomer() {
        return customer;
    }

    @JsonProperty("externalPaypointID")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    /**
     * @return Unique identifier of the record.
     */
    @JsonProperty("Id")
    public Optional<Integer> getId() {
        return id;
    }

    /**
     * @return Last four digits of the account number.
     */
    @JsonProperty("LastFour")
    public Optional<String> getLastFour() {
        return lastFour;
    }

    /**
     * @return Method of payment.
     */
    @JsonProperty("Method")
    public Optional<String> getMethod() {
        return method;
    }

    /**
     * @return Net amount after deductions.
     */
    @JsonProperty("NetAmount")
    public Optional<Float> getNetAmount() {
        return netAmount;
    }

    @JsonProperty("OrderId")
    public Optional<String> getOrderId() {
        return orderId;
    }

    @JsonProperty("pageidentifier")
    public Optional<String> getPageidentifier() {
        return pageidentifier;
    }

    @JsonProperty("ParentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    /**
     * @return Payment data associated with the transaction.
     */
    @JsonProperty("PaymentData")
    public Optional<QueryPaymentData> getPaymentData() {
        return paymentData;
    }

    /**
     * @return Transaction ID for the payment.
     */
    @JsonProperty("PaymentTransId")
    public Optional<String> getPaymentTransId() {
        return paymentTransId;
    }

    /**
     * @return The 'Doing Business As' (DBA) name of the paypoint.
     */
    @JsonProperty("PaypointDbaname")
    public Optional<String> getPaypointDbaname() {
        return paypointDbaname;
    }

    /**
     * @return Entryname for the paypoint.
     */
    @JsonProperty("PaypointEntryname")
    public Optional<String> getPaypointEntryname() {
        return paypointEntryname;
    }

    /**
     * @return Legal name of the paypoint.
     */
    @JsonProperty("PaypointLegalname")
    public Optional<String> getPaypointLegalname() {
        return paypointLegalname;
    }

    /**
     * @return Description of the reason for chargeback.
     */
    @JsonProperty("Reason")
    public Optional<String> getReason() {
        return reason;
    }

    /**
     * @return Code representing the reason for chargeback.
     */
    @JsonProperty("ReasonCode")
    public Optional<String> getReasonCode() {
        return reasonCode;
    }

    /**
     * @return Reference number for the transaction.
     */
    @JsonProperty("ReferenceNumber")
    public Optional<String> getReferenceNumber() {
        return referenceNumber;
    }

    @JsonProperty("ReplyBy")
    public Optional<OffsetDateTime> getReplyBy() {
        return replyBy;
    }

    /**
     * @return Responses related to the transaction.
     */
    @JsonProperty("Responses")
    public Optional<String> getResponses() {
        return responses;
    }

    /**
     * @return Reference for any scheduled transactions.
     */
    @JsonProperty("ScheduleReference")
    public Optional<Integer> getScheduleReference() {
        return scheduleReference;
    }

    /**
     * @return Status of the transaction.
     */
    @JsonProperty("Status")
    public Optional<Integer> getStatus() {
        return status;
    }

    @JsonProperty("Transaction")
    public Optional<TransactionQueryRecords> getTransaction() {
        return transaction;
    }

    @JsonProperty("TransactionTime")
    public Optional<OffsetDateTime> getTransactionTime() {
        return transactionTime;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryChargebacksResponseRecordsItem
                && equalTo((QueryChargebacksResponseRecordsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryChargebacksResponseRecordsItem other) {
        return accountType.equals(other.accountType)
                && caseNumber.equals(other.caseNumber)
                && chargebackDate.equals(other.chargebackDate)
                && createdAt.equals(other.createdAt)
                && customer.equals(other.customer)
                && externalPaypointId.equals(other.externalPaypointId)
                && id.equals(other.id)
                && lastFour.equals(other.lastFour)
                && method.equals(other.method)
                && netAmount.equals(other.netAmount)
                && orderId.equals(other.orderId)
                && pageidentifier.equals(other.pageidentifier)
                && parentOrgName.equals(other.parentOrgName)
                && paymentData.equals(other.paymentData)
                && paymentTransId.equals(other.paymentTransId)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointEntryname.equals(other.paypointEntryname)
                && paypointLegalname.equals(other.paypointLegalname)
                && reason.equals(other.reason)
                && reasonCode.equals(other.reasonCode)
                && referenceNumber.equals(other.referenceNumber)
                && replyBy.equals(other.replyBy)
                && responses.equals(other.responses)
                && scheduleReference.equals(other.scheduleReference)
                && status.equals(other.status)
                && transaction.equals(other.transaction)
                && transactionTime.equals(other.transactionTime);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accountType,
                this.caseNumber,
                this.chargebackDate,
                this.createdAt,
                this.customer,
                this.externalPaypointId,
                this.id,
                this.lastFour,
                this.method,
                this.netAmount,
                this.orderId,
                this.pageidentifier,
                this.parentOrgName,
                this.paymentData,
                this.paymentTransId,
                this.paypointDbaname,
                this.paypointEntryname,
                this.paypointLegalname,
                this.reason,
                this.reasonCode,
                this.referenceNumber,
                this.replyBy,
                this.responses,
                this.scheduleReference,
                this.status,
                this.transaction,
                this.transactionTime);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> accountType = Optional.empty();

        private Optional<String> caseNumber = Optional.empty();

        private Optional<OffsetDateTime> chargebackDate = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<QueryTransactionPayorData> customer = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<Integer> id = Optional.empty();

        private Optional<String> lastFour = Optional.empty();

        private Optional<String> method = Optional.empty();

        private Optional<Float> netAmount = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<String> pageidentifier = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<QueryPaymentData> paymentData = Optional.empty();

        private Optional<String> paymentTransId = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> paypointEntryname = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<String> reason = Optional.empty();

        private Optional<String> reasonCode = Optional.empty();

        private Optional<String> referenceNumber = Optional.empty();

        private Optional<OffsetDateTime> replyBy = Optional.empty();

        private Optional<String> responses = Optional.empty();

        private Optional<Integer> scheduleReference = Optional.empty();

        private Optional<Integer> status = Optional.empty();

        private Optional<TransactionQueryRecords> transaction = Optional.empty();

        private Optional<OffsetDateTime> transactionTime = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryChargebacksResponseRecordsItem other) {
            accountType(other.getAccountType());
            caseNumber(other.getCaseNumber());
            chargebackDate(other.getChargebackDate());
            createdAt(other.getCreatedAt());
            customer(other.getCustomer());
            externalPaypointId(other.getExternalPaypointId());
            id(other.getId());
            lastFour(other.getLastFour());
            method(other.getMethod());
            netAmount(other.getNetAmount());
            orderId(other.getOrderId());
            pageidentifier(other.getPageidentifier());
            parentOrgName(other.getParentOrgName());
            paymentData(other.getPaymentData());
            paymentTransId(other.getPaymentTransId());
            paypointDbaname(other.getPaypointDbaname());
            paypointEntryname(other.getPaypointEntryname());
            paypointLegalname(other.getPaypointLegalname());
            reason(other.getReason());
            reasonCode(other.getReasonCode());
            referenceNumber(other.getReferenceNumber());
            replyBy(other.getReplyBy());
            responses(other.getResponses());
            scheduleReference(other.getScheduleReference());
            status(other.getStatus());
            transaction(other.getTransaction());
            transactionTime(other.getTransactionTime());
            return this;
        }

        /**
         * <p>Type of account.</p>
         */
        @JsonSetter(value = "AccountType", nulls = Nulls.SKIP)
        public Builder accountType(Optional<String> accountType) {
            this.accountType = accountType;
            return this;
        }

        public Builder accountType(String accountType) {
            this.accountType = Optional.ofNullable(accountType);
            return this;
        }

        /**
         * <p>Case number of the chargeback.</p>
         */
        @JsonSetter(value = "CaseNumber", nulls = Nulls.SKIP)
        public Builder caseNumber(Optional<String> caseNumber) {
            this.caseNumber = caseNumber;
            return this;
        }

        public Builder caseNumber(String caseNumber) {
            this.caseNumber = Optional.ofNullable(caseNumber);
            return this;
        }

        /**
         * <p>Date of the chargeback.</p>
         */
        @JsonSetter(value = "ChargebackDate", nulls = Nulls.SKIP)
        public Builder chargebackDate(Optional<OffsetDateTime> chargebackDate) {
            this.chargebackDate = chargebackDate;
            return this;
        }

        public Builder chargebackDate(OffsetDateTime chargebackDate) {
            this.chargebackDate = Optional.ofNullable(chargebackDate);
            return this;
        }

        @JsonSetter(value = "CreatedAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "Customer", nulls = Nulls.SKIP)
        public Builder customer(Optional<QueryTransactionPayorData> customer) {
            this.customer = customer;
            return this;
        }

        public Builder customer(QueryTransactionPayorData customer) {
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        /**
         * <p>Unique identifier of the record.</p>
         */
        @JsonSetter(value = "Id", nulls = Nulls.SKIP)
        public Builder id(Optional<Integer> id) {
            this.id = id;
            return this;
        }

        public Builder id(Integer id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>Last four digits of the account number.</p>
         */
        @JsonSetter(value = "LastFour", nulls = Nulls.SKIP)
        public Builder lastFour(Optional<String> lastFour) {
            this.lastFour = lastFour;
            return this;
        }

        public Builder lastFour(String lastFour) {
            this.lastFour = Optional.ofNullable(lastFour);
            return this;
        }

        /**
         * <p>Method of payment.</p>
         */
        @JsonSetter(value = "Method", nulls = Nulls.SKIP)
        public Builder method(Optional<String> method) {
            this.method = method;
            return this;
        }

        public Builder method(String method) {
            this.method = Optional.ofNullable(method);
            return this;
        }

        /**
         * <p>Net amount after deductions.</p>
         */
        @JsonSetter(value = "NetAmount", nulls = Nulls.SKIP)
        public Builder netAmount(Optional<Float> netAmount) {
            this.netAmount = netAmount;
            return this;
        }

        public Builder netAmount(Float netAmount) {
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        @JsonSetter(value = "OrderId", nulls = Nulls.SKIP)
        public Builder orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        public Builder orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        @JsonSetter(value = "pageidentifier", nulls = Nulls.SKIP)
        public Builder pageidentifier(Optional<String> pageidentifier) {
            this.pageidentifier = pageidentifier;
            return this;
        }

        public Builder pageidentifier(String pageidentifier) {
            this.pageidentifier = Optional.ofNullable(pageidentifier);
            return this;
        }

        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        /**
         * <p>Payment data associated with the transaction.</p>
         */
        @JsonSetter(value = "PaymentData", nulls = Nulls.SKIP)
        public Builder paymentData(Optional<QueryPaymentData> paymentData) {
            this.paymentData = paymentData;
            return this;
        }

        public Builder paymentData(QueryPaymentData paymentData) {
            this.paymentData = Optional.ofNullable(paymentData);
            return this;
        }

        /**
         * <p>Transaction ID for the payment.</p>
         */
        @JsonSetter(value = "PaymentTransId", nulls = Nulls.SKIP)
        public Builder paymentTransId(Optional<String> paymentTransId) {
            this.paymentTransId = paymentTransId;
            return this;
        }

        public Builder paymentTransId(String paymentTransId) {
            this.paymentTransId = Optional.ofNullable(paymentTransId);
            return this;
        }

        /**
         * <p>The 'Doing Business As' (DBA) name of the paypoint.</p>
         */
        @JsonSetter(value = "PaypointDbaname", nulls = Nulls.SKIP)
        public Builder paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        public Builder paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        /**
         * <p>Entryname for the paypoint.</p>
         */
        @JsonSetter(value = "PaypointEntryname", nulls = Nulls.SKIP)
        public Builder paypointEntryname(Optional<String> paypointEntryname) {
            this.paypointEntryname = paypointEntryname;
            return this;
        }

        public Builder paypointEntryname(String paypointEntryname) {
            this.paypointEntryname = Optional.ofNullable(paypointEntryname);
            return this;
        }

        /**
         * <p>Legal name of the paypoint.</p>
         */
        @JsonSetter(value = "PaypointLegalname", nulls = Nulls.SKIP)
        public Builder paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        public Builder paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        /**
         * <p>Description of the reason for chargeback.</p>
         */
        @JsonSetter(value = "Reason", nulls = Nulls.SKIP)
        public Builder reason(Optional<String> reason) {
            this.reason = reason;
            return this;
        }

        public Builder reason(String reason) {
            this.reason = Optional.ofNullable(reason);
            return this;
        }

        /**
         * <p>Code representing the reason for chargeback.</p>
         */
        @JsonSetter(value = "ReasonCode", nulls = Nulls.SKIP)
        public Builder reasonCode(Optional<String> reasonCode) {
            this.reasonCode = reasonCode;
            return this;
        }

        public Builder reasonCode(String reasonCode) {
            this.reasonCode = Optional.ofNullable(reasonCode);
            return this;
        }

        /**
         * <p>Reference number for the transaction.</p>
         */
        @JsonSetter(value = "ReferenceNumber", nulls = Nulls.SKIP)
        public Builder referenceNumber(Optional<String> referenceNumber) {
            this.referenceNumber = referenceNumber;
            return this;
        }

        public Builder referenceNumber(String referenceNumber) {
            this.referenceNumber = Optional.ofNullable(referenceNumber);
            return this;
        }

        @JsonSetter(value = "ReplyBy", nulls = Nulls.SKIP)
        public Builder replyBy(Optional<OffsetDateTime> replyBy) {
            this.replyBy = replyBy;
            return this;
        }

        public Builder replyBy(OffsetDateTime replyBy) {
            this.replyBy = Optional.ofNullable(replyBy);
            return this;
        }

        /**
         * <p>Responses related to the transaction.</p>
         */
        @JsonSetter(value = "Responses", nulls = Nulls.SKIP)
        public Builder responses(Optional<String> responses) {
            this.responses = responses;
            return this;
        }

        public Builder responses(String responses) {
            this.responses = Optional.ofNullable(responses);
            return this;
        }

        /**
         * <p>Reference for any scheduled transactions.</p>
         */
        @JsonSetter(value = "ScheduleReference", nulls = Nulls.SKIP)
        public Builder scheduleReference(Optional<Integer> scheduleReference) {
            this.scheduleReference = scheduleReference;
            return this;
        }

        public Builder scheduleReference(Integer scheduleReference) {
            this.scheduleReference = Optional.ofNullable(scheduleReference);
            return this;
        }

        /**
         * <p>Status of the transaction.</p>
         */
        @JsonSetter(value = "Status", nulls = Nulls.SKIP)
        public Builder status(Optional<Integer> status) {
            this.status = status;
            return this;
        }

        public Builder status(Integer status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "Transaction", nulls = Nulls.SKIP)
        public Builder transaction(Optional<TransactionQueryRecords> transaction) {
            this.transaction = transaction;
            return this;
        }

        public Builder transaction(TransactionQueryRecords transaction) {
            this.transaction = Optional.ofNullable(transaction);
            return this;
        }

        @JsonSetter(value = "TransactionTime", nulls = Nulls.SKIP)
        public Builder transactionTime(Optional<OffsetDateTime> transactionTime) {
            this.transactionTime = transactionTime;
            return this;
        }

        public Builder transactionTime(OffsetDateTime transactionTime) {
            this.transactionTime = Optional.ofNullable(transactionTime);
            return this;
        }

        public QueryChargebacksResponseRecordsItem build() {
            return new QueryChargebacksResponseRecordsItem(
                    accountType,
                    caseNumber,
                    chargebackDate,
                    createdAt,
                    customer,
                    externalPaypointId,
                    id,
                    lastFour,
                    method,
                    netAmount,
                    orderId,
                    pageidentifier,
                    parentOrgName,
                    paymentData,
                    paymentTransId,
                    paypointDbaname,
                    paypointEntryname,
                    paypointLegalname,
                    reason,
                    reasonCode,
                    referenceNumber,
                    replyBy,
                    responses,
                    scheduleReference,
                    status,
                    transaction,
                    transactionTime,
                    additionalProperties);
        }
    }
}
