/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ButtomElement.Builder.class)
public final class ButtomElement {
    private final Optional<String> label;

    private final Optional<ButtomElementSize> size;

    private final Map<String, Object> additionalProperties;

    private ButtomElement(
            Optional<String> label, Optional<ButtomElementSize> size, Map<String, Object> additionalProperties) {
        this.label = label;
        this.size = size;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Label for custom payment button
     */
    @JsonProperty("label")
    public Optional<String> getLabel() {
        return label;
    }

    /**
     * @return Specify size of custom payment button
     */
    @JsonProperty("size")
    public Optional<ButtomElementSize> getSize() {
        return size;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ButtomElement && equalTo((ButtomElement) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ButtomElement other) {
        return label.equals(other.label) && size.equals(other.size);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.label, this.size);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> label = Optional.empty();

        private Optional<ButtomElementSize> size = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ButtomElement other) {
            label(other.getLabel());
            size(other.getSize());
            return this;
        }

        /**
         * <p>Label for custom payment button</p>
         */
        @JsonSetter(value = "label", nulls = Nulls.SKIP)
        public Builder label(Optional<String> label) {
            this.label = label;
            return this;
        }

        public Builder label(String label) {
            this.label = Optional.ofNullable(label);
            return this;
        }

        /**
         * <p>Specify size of custom payment button</p>
         */
        @JsonSetter(value = "size", nulls = Nulls.SKIP)
        public Builder size(Optional<ButtomElementSize> size) {
            this.size = size;
            return this;
        }

        public Builder size(ButtomElementSize size) {
            this.size = Optional.ofNullable(size);
            return this;
        }

        public ButtomElement build() {
            return new ButtomElement(label, size, additionalProperties);
        }
    }
}
