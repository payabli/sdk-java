/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryBatchesResponseRecordsItem.Builder.class)
public final class QueryBatchesResponseRecordsItem {
    private final Optional<AchHolderType> achHolderType;

    private final Optional<String> achSecCode;

    private final Optional<Double> batchAmount;

    private final Optional<Double> batchAuthAmount;

    private final Optional<OffsetDateTime> batchDate;

    private final Optional<Double> batchFeesAmount;

    private final Optional<Double> batchHoldAmount;

    private final Optional<String> batchNumber;

    private final Optional<Integer> batchRecords;

    private final Optional<Double> batchRefundAmount;

    private final Optional<Double> batchReleasedAmount;

    private final Optional<Double> batchReturnedAmount;

    private final Optional<Double> batchSplitAmount;

    private final Optional<Integer> batchStatus;

    private final Optional<Long> chargebackId;

    private final Optional<List<QueryCFeeTransaction>> cfeeTransactions;

    private final Optional<String> connectorName;

    private final Optional<OffsetDateTime> depositDate;

    private final Optional<String> deviceId;

    private final Optional<String> entryName;

    private final Optional<Long> entryPageid;

    private final Optional<OffsetDateTime> expectedDepositDate;

    private final Optional<String> externalPaypointId;

    private final Optional<Double> feeAmount;

    private final Optional<Integer> idBatch;

    private final Optional<String> method;

    private final Optional<Long> orgId;

    private final Optional<String> parentOrgName;

    private final Optional<Integer> paymentSettlementStatus;

    private final Optional<Long> payorId;

    private final Optional<String> paypointDba;

    private final Optional<Long> paypointId;

    private final Optional<String> paypointName;

    private final Optional<Double> pendingFeeAmount;

    private final Optional<Long> refundId;

    private final Optional<Long> retrievalId;

    private final Optional<Long> returnedId;

    private final Optional<List<SplitFundingContent>> splitFundingInstructions;

    private final Optional<Double> totalAmount;

    private final Optional<String> transfer;

    private final Optional<OffsetDateTime> transferDate;

    private final Map<String, Object> additionalProperties;

    private QueryBatchesResponseRecordsItem(
            Optional<AchHolderType> achHolderType,
            Optional<String> achSecCode,
            Optional<Double> batchAmount,
            Optional<Double> batchAuthAmount,
            Optional<OffsetDateTime> batchDate,
            Optional<Double> batchFeesAmount,
            Optional<Double> batchHoldAmount,
            Optional<String> batchNumber,
            Optional<Integer> batchRecords,
            Optional<Double> batchRefundAmount,
            Optional<Double> batchReleasedAmount,
            Optional<Double> batchReturnedAmount,
            Optional<Double> batchSplitAmount,
            Optional<Integer> batchStatus,
            Optional<Long> chargebackId,
            Optional<List<QueryCFeeTransaction>> cfeeTransactions,
            Optional<String> connectorName,
            Optional<OffsetDateTime> depositDate,
            Optional<String> deviceId,
            Optional<String> entryName,
            Optional<Long> entryPageid,
            Optional<OffsetDateTime> expectedDepositDate,
            Optional<String> externalPaypointId,
            Optional<Double> feeAmount,
            Optional<Integer> idBatch,
            Optional<String> method,
            Optional<Long> orgId,
            Optional<String> parentOrgName,
            Optional<Integer> paymentSettlementStatus,
            Optional<Long> payorId,
            Optional<String> paypointDba,
            Optional<Long> paypointId,
            Optional<String> paypointName,
            Optional<Double> pendingFeeAmount,
            Optional<Long> refundId,
            Optional<Long> retrievalId,
            Optional<Long> returnedId,
            Optional<List<SplitFundingContent>> splitFundingInstructions,
            Optional<Double> totalAmount,
            Optional<String> transfer,
            Optional<OffsetDateTime> transferDate,
            Map<String, Object> additionalProperties) {
        this.achHolderType = achHolderType;
        this.achSecCode = achSecCode;
        this.batchAmount = batchAmount;
        this.batchAuthAmount = batchAuthAmount;
        this.batchDate = batchDate;
        this.batchFeesAmount = batchFeesAmount;
        this.batchHoldAmount = batchHoldAmount;
        this.batchNumber = batchNumber;
        this.batchRecords = batchRecords;
        this.batchRefundAmount = batchRefundAmount;
        this.batchReleasedAmount = batchReleasedAmount;
        this.batchReturnedAmount = batchReturnedAmount;
        this.batchSplitAmount = batchSplitAmount;
        this.batchStatus = batchStatus;
        this.chargebackId = chargebackId;
        this.cfeeTransactions = cfeeTransactions;
        this.connectorName = connectorName;
        this.depositDate = depositDate;
        this.deviceId = deviceId;
        this.entryName = entryName;
        this.entryPageid = entryPageid;
        this.expectedDepositDate = expectedDepositDate;
        this.externalPaypointId = externalPaypointId;
        this.feeAmount = feeAmount;
        this.idBatch = idBatch;
        this.method = method;
        this.orgId = orgId;
        this.parentOrgName = parentOrgName;
        this.paymentSettlementStatus = paymentSettlementStatus;
        this.payorId = payorId;
        this.paypointDba = paypointDba;
        this.paypointId = paypointId;
        this.paypointName = paypointName;
        this.pendingFeeAmount = pendingFeeAmount;
        this.refundId = refundId;
        this.retrievalId = retrievalId;
        this.returnedId = returnedId;
        this.splitFundingInstructions = splitFundingInstructions;
        this.totalAmount = totalAmount;
        this.transfer = transfer;
        this.transferDate = transferDate;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("AchHolderType")
    public Optional<AchHolderType> getAchHolderType() {
        return achHolderType;
    }

    @JsonProperty("AchSecCode")
    public Optional<String> getAchSecCode() {
        return achSecCode;
    }

    /**
     * @return The amount of the batch.
     */
    @JsonProperty("BatchAmount")
    public Optional<Double> getBatchAmount() {
        return batchAmount;
    }

    /**
     * @return
     */
    @JsonProperty("BatchAuthAmount")
    public Optional<Double> getBatchAuthAmount() {
        return batchAuthAmount;
    }

    /**
     * @return The batch date.
     */
    @JsonProperty("BatchDate")
    public Optional<OffsetDateTime> getBatchDate() {
        return batchDate;
    }

    /**
     * @return The total of fees in the batch.
     */
    @JsonProperty("BatchFeesAmount")
    public Optional<Double> getBatchFeesAmount() {
        return batchFeesAmount;
    }

    /**
     * @return The total amount of the batch that's being held for fraud or risk concerns.
     */
    @JsonProperty("BatchHoldAmount")
    public Optional<Double> getBatchHoldAmount() {
        return batchHoldAmount;
    }

    @JsonProperty("BatchNumber")
    public Optional<String> getBatchNumber() {
        return batchNumber;
    }

    /**
     * @return The number of records in the batch.
     */
    @JsonProperty("BatchRecords")
    public Optional<Integer> getBatchRecords() {
        return batchRecords;
    }

    /**
     * @return The total amount of refunds deducted from batch.
     */
    @JsonProperty("BatchRefundAmount")
    public Optional<Double> getBatchRefundAmount() {
        return batchRefundAmount;
    }

    /**
     * @return Previously held funds that have been released after a risk review.
     */
    @JsonProperty("BatchReleasedAmount")
    public Optional<Double> getBatchReleasedAmount() {
        return batchReleasedAmount;
    }

    /**
     * @return Total amount of ACH returns deducted from batch.
     */
    @JsonProperty("BatchReturnedAmount")
    public Optional<Double> getBatchReturnedAmount() {
        return batchReturnedAmount;
    }

    /**
     * @return Total of split transactions that included split funding instructions at the time of authorization.
     */
    @JsonProperty("BatchSplitAmount")
    public Optional<Double> getBatchSplitAmount() {
        return batchSplitAmount;
    }

    /**
     * @return The batch status. See <a href="/developers/references/money-in-statuses#batch-status">Batch Status</a> for more.
     */
    @JsonProperty("BatchStatus")
    public Optional<Integer> getBatchStatus() {
        return batchStatus;
    }

    @JsonProperty("ChargebackId")
    public Optional<Long> getChargebackId() {
        return chargebackId;
    }

    /**
     * @return Service Fee or sub-charge transaction associated to the main
     * transaction.
     */
    @JsonProperty("CfeeTransactions")
    public Optional<List<QueryCFeeTransaction>> getCfeeTransactions() {
        return cfeeTransactions;
    }

    /**
     * @return
     */
    @JsonProperty("ConnectorName")
    public Optional<String> getConnectorName() {
        return connectorName;
    }

    @JsonProperty("DepositDate")
    public Optional<OffsetDateTime> getDepositDate() {
        return depositDate;
    }

    @JsonProperty("DeviceId")
    public Optional<String> getDeviceId() {
        return deviceId;
    }

    @JsonProperty("EntryName")
    public Optional<String> getEntryName() {
        return entryName;
    }

    @JsonProperty("EntryPageid")
    public Optional<Long> getEntryPageid() {
        return entryPageid;
    }

    @JsonProperty("ExpectedDepositDate")
    public Optional<OffsetDateTime> getExpectedDepositDate() {
        return expectedDepositDate;
    }

    @JsonProperty("externalPaypointID")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    @JsonProperty("FeeAmount")
    public Optional<Double> getFeeAmount() {
        return feeAmount;
    }

    /**
     * @return The batch ID.
     */
    @JsonProperty("IdBatch")
    public Optional<Integer> getIdBatch() {
        return idBatch;
    }

    /**
     * @return The payment method used.
     */
    @JsonProperty("Method")
    public Optional<String> getMethod() {
        return method;
    }

    @JsonProperty("OrgId")
    public Optional<Long> getOrgId() {
        return orgId;
    }

    /**
     * @return The entrypoint's parent org.
     */
    @JsonProperty("ParentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    /**
     * @return The payment's settlement status.
     */
    @JsonProperty("PaymentSettlementStatus")
    public Optional<Integer> getPaymentSettlementStatus() {
        return paymentSettlementStatus;
    }

    @JsonProperty("PayorId")
    public Optional<Long> getPayorId() {
        return payorId;
    }

    /**
     * @return Paypoint DBA name.
     */
    @JsonProperty("PaypointDba")
    public Optional<String> getPaypointDba() {
        return paypointDba;
    }

    @JsonProperty("PaypointId")
    public Optional<Long> getPaypointId() {
        return paypointId;
    }

    @JsonProperty("PaypointName")
    public Optional<String> getPaypointName() {
        return paypointName;
    }

    @JsonProperty("PendingFeeAmount")
    public Optional<Double> getPendingFeeAmount() {
        return pendingFeeAmount;
    }

    @JsonProperty("RefundId")
    public Optional<Long> getRefundId() {
        return refundId;
    }

    @JsonProperty("RetrievalId")
    public Optional<Long> getRetrievalId() {
        return retrievalId;
    }

    @JsonProperty("ReturnedId")
    public Optional<Long> getReturnedId() {
        return returnedId;
    }

    /**
     * @return Split funding instructions for the transaction
     */
    @JsonProperty("splitFundingInstructions")
    public Optional<List<SplitFundingContent>> getSplitFundingInstructions() {
        return splitFundingInstructions;
    }

    /**
     * @return Total amount of the batch.
     */
    @JsonProperty("TotalAmount")
    public Optional<Double> getTotalAmount() {
        return totalAmount;
    }

    /**
     * @return
     */
    @JsonProperty("Transfer")
    public Optional<String> getTransfer() {
        return transfer;
    }

    /**
     * @return The batch transfer date.
     */
    @JsonProperty("TransferDate")
    public Optional<OffsetDateTime> getTransferDate() {
        return transferDate;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryBatchesResponseRecordsItem && equalTo((QueryBatchesResponseRecordsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryBatchesResponseRecordsItem other) {
        return achHolderType.equals(other.achHolderType)
                && achSecCode.equals(other.achSecCode)
                && batchAmount.equals(other.batchAmount)
                && batchAuthAmount.equals(other.batchAuthAmount)
                && batchDate.equals(other.batchDate)
                && batchFeesAmount.equals(other.batchFeesAmount)
                && batchHoldAmount.equals(other.batchHoldAmount)
                && batchNumber.equals(other.batchNumber)
                && batchRecords.equals(other.batchRecords)
                && batchRefundAmount.equals(other.batchRefundAmount)
                && batchReleasedAmount.equals(other.batchReleasedAmount)
                && batchReturnedAmount.equals(other.batchReturnedAmount)
                && batchSplitAmount.equals(other.batchSplitAmount)
                && batchStatus.equals(other.batchStatus)
                && chargebackId.equals(other.chargebackId)
                && cfeeTransactions.equals(other.cfeeTransactions)
                && connectorName.equals(other.connectorName)
                && depositDate.equals(other.depositDate)
                && deviceId.equals(other.deviceId)
                && entryName.equals(other.entryName)
                && entryPageid.equals(other.entryPageid)
                && expectedDepositDate.equals(other.expectedDepositDate)
                && externalPaypointId.equals(other.externalPaypointId)
                && feeAmount.equals(other.feeAmount)
                && idBatch.equals(other.idBatch)
                && method.equals(other.method)
                && orgId.equals(other.orgId)
                && parentOrgName.equals(other.parentOrgName)
                && paymentSettlementStatus.equals(other.paymentSettlementStatus)
                && payorId.equals(other.payorId)
                && paypointDba.equals(other.paypointDba)
                && paypointId.equals(other.paypointId)
                && paypointName.equals(other.paypointName)
                && pendingFeeAmount.equals(other.pendingFeeAmount)
                && refundId.equals(other.refundId)
                && retrievalId.equals(other.retrievalId)
                && returnedId.equals(other.returnedId)
                && splitFundingInstructions.equals(other.splitFundingInstructions)
                && totalAmount.equals(other.totalAmount)
                && transfer.equals(other.transfer)
                && transferDate.equals(other.transferDate);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.achHolderType,
                this.achSecCode,
                this.batchAmount,
                this.batchAuthAmount,
                this.batchDate,
                this.batchFeesAmount,
                this.batchHoldAmount,
                this.batchNumber,
                this.batchRecords,
                this.batchRefundAmount,
                this.batchReleasedAmount,
                this.batchReturnedAmount,
                this.batchSplitAmount,
                this.batchStatus,
                this.chargebackId,
                this.cfeeTransactions,
                this.connectorName,
                this.depositDate,
                this.deviceId,
                this.entryName,
                this.entryPageid,
                this.expectedDepositDate,
                this.externalPaypointId,
                this.feeAmount,
                this.idBatch,
                this.method,
                this.orgId,
                this.parentOrgName,
                this.paymentSettlementStatus,
                this.payorId,
                this.paypointDba,
                this.paypointId,
                this.paypointName,
                this.pendingFeeAmount,
                this.refundId,
                this.retrievalId,
                this.returnedId,
                this.splitFundingInstructions,
                this.totalAmount,
                this.transfer,
                this.transferDate);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<AchHolderType> achHolderType = Optional.empty();

        private Optional<String> achSecCode = Optional.empty();

        private Optional<Double> batchAmount = Optional.empty();

        private Optional<Double> batchAuthAmount = Optional.empty();

        private Optional<OffsetDateTime> batchDate = Optional.empty();

        private Optional<Double> batchFeesAmount = Optional.empty();

        private Optional<Double> batchHoldAmount = Optional.empty();

        private Optional<String> batchNumber = Optional.empty();

        private Optional<Integer> batchRecords = Optional.empty();

        private Optional<Double> batchRefundAmount = Optional.empty();

        private Optional<Double> batchReleasedAmount = Optional.empty();

        private Optional<Double> batchReturnedAmount = Optional.empty();

        private Optional<Double> batchSplitAmount = Optional.empty();

        private Optional<Integer> batchStatus = Optional.empty();

        private Optional<Long> chargebackId = Optional.empty();

        private Optional<List<QueryCFeeTransaction>> cfeeTransactions = Optional.empty();

        private Optional<String> connectorName = Optional.empty();

        private Optional<OffsetDateTime> depositDate = Optional.empty();

        private Optional<String> deviceId = Optional.empty();

        private Optional<String> entryName = Optional.empty();

        private Optional<Long> entryPageid = Optional.empty();

        private Optional<OffsetDateTime> expectedDepositDate = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<Double> feeAmount = Optional.empty();

        private Optional<Integer> idBatch = Optional.empty();

        private Optional<String> method = Optional.empty();

        private Optional<Long> orgId = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<Integer> paymentSettlementStatus = Optional.empty();

        private Optional<Long> payorId = Optional.empty();

        private Optional<String> paypointDba = Optional.empty();

        private Optional<Long> paypointId = Optional.empty();

        private Optional<String> paypointName = Optional.empty();

        private Optional<Double> pendingFeeAmount = Optional.empty();

        private Optional<Long> refundId = Optional.empty();

        private Optional<Long> retrievalId = Optional.empty();

        private Optional<Long> returnedId = Optional.empty();

        private Optional<List<SplitFundingContent>> splitFundingInstructions = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<String> transfer = Optional.empty();

        private Optional<OffsetDateTime> transferDate = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryBatchesResponseRecordsItem other) {
            achHolderType(other.getAchHolderType());
            achSecCode(other.getAchSecCode());
            batchAmount(other.getBatchAmount());
            batchAuthAmount(other.getBatchAuthAmount());
            batchDate(other.getBatchDate());
            batchFeesAmount(other.getBatchFeesAmount());
            batchHoldAmount(other.getBatchHoldAmount());
            batchNumber(other.getBatchNumber());
            batchRecords(other.getBatchRecords());
            batchRefundAmount(other.getBatchRefundAmount());
            batchReleasedAmount(other.getBatchReleasedAmount());
            batchReturnedAmount(other.getBatchReturnedAmount());
            batchSplitAmount(other.getBatchSplitAmount());
            batchStatus(other.getBatchStatus());
            chargebackId(other.getChargebackId());
            cfeeTransactions(other.getCfeeTransactions());
            connectorName(other.getConnectorName());
            depositDate(other.getDepositDate());
            deviceId(other.getDeviceId());
            entryName(other.getEntryName());
            entryPageid(other.getEntryPageid());
            expectedDepositDate(other.getExpectedDepositDate());
            externalPaypointId(other.getExternalPaypointId());
            feeAmount(other.getFeeAmount());
            idBatch(other.getIdBatch());
            method(other.getMethod());
            orgId(other.getOrgId());
            parentOrgName(other.getParentOrgName());
            paymentSettlementStatus(other.getPaymentSettlementStatus());
            payorId(other.getPayorId());
            paypointDba(other.getPaypointDba());
            paypointId(other.getPaypointId());
            paypointName(other.getPaypointName());
            pendingFeeAmount(other.getPendingFeeAmount());
            refundId(other.getRefundId());
            retrievalId(other.getRetrievalId());
            returnedId(other.getReturnedId());
            splitFundingInstructions(other.getSplitFundingInstructions());
            totalAmount(other.getTotalAmount());
            transfer(other.getTransfer());
            transferDate(other.getTransferDate());
            return this;
        }

        @JsonSetter(value = "AchHolderType", nulls = Nulls.SKIP)
        public Builder achHolderType(Optional<AchHolderType> achHolderType) {
            this.achHolderType = achHolderType;
            return this;
        }

        public Builder achHolderType(AchHolderType achHolderType) {
            this.achHolderType = Optional.ofNullable(achHolderType);
            return this;
        }

        @JsonSetter(value = "AchSecCode", nulls = Nulls.SKIP)
        public Builder achSecCode(Optional<String> achSecCode) {
            this.achSecCode = achSecCode;
            return this;
        }

        public Builder achSecCode(String achSecCode) {
            this.achSecCode = Optional.ofNullable(achSecCode);
            return this;
        }

        /**
         * <p>The amount of the batch.</p>
         */
        @JsonSetter(value = "BatchAmount", nulls = Nulls.SKIP)
        public Builder batchAmount(Optional<Double> batchAmount) {
            this.batchAmount = batchAmount;
            return this;
        }

        public Builder batchAmount(Double batchAmount) {
            this.batchAmount = Optional.ofNullable(batchAmount);
            return this;
        }

        @JsonSetter(value = "BatchAuthAmount", nulls = Nulls.SKIP)
        public Builder batchAuthAmount(Optional<Double> batchAuthAmount) {
            this.batchAuthAmount = batchAuthAmount;
            return this;
        }

        public Builder batchAuthAmount(Double batchAuthAmount) {
            this.batchAuthAmount = Optional.ofNullable(batchAuthAmount);
            return this;
        }

        /**
         * <p>The batch date.</p>
         */
        @JsonSetter(value = "BatchDate", nulls = Nulls.SKIP)
        public Builder batchDate(Optional<OffsetDateTime> batchDate) {
            this.batchDate = batchDate;
            return this;
        }

        public Builder batchDate(OffsetDateTime batchDate) {
            this.batchDate = Optional.ofNullable(batchDate);
            return this;
        }

        /**
         * <p>The total of fees in the batch.</p>
         */
        @JsonSetter(value = "BatchFeesAmount", nulls = Nulls.SKIP)
        public Builder batchFeesAmount(Optional<Double> batchFeesAmount) {
            this.batchFeesAmount = batchFeesAmount;
            return this;
        }

        public Builder batchFeesAmount(Double batchFeesAmount) {
            this.batchFeesAmount = Optional.ofNullable(batchFeesAmount);
            return this;
        }

        /**
         * <p>The total amount of the batch that's being held for fraud or risk concerns.</p>
         */
        @JsonSetter(value = "BatchHoldAmount", nulls = Nulls.SKIP)
        public Builder batchHoldAmount(Optional<Double> batchHoldAmount) {
            this.batchHoldAmount = batchHoldAmount;
            return this;
        }

        public Builder batchHoldAmount(Double batchHoldAmount) {
            this.batchHoldAmount = Optional.ofNullable(batchHoldAmount);
            return this;
        }

        @JsonSetter(value = "BatchNumber", nulls = Nulls.SKIP)
        public Builder batchNumber(Optional<String> batchNumber) {
            this.batchNumber = batchNumber;
            return this;
        }

        public Builder batchNumber(String batchNumber) {
            this.batchNumber = Optional.ofNullable(batchNumber);
            return this;
        }

        /**
         * <p>The number of records in the batch.</p>
         */
        @JsonSetter(value = "BatchRecords", nulls = Nulls.SKIP)
        public Builder batchRecords(Optional<Integer> batchRecords) {
            this.batchRecords = batchRecords;
            return this;
        }

        public Builder batchRecords(Integer batchRecords) {
            this.batchRecords = Optional.ofNullable(batchRecords);
            return this;
        }

        /**
         * <p>The total amount of refunds deducted from batch.</p>
         */
        @JsonSetter(value = "BatchRefundAmount", nulls = Nulls.SKIP)
        public Builder batchRefundAmount(Optional<Double> batchRefundAmount) {
            this.batchRefundAmount = batchRefundAmount;
            return this;
        }

        public Builder batchRefundAmount(Double batchRefundAmount) {
            this.batchRefundAmount = Optional.ofNullable(batchRefundAmount);
            return this;
        }

        /**
         * <p>Previously held funds that have been released after a risk review.</p>
         */
        @JsonSetter(value = "BatchReleasedAmount", nulls = Nulls.SKIP)
        public Builder batchReleasedAmount(Optional<Double> batchReleasedAmount) {
            this.batchReleasedAmount = batchReleasedAmount;
            return this;
        }

        public Builder batchReleasedAmount(Double batchReleasedAmount) {
            this.batchReleasedAmount = Optional.ofNullable(batchReleasedAmount);
            return this;
        }

        /**
         * <p>Total amount of ACH returns deducted from batch.</p>
         */
        @JsonSetter(value = "BatchReturnedAmount", nulls = Nulls.SKIP)
        public Builder batchReturnedAmount(Optional<Double> batchReturnedAmount) {
            this.batchReturnedAmount = batchReturnedAmount;
            return this;
        }

        public Builder batchReturnedAmount(Double batchReturnedAmount) {
            this.batchReturnedAmount = Optional.ofNullable(batchReturnedAmount);
            return this;
        }

        /**
         * <p>Total of split transactions that included split funding instructions at the time of authorization.</p>
         */
        @JsonSetter(value = "BatchSplitAmount", nulls = Nulls.SKIP)
        public Builder batchSplitAmount(Optional<Double> batchSplitAmount) {
            this.batchSplitAmount = batchSplitAmount;
            return this;
        }

        public Builder batchSplitAmount(Double batchSplitAmount) {
            this.batchSplitAmount = Optional.ofNullable(batchSplitAmount);
            return this;
        }

        /**
         * <p>The batch status. See <a href="/developers/references/money-in-statuses#batch-status">Batch Status</a> for more.</p>
         */
        @JsonSetter(value = "BatchStatus", nulls = Nulls.SKIP)
        public Builder batchStatus(Optional<Integer> batchStatus) {
            this.batchStatus = batchStatus;
            return this;
        }

        public Builder batchStatus(Integer batchStatus) {
            this.batchStatus = Optional.ofNullable(batchStatus);
            return this;
        }

        @JsonSetter(value = "ChargebackId", nulls = Nulls.SKIP)
        public Builder chargebackId(Optional<Long> chargebackId) {
            this.chargebackId = chargebackId;
            return this;
        }

        public Builder chargebackId(Long chargebackId) {
            this.chargebackId = Optional.ofNullable(chargebackId);
            return this;
        }

        /**
         * <p>Service Fee or sub-charge transaction associated to the main
         * transaction.</p>
         */
        @JsonSetter(value = "CfeeTransactions", nulls = Nulls.SKIP)
        public Builder cfeeTransactions(Optional<List<QueryCFeeTransaction>> cfeeTransactions) {
            this.cfeeTransactions = cfeeTransactions;
            return this;
        }

        public Builder cfeeTransactions(List<QueryCFeeTransaction> cfeeTransactions) {
            this.cfeeTransactions = Optional.ofNullable(cfeeTransactions);
            return this;
        }

        @JsonSetter(value = "ConnectorName", nulls = Nulls.SKIP)
        public Builder connectorName(Optional<String> connectorName) {
            this.connectorName = connectorName;
            return this;
        }

        public Builder connectorName(String connectorName) {
            this.connectorName = Optional.ofNullable(connectorName);
            return this;
        }

        @JsonSetter(value = "DepositDate", nulls = Nulls.SKIP)
        public Builder depositDate(Optional<OffsetDateTime> depositDate) {
            this.depositDate = depositDate;
            return this;
        }

        public Builder depositDate(OffsetDateTime depositDate) {
            this.depositDate = Optional.ofNullable(depositDate);
            return this;
        }

        @JsonSetter(value = "DeviceId", nulls = Nulls.SKIP)
        public Builder deviceId(Optional<String> deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        public Builder deviceId(String deviceId) {
            this.deviceId = Optional.ofNullable(deviceId);
            return this;
        }

        @JsonSetter(value = "EntryName", nulls = Nulls.SKIP)
        public Builder entryName(Optional<String> entryName) {
            this.entryName = entryName;
            return this;
        }

        public Builder entryName(String entryName) {
            this.entryName = Optional.ofNullable(entryName);
            return this;
        }

        @JsonSetter(value = "EntryPageid", nulls = Nulls.SKIP)
        public Builder entryPageid(Optional<Long> entryPageid) {
            this.entryPageid = entryPageid;
            return this;
        }

        public Builder entryPageid(Long entryPageid) {
            this.entryPageid = Optional.ofNullable(entryPageid);
            return this;
        }

        @JsonSetter(value = "ExpectedDepositDate", nulls = Nulls.SKIP)
        public Builder expectedDepositDate(Optional<OffsetDateTime> expectedDepositDate) {
            this.expectedDepositDate = expectedDepositDate;
            return this;
        }

        public Builder expectedDepositDate(OffsetDateTime expectedDepositDate) {
            this.expectedDepositDate = Optional.ofNullable(expectedDepositDate);
            return this;
        }

        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        @JsonSetter(value = "FeeAmount", nulls = Nulls.SKIP)
        public Builder feeAmount(Optional<Double> feeAmount) {
            this.feeAmount = feeAmount;
            return this;
        }

        public Builder feeAmount(Double feeAmount) {
            this.feeAmount = Optional.ofNullable(feeAmount);
            return this;
        }

        /**
         * <p>The batch ID.</p>
         */
        @JsonSetter(value = "IdBatch", nulls = Nulls.SKIP)
        public Builder idBatch(Optional<Integer> idBatch) {
            this.idBatch = idBatch;
            return this;
        }

        public Builder idBatch(Integer idBatch) {
            this.idBatch = Optional.ofNullable(idBatch);
            return this;
        }

        /**
         * <p>The payment method used.</p>
         */
        @JsonSetter(value = "Method", nulls = Nulls.SKIP)
        public Builder method(Optional<String> method) {
            this.method = method;
            return this;
        }

        public Builder method(String method) {
            this.method = Optional.ofNullable(method);
            return this;
        }

        @JsonSetter(value = "OrgId", nulls = Nulls.SKIP)
        public Builder orgId(Optional<Long> orgId) {
            this.orgId = orgId;
            return this;
        }

        public Builder orgId(Long orgId) {
            this.orgId = Optional.ofNullable(orgId);
            return this;
        }

        /**
         * <p>The entrypoint's parent org.</p>
         */
        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        /**
         * <p>The payment's settlement status.</p>
         */
        @JsonSetter(value = "PaymentSettlementStatus", nulls = Nulls.SKIP)
        public Builder paymentSettlementStatus(Optional<Integer> paymentSettlementStatus) {
            this.paymentSettlementStatus = paymentSettlementStatus;
            return this;
        }

        public Builder paymentSettlementStatus(Integer paymentSettlementStatus) {
            this.paymentSettlementStatus = Optional.ofNullable(paymentSettlementStatus);
            return this;
        }

        @JsonSetter(value = "PayorId", nulls = Nulls.SKIP)
        public Builder payorId(Optional<Long> payorId) {
            this.payorId = payorId;
            return this;
        }

        public Builder payorId(Long payorId) {
            this.payorId = Optional.ofNullable(payorId);
            return this;
        }

        /**
         * <p>Paypoint DBA name.</p>
         */
        @JsonSetter(value = "PaypointDba", nulls = Nulls.SKIP)
        public Builder paypointDba(Optional<String> paypointDba) {
            this.paypointDba = paypointDba;
            return this;
        }

        public Builder paypointDba(String paypointDba) {
            this.paypointDba = Optional.ofNullable(paypointDba);
            return this;
        }

        @JsonSetter(value = "PaypointId", nulls = Nulls.SKIP)
        public Builder paypointId(Optional<Long> paypointId) {
            this.paypointId = paypointId;
            return this;
        }

        public Builder paypointId(Long paypointId) {
            this.paypointId = Optional.ofNullable(paypointId);
            return this;
        }

        @JsonSetter(value = "PaypointName", nulls = Nulls.SKIP)
        public Builder paypointName(Optional<String> paypointName) {
            this.paypointName = paypointName;
            return this;
        }

        public Builder paypointName(String paypointName) {
            this.paypointName = Optional.ofNullable(paypointName);
            return this;
        }

        @JsonSetter(value = "PendingFeeAmount", nulls = Nulls.SKIP)
        public Builder pendingFeeAmount(Optional<Double> pendingFeeAmount) {
            this.pendingFeeAmount = pendingFeeAmount;
            return this;
        }

        public Builder pendingFeeAmount(Double pendingFeeAmount) {
            this.pendingFeeAmount = Optional.ofNullable(pendingFeeAmount);
            return this;
        }

        @JsonSetter(value = "RefundId", nulls = Nulls.SKIP)
        public Builder refundId(Optional<Long> refundId) {
            this.refundId = refundId;
            return this;
        }

        public Builder refundId(Long refundId) {
            this.refundId = Optional.ofNullable(refundId);
            return this;
        }

        @JsonSetter(value = "RetrievalId", nulls = Nulls.SKIP)
        public Builder retrievalId(Optional<Long> retrievalId) {
            this.retrievalId = retrievalId;
            return this;
        }

        public Builder retrievalId(Long retrievalId) {
            this.retrievalId = Optional.ofNullable(retrievalId);
            return this;
        }

        @JsonSetter(value = "ReturnedId", nulls = Nulls.SKIP)
        public Builder returnedId(Optional<Long> returnedId) {
            this.returnedId = returnedId;
            return this;
        }

        public Builder returnedId(Long returnedId) {
            this.returnedId = Optional.ofNullable(returnedId);
            return this;
        }

        /**
         * <p>Split funding instructions for the transaction</p>
         */
        @JsonSetter(value = "splitFundingInstructions", nulls = Nulls.SKIP)
        public Builder splitFundingInstructions(Optional<List<SplitFundingContent>> splitFundingInstructions) {
            this.splitFundingInstructions = splitFundingInstructions;
            return this;
        }

        public Builder splitFundingInstructions(List<SplitFundingContent> splitFundingInstructions) {
            this.splitFundingInstructions = Optional.ofNullable(splitFundingInstructions);
            return this;
        }

        /**
         * <p>Total amount of the batch.</p>
         */
        @JsonSetter(value = "TotalAmount", nulls = Nulls.SKIP)
        public Builder totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        @JsonSetter(value = "Transfer", nulls = Nulls.SKIP)
        public Builder transfer(Optional<String> transfer) {
            this.transfer = transfer;
            return this;
        }

        public Builder transfer(String transfer) {
            this.transfer = Optional.ofNullable(transfer);
            return this;
        }

        /**
         * <p>The batch transfer date.</p>
         */
        @JsonSetter(value = "TransferDate", nulls = Nulls.SKIP)
        public Builder transferDate(Optional<OffsetDateTime> transferDate) {
            this.transferDate = transferDate;
            return this;
        }

        public Builder transferDate(OffsetDateTime transferDate) {
            this.transferDate = Optional.ofNullable(transferDate);
            return this;
        }

        public QueryBatchesResponseRecordsItem build() {
            return new QueryBatchesResponseRecordsItem(
                    achHolderType,
                    achSecCode,
                    batchAmount,
                    batchAuthAmount,
                    batchDate,
                    batchFeesAmount,
                    batchHoldAmount,
                    batchNumber,
                    batchRecords,
                    batchRefundAmount,
                    batchReleasedAmount,
                    batchReturnedAmount,
                    batchSplitAmount,
                    batchStatus,
                    chargebackId,
                    cfeeTransactions,
                    connectorName,
                    depositDate,
                    deviceId,
                    entryName,
                    entryPageid,
                    expectedDepositDate,
                    externalPaypointId,
                    feeAmount,
                    idBatch,
                    method,
                    orgId,
                    parentOrgName,
                    paymentSettlementStatus,
                    payorId,
                    paypointDba,
                    paypointId,
                    paypointName,
                    pendingFeeAmount,
                    refundId,
                    retrievalId,
                    returnedId,
                    splitFundingInstructions,
                    totalAmount,
                    transfer,
                    transferDate,
                    additionalProperties);
        }
    }
}
