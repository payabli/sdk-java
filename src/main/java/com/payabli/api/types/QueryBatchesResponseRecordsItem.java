/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryBatchesResponseRecordsItem.Builder.class)
public final class QueryBatchesResponseRecordsItem {
    private final Optional<Double> batchAmount;

    private final Optional<Double> batchAuthAmount;

    private final Optional<OffsetDateTime> batchDate;

    private final Optional<Double> batchFeesAmount;

    private final Optional<Double> batchHoldAmount;

    private final Optional<String> batchNumber;

    private final Optional<Integer> batchRecords;

    private final Optional<Double> batchRefundAmount;

    private final Optional<Double> batchReleasedAmount;

    private final Optional<Double> batchReturnedAmount;

    private final Optional<Double> batchSplitAmount;

    private final Optional<Integer> batchStatus;

    private final Optional<String> connectorName;

    private final Optional<OffsetDateTime> depositDate;

    private final Optional<String> entryName;

    private final Optional<OffsetDateTime> expectedDepositDate;

    private final Optional<String> externalPaypointId;

    private final Optional<Integer> idBatch;

    private final Optional<String> method;

    private final Optional<String> parentOrgName;

    private final Optional<String> paypointDba;

    private final Optional<Long> paypointId;

    private final Optional<String> paypointName;

    private final Optional<String> transfer;

    private final Optional<OffsetDateTime> transferDate;

    private final Map<String, Object> additionalProperties;

    private QueryBatchesResponseRecordsItem(
            Optional<Double> batchAmount,
            Optional<Double> batchAuthAmount,
            Optional<OffsetDateTime> batchDate,
            Optional<Double> batchFeesAmount,
            Optional<Double> batchHoldAmount,
            Optional<String> batchNumber,
            Optional<Integer> batchRecords,
            Optional<Double> batchRefundAmount,
            Optional<Double> batchReleasedAmount,
            Optional<Double> batchReturnedAmount,
            Optional<Double> batchSplitAmount,
            Optional<Integer> batchStatus,
            Optional<String> connectorName,
            Optional<OffsetDateTime> depositDate,
            Optional<String> entryName,
            Optional<OffsetDateTime> expectedDepositDate,
            Optional<String> externalPaypointId,
            Optional<Integer> idBatch,
            Optional<String> method,
            Optional<String> parentOrgName,
            Optional<String> paypointDba,
            Optional<Long> paypointId,
            Optional<String> paypointName,
            Optional<String> transfer,
            Optional<OffsetDateTime> transferDate,
            Map<String, Object> additionalProperties) {
        this.batchAmount = batchAmount;
        this.batchAuthAmount = batchAuthAmount;
        this.batchDate = batchDate;
        this.batchFeesAmount = batchFeesAmount;
        this.batchHoldAmount = batchHoldAmount;
        this.batchNumber = batchNumber;
        this.batchRecords = batchRecords;
        this.batchRefundAmount = batchRefundAmount;
        this.batchReleasedAmount = batchReleasedAmount;
        this.batchReturnedAmount = batchReturnedAmount;
        this.batchSplitAmount = batchSplitAmount;
        this.batchStatus = batchStatus;
        this.connectorName = connectorName;
        this.depositDate = depositDate;
        this.entryName = entryName;
        this.expectedDepositDate = expectedDepositDate;
        this.externalPaypointId = externalPaypointId;
        this.idBatch = idBatch;
        this.method = method;
        this.parentOrgName = parentOrgName;
        this.paypointDba = paypointDba;
        this.paypointId = paypointId;
        this.paypointName = paypointName;
        this.transfer = transfer;
        this.transferDate = transferDate;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The amount of the batch.
     */
    @JsonProperty("BatchAmount")
    public Optional<Double> getBatchAmount() {
        return batchAmount;
    }

    /**
     * @return
     */
    @JsonProperty("BatchAuthAmount")
    public Optional<Double> getBatchAuthAmount() {
        return batchAuthAmount;
    }

    /**
     * @return The batch date.
     */
    @JsonProperty("BatchDate")
    public Optional<OffsetDateTime> getBatchDate() {
        return batchDate;
    }

    /**
     * @return The total of fees in the batch.
     */
    @JsonProperty("BatchFeesAmount")
    public Optional<Double> getBatchFeesAmount() {
        return batchFeesAmount;
    }

    /**
     * @return The total amount of the batch that's being held for fraud or risk concerns.
     */
    @JsonProperty("BatchHoldAmount")
    public Optional<Double> getBatchHoldAmount() {
        return batchHoldAmount;
    }

    @JsonProperty("BatchNumber")
    public Optional<String> getBatchNumber() {
        return batchNumber;
    }

    /**
     * @return The number of records in the batch.
     */
    @JsonProperty("BatchRecords")
    public Optional<Integer> getBatchRecords() {
        return batchRecords;
    }

    /**
     * @return The total amount of refunds deducted from batch.
     */
    @JsonProperty("BatchRefundAmount")
    public Optional<Double> getBatchRefundAmount() {
        return batchRefundAmount;
    }

    /**
     * @return Previously held funds that have been released after a risk review.
     */
    @JsonProperty("BatchReleasedAmount")
    public Optional<Double> getBatchReleasedAmount() {
        return batchReleasedAmount;
    }

    /**
     * @return Total amount of ACH returns deducted from batch.
     */
    @JsonProperty("BatchReturnedAmount")
    public Optional<Double> getBatchReturnedAmount() {
        return batchReturnedAmount;
    }

    /**
     * @return Total of split transactions that included split funding instructions at the time of authorization.
     */
    @JsonProperty("BatchSplitAmount")
    public Optional<Double> getBatchSplitAmount() {
        return batchSplitAmount;
    }

    /**
     * @return The batch status. See <a href="/developers/references/money-in-statuses#batch-status">Batch Status</a> for more.
     */
    @JsonProperty("BatchStatus")
    public Optional<Integer> getBatchStatus() {
        return batchStatus;
    }

    /**
     * @return
     */
    @JsonProperty("ConnectorName")
    public Optional<String> getConnectorName() {
        return connectorName;
    }

    @JsonProperty("DepositDate")
    public Optional<OffsetDateTime> getDepositDate() {
        return depositDate;
    }

    @JsonProperty("EntryName")
    public Optional<String> getEntryName() {
        return entryName;
    }

    @JsonProperty("ExpectedDepositDate")
    public Optional<OffsetDateTime> getExpectedDepositDate() {
        return expectedDepositDate;
    }

    @JsonProperty("externalPaypointID")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    /**
     * @return The batch ID.
     */
    @JsonProperty("IdBatch")
    public Optional<Integer> getIdBatch() {
        return idBatch;
    }

    /**
     * @return The payment method used.
     */
    @JsonProperty("Method")
    public Optional<String> getMethod() {
        return method;
    }

    /**
     * @return The entrypoint's parent org.
     */
    @JsonProperty("ParentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    /**
     * @return Paypoint DBA name.
     */
    @JsonProperty("PaypointDba")
    public Optional<String> getPaypointDba() {
        return paypointDba;
    }

    @JsonProperty("PaypointId")
    public Optional<Long> getPaypointId() {
        return paypointId;
    }

    /**
     * @return Paypoint legal name.
     */
    @JsonProperty("PaypointName")
    public Optional<String> getPaypointName() {
        return paypointName;
    }

    /**
     * @return
     */
    @JsonProperty("Transfer")
    public Optional<String> getTransfer() {
        return transfer;
    }

    /**
     * @return The batch transfer date.
     */
    @JsonProperty("TransferDate")
    public Optional<OffsetDateTime> getTransferDate() {
        return transferDate;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryBatchesResponseRecordsItem && equalTo((QueryBatchesResponseRecordsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryBatchesResponseRecordsItem other) {
        return batchAmount.equals(other.batchAmount)
                && batchAuthAmount.equals(other.batchAuthAmount)
                && batchDate.equals(other.batchDate)
                && batchFeesAmount.equals(other.batchFeesAmount)
                && batchHoldAmount.equals(other.batchHoldAmount)
                && batchNumber.equals(other.batchNumber)
                && batchRecords.equals(other.batchRecords)
                && batchRefundAmount.equals(other.batchRefundAmount)
                && batchReleasedAmount.equals(other.batchReleasedAmount)
                && batchReturnedAmount.equals(other.batchReturnedAmount)
                && batchSplitAmount.equals(other.batchSplitAmount)
                && batchStatus.equals(other.batchStatus)
                && connectorName.equals(other.connectorName)
                && depositDate.equals(other.depositDate)
                && entryName.equals(other.entryName)
                && expectedDepositDate.equals(other.expectedDepositDate)
                && externalPaypointId.equals(other.externalPaypointId)
                && idBatch.equals(other.idBatch)
                && method.equals(other.method)
                && parentOrgName.equals(other.parentOrgName)
                && paypointDba.equals(other.paypointDba)
                && paypointId.equals(other.paypointId)
                && paypointName.equals(other.paypointName)
                && transfer.equals(other.transfer)
                && transferDate.equals(other.transferDate);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.batchAmount,
                this.batchAuthAmount,
                this.batchDate,
                this.batchFeesAmount,
                this.batchHoldAmount,
                this.batchNumber,
                this.batchRecords,
                this.batchRefundAmount,
                this.batchReleasedAmount,
                this.batchReturnedAmount,
                this.batchSplitAmount,
                this.batchStatus,
                this.connectorName,
                this.depositDate,
                this.entryName,
                this.expectedDepositDate,
                this.externalPaypointId,
                this.idBatch,
                this.method,
                this.parentOrgName,
                this.paypointDba,
                this.paypointId,
                this.paypointName,
                this.transfer,
                this.transferDate);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> batchAmount = Optional.empty();

        private Optional<Double> batchAuthAmount = Optional.empty();

        private Optional<OffsetDateTime> batchDate = Optional.empty();

        private Optional<Double> batchFeesAmount = Optional.empty();

        private Optional<Double> batchHoldAmount = Optional.empty();

        private Optional<String> batchNumber = Optional.empty();

        private Optional<Integer> batchRecords = Optional.empty();

        private Optional<Double> batchRefundAmount = Optional.empty();

        private Optional<Double> batchReleasedAmount = Optional.empty();

        private Optional<Double> batchReturnedAmount = Optional.empty();

        private Optional<Double> batchSplitAmount = Optional.empty();

        private Optional<Integer> batchStatus = Optional.empty();

        private Optional<String> connectorName = Optional.empty();

        private Optional<OffsetDateTime> depositDate = Optional.empty();

        private Optional<String> entryName = Optional.empty();

        private Optional<OffsetDateTime> expectedDepositDate = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<Integer> idBatch = Optional.empty();

        private Optional<String> method = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<String> paypointDba = Optional.empty();

        private Optional<Long> paypointId = Optional.empty();

        private Optional<String> paypointName = Optional.empty();

        private Optional<String> transfer = Optional.empty();

        private Optional<OffsetDateTime> transferDate = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryBatchesResponseRecordsItem other) {
            batchAmount(other.getBatchAmount());
            batchAuthAmount(other.getBatchAuthAmount());
            batchDate(other.getBatchDate());
            batchFeesAmount(other.getBatchFeesAmount());
            batchHoldAmount(other.getBatchHoldAmount());
            batchNumber(other.getBatchNumber());
            batchRecords(other.getBatchRecords());
            batchRefundAmount(other.getBatchRefundAmount());
            batchReleasedAmount(other.getBatchReleasedAmount());
            batchReturnedAmount(other.getBatchReturnedAmount());
            batchSplitAmount(other.getBatchSplitAmount());
            batchStatus(other.getBatchStatus());
            connectorName(other.getConnectorName());
            depositDate(other.getDepositDate());
            entryName(other.getEntryName());
            expectedDepositDate(other.getExpectedDepositDate());
            externalPaypointId(other.getExternalPaypointId());
            idBatch(other.getIdBatch());
            method(other.getMethod());
            parentOrgName(other.getParentOrgName());
            paypointDba(other.getPaypointDba());
            paypointId(other.getPaypointId());
            paypointName(other.getPaypointName());
            transfer(other.getTransfer());
            transferDate(other.getTransferDate());
            return this;
        }

        /**
         * <p>The amount of the batch.</p>
         */
        @JsonSetter(value = "BatchAmount", nulls = Nulls.SKIP)
        public Builder batchAmount(Optional<Double> batchAmount) {
            this.batchAmount = batchAmount;
            return this;
        }

        public Builder batchAmount(Double batchAmount) {
            this.batchAmount = Optional.ofNullable(batchAmount);
            return this;
        }

        @JsonSetter(value = "BatchAuthAmount", nulls = Nulls.SKIP)
        public Builder batchAuthAmount(Optional<Double> batchAuthAmount) {
            this.batchAuthAmount = batchAuthAmount;
            return this;
        }

        public Builder batchAuthAmount(Double batchAuthAmount) {
            this.batchAuthAmount = Optional.ofNullable(batchAuthAmount);
            return this;
        }

        /**
         * <p>The batch date.</p>
         */
        @JsonSetter(value = "BatchDate", nulls = Nulls.SKIP)
        public Builder batchDate(Optional<OffsetDateTime> batchDate) {
            this.batchDate = batchDate;
            return this;
        }

        public Builder batchDate(OffsetDateTime batchDate) {
            this.batchDate = Optional.ofNullable(batchDate);
            return this;
        }

        /**
         * <p>The total of fees in the batch.</p>
         */
        @JsonSetter(value = "BatchFeesAmount", nulls = Nulls.SKIP)
        public Builder batchFeesAmount(Optional<Double> batchFeesAmount) {
            this.batchFeesAmount = batchFeesAmount;
            return this;
        }

        public Builder batchFeesAmount(Double batchFeesAmount) {
            this.batchFeesAmount = Optional.ofNullable(batchFeesAmount);
            return this;
        }

        /**
         * <p>The total amount of the batch that's being held for fraud or risk concerns.</p>
         */
        @JsonSetter(value = "BatchHoldAmount", nulls = Nulls.SKIP)
        public Builder batchHoldAmount(Optional<Double> batchHoldAmount) {
            this.batchHoldAmount = batchHoldAmount;
            return this;
        }

        public Builder batchHoldAmount(Double batchHoldAmount) {
            this.batchHoldAmount = Optional.ofNullable(batchHoldAmount);
            return this;
        }

        @JsonSetter(value = "BatchNumber", nulls = Nulls.SKIP)
        public Builder batchNumber(Optional<String> batchNumber) {
            this.batchNumber = batchNumber;
            return this;
        }

        public Builder batchNumber(String batchNumber) {
            this.batchNumber = Optional.ofNullable(batchNumber);
            return this;
        }

        /**
         * <p>The number of records in the batch.</p>
         */
        @JsonSetter(value = "BatchRecords", nulls = Nulls.SKIP)
        public Builder batchRecords(Optional<Integer> batchRecords) {
            this.batchRecords = batchRecords;
            return this;
        }

        public Builder batchRecords(Integer batchRecords) {
            this.batchRecords = Optional.ofNullable(batchRecords);
            return this;
        }

        /**
         * <p>The total amount of refunds deducted from batch.</p>
         */
        @JsonSetter(value = "BatchRefundAmount", nulls = Nulls.SKIP)
        public Builder batchRefundAmount(Optional<Double> batchRefundAmount) {
            this.batchRefundAmount = batchRefundAmount;
            return this;
        }

        public Builder batchRefundAmount(Double batchRefundAmount) {
            this.batchRefundAmount = Optional.ofNullable(batchRefundAmount);
            return this;
        }

        /**
         * <p>Previously held funds that have been released after a risk review.</p>
         */
        @JsonSetter(value = "BatchReleasedAmount", nulls = Nulls.SKIP)
        public Builder batchReleasedAmount(Optional<Double> batchReleasedAmount) {
            this.batchReleasedAmount = batchReleasedAmount;
            return this;
        }

        public Builder batchReleasedAmount(Double batchReleasedAmount) {
            this.batchReleasedAmount = Optional.ofNullable(batchReleasedAmount);
            return this;
        }

        /**
         * <p>Total amount of ACH returns deducted from batch.</p>
         */
        @JsonSetter(value = "BatchReturnedAmount", nulls = Nulls.SKIP)
        public Builder batchReturnedAmount(Optional<Double> batchReturnedAmount) {
            this.batchReturnedAmount = batchReturnedAmount;
            return this;
        }

        public Builder batchReturnedAmount(Double batchReturnedAmount) {
            this.batchReturnedAmount = Optional.ofNullable(batchReturnedAmount);
            return this;
        }

        /**
         * <p>Total of split transactions that included split funding instructions at the time of authorization.</p>
         */
        @JsonSetter(value = "BatchSplitAmount", nulls = Nulls.SKIP)
        public Builder batchSplitAmount(Optional<Double> batchSplitAmount) {
            this.batchSplitAmount = batchSplitAmount;
            return this;
        }

        public Builder batchSplitAmount(Double batchSplitAmount) {
            this.batchSplitAmount = Optional.ofNullable(batchSplitAmount);
            return this;
        }

        /**
         * <p>The batch status. See <a href="/developers/references/money-in-statuses#batch-status">Batch Status</a> for more.</p>
         */
        @JsonSetter(value = "BatchStatus", nulls = Nulls.SKIP)
        public Builder batchStatus(Optional<Integer> batchStatus) {
            this.batchStatus = batchStatus;
            return this;
        }

        public Builder batchStatus(Integer batchStatus) {
            this.batchStatus = Optional.ofNullable(batchStatus);
            return this;
        }

        @JsonSetter(value = "ConnectorName", nulls = Nulls.SKIP)
        public Builder connectorName(Optional<String> connectorName) {
            this.connectorName = connectorName;
            return this;
        }

        public Builder connectorName(String connectorName) {
            this.connectorName = Optional.ofNullable(connectorName);
            return this;
        }

        @JsonSetter(value = "DepositDate", nulls = Nulls.SKIP)
        public Builder depositDate(Optional<OffsetDateTime> depositDate) {
            this.depositDate = depositDate;
            return this;
        }

        public Builder depositDate(OffsetDateTime depositDate) {
            this.depositDate = Optional.ofNullable(depositDate);
            return this;
        }

        @JsonSetter(value = "EntryName", nulls = Nulls.SKIP)
        public Builder entryName(Optional<String> entryName) {
            this.entryName = entryName;
            return this;
        }

        public Builder entryName(String entryName) {
            this.entryName = Optional.ofNullable(entryName);
            return this;
        }

        @JsonSetter(value = "ExpectedDepositDate", nulls = Nulls.SKIP)
        public Builder expectedDepositDate(Optional<OffsetDateTime> expectedDepositDate) {
            this.expectedDepositDate = expectedDepositDate;
            return this;
        }

        public Builder expectedDepositDate(OffsetDateTime expectedDepositDate) {
            this.expectedDepositDate = Optional.ofNullable(expectedDepositDate);
            return this;
        }

        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        /**
         * <p>The batch ID.</p>
         */
        @JsonSetter(value = "IdBatch", nulls = Nulls.SKIP)
        public Builder idBatch(Optional<Integer> idBatch) {
            this.idBatch = idBatch;
            return this;
        }

        public Builder idBatch(Integer idBatch) {
            this.idBatch = Optional.ofNullable(idBatch);
            return this;
        }

        /**
         * <p>The payment method used.</p>
         */
        @JsonSetter(value = "Method", nulls = Nulls.SKIP)
        public Builder method(Optional<String> method) {
            this.method = method;
            return this;
        }

        public Builder method(String method) {
            this.method = Optional.ofNullable(method);
            return this;
        }

        /**
         * <p>The entrypoint's parent org.</p>
         */
        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        /**
         * <p>Paypoint DBA name.</p>
         */
        @JsonSetter(value = "PaypointDba", nulls = Nulls.SKIP)
        public Builder paypointDba(Optional<String> paypointDba) {
            this.paypointDba = paypointDba;
            return this;
        }

        public Builder paypointDba(String paypointDba) {
            this.paypointDba = Optional.ofNullable(paypointDba);
            return this;
        }

        @JsonSetter(value = "PaypointId", nulls = Nulls.SKIP)
        public Builder paypointId(Optional<Long> paypointId) {
            this.paypointId = paypointId;
            return this;
        }

        public Builder paypointId(Long paypointId) {
            this.paypointId = Optional.ofNullable(paypointId);
            return this;
        }

        /**
         * <p>Paypoint legal name.</p>
         */
        @JsonSetter(value = "PaypointName", nulls = Nulls.SKIP)
        public Builder paypointName(Optional<String> paypointName) {
            this.paypointName = paypointName;
            return this;
        }

        public Builder paypointName(String paypointName) {
            this.paypointName = Optional.ofNullable(paypointName);
            return this;
        }

        @JsonSetter(value = "Transfer", nulls = Nulls.SKIP)
        public Builder transfer(Optional<String> transfer) {
            this.transfer = transfer;
            return this;
        }

        public Builder transfer(String transfer) {
            this.transfer = Optional.ofNullable(transfer);
            return this;
        }

        /**
         * <p>The batch transfer date.</p>
         */
        @JsonSetter(value = "TransferDate", nulls = Nulls.SKIP)
        public Builder transferDate(Optional<OffsetDateTime> transferDate) {
            this.transferDate = transferDate;
            return this;
        }

        public Builder transferDate(OffsetDateTime transferDate) {
            this.transferDate = Optional.ofNullable(transferDate);
            return this;
        }

        public QueryBatchesResponseRecordsItem build() {
            return new QueryBatchesResponseRecordsItem(
                    batchAmount,
                    batchAuthAmount,
                    batchDate,
                    batchFeesAmount,
                    batchHoldAmount,
                    batchNumber,
                    batchRecords,
                    batchRefundAmount,
                    batchReleasedAmount,
                    batchReturnedAmount,
                    batchSplitAmount,
                    batchStatus,
                    connectorName,
                    depositDate,
                    entryName,
                    expectedDepositDate,
                    externalPaypointId,
                    idBatch,
                    method,
                    parentOrgName,
                    paypointDba,
                    paypointId,
                    paypointName,
                    transfer,
                    transferDate,
                    additionalProperties);
        }
    }
}
