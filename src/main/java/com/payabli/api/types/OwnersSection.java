/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OwnersSection.Builder.class)
public final class OwnersSection {
    private final Optional<TemplateElement> contactEmail;

    private final Optional<TemplateElement> contactName;

    private final Optional<TemplateElement> contactPhone;

    private final Optional<TemplateElement> contactTitle;

    private final Optional<Boolean> multipleContacts;

    private final Optional<Boolean> multipleOwners;

    private final Optional<TemplateElement> oaddress;

    private final Optional<TemplateElement> ocity;

    private final Optional<TemplateElement> ocountry;

    private final Optional<TemplateElement> odriverstate;

    private final Optional<TemplateElement> ostate;

    private final Optional<TemplateElement> ownerdob;

    private final Optional<TemplateElement> ownerdriver;

    private final Optional<TemplateElement> owneremail;

    private final Optional<TemplateElement> ownername;

    private final Optional<TemplateElement> ownerpercent;

    private final Optional<TemplateElement> ownerphone1;

    private final Optional<TemplateElement> ownerphone2;

    private final Optional<TemplateElement> ownerssn;

    private final Optional<TemplateElement> ownertitle;

    private final Optional<TemplateElement> ozip;

    private final Optional<String> subFooter;

    private final Optional<String> subHeader;

    private final Optional<Boolean> visible;

    private final Optional<TemplateAdditionalDataSection> additionalData;

    private final Map<String, Object> additionalProperties;

    private OwnersSection(
            Optional<TemplateElement> contactEmail,
            Optional<TemplateElement> contactName,
            Optional<TemplateElement> contactPhone,
            Optional<TemplateElement> contactTitle,
            Optional<Boolean> multipleContacts,
            Optional<Boolean> multipleOwners,
            Optional<TemplateElement> oaddress,
            Optional<TemplateElement> ocity,
            Optional<TemplateElement> ocountry,
            Optional<TemplateElement> odriverstate,
            Optional<TemplateElement> ostate,
            Optional<TemplateElement> ownerdob,
            Optional<TemplateElement> ownerdriver,
            Optional<TemplateElement> owneremail,
            Optional<TemplateElement> ownername,
            Optional<TemplateElement> ownerpercent,
            Optional<TemplateElement> ownerphone1,
            Optional<TemplateElement> ownerphone2,
            Optional<TemplateElement> ownerssn,
            Optional<TemplateElement> ownertitle,
            Optional<TemplateElement> ozip,
            Optional<String> subFooter,
            Optional<String> subHeader,
            Optional<Boolean> visible,
            Optional<TemplateAdditionalDataSection> additionalData,
            Map<String, Object> additionalProperties) {
        this.contactEmail = contactEmail;
        this.contactName = contactName;
        this.contactPhone = contactPhone;
        this.contactTitle = contactTitle;
        this.multipleContacts = multipleContacts;
        this.multipleOwners = multipleOwners;
        this.oaddress = oaddress;
        this.ocity = ocity;
        this.ocountry = ocountry;
        this.odriverstate = odriverstate;
        this.ostate = ostate;
        this.ownerdob = ownerdob;
        this.ownerdriver = ownerdriver;
        this.owneremail = owneremail;
        this.ownername = ownername;
        this.ownerpercent = ownerpercent;
        this.ownerphone1 = ownerphone1;
        this.ownerphone2 = ownerphone2;
        this.ownerssn = ownerssn;
        this.ownertitle = ownertitle;
        this.ozip = ozip;
        this.subFooter = subFooter;
        this.subHeader = subHeader;
        this.visible = visible;
        this.additionalData = additionalData;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("contactEmail")
    public Optional<TemplateElement> getContactEmail() {
        return contactEmail;
    }

    @JsonProperty("contactName")
    public Optional<TemplateElement> getContactName() {
        return contactName;
    }

    @JsonProperty("contactPhone")
    public Optional<TemplateElement> getContactPhone() {
        return contactPhone;
    }

    @JsonProperty("contactTitle")
    public Optional<TemplateElement> getContactTitle() {
        return contactTitle;
    }

    /**
     * @return Offer add more contacts
     */
    @JsonProperty("multipleContacts")
    public Optional<Boolean> getMultipleContacts() {
        return multipleContacts;
    }

    /**
     * @return offer add more owners
     */
    @JsonProperty("multipleOwners")
    public Optional<Boolean> getMultipleOwners() {
        return multipleOwners;
    }

    @JsonProperty("oaddress")
    public Optional<TemplateElement> getOaddress() {
        return oaddress;
    }

    @JsonProperty("ocity")
    public Optional<TemplateElement> getOcity() {
        return ocity;
    }

    @JsonProperty("ocountry")
    public Optional<TemplateElement> getOcountry() {
        return ocountry;
    }

    @JsonProperty("odriverstate")
    public Optional<TemplateElement> getOdriverstate() {
        return odriverstate;
    }

    @JsonProperty("ostate")
    public Optional<TemplateElement> getOstate() {
        return ostate;
    }

    @JsonProperty("ownerdob")
    public Optional<TemplateElement> getOwnerdob() {
        return ownerdob;
    }

    @JsonProperty("ownerdriver")
    public Optional<TemplateElement> getOwnerdriver() {
        return ownerdriver;
    }

    @JsonProperty("owneremail")
    public Optional<TemplateElement> getOwneremail() {
        return owneremail;
    }

    @JsonProperty("ownername")
    public Optional<TemplateElement> getOwnername() {
        return ownername;
    }

    @JsonProperty("ownerpercent")
    public Optional<TemplateElement> getOwnerpercent() {
        return ownerpercent;
    }

    @JsonProperty("ownerphone1")
    public Optional<TemplateElement> getOwnerphone1() {
        return ownerphone1;
    }

    @JsonProperty("ownerphone2")
    public Optional<TemplateElement> getOwnerphone2() {
        return ownerphone2;
    }

    @JsonProperty("ownerssn")
    public Optional<TemplateElement> getOwnerssn() {
        return ownerssn;
    }

    @JsonProperty("ownertitle")
    public Optional<TemplateElement> getOwnertitle() {
        return ownertitle;
    }

    @JsonProperty("ozip")
    public Optional<TemplateElement> getOzip() {
        return ozip;
    }

    @JsonProperty("subFooter")
    public Optional<String> getSubFooter() {
        return subFooter;
    }

    @JsonProperty("subHeader")
    public Optional<String> getSubHeader() {
        return subHeader;
    }

    @JsonProperty("visible")
    public Optional<Boolean> getVisible() {
        return visible;
    }

    @JsonProperty("additionalData")
    public Optional<TemplateAdditionalDataSection> getAdditionalData() {
        return additionalData;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OwnersSection && equalTo((OwnersSection) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OwnersSection other) {
        return contactEmail.equals(other.contactEmail)
                && contactName.equals(other.contactName)
                && contactPhone.equals(other.contactPhone)
                && contactTitle.equals(other.contactTitle)
                && multipleContacts.equals(other.multipleContacts)
                && multipleOwners.equals(other.multipleOwners)
                && oaddress.equals(other.oaddress)
                && ocity.equals(other.ocity)
                && ocountry.equals(other.ocountry)
                && odriverstate.equals(other.odriverstate)
                && ostate.equals(other.ostate)
                && ownerdob.equals(other.ownerdob)
                && ownerdriver.equals(other.ownerdriver)
                && owneremail.equals(other.owneremail)
                && ownername.equals(other.ownername)
                && ownerpercent.equals(other.ownerpercent)
                && ownerphone1.equals(other.ownerphone1)
                && ownerphone2.equals(other.ownerphone2)
                && ownerssn.equals(other.ownerssn)
                && ownertitle.equals(other.ownertitle)
                && ozip.equals(other.ozip)
                && subFooter.equals(other.subFooter)
                && subHeader.equals(other.subHeader)
                && visible.equals(other.visible)
                && additionalData.equals(other.additionalData);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.contactEmail,
                this.contactName,
                this.contactPhone,
                this.contactTitle,
                this.multipleContacts,
                this.multipleOwners,
                this.oaddress,
                this.ocity,
                this.ocountry,
                this.odriverstate,
                this.ostate,
                this.ownerdob,
                this.ownerdriver,
                this.owneremail,
                this.ownername,
                this.ownerpercent,
                this.ownerphone1,
                this.ownerphone2,
                this.ownerssn,
                this.ownertitle,
                this.ozip,
                this.subFooter,
                this.subHeader,
                this.visible,
                this.additionalData);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TemplateElement> contactEmail = Optional.empty();

        private Optional<TemplateElement> contactName = Optional.empty();

        private Optional<TemplateElement> contactPhone = Optional.empty();

        private Optional<TemplateElement> contactTitle = Optional.empty();

        private Optional<Boolean> multipleContacts = Optional.empty();

        private Optional<Boolean> multipleOwners = Optional.empty();

        private Optional<TemplateElement> oaddress = Optional.empty();

        private Optional<TemplateElement> ocity = Optional.empty();

        private Optional<TemplateElement> ocountry = Optional.empty();

        private Optional<TemplateElement> odriverstate = Optional.empty();

        private Optional<TemplateElement> ostate = Optional.empty();

        private Optional<TemplateElement> ownerdob = Optional.empty();

        private Optional<TemplateElement> ownerdriver = Optional.empty();

        private Optional<TemplateElement> owneremail = Optional.empty();

        private Optional<TemplateElement> ownername = Optional.empty();

        private Optional<TemplateElement> ownerpercent = Optional.empty();

        private Optional<TemplateElement> ownerphone1 = Optional.empty();

        private Optional<TemplateElement> ownerphone2 = Optional.empty();

        private Optional<TemplateElement> ownerssn = Optional.empty();

        private Optional<TemplateElement> ownertitle = Optional.empty();

        private Optional<TemplateElement> ozip = Optional.empty();

        private Optional<String> subFooter = Optional.empty();

        private Optional<String> subHeader = Optional.empty();

        private Optional<Boolean> visible = Optional.empty();

        private Optional<TemplateAdditionalDataSection> additionalData = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OwnersSection other) {
            contactEmail(other.getContactEmail());
            contactName(other.getContactName());
            contactPhone(other.getContactPhone());
            contactTitle(other.getContactTitle());
            multipleContacts(other.getMultipleContacts());
            multipleOwners(other.getMultipleOwners());
            oaddress(other.getOaddress());
            ocity(other.getOcity());
            ocountry(other.getOcountry());
            odriverstate(other.getOdriverstate());
            ostate(other.getOstate());
            ownerdob(other.getOwnerdob());
            ownerdriver(other.getOwnerdriver());
            owneremail(other.getOwneremail());
            ownername(other.getOwnername());
            ownerpercent(other.getOwnerpercent());
            ownerphone1(other.getOwnerphone1());
            ownerphone2(other.getOwnerphone2());
            ownerssn(other.getOwnerssn());
            ownertitle(other.getOwnertitle());
            ozip(other.getOzip());
            subFooter(other.getSubFooter());
            subHeader(other.getSubHeader());
            visible(other.getVisible());
            additionalData(other.getAdditionalData());
            return this;
        }

        @JsonSetter(value = "contactEmail", nulls = Nulls.SKIP)
        public Builder contactEmail(Optional<TemplateElement> contactEmail) {
            this.contactEmail = contactEmail;
            return this;
        }

        public Builder contactEmail(TemplateElement contactEmail) {
            this.contactEmail = Optional.ofNullable(contactEmail);
            return this;
        }

        @JsonSetter(value = "contactName", nulls = Nulls.SKIP)
        public Builder contactName(Optional<TemplateElement> contactName) {
            this.contactName = contactName;
            return this;
        }

        public Builder contactName(TemplateElement contactName) {
            this.contactName = Optional.ofNullable(contactName);
            return this;
        }

        @JsonSetter(value = "contactPhone", nulls = Nulls.SKIP)
        public Builder contactPhone(Optional<TemplateElement> contactPhone) {
            this.contactPhone = contactPhone;
            return this;
        }

        public Builder contactPhone(TemplateElement contactPhone) {
            this.contactPhone = Optional.ofNullable(contactPhone);
            return this;
        }

        @JsonSetter(value = "contactTitle", nulls = Nulls.SKIP)
        public Builder contactTitle(Optional<TemplateElement> contactTitle) {
            this.contactTitle = contactTitle;
            return this;
        }

        public Builder contactTitle(TemplateElement contactTitle) {
            this.contactTitle = Optional.ofNullable(contactTitle);
            return this;
        }

        /**
         * <p>Offer add more contacts</p>
         */
        @JsonSetter(value = "multipleContacts", nulls = Nulls.SKIP)
        public Builder multipleContacts(Optional<Boolean> multipleContacts) {
            this.multipleContacts = multipleContacts;
            return this;
        }

        public Builder multipleContacts(Boolean multipleContacts) {
            this.multipleContacts = Optional.ofNullable(multipleContacts);
            return this;
        }

        /**
         * <p>offer add more owners</p>
         */
        @JsonSetter(value = "multipleOwners", nulls = Nulls.SKIP)
        public Builder multipleOwners(Optional<Boolean> multipleOwners) {
            this.multipleOwners = multipleOwners;
            return this;
        }

        public Builder multipleOwners(Boolean multipleOwners) {
            this.multipleOwners = Optional.ofNullable(multipleOwners);
            return this;
        }

        @JsonSetter(value = "oaddress", nulls = Nulls.SKIP)
        public Builder oaddress(Optional<TemplateElement> oaddress) {
            this.oaddress = oaddress;
            return this;
        }

        public Builder oaddress(TemplateElement oaddress) {
            this.oaddress = Optional.ofNullable(oaddress);
            return this;
        }

        @JsonSetter(value = "ocity", nulls = Nulls.SKIP)
        public Builder ocity(Optional<TemplateElement> ocity) {
            this.ocity = ocity;
            return this;
        }

        public Builder ocity(TemplateElement ocity) {
            this.ocity = Optional.ofNullable(ocity);
            return this;
        }

        @JsonSetter(value = "ocountry", nulls = Nulls.SKIP)
        public Builder ocountry(Optional<TemplateElement> ocountry) {
            this.ocountry = ocountry;
            return this;
        }

        public Builder ocountry(TemplateElement ocountry) {
            this.ocountry = Optional.ofNullable(ocountry);
            return this;
        }

        @JsonSetter(value = "odriverstate", nulls = Nulls.SKIP)
        public Builder odriverstate(Optional<TemplateElement> odriverstate) {
            this.odriverstate = odriverstate;
            return this;
        }

        public Builder odriverstate(TemplateElement odriverstate) {
            this.odriverstate = Optional.ofNullable(odriverstate);
            return this;
        }

        @JsonSetter(value = "ostate", nulls = Nulls.SKIP)
        public Builder ostate(Optional<TemplateElement> ostate) {
            this.ostate = ostate;
            return this;
        }

        public Builder ostate(TemplateElement ostate) {
            this.ostate = Optional.ofNullable(ostate);
            return this;
        }

        @JsonSetter(value = "ownerdob", nulls = Nulls.SKIP)
        public Builder ownerdob(Optional<TemplateElement> ownerdob) {
            this.ownerdob = ownerdob;
            return this;
        }

        public Builder ownerdob(TemplateElement ownerdob) {
            this.ownerdob = Optional.ofNullable(ownerdob);
            return this;
        }

        @JsonSetter(value = "ownerdriver", nulls = Nulls.SKIP)
        public Builder ownerdriver(Optional<TemplateElement> ownerdriver) {
            this.ownerdriver = ownerdriver;
            return this;
        }

        public Builder ownerdriver(TemplateElement ownerdriver) {
            this.ownerdriver = Optional.ofNullable(ownerdriver);
            return this;
        }

        @JsonSetter(value = "owneremail", nulls = Nulls.SKIP)
        public Builder owneremail(Optional<TemplateElement> owneremail) {
            this.owneremail = owneremail;
            return this;
        }

        public Builder owneremail(TemplateElement owneremail) {
            this.owneremail = Optional.ofNullable(owneremail);
            return this;
        }

        @JsonSetter(value = "ownername", nulls = Nulls.SKIP)
        public Builder ownername(Optional<TemplateElement> ownername) {
            this.ownername = ownername;
            return this;
        }

        public Builder ownername(TemplateElement ownername) {
            this.ownername = Optional.ofNullable(ownername);
            return this;
        }

        @JsonSetter(value = "ownerpercent", nulls = Nulls.SKIP)
        public Builder ownerpercent(Optional<TemplateElement> ownerpercent) {
            this.ownerpercent = ownerpercent;
            return this;
        }

        public Builder ownerpercent(TemplateElement ownerpercent) {
            this.ownerpercent = Optional.ofNullable(ownerpercent);
            return this;
        }

        @JsonSetter(value = "ownerphone1", nulls = Nulls.SKIP)
        public Builder ownerphone1(Optional<TemplateElement> ownerphone1) {
            this.ownerphone1 = ownerphone1;
            return this;
        }

        public Builder ownerphone1(TemplateElement ownerphone1) {
            this.ownerphone1 = Optional.ofNullable(ownerphone1);
            return this;
        }

        @JsonSetter(value = "ownerphone2", nulls = Nulls.SKIP)
        public Builder ownerphone2(Optional<TemplateElement> ownerphone2) {
            this.ownerphone2 = ownerphone2;
            return this;
        }

        public Builder ownerphone2(TemplateElement ownerphone2) {
            this.ownerphone2 = Optional.ofNullable(ownerphone2);
            return this;
        }

        @JsonSetter(value = "ownerssn", nulls = Nulls.SKIP)
        public Builder ownerssn(Optional<TemplateElement> ownerssn) {
            this.ownerssn = ownerssn;
            return this;
        }

        public Builder ownerssn(TemplateElement ownerssn) {
            this.ownerssn = Optional.ofNullable(ownerssn);
            return this;
        }

        @JsonSetter(value = "ownertitle", nulls = Nulls.SKIP)
        public Builder ownertitle(Optional<TemplateElement> ownertitle) {
            this.ownertitle = ownertitle;
            return this;
        }

        public Builder ownertitle(TemplateElement ownertitle) {
            this.ownertitle = Optional.ofNullable(ownertitle);
            return this;
        }

        @JsonSetter(value = "ozip", nulls = Nulls.SKIP)
        public Builder ozip(Optional<TemplateElement> ozip) {
            this.ozip = ozip;
            return this;
        }

        public Builder ozip(TemplateElement ozip) {
            this.ozip = Optional.ofNullable(ozip);
            return this;
        }

        @JsonSetter(value = "subFooter", nulls = Nulls.SKIP)
        public Builder subFooter(Optional<String> subFooter) {
            this.subFooter = subFooter;
            return this;
        }

        public Builder subFooter(String subFooter) {
            this.subFooter = Optional.ofNullable(subFooter);
            return this;
        }

        @JsonSetter(value = "subHeader", nulls = Nulls.SKIP)
        public Builder subHeader(Optional<String> subHeader) {
            this.subHeader = subHeader;
            return this;
        }

        public Builder subHeader(String subHeader) {
            this.subHeader = Optional.ofNullable(subHeader);
            return this;
        }

        @JsonSetter(value = "visible", nulls = Nulls.SKIP)
        public Builder visible(Optional<Boolean> visible) {
            this.visible = visible;
            return this;
        }

        public Builder visible(Boolean visible) {
            this.visible = Optional.ofNullable(visible);
            return this;
        }

        @JsonSetter(value = "additionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<TemplateAdditionalDataSection> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(TemplateAdditionalDataSection additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        public OwnersSection build() {
            return new OwnersSection(
                    contactEmail,
                    contactName,
                    contactPhone,
                    contactTitle,
                    multipleContacts,
                    multipleOwners,
                    oaddress,
                    ocity,
                    ocountry,
                    odriverstate,
                    ostate,
                    ownerdob,
                    ownerdriver,
                    owneremail,
                    ownername,
                    ownerpercent,
                    ownerphone1,
                    ownerphone2,
                    ownerssn,
                    ownertitle,
                    ozip,
                    subFooter,
                    subHeader,
                    visible,
                    additionalData,
                    additionalProperties);
        }
    }
}
