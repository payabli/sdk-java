/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VendorSummary.Builder.class)
public final class VendorSummary {
    private final Optional<Integer> inTransitBills;

    private final Optional<Double> inTransitBillsAmount;

    private final Optional<Integer> overdueBills;

    private final Optional<Double> overdueBillsAmount;

    private final Optional<Integer> paidBills;

    private final Optional<Double> paidBillsAmount;

    private final Optional<Integer> pendingBills;

    private final Optional<Double> pendingBillsAmount;

    private final Optional<Integer> totalBills;

    private final Optional<Double> totalBillsAmount;

    private final Map<String, Object> additionalProperties;

    private VendorSummary(
            Optional<Integer> inTransitBills,
            Optional<Double> inTransitBillsAmount,
            Optional<Integer> overdueBills,
            Optional<Double> overdueBillsAmount,
            Optional<Integer> paidBills,
            Optional<Double> paidBillsAmount,
            Optional<Integer> pendingBills,
            Optional<Double> pendingBillsAmount,
            Optional<Integer> totalBills,
            Optional<Double> totalBillsAmount,
            Map<String, Object> additionalProperties) {
        this.inTransitBills = inTransitBills;
        this.inTransitBillsAmount = inTransitBillsAmount;
        this.overdueBills = overdueBills;
        this.overdueBillsAmount = overdueBillsAmount;
        this.paidBills = paidBills;
        this.paidBillsAmount = paidBillsAmount;
        this.pendingBills = pendingBills;
        this.pendingBillsAmount = pendingBillsAmount;
        this.totalBills = totalBills;
        this.totalBillsAmount = totalBillsAmount;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("inTransitBills")
    public Optional<Integer> getInTransitBills() {
        return inTransitBills;
    }

    @JsonProperty("inTransitBillsAmount")
    public Optional<Double> getInTransitBillsAmount() {
        return inTransitBillsAmount;
    }

    @JsonProperty("overdueBills")
    public Optional<Integer> getOverdueBills() {
        return overdueBills;
    }

    @JsonProperty("overdueBillsAmount")
    public Optional<Double> getOverdueBillsAmount() {
        return overdueBillsAmount;
    }

    @JsonProperty("paidBills")
    public Optional<Integer> getPaidBills() {
        return paidBills;
    }

    @JsonProperty("paidBillsAmount")
    public Optional<Double> getPaidBillsAmount() {
        return paidBillsAmount;
    }

    @JsonProperty("pendingBills")
    public Optional<Integer> getPendingBills() {
        return pendingBills;
    }

    @JsonProperty("pendingBillsAmount")
    public Optional<Double> getPendingBillsAmount() {
        return pendingBillsAmount;
    }

    @JsonProperty("totalBills")
    public Optional<Integer> getTotalBills() {
        return totalBills;
    }

    @JsonProperty("totalBillsAmount")
    public Optional<Double> getTotalBillsAmount() {
        return totalBillsAmount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VendorSummary && equalTo((VendorSummary) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VendorSummary other) {
        return inTransitBills.equals(other.inTransitBills)
                && inTransitBillsAmount.equals(other.inTransitBillsAmount)
                && overdueBills.equals(other.overdueBills)
                && overdueBillsAmount.equals(other.overdueBillsAmount)
                && paidBills.equals(other.paidBills)
                && paidBillsAmount.equals(other.paidBillsAmount)
                && pendingBills.equals(other.pendingBills)
                && pendingBillsAmount.equals(other.pendingBillsAmount)
                && totalBills.equals(other.totalBills)
                && totalBillsAmount.equals(other.totalBillsAmount);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.inTransitBills,
                this.inTransitBillsAmount,
                this.overdueBills,
                this.overdueBillsAmount,
                this.paidBills,
                this.paidBillsAmount,
                this.pendingBills,
                this.pendingBillsAmount,
                this.totalBills,
                this.totalBillsAmount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> inTransitBills = Optional.empty();

        private Optional<Double> inTransitBillsAmount = Optional.empty();

        private Optional<Integer> overdueBills = Optional.empty();

        private Optional<Double> overdueBillsAmount = Optional.empty();

        private Optional<Integer> paidBills = Optional.empty();

        private Optional<Double> paidBillsAmount = Optional.empty();

        private Optional<Integer> pendingBills = Optional.empty();

        private Optional<Double> pendingBillsAmount = Optional.empty();

        private Optional<Integer> totalBills = Optional.empty();

        private Optional<Double> totalBillsAmount = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(VendorSummary other) {
            inTransitBills(other.getInTransitBills());
            inTransitBillsAmount(other.getInTransitBillsAmount());
            overdueBills(other.getOverdueBills());
            overdueBillsAmount(other.getOverdueBillsAmount());
            paidBills(other.getPaidBills());
            paidBillsAmount(other.getPaidBillsAmount());
            pendingBills(other.getPendingBills());
            pendingBillsAmount(other.getPendingBillsAmount());
            totalBills(other.getTotalBills());
            totalBillsAmount(other.getTotalBillsAmount());
            return this;
        }

        @JsonSetter(value = "inTransitBills", nulls = Nulls.SKIP)
        public Builder inTransitBills(Optional<Integer> inTransitBills) {
            this.inTransitBills = inTransitBills;
            return this;
        }

        public Builder inTransitBills(Integer inTransitBills) {
            this.inTransitBills = Optional.ofNullable(inTransitBills);
            return this;
        }

        @JsonSetter(value = "inTransitBillsAmount", nulls = Nulls.SKIP)
        public Builder inTransitBillsAmount(Optional<Double> inTransitBillsAmount) {
            this.inTransitBillsAmount = inTransitBillsAmount;
            return this;
        }

        public Builder inTransitBillsAmount(Double inTransitBillsAmount) {
            this.inTransitBillsAmount = Optional.ofNullable(inTransitBillsAmount);
            return this;
        }

        @JsonSetter(value = "overdueBills", nulls = Nulls.SKIP)
        public Builder overdueBills(Optional<Integer> overdueBills) {
            this.overdueBills = overdueBills;
            return this;
        }

        public Builder overdueBills(Integer overdueBills) {
            this.overdueBills = Optional.ofNullable(overdueBills);
            return this;
        }

        @JsonSetter(value = "overdueBillsAmount", nulls = Nulls.SKIP)
        public Builder overdueBillsAmount(Optional<Double> overdueBillsAmount) {
            this.overdueBillsAmount = overdueBillsAmount;
            return this;
        }

        public Builder overdueBillsAmount(Double overdueBillsAmount) {
            this.overdueBillsAmount = Optional.ofNullable(overdueBillsAmount);
            return this;
        }

        @JsonSetter(value = "paidBills", nulls = Nulls.SKIP)
        public Builder paidBills(Optional<Integer> paidBills) {
            this.paidBills = paidBills;
            return this;
        }

        public Builder paidBills(Integer paidBills) {
            this.paidBills = Optional.ofNullable(paidBills);
            return this;
        }

        @JsonSetter(value = "paidBillsAmount", nulls = Nulls.SKIP)
        public Builder paidBillsAmount(Optional<Double> paidBillsAmount) {
            this.paidBillsAmount = paidBillsAmount;
            return this;
        }

        public Builder paidBillsAmount(Double paidBillsAmount) {
            this.paidBillsAmount = Optional.ofNullable(paidBillsAmount);
            return this;
        }

        @JsonSetter(value = "pendingBills", nulls = Nulls.SKIP)
        public Builder pendingBills(Optional<Integer> pendingBills) {
            this.pendingBills = pendingBills;
            return this;
        }

        public Builder pendingBills(Integer pendingBills) {
            this.pendingBills = Optional.ofNullable(pendingBills);
            return this;
        }

        @JsonSetter(value = "pendingBillsAmount", nulls = Nulls.SKIP)
        public Builder pendingBillsAmount(Optional<Double> pendingBillsAmount) {
            this.pendingBillsAmount = pendingBillsAmount;
            return this;
        }

        public Builder pendingBillsAmount(Double pendingBillsAmount) {
            this.pendingBillsAmount = Optional.ofNullable(pendingBillsAmount);
            return this;
        }

        @JsonSetter(value = "totalBills", nulls = Nulls.SKIP)
        public Builder totalBills(Optional<Integer> totalBills) {
            this.totalBills = totalBills;
            return this;
        }

        public Builder totalBills(Integer totalBills) {
            this.totalBills = Optional.ofNullable(totalBills);
            return this;
        }

        @JsonSetter(value = "totalBillsAmount", nulls = Nulls.SKIP)
        public Builder totalBillsAmount(Optional<Double> totalBillsAmount) {
            this.totalBillsAmount = totalBillsAmount;
            return this;
        }

        public Builder totalBillsAmount(Double totalBillsAmount) {
            this.totalBillsAmount = Optional.ofNullable(totalBillsAmount);
            return this;
        }

        public VendorSummary build() {
            return new VendorSummary(
                    inTransitBills,
                    inTransitBillsAmount,
                    overdueBills,
                    overdueBillsAmount,
                    paidBills,
                    paidBillsAmount,
                    pendingBills,
                    pendingBillsAmount,
                    totalBills,
                    totalBillsAmount,
                    additionalProperties);
        }
    }
}
