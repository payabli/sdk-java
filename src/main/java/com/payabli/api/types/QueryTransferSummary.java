/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryTransferSummary.Builder.class)
public final class QueryTransferSummary {
    private final Optional<Double> achReturns;

    private final Optional<Double> adjustments;

    private final Optional<Double> billingFees;

    private final Optional<Double> chargebacks;

    private final Optional<Double> grossTransferAmount;

    private final Optional<Double> releaseAmount;

    private final Optional<Double> thirdPartyPaid;

    private final Optional<Double> totalNetAmountTransfer;

    private final Optional<Double> serviceFees;

    private final Optional<Double> transferAmount;

    private final Optional<Double> refunds;

    private final Optional<Double> heldAmount;

    private final Optional<Integer> totalRecords;

    private final Optional<Double> totalAmount;

    private final Optional<Double> totalNetAmount;

    private final Optional<Integer> totalPages;

    private final Optional<Integer> pageSize;

    private final Optional<String> pageidentifier;

    private final Map<String, Object> additionalProperties;

    private QueryTransferSummary(
            Optional<Double> achReturns,
            Optional<Double> adjustments,
            Optional<Double> billingFees,
            Optional<Double> chargebacks,
            Optional<Double> grossTransferAmount,
            Optional<Double> releaseAmount,
            Optional<Double> thirdPartyPaid,
            Optional<Double> totalNetAmountTransfer,
            Optional<Double> serviceFees,
            Optional<Double> transferAmount,
            Optional<Double> refunds,
            Optional<Double> heldAmount,
            Optional<Integer> totalRecords,
            Optional<Double> totalAmount,
            Optional<Double> totalNetAmount,
            Optional<Integer> totalPages,
            Optional<Integer> pageSize,
            Optional<String> pageidentifier,
            Map<String, Object> additionalProperties) {
        this.achReturns = achReturns;
        this.adjustments = adjustments;
        this.billingFees = billingFees;
        this.chargebacks = chargebacks;
        this.grossTransferAmount = grossTransferAmount;
        this.releaseAmount = releaseAmount;
        this.thirdPartyPaid = thirdPartyPaid;
        this.totalNetAmountTransfer = totalNetAmountTransfer;
        this.serviceFees = serviceFees;
        this.transferAmount = transferAmount;
        this.refunds = refunds;
        this.heldAmount = heldAmount;
        this.totalRecords = totalRecords;
        this.totalAmount = totalAmount;
        this.totalNetAmount = totalNetAmount;
        this.totalPages = totalPages;
        this.pageSize = pageSize;
        this.pageidentifier = pageidentifier;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return ACH returns deducted from the batch.
     */
    @JsonProperty("achReturns")
    public Optional<Double> getAchReturns() {
        return achReturns;
    }

    /**
     * @return Corrections applied to Billing &amp; Fees charges.
     */
    @JsonProperty("adjustments")
    public Optional<Double> getAdjustments() {
        return adjustments;
    }

    /**
     * @return Charges applied for transactions and services.
     */
    @JsonProperty("billingFees")
    public Optional<Double> getBillingFees() {
        return billingFees;
    }

    /**
     * @return Chargebacks deducted from batch.
     */
    @JsonProperty("chargebacks")
    public Optional<Double> getChargebacks() {
        return chargebacks;
    }

    /**
     * @return The gross batch amount before deductions.
     */
    @JsonProperty("grossTransferAmount")
    public Optional<Double> getGrossTransferAmount() {
        return grossTransferAmount;
    }

    /**
     * @return Previously held funds that have been released after a risk review.
     */
    @JsonProperty("releaseAmount")
    public Optional<Double> getReleaseAmount() {
        return releaseAmount;
    }

    /**
     * @return Payments captured in the batch cycle that are deposited separately. For example,  checks or cash payments recorded in the batch but not deposited via Payabli,  or card brands making a direct transfer in certain situations.
     */
    @JsonProperty("thirdPartyPaid")
    public Optional<Double> getThirdPartyPaid() {
        return thirdPartyPaid;
    }

    /**
     * @return The gross batch amount minus service fees.
     */
    @JsonProperty("totalNetAmountTransfer")
    public Optional<Double> getTotalNetAmountTransfer() {
        return totalNetAmountTransfer;
    }

    /**
     * @return Service fees are any pass-through fees charged to the customer at the time of payment.  These aren't transferred to the merchant when the batch is transferred and funded.
     */
    @JsonProperty("serviceFees")
    public Optional<Double> getServiceFees() {
        return serviceFees;
    }

    /**
     * @return The transfer amount is the net batch amount plus or minus any returns, refunds,  billing and fees items, chargebacks, adjustments, and third party payments.  This is the amount from the batch that is transferred to the merchant bank account.
     */
    @JsonProperty("transferAmount")
    public Optional<Double> getTransferAmount() {
        return transferAmount;
    }

    /**
     * @return Refunds deducted from batch.
     */
    @JsonProperty("refunds")
    public Optional<Double> getRefunds() {
        return refunds;
    }

    /**
     * @return Funds being held for fraud or risk concerns.
     */
    @JsonProperty("heldAmount")
    public Optional<Double> getHeldAmount() {
        return heldAmount;
    }

    /**
     * @return Number of records in the response.
     */
    @JsonProperty("totalRecords")
    public Optional<Integer> getTotalRecords() {
        return totalRecords;
    }

    /**
     * @return The total sum of the transfers in the response.
     */
    @JsonProperty("totalAmount")
    public Optional<Double> getTotalAmount() {
        return totalAmount;
    }

    /**
     * @return The total sum of the transfers in the response.
     */
    @JsonProperty("totalNetAmount")
    public Optional<Double> getTotalNetAmount() {
        return totalNetAmount;
    }

    /**
     * @return Number of pages in the response.
     */
    @JsonProperty("totalPages")
    public Optional<Integer> getTotalPages() {
        return totalPages;
    }

    /**
     * @return Number of records per page.
     */
    @JsonProperty("pageSize")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    /**
     * @return Auxiliary validation used internally by payment pages and components.
     */
    @JsonProperty("pageidentifier")
    public Optional<String> getPageidentifier() {
        return pageidentifier;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryTransferSummary && equalTo((QueryTransferSummary) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryTransferSummary other) {
        return achReturns.equals(other.achReturns)
                && adjustments.equals(other.adjustments)
                && billingFees.equals(other.billingFees)
                && chargebacks.equals(other.chargebacks)
                && grossTransferAmount.equals(other.grossTransferAmount)
                && releaseAmount.equals(other.releaseAmount)
                && thirdPartyPaid.equals(other.thirdPartyPaid)
                && totalNetAmountTransfer.equals(other.totalNetAmountTransfer)
                && serviceFees.equals(other.serviceFees)
                && transferAmount.equals(other.transferAmount)
                && refunds.equals(other.refunds)
                && heldAmount.equals(other.heldAmount)
                && totalRecords.equals(other.totalRecords)
                && totalAmount.equals(other.totalAmount)
                && totalNetAmount.equals(other.totalNetAmount)
                && totalPages.equals(other.totalPages)
                && pageSize.equals(other.pageSize)
                && pageidentifier.equals(other.pageidentifier);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.achReturns,
                this.adjustments,
                this.billingFees,
                this.chargebacks,
                this.grossTransferAmount,
                this.releaseAmount,
                this.thirdPartyPaid,
                this.totalNetAmountTransfer,
                this.serviceFees,
                this.transferAmount,
                this.refunds,
                this.heldAmount,
                this.totalRecords,
                this.totalAmount,
                this.totalNetAmount,
                this.totalPages,
                this.pageSize,
                this.pageidentifier);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> achReturns = Optional.empty();

        private Optional<Double> adjustments = Optional.empty();

        private Optional<Double> billingFees = Optional.empty();

        private Optional<Double> chargebacks = Optional.empty();

        private Optional<Double> grossTransferAmount = Optional.empty();

        private Optional<Double> releaseAmount = Optional.empty();

        private Optional<Double> thirdPartyPaid = Optional.empty();

        private Optional<Double> totalNetAmountTransfer = Optional.empty();

        private Optional<Double> serviceFees = Optional.empty();

        private Optional<Double> transferAmount = Optional.empty();

        private Optional<Double> refunds = Optional.empty();

        private Optional<Double> heldAmount = Optional.empty();

        private Optional<Integer> totalRecords = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<Double> totalNetAmount = Optional.empty();

        private Optional<Integer> totalPages = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<String> pageidentifier = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryTransferSummary other) {
            achReturns(other.getAchReturns());
            adjustments(other.getAdjustments());
            billingFees(other.getBillingFees());
            chargebacks(other.getChargebacks());
            grossTransferAmount(other.getGrossTransferAmount());
            releaseAmount(other.getReleaseAmount());
            thirdPartyPaid(other.getThirdPartyPaid());
            totalNetAmountTransfer(other.getTotalNetAmountTransfer());
            serviceFees(other.getServiceFees());
            transferAmount(other.getTransferAmount());
            refunds(other.getRefunds());
            heldAmount(other.getHeldAmount());
            totalRecords(other.getTotalRecords());
            totalAmount(other.getTotalAmount());
            totalNetAmount(other.getTotalNetAmount());
            totalPages(other.getTotalPages());
            pageSize(other.getPageSize());
            pageidentifier(other.getPageidentifier());
            return this;
        }

        /**
         * <p>ACH returns deducted from the batch.</p>
         */
        @JsonSetter(value = "achReturns", nulls = Nulls.SKIP)
        public Builder achReturns(Optional<Double> achReturns) {
            this.achReturns = achReturns;
            return this;
        }

        public Builder achReturns(Double achReturns) {
            this.achReturns = Optional.ofNullable(achReturns);
            return this;
        }

        /**
         * <p>Corrections applied to Billing &amp; Fees charges.</p>
         */
        @JsonSetter(value = "adjustments", nulls = Nulls.SKIP)
        public Builder adjustments(Optional<Double> adjustments) {
            this.adjustments = adjustments;
            return this;
        }

        public Builder adjustments(Double adjustments) {
            this.adjustments = Optional.ofNullable(adjustments);
            return this;
        }

        /**
         * <p>Charges applied for transactions and services.</p>
         */
        @JsonSetter(value = "billingFees", nulls = Nulls.SKIP)
        public Builder billingFees(Optional<Double> billingFees) {
            this.billingFees = billingFees;
            return this;
        }

        public Builder billingFees(Double billingFees) {
            this.billingFees = Optional.ofNullable(billingFees);
            return this;
        }

        /**
         * <p>Chargebacks deducted from batch.</p>
         */
        @JsonSetter(value = "chargebacks", nulls = Nulls.SKIP)
        public Builder chargebacks(Optional<Double> chargebacks) {
            this.chargebacks = chargebacks;
            return this;
        }

        public Builder chargebacks(Double chargebacks) {
            this.chargebacks = Optional.ofNullable(chargebacks);
            return this;
        }

        /**
         * <p>The gross batch amount before deductions.</p>
         */
        @JsonSetter(value = "grossTransferAmount", nulls = Nulls.SKIP)
        public Builder grossTransferAmount(Optional<Double> grossTransferAmount) {
            this.grossTransferAmount = grossTransferAmount;
            return this;
        }

        public Builder grossTransferAmount(Double grossTransferAmount) {
            this.grossTransferAmount = Optional.ofNullable(grossTransferAmount);
            return this;
        }

        /**
         * <p>Previously held funds that have been released after a risk review.</p>
         */
        @JsonSetter(value = "releaseAmount", nulls = Nulls.SKIP)
        public Builder releaseAmount(Optional<Double> releaseAmount) {
            this.releaseAmount = releaseAmount;
            return this;
        }

        public Builder releaseAmount(Double releaseAmount) {
            this.releaseAmount = Optional.ofNullable(releaseAmount);
            return this;
        }

        /**
         * <p>Payments captured in the batch cycle that are deposited separately. For example,  checks or cash payments recorded in the batch but not deposited via Payabli,  or card brands making a direct transfer in certain situations.</p>
         */
        @JsonSetter(value = "thirdPartyPaid", nulls = Nulls.SKIP)
        public Builder thirdPartyPaid(Optional<Double> thirdPartyPaid) {
            this.thirdPartyPaid = thirdPartyPaid;
            return this;
        }

        public Builder thirdPartyPaid(Double thirdPartyPaid) {
            this.thirdPartyPaid = Optional.ofNullable(thirdPartyPaid);
            return this;
        }

        /**
         * <p>The gross batch amount minus service fees.</p>
         */
        @JsonSetter(value = "totalNetAmountTransfer", nulls = Nulls.SKIP)
        public Builder totalNetAmountTransfer(Optional<Double> totalNetAmountTransfer) {
            this.totalNetAmountTransfer = totalNetAmountTransfer;
            return this;
        }

        public Builder totalNetAmountTransfer(Double totalNetAmountTransfer) {
            this.totalNetAmountTransfer = Optional.ofNullable(totalNetAmountTransfer);
            return this;
        }

        /**
         * <p>Service fees are any pass-through fees charged to the customer at the time of payment.  These aren't transferred to the merchant when the batch is transferred and funded.</p>
         */
        @JsonSetter(value = "serviceFees", nulls = Nulls.SKIP)
        public Builder serviceFees(Optional<Double> serviceFees) {
            this.serviceFees = serviceFees;
            return this;
        }

        public Builder serviceFees(Double serviceFees) {
            this.serviceFees = Optional.ofNullable(serviceFees);
            return this;
        }

        /**
         * <p>The transfer amount is the net batch amount plus or minus any returns, refunds,  billing and fees items, chargebacks, adjustments, and third party payments.  This is the amount from the batch that is transferred to the merchant bank account.</p>
         */
        @JsonSetter(value = "transferAmount", nulls = Nulls.SKIP)
        public Builder transferAmount(Optional<Double> transferAmount) {
            this.transferAmount = transferAmount;
            return this;
        }

        public Builder transferAmount(Double transferAmount) {
            this.transferAmount = Optional.ofNullable(transferAmount);
            return this;
        }

        /**
         * <p>Refunds deducted from batch.</p>
         */
        @JsonSetter(value = "refunds", nulls = Nulls.SKIP)
        public Builder refunds(Optional<Double> refunds) {
            this.refunds = refunds;
            return this;
        }

        public Builder refunds(Double refunds) {
            this.refunds = Optional.ofNullable(refunds);
            return this;
        }

        /**
         * <p>Funds being held for fraud or risk concerns.</p>
         */
        @JsonSetter(value = "heldAmount", nulls = Nulls.SKIP)
        public Builder heldAmount(Optional<Double> heldAmount) {
            this.heldAmount = heldAmount;
            return this;
        }

        public Builder heldAmount(Double heldAmount) {
            this.heldAmount = Optional.ofNullable(heldAmount);
            return this;
        }

        /**
         * <p>Number of records in the response.</p>
         */
        @JsonSetter(value = "totalRecords", nulls = Nulls.SKIP)
        public Builder totalRecords(Optional<Integer> totalRecords) {
            this.totalRecords = totalRecords;
            return this;
        }

        public Builder totalRecords(Integer totalRecords) {
            this.totalRecords = Optional.ofNullable(totalRecords);
            return this;
        }

        /**
         * <p>The total sum of the transfers in the response.</p>
         */
        @JsonSetter(value = "totalAmount", nulls = Nulls.SKIP)
        public Builder totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * <p>The total sum of the transfers in the response.</p>
         */
        @JsonSetter(value = "totalNetAmount", nulls = Nulls.SKIP)
        public Builder totalNetAmount(Optional<Double> totalNetAmount) {
            this.totalNetAmount = totalNetAmount;
            return this;
        }

        public Builder totalNetAmount(Double totalNetAmount) {
            this.totalNetAmount = Optional.ofNullable(totalNetAmount);
            return this;
        }

        /**
         * <p>Number of pages in the response.</p>
         */
        @JsonSetter(value = "totalPages", nulls = Nulls.SKIP)
        public Builder totalPages(Optional<Integer> totalPages) {
            this.totalPages = totalPages;
            return this;
        }

        public Builder totalPages(Integer totalPages) {
            this.totalPages = Optional.ofNullable(totalPages);
            return this;
        }

        /**
         * <p>Number of records per page.</p>
         */
        @JsonSetter(value = "pageSize", nulls = Nulls.SKIP)
        public Builder pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * <p>Auxiliary validation used internally by payment pages and components.</p>
         */
        @JsonSetter(value = "pageidentifier", nulls = Nulls.SKIP)
        public Builder pageidentifier(Optional<String> pageidentifier) {
            this.pageidentifier = pageidentifier;
            return this;
        }

        public Builder pageidentifier(String pageidentifier) {
            this.pageidentifier = Optional.ofNullable(pageidentifier);
            return this;
        }

        public QueryTransferSummary build() {
            return new QueryTransferSummary(
                    achReturns,
                    adjustments,
                    billingFees,
                    chargebacks,
                    grossTransferAmount,
                    releaseAmount,
                    thirdPartyPaid,
                    totalNetAmountTransfer,
                    serviceFees,
                    transferAmount,
                    refunds,
                    heldAmount,
                    totalRecords,
                    totalAmount,
                    totalNetAmount,
                    totalPages,
                    pageSize,
                    pageidentifier,
                    additionalProperties);
        }
    }
}
