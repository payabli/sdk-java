/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PSection.Builder.class)
public final class PSection {
    private final Optional<LinkData> avgmonthly;

    private final Optional<LinkData> binperson;

    private final Optional<LinkData> binphone;

    private final Optional<LinkData> binweb;

    private final Optional<LinkData> bsummary;

    private final Optional<LinkData> highticketamt;

    private final Optional<LinkData> mcc;

    private final Optional<LinkData> ticketamt;

    private final Optional<LinkData> whenCharged;

    private final Optional<LinkData> whenDelivered;

    private final Optional<LinkData> whenProvided;

    private final Optional<LinkData> whenRefunded;

    private final Map<String, Object> additionalProperties;

    private PSection(
            Optional<LinkData> avgmonthly,
            Optional<LinkData> binperson,
            Optional<LinkData> binphone,
            Optional<LinkData> binweb,
            Optional<LinkData> bsummary,
            Optional<LinkData> highticketamt,
            Optional<LinkData> mcc,
            Optional<LinkData> ticketamt,
            Optional<LinkData> whenCharged,
            Optional<LinkData> whenDelivered,
            Optional<LinkData> whenProvided,
            Optional<LinkData> whenRefunded,
            Map<String, Object> additionalProperties) {
        this.avgmonthly = avgmonthly;
        this.binperson = binperson;
        this.binphone = binphone;
        this.binweb = binweb;
        this.bsummary = bsummary;
        this.highticketamt = highticketamt;
        this.mcc = mcc;
        this.ticketamt = ticketamt;
        this.whenCharged = whenCharged;
        this.whenDelivered = whenDelivered;
        this.whenProvided = whenProvided;
        this.whenRefunded = whenRefunded;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("avgmonthly")
    public Optional<LinkData> getAvgmonthly() {
        return avgmonthly;
    }

    @JsonProperty("binperson")
    public Optional<LinkData> getBinperson() {
        return binperson;
    }

    @JsonProperty("binphone")
    public Optional<LinkData> getBinphone() {
        return binphone;
    }

    @JsonProperty("binweb")
    public Optional<LinkData> getBinweb() {
        return binweb;
    }

    @JsonProperty("bsummary")
    public Optional<LinkData> getBsummary() {
        return bsummary;
    }

    @JsonProperty("highticketamt")
    public Optional<LinkData> getHighticketamt() {
        return highticketamt;
    }

    @JsonProperty("mcc")
    public Optional<LinkData> getMcc() {
        return mcc;
    }

    @JsonProperty("ticketamt")
    public Optional<LinkData> getTicketamt() {
        return ticketamt;
    }

    @JsonProperty("whenCharged")
    public Optional<LinkData> getWhenCharged() {
        return whenCharged;
    }

    @JsonProperty("whenDelivered")
    public Optional<LinkData> getWhenDelivered() {
        return whenDelivered;
    }

    @JsonProperty("whenProvided")
    public Optional<LinkData> getWhenProvided() {
        return whenProvided;
    }

    @JsonProperty("whenRefunded")
    public Optional<LinkData> getWhenRefunded() {
        return whenRefunded;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PSection && equalTo((PSection) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PSection other) {
        return avgmonthly.equals(other.avgmonthly)
                && binperson.equals(other.binperson)
                && binphone.equals(other.binphone)
                && binweb.equals(other.binweb)
                && bsummary.equals(other.bsummary)
                && highticketamt.equals(other.highticketamt)
                && mcc.equals(other.mcc)
                && ticketamt.equals(other.ticketamt)
                && whenCharged.equals(other.whenCharged)
                && whenDelivered.equals(other.whenDelivered)
                && whenProvided.equals(other.whenProvided)
                && whenRefunded.equals(other.whenRefunded);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.avgmonthly,
                this.binperson,
                this.binphone,
                this.binweb,
                this.bsummary,
                this.highticketamt,
                this.mcc,
                this.ticketamt,
                this.whenCharged,
                this.whenDelivered,
                this.whenProvided,
                this.whenRefunded);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<LinkData> avgmonthly = Optional.empty();

        private Optional<LinkData> binperson = Optional.empty();

        private Optional<LinkData> binphone = Optional.empty();

        private Optional<LinkData> binweb = Optional.empty();

        private Optional<LinkData> bsummary = Optional.empty();

        private Optional<LinkData> highticketamt = Optional.empty();

        private Optional<LinkData> mcc = Optional.empty();

        private Optional<LinkData> ticketamt = Optional.empty();

        private Optional<LinkData> whenCharged = Optional.empty();

        private Optional<LinkData> whenDelivered = Optional.empty();

        private Optional<LinkData> whenProvided = Optional.empty();

        private Optional<LinkData> whenRefunded = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PSection other) {
            avgmonthly(other.getAvgmonthly());
            binperson(other.getBinperson());
            binphone(other.getBinphone());
            binweb(other.getBinweb());
            bsummary(other.getBsummary());
            highticketamt(other.getHighticketamt());
            mcc(other.getMcc());
            ticketamt(other.getTicketamt());
            whenCharged(other.getWhenCharged());
            whenDelivered(other.getWhenDelivered());
            whenProvided(other.getWhenProvided());
            whenRefunded(other.getWhenRefunded());
            return this;
        }

        @JsonSetter(value = "avgmonthly", nulls = Nulls.SKIP)
        public Builder avgmonthly(Optional<LinkData> avgmonthly) {
            this.avgmonthly = avgmonthly;
            return this;
        }

        public Builder avgmonthly(LinkData avgmonthly) {
            this.avgmonthly = Optional.ofNullable(avgmonthly);
            return this;
        }

        @JsonSetter(value = "binperson", nulls = Nulls.SKIP)
        public Builder binperson(Optional<LinkData> binperson) {
            this.binperson = binperson;
            return this;
        }

        public Builder binperson(LinkData binperson) {
            this.binperson = Optional.ofNullable(binperson);
            return this;
        }

        @JsonSetter(value = "binphone", nulls = Nulls.SKIP)
        public Builder binphone(Optional<LinkData> binphone) {
            this.binphone = binphone;
            return this;
        }

        public Builder binphone(LinkData binphone) {
            this.binphone = Optional.ofNullable(binphone);
            return this;
        }

        @JsonSetter(value = "binweb", nulls = Nulls.SKIP)
        public Builder binweb(Optional<LinkData> binweb) {
            this.binweb = binweb;
            return this;
        }

        public Builder binweb(LinkData binweb) {
            this.binweb = Optional.ofNullable(binweb);
            return this;
        }

        @JsonSetter(value = "bsummary", nulls = Nulls.SKIP)
        public Builder bsummary(Optional<LinkData> bsummary) {
            this.bsummary = bsummary;
            return this;
        }

        public Builder bsummary(LinkData bsummary) {
            this.bsummary = Optional.ofNullable(bsummary);
            return this;
        }

        @JsonSetter(value = "highticketamt", nulls = Nulls.SKIP)
        public Builder highticketamt(Optional<LinkData> highticketamt) {
            this.highticketamt = highticketamt;
            return this;
        }

        public Builder highticketamt(LinkData highticketamt) {
            this.highticketamt = Optional.ofNullable(highticketamt);
            return this;
        }

        @JsonSetter(value = "mcc", nulls = Nulls.SKIP)
        public Builder mcc(Optional<LinkData> mcc) {
            this.mcc = mcc;
            return this;
        }

        public Builder mcc(LinkData mcc) {
            this.mcc = Optional.ofNullable(mcc);
            return this;
        }

        @JsonSetter(value = "ticketamt", nulls = Nulls.SKIP)
        public Builder ticketamt(Optional<LinkData> ticketamt) {
            this.ticketamt = ticketamt;
            return this;
        }

        public Builder ticketamt(LinkData ticketamt) {
            this.ticketamt = Optional.ofNullable(ticketamt);
            return this;
        }

        @JsonSetter(value = "whenCharged", nulls = Nulls.SKIP)
        public Builder whenCharged(Optional<LinkData> whenCharged) {
            this.whenCharged = whenCharged;
            return this;
        }

        public Builder whenCharged(LinkData whenCharged) {
            this.whenCharged = Optional.ofNullable(whenCharged);
            return this;
        }

        @JsonSetter(value = "whenDelivered", nulls = Nulls.SKIP)
        public Builder whenDelivered(Optional<LinkData> whenDelivered) {
            this.whenDelivered = whenDelivered;
            return this;
        }

        public Builder whenDelivered(LinkData whenDelivered) {
            this.whenDelivered = Optional.ofNullable(whenDelivered);
            return this;
        }

        @JsonSetter(value = "whenProvided", nulls = Nulls.SKIP)
        public Builder whenProvided(Optional<LinkData> whenProvided) {
            this.whenProvided = whenProvided;
            return this;
        }

        public Builder whenProvided(LinkData whenProvided) {
            this.whenProvided = Optional.ofNullable(whenProvided);
            return this;
        }

        @JsonSetter(value = "whenRefunded", nulls = Nulls.SKIP)
        public Builder whenRefunded(Optional<LinkData> whenRefunded) {
            this.whenRefunded = whenRefunded;
            return this;
        }

        public Builder whenRefunded(LinkData whenRefunded) {
            this.whenRefunded = Optional.ofNullable(whenRefunded);
            return this;
        }

        public PSection build() {
            return new PSection(
                    avgmonthly,
                    binperson,
                    binphone,
                    binweb,
                    bsummary,
                    highticketamt,
                    mcc,
                    ticketamt,
                    whenCharged,
                    whenDelivered,
                    whenProvided,
                    whenRefunded,
                    additionalProperties);
        }
    }
}
