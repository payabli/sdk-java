/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CardType.Builder.class)
public final class CardType {
    private final Optional<TierItem> amex;

    private final Optional<TierItem> discover;

    private final Optional<TierItem> masterCard;

    private final Optional<TierItem> visa;

    private final Map<String, Object> additionalProperties;

    private CardType(
            Optional<TierItem> amex,
            Optional<TierItem> discover,
            Optional<TierItem> masterCard,
            Optional<TierItem> visa,
            Map<String, Object> additionalProperties) {
        this.amex = amex;
        this.discover = discover;
        this.masterCard = masterCard;
        this.visa = visa;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("amex")
    public Optional<TierItem> getAmex() {
        return amex;
    }

    @JsonProperty("discover")
    public Optional<TierItem> getDiscover() {
        return discover;
    }

    @JsonProperty("masterCard")
    public Optional<TierItem> getMasterCard() {
        return masterCard;
    }

    @JsonProperty("visa")
    public Optional<TierItem> getVisa() {
        return visa;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CardType && equalTo((CardType) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CardType other) {
        return amex.equals(other.amex)
                && discover.equals(other.discover)
                && masterCard.equals(other.masterCard)
                && visa.equals(other.visa);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.amex, this.discover, this.masterCard, this.visa);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TierItem> amex = Optional.empty();

        private Optional<TierItem> discover = Optional.empty();

        private Optional<TierItem> masterCard = Optional.empty();

        private Optional<TierItem> visa = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CardType other) {
            amex(other.getAmex());
            discover(other.getDiscover());
            masterCard(other.getMasterCard());
            visa(other.getVisa());
            return this;
        }

        @JsonSetter(value = "amex", nulls = Nulls.SKIP)
        public Builder amex(Optional<TierItem> amex) {
            this.amex = amex;
            return this;
        }

        public Builder amex(TierItem amex) {
            this.amex = Optional.ofNullable(amex);
            return this;
        }

        @JsonSetter(value = "discover", nulls = Nulls.SKIP)
        public Builder discover(Optional<TierItem> discover) {
            this.discover = discover;
            return this;
        }

        public Builder discover(TierItem discover) {
            this.discover = Optional.ofNullable(discover);
            return this;
        }

        @JsonSetter(value = "masterCard", nulls = Nulls.SKIP)
        public Builder masterCard(Optional<TierItem> masterCard) {
            this.masterCard = masterCard;
            return this;
        }

        public Builder masterCard(TierItem masterCard) {
            this.masterCard = Optional.ofNullable(masterCard);
            return this;
        }

        @JsonSetter(value = "visa", nulls = Nulls.SKIP)
        public Builder visa(Optional<TierItem> visa) {
            this.visa = visa;
            return this;
        }

        public Builder visa(TierItem visa) {
            this.visa = Optional.ofNullable(visa);
            return this;
        }

        public CardType build() {
            return new CardType(amex, discover, masterCard, visa, additionalProperties);
        }
    }
}
