/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Transfer.Builder.class)
public final class Transfer {
    private final int transferId;

    private final Optional<Long> paypointId;

    private final String batchNumber;

    private final Optional<String> batchCurrency;

    private final Optional<Integer> batchRecords;

    private final String transferIdentifier;

    private final int batchId;

    private final Optional<String> paypointEntryName;

    private final Optional<String> paypointLegalName;

    private final Optional<String> paypointDbaName;

    private final Optional<String> paypointLogo;

    private final Optional<TransferBankAccount> bankAccount;

    private final String transferDate;

    private final String processor;

    private final int transferStatus;

    private final double grossAmount;

    private final double chargeBackAmount;

    private final double returnedAmount;

    private final double holdAmount;

    private final double releasedAmount;

    private final double billingFeesAmount;

    private final double thirdPartyPaidAmount;

    private final double adjustmentsAmount;

    private final double netTransferAmount;

    private final Optional<List<GeneralEvents>> eventsData;

    private final Optional<List<TransferMessage>> messages;

    private final Map<String, Object> additionalProperties;

    private Transfer(
            int transferId,
            Optional<Long> paypointId,
            String batchNumber,
            Optional<String> batchCurrency,
            Optional<Integer> batchRecords,
            String transferIdentifier,
            int batchId,
            Optional<String> paypointEntryName,
            Optional<String> paypointLegalName,
            Optional<String> paypointDbaName,
            Optional<String> paypointLogo,
            Optional<TransferBankAccount> bankAccount,
            String transferDate,
            String processor,
            int transferStatus,
            double grossAmount,
            double chargeBackAmount,
            double returnedAmount,
            double holdAmount,
            double releasedAmount,
            double billingFeesAmount,
            double thirdPartyPaidAmount,
            double adjustmentsAmount,
            double netTransferAmount,
            Optional<List<GeneralEvents>> eventsData,
            Optional<List<TransferMessage>> messages,
            Map<String, Object> additionalProperties) {
        this.transferId = transferId;
        this.paypointId = paypointId;
        this.batchNumber = batchNumber;
        this.batchCurrency = batchCurrency;
        this.batchRecords = batchRecords;
        this.transferIdentifier = transferIdentifier;
        this.batchId = batchId;
        this.paypointEntryName = paypointEntryName;
        this.paypointLegalName = paypointLegalName;
        this.paypointDbaName = paypointDbaName;
        this.paypointLogo = paypointLogo;
        this.bankAccount = bankAccount;
        this.transferDate = transferDate;
        this.processor = processor;
        this.transferStatus = transferStatus;
        this.grossAmount = grossAmount;
        this.chargeBackAmount = chargeBackAmount;
        this.returnedAmount = returnedAmount;
        this.holdAmount = holdAmount;
        this.releasedAmount = releasedAmount;
        this.billingFeesAmount = billingFeesAmount;
        this.thirdPartyPaidAmount = thirdPartyPaidAmount;
        this.adjustmentsAmount = adjustmentsAmount;
        this.netTransferAmount = netTransferAmount;
        this.eventsData = eventsData;
        this.messages = messages;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The transfer ID.
     */
    @JsonProperty("transferId")
    public int getTransferId() {
        return transferId;
    }

    @JsonProperty("paypointId")
    public Optional<Long> getPaypointId() {
        return paypointId;
    }

    @JsonProperty("batchNumber")
    public String getBatchNumber() {
        return batchNumber;
    }

    /**
     * @return The currency of the batch, either USD or CAD.
     */
    @JsonProperty("batchCurrency")
    public Optional<String> getBatchCurrency() {
        return batchCurrency;
    }

    /**
     * @return Number of records in the batch.
     */
    @JsonProperty("batchRecords")
    public Optional<Integer> getBatchRecords() {
        return batchRecords;
    }

    /**
     * @return Unique identifier for the transfer.
     */
    @JsonProperty("transferIdentifier")
    public String getTransferIdentifier() {
        return transferIdentifier;
    }

    /**
     * @return The ID of the batch the transfer belongs to.
     */
    @JsonProperty("batchId")
    public int getBatchId() {
        return batchId;
    }

    /**
     * @return The paypoint entry name.
     */
    @JsonProperty("paypointEntryName")
    public Optional<String> getPaypointEntryName() {
        return paypointEntryName;
    }

    /**
     * @return The paypoint legal name.
     */
    @JsonProperty("paypointLegalName")
    public Optional<String> getPaypointLegalName() {
        return paypointLegalName;
    }

    /**
     * @return The paypoint DBA name.
     */
    @JsonProperty("paypointDbaName")
    public Optional<String> getPaypointDbaName() {
        return paypointDbaName;
    }

    /**
     * @return The paypoint logo URL.
     */
    @JsonProperty("paypointLogo")
    public Optional<String> getPaypointLogo() {
        return paypointLogo;
    }

    /**
     * @return Bank account information for the transfer.
     */
    @JsonProperty("bankAccount")
    public Optional<TransferBankAccount> getBankAccount() {
        return bankAccount;
    }

    /**
     * @return Date when the transfer occurred.
     */
    @JsonProperty("transferDate")
    public String getTransferDate() {
        return transferDate;
    }

    /**
     * @return The payment processor used for the transfer.
     */
    @JsonProperty("processor")
    public String getProcessor() {
        return processor;
    }

    /**
     * @return The current status of the transfer.
     */
    @JsonProperty("transferStatus")
    public int getTransferStatus() {
        return transferStatus;
    }

    /**
     * @return Gross batch is the total amount of the payments grouped in the batch. This amount includes service fees.
     */
    @JsonProperty("grossAmount")
    public double getGrossAmount() {
        return grossAmount;
    }

    /**
     * @return Amount of chargebacks to be deducted from batch.
     */
    @JsonProperty("chargeBackAmount")
    public double getChargeBackAmount() {
        return chargeBackAmount;
    }

    /**
     * @return Amount of ACH returns to be deducted from batch.
     */
    @JsonProperty("returnedAmount")
    public double getReturnedAmount() {
        return returnedAmount;
    }

    /**
     * @return Amount being held for fraud or risk concerns.
     */
    @JsonProperty("holdAmount")
    public double getHoldAmount() {
        return holdAmount;
    }

    /**
     * @return Amount of previously held funds that have been released after a risk review.
     */
    @JsonProperty("releasedAmount")
    public double getReleasedAmount() {
        return releasedAmount;
    }

    /**
     * @return Amount of charges and fees applied for services and transactions.
     */
    @JsonProperty("billingFeesAmount")
    public double getBillingFeesAmount() {
        return billingFeesAmount;
    }

    /**
     * @return Amount of payments captured in the batch cycle that are deposited separately. For example, checks or cash payments recorded in the batch but not deposited via Payabli, or card brands making a direct transfer in certain situations.
     */
    @JsonProperty("thirdPartyPaidAmount")
    public double getThirdPartyPaidAmount() {
        return thirdPartyPaidAmount;
    }

    /**
     * @return Amount of corrections applied to Billing &amp; Fees charges.
     */
    @JsonProperty("adjustmentsAmount")
    public double getAdjustmentsAmount() {
        return adjustmentsAmount;
    }

    /**
     * @return The net transfer amount after all deductions and additions.
     */
    @JsonProperty("netTransferAmount")
    public double getNetTransferAmount() {
        return netTransferAmount;
    }

    /**
     * @return List of events associated with the transfer.
     */
    @JsonProperty("eventsData")
    public Optional<List<GeneralEvents>> getEventsData() {
        return eventsData;
    }

    /**
     * @return List of messages related to the transfer.
     */
    @JsonProperty("messages")
    public Optional<List<TransferMessage>> getMessages() {
        return messages;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Transfer && equalTo((Transfer) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Transfer other) {
        return transferId == other.transferId
                && paypointId.equals(other.paypointId)
                && batchNumber.equals(other.batchNumber)
                && batchCurrency.equals(other.batchCurrency)
                && batchRecords.equals(other.batchRecords)
                && transferIdentifier.equals(other.transferIdentifier)
                && batchId == other.batchId
                && paypointEntryName.equals(other.paypointEntryName)
                && paypointLegalName.equals(other.paypointLegalName)
                && paypointDbaName.equals(other.paypointDbaName)
                && paypointLogo.equals(other.paypointLogo)
                && bankAccount.equals(other.bankAccount)
                && transferDate.equals(other.transferDate)
                && processor.equals(other.processor)
                && transferStatus == other.transferStatus
                && grossAmount == other.grossAmount
                && chargeBackAmount == other.chargeBackAmount
                && returnedAmount == other.returnedAmount
                && holdAmount == other.holdAmount
                && releasedAmount == other.releasedAmount
                && billingFeesAmount == other.billingFeesAmount
                && thirdPartyPaidAmount == other.thirdPartyPaidAmount
                && adjustmentsAmount == other.adjustmentsAmount
                && netTransferAmount == other.netTransferAmount
                && eventsData.equals(other.eventsData)
                && messages.equals(other.messages);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.transferId,
                this.paypointId,
                this.batchNumber,
                this.batchCurrency,
                this.batchRecords,
                this.transferIdentifier,
                this.batchId,
                this.paypointEntryName,
                this.paypointLegalName,
                this.paypointDbaName,
                this.paypointLogo,
                this.bankAccount,
                this.transferDate,
                this.processor,
                this.transferStatus,
                this.grossAmount,
                this.chargeBackAmount,
                this.returnedAmount,
                this.holdAmount,
                this.releasedAmount,
                this.billingFeesAmount,
                this.thirdPartyPaidAmount,
                this.adjustmentsAmount,
                this.netTransferAmount,
                this.eventsData,
                this.messages);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TransferIdStage builder() {
        return new Builder();
    }

    public interface TransferIdStage {
        /**
         * <p>The transfer ID.</p>
         */
        BatchNumberStage transferId(int transferId);

        Builder from(Transfer other);
    }

    public interface BatchNumberStage {
        TransferIdentifierStage batchNumber(@NotNull String batchNumber);
    }

    public interface TransferIdentifierStage {
        /**
         * <p>Unique identifier for the transfer.</p>
         */
        BatchIdStage transferIdentifier(@NotNull String transferIdentifier);
    }

    public interface BatchIdStage {
        /**
         * <p>The ID of the batch the transfer belongs to.</p>
         */
        TransferDateStage batchId(int batchId);
    }

    public interface TransferDateStage {
        /**
         * <p>Date when the transfer occurred.</p>
         */
        ProcessorStage transferDate(@NotNull String transferDate);
    }

    public interface ProcessorStage {
        /**
         * <p>The payment processor used for the transfer.</p>
         */
        TransferStatusStage processor(@NotNull String processor);
    }

    public interface TransferStatusStage {
        /**
         * <p>The current status of the transfer.</p>
         */
        GrossAmountStage transferStatus(int transferStatus);
    }

    public interface GrossAmountStage {
        /**
         * <p>Gross batch is the total amount of the payments grouped in the batch. This amount includes service fees.</p>
         */
        ChargeBackAmountStage grossAmount(double grossAmount);
    }

    public interface ChargeBackAmountStage {
        /**
         * <p>Amount of chargebacks to be deducted from batch.</p>
         */
        ReturnedAmountStage chargeBackAmount(double chargeBackAmount);
    }

    public interface ReturnedAmountStage {
        /**
         * <p>Amount of ACH returns to be deducted from batch.</p>
         */
        HoldAmountStage returnedAmount(double returnedAmount);
    }

    public interface HoldAmountStage {
        /**
         * <p>Amount being held for fraud or risk concerns.</p>
         */
        ReleasedAmountStage holdAmount(double holdAmount);
    }

    public interface ReleasedAmountStage {
        /**
         * <p>Amount of previously held funds that have been released after a risk review.</p>
         */
        BillingFeesAmountStage releasedAmount(double releasedAmount);
    }

    public interface BillingFeesAmountStage {
        /**
         * <p>Amount of charges and fees applied for services and transactions.</p>
         */
        ThirdPartyPaidAmountStage billingFeesAmount(double billingFeesAmount);
    }

    public interface ThirdPartyPaidAmountStage {
        /**
         * <p>Amount of payments captured in the batch cycle that are deposited separately. For example, checks or cash payments recorded in the batch but not deposited via Payabli, or card brands making a direct transfer in certain situations.</p>
         */
        AdjustmentsAmountStage thirdPartyPaidAmount(double thirdPartyPaidAmount);
    }

    public interface AdjustmentsAmountStage {
        /**
         * <p>Amount of corrections applied to Billing &amp; Fees charges.</p>
         */
        NetTransferAmountStage adjustmentsAmount(double adjustmentsAmount);
    }

    public interface NetTransferAmountStage {
        /**
         * <p>The net transfer amount after all deductions and additions.</p>
         */
        _FinalStage netTransferAmount(double netTransferAmount);
    }

    public interface _FinalStage {
        Transfer build();

        _FinalStage paypointId(Optional<Long> paypointId);

        _FinalStage paypointId(Long paypointId);

        /**
         * <p>The currency of the batch, either USD or CAD.</p>
         */
        _FinalStage batchCurrency(Optional<String> batchCurrency);

        _FinalStage batchCurrency(String batchCurrency);

        /**
         * <p>Number of records in the batch.</p>
         */
        _FinalStage batchRecords(Optional<Integer> batchRecords);

        _FinalStage batchRecords(Integer batchRecords);

        /**
         * <p>The paypoint entry name.</p>
         */
        _FinalStage paypointEntryName(Optional<String> paypointEntryName);

        _FinalStage paypointEntryName(String paypointEntryName);

        /**
         * <p>The paypoint legal name.</p>
         */
        _FinalStage paypointLegalName(Optional<String> paypointLegalName);

        _FinalStage paypointLegalName(String paypointLegalName);

        /**
         * <p>The paypoint DBA name.</p>
         */
        _FinalStage paypointDbaName(Optional<String> paypointDbaName);

        _FinalStage paypointDbaName(String paypointDbaName);

        /**
         * <p>The paypoint logo URL.</p>
         */
        _FinalStage paypointLogo(Optional<String> paypointLogo);

        _FinalStage paypointLogo(String paypointLogo);

        /**
         * <p>Bank account information for the transfer.</p>
         */
        _FinalStage bankAccount(Optional<TransferBankAccount> bankAccount);

        _FinalStage bankAccount(TransferBankAccount bankAccount);

        /**
         * <p>List of events associated with the transfer.</p>
         */
        _FinalStage eventsData(Optional<List<GeneralEvents>> eventsData);

        _FinalStage eventsData(List<GeneralEvents> eventsData);

        /**
         * <p>List of messages related to the transfer.</p>
         */
        _FinalStage messages(Optional<List<TransferMessage>> messages);

        _FinalStage messages(List<TransferMessage> messages);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements TransferIdStage,
                    BatchNumberStage,
                    TransferIdentifierStage,
                    BatchIdStage,
                    TransferDateStage,
                    ProcessorStage,
                    TransferStatusStage,
                    GrossAmountStage,
                    ChargeBackAmountStage,
                    ReturnedAmountStage,
                    HoldAmountStage,
                    ReleasedAmountStage,
                    BillingFeesAmountStage,
                    ThirdPartyPaidAmountStage,
                    AdjustmentsAmountStage,
                    NetTransferAmountStage,
                    _FinalStage {
        private int transferId;

        private String batchNumber;

        private String transferIdentifier;

        private int batchId;

        private String transferDate;

        private String processor;

        private int transferStatus;

        private double grossAmount;

        private double chargeBackAmount;

        private double returnedAmount;

        private double holdAmount;

        private double releasedAmount;

        private double billingFeesAmount;

        private double thirdPartyPaidAmount;

        private double adjustmentsAmount;

        private double netTransferAmount;

        private Optional<List<TransferMessage>> messages = Optional.empty();

        private Optional<List<GeneralEvents>> eventsData = Optional.empty();

        private Optional<TransferBankAccount> bankAccount = Optional.empty();

        private Optional<String> paypointLogo = Optional.empty();

        private Optional<String> paypointDbaName = Optional.empty();

        private Optional<String> paypointLegalName = Optional.empty();

        private Optional<String> paypointEntryName = Optional.empty();

        private Optional<Integer> batchRecords = Optional.empty();

        private Optional<String> batchCurrency = Optional.empty();

        private Optional<Long> paypointId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Transfer other) {
            transferId(other.getTransferId());
            paypointId(other.getPaypointId());
            batchNumber(other.getBatchNumber());
            batchCurrency(other.getBatchCurrency());
            batchRecords(other.getBatchRecords());
            transferIdentifier(other.getTransferIdentifier());
            batchId(other.getBatchId());
            paypointEntryName(other.getPaypointEntryName());
            paypointLegalName(other.getPaypointLegalName());
            paypointDbaName(other.getPaypointDbaName());
            paypointLogo(other.getPaypointLogo());
            bankAccount(other.getBankAccount());
            transferDate(other.getTransferDate());
            processor(other.getProcessor());
            transferStatus(other.getTransferStatus());
            grossAmount(other.getGrossAmount());
            chargeBackAmount(other.getChargeBackAmount());
            returnedAmount(other.getReturnedAmount());
            holdAmount(other.getHoldAmount());
            releasedAmount(other.getReleasedAmount());
            billingFeesAmount(other.getBillingFeesAmount());
            thirdPartyPaidAmount(other.getThirdPartyPaidAmount());
            adjustmentsAmount(other.getAdjustmentsAmount());
            netTransferAmount(other.getNetTransferAmount());
            eventsData(other.getEventsData());
            messages(other.getMessages());
            return this;
        }

        /**
         * <p>The transfer ID.</p>
         * <p>The transfer ID.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("transferId")
        public BatchNumberStage transferId(int transferId) {
            this.transferId = transferId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("batchNumber")
        public TransferIdentifierStage batchNumber(@NotNull String batchNumber) {
            this.batchNumber = Objects.requireNonNull(batchNumber, "batchNumber must not be null");
            return this;
        }

        /**
         * <p>Unique identifier for the transfer.</p>
         * <p>Unique identifier for the transfer.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("transferIdentifier")
        public BatchIdStage transferIdentifier(@NotNull String transferIdentifier) {
            this.transferIdentifier = Objects.requireNonNull(transferIdentifier, "transferIdentifier must not be null");
            return this;
        }

        /**
         * <p>The ID of the batch the transfer belongs to.</p>
         * <p>The ID of the batch the transfer belongs to.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("batchId")
        public TransferDateStage batchId(int batchId) {
            this.batchId = batchId;
            return this;
        }

        /**
         * <p>Date when the transfer occurred.</p>
         * <p>Date when the transfer occurred.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("transferDate")
        public ProcessorStage transferDate(@NotNull String transferDate) {
            this.transferDate = Objects.requireNonNull(transferDate, "transferDate must not be null");
            return this;
        }

        /**
         * <p>The payment processor used for the transfer.</p>
         * <p>The payment processor used for the transfer.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("processor")
        public TransferStatusStage processor(@NotNull String processor) {
            this.processor = Objects.requireNonNull(processor, "processor must not be null");
            return this;
        }

        /**
         * <p>The current status of the transfer.</p>
         * <p>The current status of the transfer.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("transferStatus")
        public GrossAmountStage transferStatus(int transferStatus) {
            this.transferStatus = transferStatus;
            return this;
        }

        /**
         * <p>Gross batch is the total amount of the payments grouped in the batch. This amount includes service fees.</p>
         * <p>Gross batch is the total amount of the payments grouped in the batch. This amount includes service fees.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("grossAmount")
        public ChargeBackAmountStage grossAmount(double grossAmount) {
            this.grossAmount = grossAmount;
            return this;
        }

        /**
         * <p>Amount of chargebacks to be deducted from batch.</p>
         * <p>Amount of chargebacks to be deducted from batch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("chargeBackAmount")
        public ReturnedAmountStage chargeBackAmount(double chargeBackAmount) {
            this.chargeBackAmount = chargeBackAmount;
            return this;
        }

        /**
         * <p>Amount of ACH returns to be deducted from batch.</p>
         * <p>Amount of ACH returns to be deducted from batch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("returnedAmount")
        public HoldAmountStage returnedAmount(double returnedAmount) {
            this.returnedAmount = returnedAmount;
            return this;
        }

        /**
         * <p>Amount being held for fraud or risk concerns.</p>
         * <p>Amount being held for fraud or risk concerns.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("holdAmount")
        public ReleasedAmountStage holdAmount(double holdAmount) {
            this.holdAmount = holdAmount;
            return this;
        }

        /**
         * <p>Amount of previously held funds that have been released after a risk review.</p>
         * <p>Amount of previously held funds that have been released after a risk review.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("releasedAmount")
        public BillingFeesAmountStage releasedAmount(double releasedAmount) {
            this.releasedAmount = releasedAmount;
            return this;
        }

        /**
         * <p>Amount of charges and fees applied for services and transactions.</p>
         * <p>Amount of charges and fees applied for services and transactions.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("billingFeesAmount")
        public ThirdPartyPaidAmountStage billingFeesAmount(double billingFeesAmount) {
            this.billingFeesAmount = billingFeesAmount;
            return this;
        }

        /**
         * <p>Amount of payments captured in the batch cycle that are deposited separately. For example, checks or cash payments recorded in the batch but not deposited via Payabli, or card brands making a direct transfer in certain situations.</p>
         * <p>Amount of payments captured in the batch cycle that are deposited separately. For example, checks or cash payments recorded in the batch but not deposited via Payabli, or card brands making a direct transfer in certain situations.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("thirdPartyPaidAmount")
        public AdjustmentsAmountStage thirdPartyPaidAmount(double thirdPartyPaidAmount) {
            this.thirdPartyPaidAmount = thirdPartyPaidAmount;
            return this;
        }

        /**
         * <p>Amount of corrections applied to Billing &amp; Fees charges.</p>
         * <p>Amount of corrections applied to Billing &amp; Fees charges.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("adjustmentsAmount")
        public NetTransferAmountStage adjustmentsAmount(double adjustmentsAmount) {
            this.adjustmentsAmount = adjustmentsAmount;
            return this;
        }

        /**
         * <p>The net transfer amount after all deductions and additions.</p>
         * <p>The net transfer amount after all deductions and additions.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("netTransferAmount")
        public _FinalStage netTransferAmount(double netTransferAmount) {
            this.netTransferAmount = netTransferAmount;
            return this;
        }

        /**
         * <p>List of messages related to the transfer.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage messages(List<TransferMessage> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * <p>List of messages related to the transfer.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public _FinalStage messages(Optional<List<TransferMessage>> messages) {
            this.messages = messages;
            return this;
        }

        /**
         * <p>List of events associated with the transfer.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage eventsData(List<GeneralEvents> eventsData) {
            this.eventsData = Optional.ofNullable(eventsData);
            return this;
        }

        /**
         * <p>List of events associated with the transfer.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "eventsData", nulls = Nulls.SKIP)
        public _FinalStage eventsData(Optional<List<GeneralEvents>> eventsData) {
            this.eventsData = eventsData;
            return this;
        }

        /**
         * <p>Bank account information for the transfer.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage bankAccount(TransferBankAccount bankAccount) {
            this.bankAccount = Optional.ofNullable(bankAccount);
            return this;
        }

        /**
         * <p>Bank account information for the transfer.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "bankAccount", nulls = Nulls.SKIP)
        public _FinalStage bankAccount(Optional<TransferBankAccount> bankAccount) {
            this.bankAccount = bankAccount;
            return this;
        }

        /**
         * <p>The paypoint logo URL.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paypointLogo(String paypointLogo) {
            this.paypointLogo = Optional.ofNullable(paypointLogo);
            return this;
        }

        /**
         * <p>The paypoint logo URL.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "paypointLogo", nulls = Nulls.SKIP)
        public _FinalStage paypointLogo(Optional<String> paypointLogo) {
            this.paypointLogo = paypointLogo;
            return this;
        }

        /**
         * <p>The paypoint DBA name.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paypointDbaName(String paypointDbaName) {
            this.paypointDbaName = Optional.ofNullable(paypointDbaName);
            return this;
        }

        /**
         * <p>The paypoint DBA name.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "paypointDbaName", nulls = Nulls.SKIP)
        public _FinalStage paypointDbaName(Optional<String> paypointDbaName) {
            this.paypointDbaName = paypointDbaName;
            return this;
        }

        /**
         * <p>The paypoint legal name.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paypointLegalName(String paypointLegalName) {
            this.paypointLegalName = Optional.ofNullable(paypointLegalName);
            return this;
        }

        /**
         * <p>The paypoint legal name.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "paypointLegalName", nulls = Nulls.SKIP)
        public _FinalStage paypointLegalName(Optional<String> paypointLegalName) {
            this.paypointLegalName = paypointLegalName;
            return this;
        }

        /**
         * <p>The paypoint entry name.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paypointEntryName(String paypointEntryName) {
            this.paypointEntryName = Optional.ofNullable(paypointEntryName);
            return this;
        }

        /**
         * <p>The paypoint entry name.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "paypointEntryName", nulls = Nulls.SKIP)
        public _FinalStage paypointEntryName(Optional<String> paypointEntryName) {
            this.paypointEntryName = paypointEntryName;
            return this;
        }

        /**
         * <p>Number of records in the batch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchRecords(Integer batchRecords) {
            this.batchRecords = Optional.ofNullable(batchRecords);
            return this;
        }

        /**
         * <p>Number of records in the batch.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "batchRecords", nulls = Nulls.SKIP)
        public _FinalStage batchRecords(Optional<Integer> batchRecords) {
            this.batchRecords = batchRecords;
            return this;
        }

        /**
         * <p>The currency of the batch, either USD or CAD.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchCurrency(String batchCurrency) {
            this.batchCurrency = Optional.ofNullable(batchCurrency);
            return this;
        }

        /**
         * <p>The currency of the batch, either USD or CAD.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "batchCurrency", nulls = Nulls.SKIP)
        public _FinalStage batchCurrency(Optional<String> batchCurrency) {
            this.batchCurrency = batchCurrency;
            return this;
        }

        @java.lang.Override
        public _FinalStage paypointId(Long paypointId) {
            this.paypointId = Optional.ofNullable(paypointId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paypointId", nulls = Nulls.SKIP)
        public _FinalStage paypointId(Optional<Long> paypointId) {
            this.paypointId = paypointId;
            return this;
        }

        @java.lang.Override
        public Transfer build() {
            return new Transfer(
                    transferId,
                    paypointId,
                    batchNumber,
                    batchCurrency,
                    batchRecords,
                    transferIdentifier,
                    batchId,
                    paypointEntryName,
                    paypointLegalName,
                    paypointDbaName,
                    paypointLogo,
                    bankAccount,
                    transferDate,
                    processor,
                    transferStatus,
                    grossAmount,
                    chargeBackAmount,
                    returnedAmount,
                    holdAmount,
                    releasedAmount,
                    billingFeesAmount,
                    thirdPartyPaidAmount,
                    adjustmentsAmount,
                    netTransferAmount,
                    eventsData,
                    messages,
                    additionalProperties);
        }
    }
}
