/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BasicTemplateElement.Builder.class)
public final class BasicTemplateElement {
    private final Optional<Boolean> readOnly;

    private final Optional<Boolean> required;

    private final Optional<Boolean> visible;

    private final Map<String, Object> additionalProperties;

    private BasicTemplateElement(
            Optional<Boolean> readOnly,
            Optional<Boolean> required,
            Optional<Boolean> visible,
            Map<String, Object> additionalProperties) {
        this.readOnly = readOnly;
        this.required = required;
        this.visible = visible;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("readOnly")
    public Optional<Boolean> getReadOnly() {
        return readOnly;
    }

    @JsonProperty("required")
    public Optional<Boolean> getRequired() {
        return required;
    }

    @JsonProperty("visible")
    public Optional<Boolean> getVisible() {
        return visible;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BasicTemplateElement && equalTo((BasicTemplateElement) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BasicTemplateElement other) {
        return readOnly.equals(other.readOnly) && required.equals(other.required) && visible.equals(other.visible);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.readOnly, this.required, this.visible);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> readOnly = Optional.empty();

        private Optional<Boolean> required = Optional.empty();

        private Optional<Boolean> visible = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BasicTemplateElement other) {
            readOnly(other.getReadOnly());
            required(other.getRequired());
            visible(other.getVisible());
            return this;
        }

        @JsonSetter(value = "readOnly", nulls = Nulls.SKIP)
        public Builder readOnly(Optional<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(Boolean readOnly) {
            this.readOnly = Optional.ofNullable(readOnly);
            return this;
        }

        @JsonSetter(value = "required", nulls = Nulls.SKIP)
        public Builder required(Optional<Boolean> required) {
            this.required = required;
            return this;
        }

        public Builder required(Boolean required) {
            this.required = Optional.ofNullable(required);
            return this;
        }

        @JsonSetter(value = "visible", nulls = Nulls.SKIP)
        public Builder visible(Optional<Boolean> visible) {
            this.visible = visible;
            return this;
        }

        public Builder visible(Boolean visible) {
            this.visible = Optional.ofNullable(visible);
            return this;
        }

        public BasicTemplateElement build() {
            return new BasicTemplateElement(readOnly, required, visible, additionalProperties);
        }
    }
}
