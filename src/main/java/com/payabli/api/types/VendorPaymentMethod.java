/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VendorPaymentMethod.Builder.class)
public final class VendorPaymentMethod {
    private final Optional<VendorPaymentMethodMethod> method;

    private final Map<String, Object> additionalProperties;

    private VendorPaymentMethod(Optional<VendorPaymentMethodMethod> method, Map<String, Object> additionalProperties) {
        this.method = method;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Payment method to use for payout. Leave empty for managed payables.
     */
    @JsonProperty("method")
    public Optional<VendorPaymentMethodMethod> getMethod() {
        return method;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VendorPaymentMethod && equalTo((VendorPaymentMethod) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VendorPaymentMethod other) {
        return method.equals(other.method);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.method);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<VendorPaymentMethodMethod> method = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(VendorPaymentMethod other) {
            method(other.getMethod());
            return this;
        }

        /**
         * <p>Payment method to use for payout. Leave empty for managed payables.</p>
         */
        @JsonSetter(value = "method", nulls = Nulls.SKIP)
        public Builder method(Optional<VendorPaymentMethodMethod> method) {
            this.method = method;
            return this;
        }

        public Builder method(VendorPaymentMethodMethod method) {
            this.method = Optional.ofNullable(method);
            return this;
        }

        public VendorPaymentMethod build() {
            return new VendorPaymentMethod(method, additionalProperties);
        }
    }
}
