/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VendorPaymentMethod.Builder.class)
public final class VendorPaymentMethod {
    private final String method;

    private final Optional<String> storedMethodId;

    private final Map<String, Object> additionalProperties;

    private VendorPaymentMethod(
            String method, Optional<String> storedMethodId, Map<String, Object> additionalProperties) {
        this.method = method;
        this.storedMethodId = storedMethodId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Payment method type - &quot;managed&quot;, &quot;vcard&quot;, &quot;check&quot;, or &quot;ach&quot;
     */
    @JsonProperty("method")
    public String getMethod() {
        return method;
    }

    /**
     * @return ID of the stored ACH payment method. Only applicable when method is &quot;ach&quot;. Required when using a previously saved ACH method when the vendor has more than one saved method. See the <a href="/developers/developer-guides/pay-out-manage-payouts">Payouts with saved ACH payment methods</a> section for more details.
     */
    @JsonProperty("storedMethodId")
    public Optional<String> getStoredMethodId() {
        return storedMethodId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VendorPaymentMethod && equalTo((VendorPaymentMethod) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VendorPaymentMethod other) {
        return method.equals(other.method) && storedMethodId.equals(other.storedMethodId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.method, this.storedMethodId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MethodStage builder() {
        return new Builder();
    }

    public interface MethodStage {
        /**
         * <p>Payment method type - &quot;managed&quot;, &quot;vcard&quot;, &quot;check&quot;, or &quot;ach&quot;</p>
         */
        _FinalStage method(@NotNull String method);

        Builder from(VendorPaymentMethod other);
    }

    public interface _FinalStage {
        VendorPaymentMethod build();

        /**
         * <p>ID of the stored ACH payment method. Only applicable when method is &quot;ach&quot;. Required when using a previously saved ACH method when the vendor has more than one saved method. See the <a href="/developers/developer-guides/pay-out-manage-payouts">Payouts with saved ACH payment methods</a> section for more details.</p>
         */
        _FinalStage storedMethodId(Optional<String> storedMethodId);

        _FinalStage storedMethodId(String storedMethodId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MethodStage, _FinalStage {
        private String method;

        private Optional<String> storedMethodId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(VendorPaymentMethod other) {
            method(other.getMethod());
            storedMethodId(other.getStoredMethodId());
            return this;
        }

        /**
         * <p>Payment method type - &quot;managed&quot;, &quot;vcard&quot;, &quot;check&quot;, or &quot;ach&quot;</p>
         * <p>Payment method type - &quot;managed&quot;, &quot;vcard&quot;, &quot;check&quot;, or &quot;ach&quot;</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("method")
        public _FinalStage method(@NotNull String method) {
            this.method = Objects.requireNonNull(method, "method must not be null");
            return this;
        }

        /**
         * <p>ID of the stored ACH payment method. Only applicable when method is &quot;ach&quot;. Required when using a previously saved ACH method when the vendor has more than one saved method. See the <a href="/developers/developer-guides/pay-out-manage-payouts">Payouts with saved ACH payment methods</a> section for more details.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage storedMethodId(String storedMethodId) {
            this.storedMethodId = Optional.ofNullable(storedMethodId);
            return this;
        }

        /**
         * <p>ID of the stored ACH payment method. Only applicable when method is &quot;ach&quot;. Required when using a previously saved ACH method when the vendor has more than one saved method. See the <a href="/developers/developer-guides/pay-out-manage-payouts">Payouts with saved ACH payment methods</a> section for more details.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "storedMethodId", nulls = Nulls.SKIP)
        public _FinalStage storedMethodId(Optional<String> storedMethodId) {
            this.storedMethodId = storedMethodId;
            return this;
        }

        @java.lang.Override
        public VendorPaymentMethod build() {
            return new VendorPaymentMethod(method, storedMethodId, additionalProperties);
        }
    }
}
