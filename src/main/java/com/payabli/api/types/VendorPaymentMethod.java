/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class VendorPaymentMethod {
    private final Value value;

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    private VendorPaymentMethod(Value value) {
        this.value = value;
    }

    public <T> T visit(Visitor<T> visitor) {
        return value.visit(visitor);
    }

    public static VendorPaymentMethod managed(ManagedPaymentMethod value) {
        return new VendorPaymentMethod(new ManagedValue(value));
    }

    public static VendorPaymentMethod vcard(VCardPaymentMethod value) {
        return new VendorPaymentMethod(new VcardValue(value));
    }

    public static VendorPaymentMethod ach(AchPaymentMethod value) {
        return new VendorPaymentMethod(new AchValue(value));
    }

    public static VendorPaymentMethod check(CheckPaymentMethod value) {
        return new VendorPaymentMethod(new CheckValue(value));
    }

    public boolean isManaged() {
        return value instanceof ManagedValue;
    }

    public boolean isVcard() {
        return value instanceof VcardValue;
    }

    public boolean isAch() {
        return value instanceof AchValue;
    }

    public boolean isCheck() {
        return value instanceof CheckValue;
    }

    public boolean _isUnknown() {
        return value instanceof _UnknownValue;
    }

    public Optional<ManagedPaymentMethod> getManaged() {
        if (isManaged()) {
            return Optional.of(((ManagedValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<VCardPaymentMethod> getVcard() {
        if (isVcard()) {
            return Optional.of(((VcardValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<AchPaymentMethod> getAch() {
        if (isAch()) {
            return Optional.of(((AchValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<CheckPaymentMethod> getCheck() {
        if (isCheck()) {
            return Optional.of(((CheckValue) value).value);
        }
        return Optional.empty();
    }

    public Optional<Object> _getUnknown() {
        if (_isUnknown()) {
            return Optional.of(((_UnknownValue) value).value);
        }
        return Optional.empty();
    }

    @JsonValue
    private Value getValue() {
        return this.value;
    }

    public interface Visitor<T> {
        T visitManaged(ManagedPaymentMethod managed);

        T visitVcard(VCardPaymentMethod vcard);

        T visitAch(AchPaymentMethod ach);

        T visitCheck(CheckPaymentMethod check);

        T _visitUnknown(Object unknownType);
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "method", visible = true, defaultImpl = _UnknownValue.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(ManagedValue.class),
        @JsonSubTypes.Type(VcardValue.class),
        @JsonSubTypes.Type(AchValue.class),
        @JsonSubTypes.Type(CheckValue.class)
    })
    @JsonIgnoreProperties(ignoreUnknown = true)
    private interface Value {
        <T> T visit(Visitor<T> visitor);
    }

    @JsonTypeName("managed")
    @JsonIgnoreProperties("method")
    private static final class ManagedValue implements Value {
        @JsonUnwrapped
        private ManagedPaymentMethod value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private ManagedValue() {}

        private ManagedValue(ManagedPaymentMethod value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitManaged(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof ManagedValue && equalTo((ManagedValue) other);
        }

        private boolean equalTo(ManagedValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "VendorPaymentMethod{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("vcard")
    @JsonIgnoreProperties("method")
    private static final class VcardValue implements Value {
        @JsonUnwrapped
        private VCardPaymentMethod value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private VcardValue() {}

        private VcardValue(VCardPaymentMethod value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitVcard(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof VcardValue && equalTo((VcardValue) other);
        }

        private boolean equalTo(VcardValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "VendorPaymentMethod{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("ach")
    @JsonIgnoreProperties("method")
    private static final class AchValue implements Value {
        @JsonUnwrapped
        private AchPaymentMethod value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private AchValue() {}

        private AchValue(AchPaymentMethod value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitAch(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof AchValue && equalTo((AchValue) other);
        }

        private boolean equalTo(AchValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "VendorPaymentMethod{" + "value: " + value + "}";
        }
    }

    @JsonTypeName("check")
    @JsonIgnoreProperties("method")
    private static final class CheckValue implements Value {
        @JsonUnwrapped
        private CheckPaymentMethod value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private CheckValue() {}

        private CheckValue(CheckPaymentMethod value) {
            this.value = value;
        }

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor.visitCheck(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof CheckValue && equalTo((CheckValue) other);
        }

        private boolean equalTo(CheckValue other) {
            return value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.value);
        }

        @java.lang.Override
        public String toString() {
            return "VendorPaymentMethod{" + "value: " + value + "}";
        }
    }

    @JsonIgnoreProperties("method")
    private static final class _UnknownValue implements Value {
        private String type;

        @JsonValue
        private Object value;

        @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
        private _UnknownValue(@JsonProperty("value") Object value) {}

        @java.lang.Override
        public <T> T visit(Visitor<T> visitor) {
            return visitor._visitUnknown(value);
        }

        @java.lang.Override
        public boolean equals(Object other) {
            if (this == other) return true;
            return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
        }

        private boolean equalTo(_UnknownValue other) {
            return type.equals(other.type) && value.equals(other.value);
        }

        @java.lang.Override
        public int hashCode() {
            return Objects.hash(this.type, this.value);
        }

        @java.lang.Override
        public String toString() {
            return "VendorPaymentMethod{" + "type: " + type + ", value: " + value + "}";
        }
    }
}
