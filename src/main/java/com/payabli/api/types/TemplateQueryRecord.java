/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TemplateQueryRecord.Builder.class)
public final class TemplateQueryRecord {
    private final Optional<Boolean> addPrice;

    private final Optional<List<BoardingQueryLinks>> boardingLinks;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<Long> idTemplate;

    private final Optional<Boolean> isRoot;

    private final Optional<String> orgParentName;

    private final Optional<Boolean> recipientEmailNotification;

    private final Optional<Boolean> resumable;

    private final Optional<String> templateCode;

    private final Optional<TemplateContentResponse> templateContent;

    private final Optional<String> templateDescription;

    private final Optional<String> templateTitle;

    private final Optional<Integer> usedBy;

    private final Map<String, Object> additionalProperties;

    private TemplateQueryRecord(
            Optional<Boolean> addPrice,
            Optional<List<BoardingQueryLinks>> boardingLinks,
            Optional<OffsetDateTime> createdAt,
            Optional<Long> idTemplate,
            Optional<Boolean> isRoot,
            Optional<String> orgParentName,
            Optional<Boolean> recipientEmailNotification,
            Optional<Boolean> resumable,
            Optional<String> templateCode,
            Optional<TemplateContentResponse> templateContent,
            Optional<String> templateDescription,
            Optional<String> templateTitle,
            Optional<Integer> usedBy,
            Map<String, Object> additionalProperties) {
        this.addPrice = addPrice;
        this.boardingLinks = boardingLinks;
        this.createdAt = createdAt;
        this.idTemplate = idTemplate;
        this.isRoot = isRoot;
        this.orgParentName = orgParentName;
        this.recipientEmailNotification = recipientEmailNotification;
        this.resumable = resumable;
        this.templateCode = templateCode;
        this.templateContent = templateContent;
        this.templateDescription = templateDescription;
        this.templateTitle = templateTitle;
        this.usedBy = usedBy;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("addPrice")
    public Optional<Boolean> getAddPrice() {
        return addPrice;
    }

    @JsonProperty("boardingLinks")
    public Optional<List<BoardingQueryLinks>> getBoardingLinks() {
        return boardingLinks;
    }

    @JsonProperty("createdAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("idTemplate")
    public Optional<Long> getIdTemplate() {
        return idTemplate;
    }

    @JsonProperty("isRoot")
    public Optional<Boolean> getIsRoot() {
        return isRoot;
    }

    @JsonProperty("orgParentName")
    public Optional<String> getOrgParentName() {
        return orgParentName;
    }

    @JsonProperty("recipientEmailNotification")
    public Optional<Boolean> getRecipientEmailNotification() {
        return recipientEmailNotification;
    }

    @JsonProperty("resumable")
    public Optional<Boolean> getResumable() {
        return resumable;
    }

    @JsonProperty("templateCode")
    public Optional<String> getTemplateCode() {
        return templateCode;
    }

    @JsonProperty("templateContent")
    public Optional<TemplateContentResponse> getTemplateContent() {
        return templateContent;
    }

    @JsonProperty("templateDescription")
    public Optional<String> getTemplateDescription() {
        return templateDescription;
    }

    @JsonProperty("templateTitle")
    public Optional<String> getTemplateTitle() {
        return templateTitle;
    }

    @JsonProperty("usedBy")
    public Optional<Integer> getUsedBy() {
        return usedBy;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TemplateQueryRecord && equalTo((TemplateQueryRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TemplateQueryRecord other) {
        return addPrice.equals(other.addPrice)
                && boardingLinks.equals(other.boardingLinks)
                && createdAt.equals(other.createdAt)
                && idTemplate.equals(other.idTemplate)
                && isRoot.equals(other.isRoot)
                && orgParentName.equals(other.orgParentName)
                && recipientEmailNotification.equals(other.recipientEmailNotification)
                && resumable.equals(other.resumable)
                && templateCode.equals(other.templateCode)
                && templateContent.equals(other.templateContent)
                && templateDescription.equals(other.templateDescription)
                && templateTitle.equals(other.templateTitle)
                && usedBy.equals(other.usedBy);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.addPrice,
                this.boardingLinks,
                this.createdAt,
                this.idTemplate,
                this.isRoot,
                this.orgParentName,
                this.recipientEmailNotification,
                this.resumable,
                this.templateCode,
                this.templateContent,
                this.templateDescription,
                this.templateTitle,
                this.usedBy);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> addPrice = Optional.empty();

        private Optional<List<BoardingQueryLinks>> boardingLinks = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<Long> idTemplate = Optional.empty();

        private Optional<Boolean> isRoot = Optional.empty();

        private Optional<String> orgParentName = Optional.empty();

        private Optional<Boolean> recipientEmailNotification = Optional.empty();

        private Optional<Boolean> resumable = Optional.empty();

        private Optional<String> templateCode = Optional.empty();

        private Optional<TemplateContentResponse> templateContent = Optional.empty();

        private Optional<String> templateDescription = Optional.empty();

        private Optional<String> templateTitle = Optional.empty();

        private Optional<Integer> usedBy = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TemplateQueryRecord other) {
            addPrice(other.getAddPrice());
            boardingLinks(other.getBoardingLinks());
            createdAt(other.getCreatedAt());
            idTemplate(other.getIdTemplate());
            isRoot(other.getIsRoot());
            orgParentName(other.getOrgParentName());
            recipientEmailNotification(other.getRecipientEmailNotification());
            resumable(other.getResumable());
            templateCode(other.getTemplateCode());
            templateContent(other.getTemplateContent());
            templateDescription(other.getTemplateDescription());
            templateTitle(other.getTemplateTitle());
            usedBy(other.getUsedBy());
            return this;
        }

        @JsonSetter(value = "addPrice", nulls = Nulls.SKIP)
        public Builder addPrice(Optional<Boolean> addPrice) {
            this.addPrice = addPrice;
            return this;
        }

        public Builder addPrice(Boolean addPrice) {
            this.addPrice = Optional.ofNullable(addPrice);
            return this;
        }

        @JsonSetter(value = "boardingLinks", nulls = Nulls.SKIP)
        public Builder boardingLinks(Optional<List<BoardingQueryLinks>> boardingLinks) {
            this.boardingLinks = boardingLinks;
            return this;
        }

        public Builder boardingLinks(List<BoardingQueryLinks> boardingLinks) {
            this.boardingLinks = Optional.ofNullable(boardingLinks);
            return this;
        }

        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "idTemplate", nulls = Nulls.SKIP)
        public Builder idTemplate(Optional<Long> idTemplate) {
            this.idTemplate = idTemplate;
            return this;
        }

        public Builder idTemplate(Long idTemplate) {
            this.idTemplate = Optional.ofNullable(idTemplate);
            return this;
        }

        @JsonSetter(value = "isRoot", nulls = Nulls.SKIP)
        public Builder isRoot(Optional<Boolean> isRoot) {
            this.isRoot = isRoot;
            return this;
        }

        public Builder isRoot(Boolean isRoot) {
            this.isRoot = Optional.ofNullable(isRoot);
            return this;
        }

        @JsonSetter(value = "orgParentName", nulls = Nulls.SKIP)
        public Builder orgParentName(Optional<String> orgParentName) {
            this.orgParentName = orgParentName;
            return this;
        }

        public Builder orgParentName(String orgParentName) {
            this.orgParentName = Optional.ofNullable(orgParentName);
            return this;
        }

        @JsonSetter(value = "recipientEmailNotification", nulls = Nulls.SKIP)
        public Builder recipientEmailNotification(Optional<Boolean> recipientEmailNotification) {
            this.recipientEmailNotification = recipientEmailNotification;
            return this;
        }

        public Builder recipientEmailNotification(Boolean recipientEmailNotification) {
            this.recipientEmailNotification = Optional.ofNullable(recipientEmailNotification);
            return this;
        }

        @JsonSetter(value = "resumable", nulls = Nulls.SKIP)
        public Builder resumable(Optional<Boolean> resumable) {
            this.resumable = resumable;
            return this;
        }

        public Builder resumable(Boolean resumable) {
            this.resumable = Optional.ofNullable(resumable);
            return this;
        }

        @JsonSetter(value = "templateCode", nulls = Nulls.SKIP)
        public Builder templateCode(Optional<String> templateCode) {
            this.templateCode = templateCode;
            return this;
        }

        public Builder templateCode(String templateCode) {
            this.templateCode = Optional.ofNullable(templateCode);
            return this;
        }

        @JsonSetter(value = "templateContent", nulls = Nulls.SKIP)
        public Builder templateContent(Optional<TemplateContentResponse> templateContent) {
            this.templateContent = templateContent;
            return this;
        }

        public Builder templateContent(TemplateContentResponse templateContent) {
            this.templateContent = Optional.ofNullable(templateContent);
            return this;
        }

        @JsonSetter(value = "templateDescription", nulls = Nulls.SKIP)
        public Builder templateDescription(Optional<String> templateDescription) {
            this.templateDescription = templateDescription;
            return this;
        }

        public Builder templateDescription(String templateDescription) {
            this.templateDescription = Optional.ofNullable(templateDescription);
            return this;
        }

        @JsonSetter(value = "templateTitle", nulls = Nulls.SKIP)
        public Builder templateTitle(Optional<String> templateTitle) {
            this.templateTitle = templateTitle;
            return this;
        }

        public Builder templateTitle(String templateTitle) {
            this.templateTitle = Optional.ofNullable(templateTitle);
            return this;
        }

        @JsonSetter(value = "usedBy", nulls = Nulls.SKIP)
        public Builder usedBy(Optional<Integer> usedBy) {
            this.usedBy = usedBy;
            return this;
        }

        public Builder usedBy(Integer usedBy) {
            this.usedBy = Optional.ofNullable(usedBy);
            return this;
        }

        public TemplateQueryRecord build() {
            return new TemplateQueryRecord(
                    addPrice,
                    boardingLinks,
                    createdAt,
                    idTemplate,
                    isRoot,
                    orgParentName,
                    recipientEmailNotification,
                    resumable,
                    templateCode,
                    templateContent,
                    templateDescription,
                    templateTitle,
                    usedBy,
                    additionalProperties);
        }
    }
}
