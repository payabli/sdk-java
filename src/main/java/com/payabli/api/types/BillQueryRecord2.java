/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BillQueryRecord2.Builder.class)
public final class BillQueryRecord2 {
    private final Optional<String> accountingField1;

    private final Optional<String> accountingField2;

    private final Optional<Map<String, String>> additionalData;

    private final Optional<String> batchNumber;

    private final Optional<List<BillQueryRecord2BillApprovalsItem>> billApprovals;

    private final Optional<String> billDate;

    private final Optional<List<GeneralEvents>> billEvents;

    private final Optional<List<BillItem>> billItems;

    private final Optional<String> billNumber;

    private final Optional<String> comments;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<Double> discount;

    private final Optional<String> documentsRef;

    private final Optional<String> dueDate;

    private final Optional<String> endDate;

    private final Optional<String> entityId;

    private final Optional<String> externalPaypointId;

    private final Optional<Frequency> frequency;

    private final Optional<Long> idBill;

    private final Optional<OffsetDateTime> lastUpdated;

    private final Optional<String> lotNumber;

    private final Optional<Integer> mode;

    private final Optional<Double> netAmount;

    private final Optional<Long> parentOrgId;

    private final Optional<String> parentOrgName;

    private final Optional<String> paymentId;

    private final Optional<BillQueryRecord2PaymentMethod> paymentMethod;

    private final Optional<String> paylinkId;

    private final Optional<String> paypointDbaname;

    private final Optional<String> paypointEntryname;

    private final Optional<String> paypointLegalname;

    private final Optional<String> source;

    private final Optional<Integer> status;

    private final Optional<String> terms;

    private final Optional<Double> totalAmount;

    private final Optional<TransactionOutQueryRecord> transaction;

    private final Optional<VendorOutData> vendor;

    private final Map<String, Object> additionalProperties;

    private BillQueryRecord2(
            Optional<String> accountingField1,
            Optional<String> accountingField2,
            Optional<Map<String, String>> additionalData,
            Optional<String> batchNumber,
            Optional<List<BillQueryRecord2BillApprovalsItem>> billApprovals,
            Optional<String> billDate,
            Optional<List<GeneralEvents>> billEvents,
            Optional<List<BillItem>> billItems,
            Optional<String> billNumber,
            Optional<String> comments,
            Optional<OffsetDateTime> createdAt,
            Optional<Double> discount,
            Optional<String> documentsRef,
            Optional<String> dueDate,
            Optional<String> endDate,
            Optional<String> entityId,
            Optional<String> externalPaypointId,
            Optional<Frequency> frequency,
            Optional<Long> idBill,
            Optional<OffsetDateTime> lastUpdated,
            Optional<String> lotNumber,
            Optional<Integer> mode,
            Optional<Double> netAmount,
            Optional<Long> parentOrgId,
            Optional<String> parentOrgName,
            Optional<String> paymentId,
            Optional<BillQueryRecord2PaymentMethod> paymentMethod,
            Optional<String> paylinkId,
            Optional<String> paypointDbaname,
            Optional<String> paypointEntryname,
            Optional<String> paypointLegalname,
            Optional<String> source,
            Optional<Integer> status,
            Optional<String> terms,
            Optional<Double> totalAmount,
            Optional<TransactionOutQueryRecord> transaction,
            Optional<VendorOutData> vendor,
            Map<String, Object> additionalProperties) {
        this.accountingField1 = accountingField1;
        this.accountingField2 = accountingField2;
        this.additionalData = additionalData;
        this.batchNumber = batchNumber;
        this.billApprovals = billApprovals;
        this.billDate = billDate;
        this.billEvents = billEvents;
        this.billItems = billItems;
        this.billNumber = billNumber;
        this.comments = comments;
        this.createdAt = createdAt;
        this.discount = discount;
        this.documentsRef = documentsRef;
        this.dueDate = dueDate;
        this.endDate = endDate;
        this.entityId = entityId;
        this.externalPaypointId = externalPaypointId;
        this.frequency = frequency;
        this.idBill = idBill;
        this.lastUpdated = lastUpdated;
        this.lotNumber = lotNumber;
        this.mode = mode;
        this.netAmount = netAmount;
        this.parentOrgId = parentOrgId;
        this.parentOrgName = parentOrgName;
        this.paymentId = paymentId;
        this.paymentMethod = paymentMethod;
        this.paylinkId = paylinkId;
        this.paypointDbaname = paypointDbaname;
        this.paypointEntryname = paypointEntryname;
        this.paypointLegalname = paypointLegalname;
        this.source = source;
        this.status = status;
        this.terms = terms;
        this.totalAmount = totalAmount;
        this.transaction = transaction;
        this.vendor = vendor;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("AccountingField1")
    public Optional<String> getAccountingField1() {
        return accountingField1;
    }

    @JsonProperty("AccountingField2")
    public Optional<String> getAccountingField2() {
        return accountingField2;
    }

    /**
     * @return Additional data associated with the bill.
     */
    @JsonProperty("AdditionalData")
    public Optional<Map<String, String>> getAdditionalData() {
        return additionalData;
    }

    /**
     * @return Batch number associated with the bill.
     */
    @JsonProperty("BatchNumber")
    public Optional<String> getBatchNumber() {
        return batchNumber;
    }

    @JsonProperty("billApprovals")
    public Optional<List<BillQueryRecord2BillApprovalsItem>> getBillApprovals() {
        return billApprovals;
    }

    /**
     * @return Bill creation date in one of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
     */
    @JsonProperty("BillDate")
    public Optional<String> getBillDate() {
        return billDate;
    }

    /**
     * @return Events associated with the bill.
     */
    @JsonProperty("billEvents")
    public Optional<List<GeneralEvents>> getBillEvents() {
        return billEvents;
    }

    /**
     * @return Array of items included in the bill.
     */
    @JsonProperty("BillItems")
    public Optional<List<BillItem>> getBillItems() {
        return billItems;
    }

    /**
     * @return Bill number.
     */
    @JsonProperty("BillNumber")
    public Optional<String> getBillNumber() {
        return billNumber;
    }

    /**
     * @return Additional comments on the bill.
     */
    @JsonProperty("Comments")
    public Optional<String> getComments() {
        return comments;
    }

    /**
     * @return Timestamp of when bill was created, in UTC.
     */
    @JsonProperty("CreatedAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return Discount amount applied to the bill.
     */
    @JsonProperty("Discount")
    public Optional<Double> getDiscount() {
        return discount;
    }

    /**
     * @return Reference to documents associated with the bill.
     */
    @JsonProperty("DocumentsRef")
    public Optional<String> getDocumentsRef() {
        return documentsRef;
    }

    /**
     * @return Bill due date in one of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
     */
    @JsonProperty("DueDate")
    public Optional<String> getDueDate() {
        return dueDate;
    }

    /**
     * @return End date for the bill.
     */
    @JsonProperty("EndDate")
    public Optional<String> getEndDate() {
        return endDate;
    }

    /**
     * @return Entity identifier associated with the bill.
     */
    @JsonProperty("EntityID")
    public Optional<String> getEntityId() {
        return entityId;
    }

    @JsonProperty("externalPaypointID")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    /**
     * @return Frequency for scheduled bills. Applied only in <code>Mode</code> = 1.
     */
    @JsonProperty("Frequency")
    public Optional<Frequency> getFrequency() {
        return frequency;
    }

    /**
     * @return Identifier of the bill.
     */
    @JsonProperty("IdBill")
    public Optional<Long> getIdBill() {
        return idBill;
    }

    /**
     * @return Timestamp of when bill was last updated, in UTC.
     */
    @JsonProperty("LastUpdated")
    public Optional<OffsetDateTime> getLastUpdated() {
        return lastUpdated;
    }

    /**
     * @return Lot number associated with the bill.
     */
    @JsonProperty("LotNumber")
    public Optional<String> getLotNumber() {
        return lotNumber;
    }

    /**
     * @return Bill mode: value <code>0</code> for single/one-time bills, <code>1</code> for scheduled bills.
     */
    @JsonProperty("Mode")
    public Optional<Integer> getMode() {
        return mode;
    }

    /**
     * @return Net amount of the bill.
     */
    @JsonProperty("NetAmount")
    public Optional<Double> getNetAmount() {
        return netAmount;
    }

    /**
     * @return Parent organization identifier.
     */
    @JsonProperty("ParentOrgId")
    public Optional<Long> getParentOrgId() {
        return parentOrgId;
    }

    @JsonProperty("ParentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    /**
     * @return Payment identifier.
     */
    @JsonProperty("PaymentId")
    public Optional<String> getPaymentId() {
        return paymentId;
    }

    /**
     * @return Preferred payment method used.
     */
    @JsonProperty("PaymentMethod")
    public Optional<BillQueryRecord2PaymentMethod> getPaymentMethod() {
        return paymentMethod;
    }

    /**
     * @return Paylink identifier associated with the bill.
     */
    @JsonProperty("paylinkId")
    public Optional<String> getPaylinkId() {
        return paylinkId;
    }

    /**
     * @return The paypoint's DBA name.
     */
    @JsonProperty("PaypointDbaname")
    public Optional<String> getPaypointDbaname() {
        return paypointDbaname;
    }

    /**
     * @return Entry name of the paypoint.
     */
    @JsonProperty("PaypointEntryname")
    public Optional<String> getPaypointEntryname() {
        return paypointEntryname;
    }

    /**
     * @return The paypoint's legal name.
     */
    @JsonProperty("PaypointLegalname")
    public Optional<String> getPaypointLegalname() {
        return paypointLegalname;
    }

    /**
     * @return Source of the bill.
     */
    @JsonProperty("Source")
    public Optional<String> getSource() {
        return source;
    }

    @JsonProperty("Status")
    public Optional<Integer> getStatus() {
        return status;
    }

    /**
     * @return The payment terms for invoice. If no terms were defined initially, then response data for this field will default to <code>N30</code>.
     */
    @JsonProperty("Terms")
    public Optional<String> getTerms() {
        return terms;
    }

    /**
     * @return Total amount of the bill including taxes and fees.
     */
    @JsonProperty("TotalAmount")
    public Optional<Double> getTotalAmount() {
        return totalAmount;
    }

    /**
     * @return MoneyOut transaction associated to the bill.
     */
    @JsonProperty("Transaction")
    public Optional<TransactionOutQueryRecord> getTransaction() {
        return transaction;
    }

    @JsonProperty("Vendor")
    public Optional<VendorOutData> getVendor() {
        return vendor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BillQueryRecord2 && equalTo((BillQueryRecord2) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BillQueryRecord2 other) {
        return accountingField1.equals(other.accountingField1)
                && accountingField2.equals(other.accountingField2)
                && additionalData.equals(other.additionalData)
                && batchNumber.equals(other.batchNumber)
                && billApprovals.equals(other.billApprovals)
                && billDate.equals(other.billDate)
                && billEvents.equals(other.billEvents)
                && billItems.equals(other.billItems)
                && billNumber.equals(other.billNumber)
                && comments.equals(other.comments)
                && createdAt.equals(other.createdAt)
                && discount.equals(other.discount)
                && documentsRef.equals(other.documentsRef)
                && dueDate.equals(other.dueDate)
                && endDate.equals(other.endDate)
                && entityId.equals(other.entityId)
                && externalPaypointId.equals(other.externalPaypointId)
                && frequency.equals(other.frequency)
                && idBill.equals(other.idBill)
                && lastUpdated.equals(other.lastUpdated)
                && lotNumber.equals(other.lotNumber)
                && mode.equals(other.mode)
                && netAmount.equals(other.netAmount)
                && parentOrgId.equals(other.parentOrgId)
                && parentOrgName.equals(other.parentOrgName)
                && paymentId.equals(other.paymentId)
                && paymentMethod.equals(other.paymentMethod)
                && paylinkId.equals(other.paylinkId)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointEntryname.equals(other.paypointEntryname)
                && paypointLegalname.equals(other.paypointLegalname)
                && source.equals(other.source)
                && status.equals(other.status)
                && terms.equals(other.terms)
                && totalAmount.equals(other.totalAmount)
                && transaction.equals(other.transaction)
                && vendor.equals(other.vendor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accountingField1,
                this.accountingField2,
                this.additionalData,
                this.batchNumber,
                this.billApprovals,
                this.billDate,
                this.billEvents,
                this.billItems,
                this.billNumber,
                this.comments,
                this.createdAt,
                this.discount,
                this.documentsRef,
                this.dueDate,
                this.endDate,
                this.entityId,
                this.externalPaypointId,
                this.frequency,
                this.idBill,
                this.lastUpdated,
                this.lotNumber,
                this.mode,
                this.netAmount,
                this.parentOrgId,
                this.parentOrgName,
                this.paymentId,
                this.paymentMethod,
                this.paylinkId,
                this.paypointDbaname,
                this.paypointEntryname,
                this.paypointLegalname,
                this.source,
                this.status,
                this.terms,
                this.totalAmount,
                this.transaction,
                this.vendor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> accountingField1 = Optional.empty();

        private Optional<String> accountingField2 = Optional.empty();

        private Optional<Map<String, String>> additionalData = Optional.empty();

        private Optional<String> batchNumber = Optional.empty();

        private Optional<List<BillQueryRecord2BillApprovalsItem>> billApprovals = Optional.empty();

        private Optional<String> billDate = Optional.empty();

        private Optional<List<GeneralEvents>> billEvents = Optional.empty();

        private Optional<List<BillItem>> billItems = Optional.empty();

        private Optional<String> billNumber = Optional.empty();

        private Optional<String> comments = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<Double> discount = Optional.empty();

        private Optional<String> documentsRef = Optional.empty();

        private Optional<String> dueDate = Optional.empty();

        private Optional<String> endDate = Optional.empty();

        private Optional<String> entityId = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<Frequency> frequency = Optional.empty();

        private Optional<Long> idBill = Optional.empty();

        private Optional<OffsetDateTime> lastUpdated = Optional.empty();

        private Optional<String> lotNumber = Optional.empty();

        private Optional<Integer> mode = Optional.empty();

        private Optional<Double> netAmount = Optional.empty();

        private Optional<Long> parentOrgId = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<String> paymentId = Optional.empty();

        private Optional<BillQueryRecord2PaymentMethod> paymentMethod = Optional.empty();

        private Optional<String> paylinkId = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> paypointEntryname = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<Integer> status = Optional.empty();

        private Optional<String> terms = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<TransactionOutQueryRecord> transaction = Optional.empty();

        private Optional<VendorOutData> vendor = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BillQueryRecord2 other) {
            accountingField1(other.getAccountingField1());
            accountingField2(other.getAccountingField2());
            additionalData(other.getAdditionalData());
            batchNumber(other.getBatchNumber());
            billApprovals(other.getBillApprovals());
            billDate(other.getBillDate());
            billEvents(other.getBillEvents());
            billItems(other.getBillItems());
            billNumber(other.getBillNumber());
            comments(other.getComments());
            createdAt(other.getCreatedAt());
            discount(other.getDiscount());
            documentsRef(other.getDocumentsRef());
            dueDate(other.getDueDate());
            endDate(other.getEndDate());
            entityId(other.getEntityId());
            externalPaypointId(other.getExternalPaypointId());
            frequency(other.getFrequency());
            idBill(other.getIdBill());
            lastUpdated(other.getLastUpdated());
            lotNumber(other.getLotNumber());
            mode(other.getMode());
            netAmount(other.getNetAmount());
            parentOrgId(other.getParentOrgId());
            parentOrgName(other.getParentOrgName());
            paymentId(other.getPaymentId());
            paymentMethod(other.getPaymentMethod());
            paylinkId(other.getPaylinkId());
            paypointDbaname(other.getPaypointDbaname());
            paypointEntryname(other.getPaypointEntryname());
            paypointLegalname(other.getPaypointLegalname());
            source(other.getSource());
            status(other.getStatus());
            terms(other.getTerms());
            totalAmount(other.getTotalAmount());
            transaction(other.getTransaction());
            vendor(other.getVendor());
            return this;
        }

        @JsonSetter(value = "AccountingField1", nulls = Nulls.SKIP)
        public Builder accountingField1(Optional<String> accountingField1) {
            this.accountingField1 = accountingField1;
            return this;
        }

        public Builder accountingField1(String accountingField1) {
            this.accountingField1 = Optional.ofNullable(accountingField1);
            return this;
        }

        @JsonSetter(value = "AccountingField2", nulls = Nulls.SKIP)
        public Builder accountingField2(Optional<String> accountingField2) {
            this.accountingField2 = accountingField2;
            return this;
        }

        public Builder accountingField2(String accountingField2) {
            this.accountingField2 = Optional.ofNullable(accountingField2);
            return this;
        }

        /**
         * <p>Additional data associated with the bill.</p>
         */
        @JsonSetter(value = "AdditionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<Map<String, String>> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(Map<String, String> additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        /**
         * <p>Batch number associated with the bill.</p>
         */
        @JsonSetter(value = "BatchNumber", nulls = Nulls.SKIP)
        public Builder batchNumber(Optional<String> batchNumber) {
            this.batchNumber = batchNumber;
            return this;
        }

        public Builder batchNumber(String batchNumber) {
            this.batchNumber = Optional.ofNullable(batchNumber);
            return this;
        }

        @JsonSetter(value = "billApprovals", nulls = Nulls.SKIP)
        public Builder billApprovals(Optional<List<BillQueryRecord2BillApprovalsItem>> billApprovals) {
            this.billApprovals = billApprovals;
            return this;
        }

        public Builder billApprovals(List<BillQueryRecord2BillApprovalsItem> billApprovals) {
            this.billApprovals = Optional.ofNullable(billApprovals);
            return this;
        }

        /**
         * <p>Bill creation date in one of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         */
        @JsonSetter(value = "BillDate", nulls = Nulls.SKIP)
        public Builder billDate(Optional<String> billDate) {
            this.billDate = billDate;
            return this;
        }

        public Builder billDate(String billDate) {
            this.billDate = Optional.ofNullable(billDate);
            return this;
        }

        /**
         * <p>Events associated with the bill.</p>
         */
        @JsonSetter(value = "billEvents", nulls = Nulls.SKIP)
        public Builder billEvents(Optional<List<GeneralEvents>> billEvents) {
            this.billEvents = billEvents;
            return this;
        }

        public Builder billEvents(List<GeneralEvents> billEvents) {
            this.billEvents = Optional.ofNullable(billEvents);
            return this;
        }

        /**
         * <p>Array of items included in the bill.</p>
         */
        @JsonSetter(value = "BillItems", nulls = Nulls.SKIP)
        public Builder billItems(Optional<List<BillItem>> billItems) {
            this.billItems = billItems;
            return this;
        }

        public Builder billItems(List<BillItem> billItems) {
            this.billItems = Optional.ofNullable(billItems);
            return this;
        }

        /**
         * <p>Bill number.</p>
         */
        @JsonSetter(value = "BillNumber", nulls = Nulls.SKIP)
        public Builder billNumber(Optional<String> billNumber) {
            this.billNumber = billNumber;
            return this;
        }

        public Builder billNumber(String billNumber) {
            this.billNumber = Optional.ofNullable(billNumber);
            return this;
        }

        /**
         * <p>Additional comments on the bill.</p>
         */
        @JsonSetter(value = "Comments", nulls = Nulls.SKIP)
        public Builder comments(Optional<String> comments) {
            this.comments = comments;
            return this;
        }

        public Builder comments(String comments) {
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        /**
         * <p>Timestamp of when bill was created, in UTC.</p>
         */
        @JsonSetter(value = "CreatedAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>Discount amount applied to the bill.</p>
         */
        @JsonSetter(value = "Discount", nulls = Nulls.SKIP)
        public Builder discount(Optional<Double> discount) {
            this.discount = discount;
            return this;
        }

        public Builder discount(Double discount) {
            this.discount = Optional.ofNullable(discount);
            return this;
        }

        /**
         * <p>Reference to documents associated with the bill.</p>
         */
        @JsonSetter(value = "DocumentsRef", nulls = Nulls.SKIP)
        public Builder documentsRef(Optional<String> documentsRef) {
            this.documentsRef = documentsRef;
            return this;
        }

        public Builder documentsRef(String documentsRef) {
            this.documentsRef = Optional.ofNullable(documentsRef);
            return this;
        }

        /**
         * <p>Bill due date in one of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         */
        @JsonSetter(value = "DueDate", nulls = Nulls.SKIP)
        public Builder dueDate(Optional<String> dueDate) {
            this.dueDate = dueDate;
            return this;
        }

        public Builder dueDate(String dueDate) {
            this.dueDate = Optional.ofNullable(dueDate);
            return this;
        }

        /**
         * <p>End date for the bill.</p>
         */
        @JsonSetter(value = "EndDate", nulls = Nulls.SKIP)
        public Builder endDate(Optional<String> endDate) {
            this.endDate = endDate;
            return this;
        }

        public Builder endDate(String endDate) {
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * <p>Entity identifier associated with the bill.</p>
         */
        @JsonSetter(value = "EntityID", nulls = Nulls.SKIP)
        public Builder entityId(Optional<String> entityId) {
            this.entityId = entityId;
            return this;
        }

        public Builder entityId(String entityId) {
            this.entityId = Optional.ofNullable(entityId);
            return this;
        }

        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        /**
         * <p>Frequency for scheduled bills. Applied only in <code>Mode</code> = 1.</p>
         */
        @JsonSetter(value = "Frequency", nulls = Nulls.SKIP)
        public Builder frequency(Optional<Frequency> frequency) {
            this.frequency = frequency;
            return this;
        }

        public Builder frequency(Frequency frequency) {
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        /**
         * <p>Identifier of the bill.</p>
         */
        @JsonSetter(value = "IdBill", nulls = Nulls.SKIP)
        public Builder idBill(Optional<Long> idBill) {
            this.idBill = idBill;
            return this;
        }

        public Builder idBill(Long idBill) {
            this.idBill = Optional.ofNullable(idBill);
            return this;
        }

        /**
         * <p>Timestamp of when bill was last updated, in UTC.</p>
         */
        @JsonSetter(value = "LastUpdated", nulls = Nulls.SKIP)
        public Builder lastUpdated(Optional<OffsetDateTime> lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }

        public Builder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = Optional.ofNullable(lastUpdated);
            return this;
        }

        /**
         * <p>Lot number associated with the bill.</p>
         */
        @JsonSetter(value = "LotNumber", nulls = Nulls.SKIP)
        public Builder lotNumber(Optional<String> lotNumber) {
            this.lotNumber = lotNumber;
            return this;
        }

        public Builder lotNumber(String lotNumber) {
            this.lotNumber = Optional.ofNullable(lotNumber);
            return this;
        }

        /**
         * <p>Bill mode: value <code>0</code> for single/one-time bills, <code>1</code> for scheduled bills.</p>
         */
        @JsonSetter(value = "Mode", nulls = Nulls.SKIP)
        public Builder mode(Optional<Integer> mode) {
            this.mode = mode;
            return this;
        }

        public Builder mode(Integer mode) {
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * <p>Net amount of the bill.</p>
         */
        @JsonSetter(value = "NetAmount", nulls = Nulls.SKIP)
        public Builder netAmount(Optional<Double> netAmount) {
            this.netAmount = netAmount;
            return this;
        }

        public Builder netAmount(Double netAmount) {
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        /**
         * <p>Parent organization identifier.</p>
         */
        @JsonSetter(value = "ParentOrgId", nulls = Nulls.SKIP)
        public Builder parentOrgId(Optional<Long> parentOrgId) {
            this.parentOrgId = parentOrgId;
            return this;
        }

        public Builder parentOrgId(Long parentOrgId) {
            this.parentOrgId = Optional.ofNullable(parentOrgId);
            return this;
        }

        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        /**
         * <p>Payment identifier.</p>
         */
        @JsonSetter(value = "PaymentId", nulls = Nulls.SKIP)
        public Builder paymentId(Optional<String> paymentId) {
            this.paymentId = paymentId;
            return this;
        }

        public Builder paymentId(String paymentId) {
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        /**
         * <p>Preferred payment method used.</p>
         */
        @JsonSetter(value = "PaymentMethod", nulls = Nulls.SKIP)
        public Builder paymentMethod(Optional<BillQueryRecord2PaymentMethod> paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }

        public Builder paymentMethod(BillQueryRecord2PaymentMethod paymentMethod) {
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        /**
         * <p>Paylink identifier associated with the bill.</p>
         */
        @JsonSetter(value = "paylinkId", nulls = Nulls.SKIP)
        public Builder paylinkId(Optional<String> paylinkId) {
            this.paylinkId = paylinkId;
            return this;
        }

        public Builder paylinkId(String paylinkId) {
            this.paylinkId = Optional.ofNullable(paylinkId);
            return this;
        }

        /**
         * <p>The paypoint's DBA name.</p>
         */
        @JsonSetter(value = "PaypointDbaname", nulls = Nulls.SKIP)
        public Builder paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        public Builder paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        /**
         * <p>Entry name of the paypoint.</p>
         */
        @JsonSetter(value = "PaypointEntryname", nulls = Nulls.SKIP)
        public Builder paypointEntryname(Optional<String> paypointEntryname) {
            this.paypointEntryname = paypointEntryname;
            return this;
        }

        public Builder paypointEntryname(String paypointEntryname) {
            this.paypointEntryname = Optional.ofNullable(paypointEntryname);
            return this;
        }

        /**
         * <p>The paypoint's legal name.</p>
         */
        @JsonSetter(value = "PaypointLegalname", nulls = Nulls.SKIP)
        public Builder paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        public Builder paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        /**
         * <p>Source of the bill.</p>
         */
        @JsonSetter(value = "Source", nulls = Nulls.SKIP)
        public Builder source(Optional<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        @JsonSetter(value = "Status", nulls = Nulls.SKIP)
        public Builder status(Optional<Integer> status) {
            this.status = status;
            return this;
        }

        public Builder status(Integer status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>The payment terms for invoice. If no terms were defined initially, then response data for this field will default to <code>N30</code>.</p>
         */
        @JsonSetter(value = "Terms", nulls = Nulls.SKIP)
        public Builder terms(Optional<String> terms) {
            this.terms = terms;
            return this;
        }

        public Builder terms(String terms) {
            this.terms = Optional.ofNullable(terms);
            return this;
        }

        /**
         * <p>Total amount of the bill including taxes and fees.</p>
         */
        @JsonSetter(value = "TotalAmount", nulls = Nulls.SKIP)
        public Builder totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * <p>MoneyOut transaction associated to the bill.</p>
         */
        @JsonSetter(value = "Transaction", nulls = Nulls.SKIP)
        public Builder transaction(Optional<TransactionOutQueryRecord> transaction) {
            this.transaction = transaction;
            return this;
        }

        public Builder transaction(TransactionOutQueryRecord transaction) {
            this.transaction = Optional.ofNullable(transaction);
            return this;
        }

        @JsonSetter(value = "Vendor", nulls = Nulls.SKIP)
        public Builder vendor(Optional<VendorOutData> vendor) {
            this.vendor = vendor;
            return this;
        }

        public Builder vendor(VendorOutData vendor) {
            this.vendor = Optional.ofNullable(vendor);
            return this;
        }

        public BillQueryRecord2 build() {
            return new BillQueryRecord2(
                    accountingField1,
                    accountingField2,
                    additionalData,
                    batchNumber,
                    billApprovals,
                    billDate,
                    billEvents,
                    billItems,
                    billNumber,
                    comments,
                    createdAt,
                    discount,
                    documentsRef,
                    dueDate,
                    endDate,
                    entityId,
                    externalPaypointId,
                    frequency,
                    idBill,
                    lastUpdated,
                    lotNumber,
                    mode,
                    netAmount,
                    parentOrgId,
                    parentOrgName,
                    paymentId,
                    paymentMethod,
                    paylinkId,
                    paypointDbaname,
                    paypointEntryname,
                    paypointLegalname,
                    source,
                    status,
                    terms,
                    totalAmount,
                    transaction,
                    vendor,
                    additionalProperties);
        }
    }
}
