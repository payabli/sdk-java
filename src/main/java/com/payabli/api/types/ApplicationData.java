/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApplicationData.Builder.class)
public final class ApplicationData {
    private final Optional<Services> services;

    private final Optional<Double> annualRevenue;

    private final Optional<List<FileContent>> attachments;

    private final Optional<Double> avgmonthly;

    private final Optional<String> baddress;

    private final Optional<String> baddress1;

    private final Optional<Bank> bankData;

    private final Optional<String> bcity;

    private final Optional<String> bcountry;

    private final Optional<Integer> binperson;

    private final Optional<Integer> binphone;

    private final Optional<Integer> binweb;

    private final Optional<String> bstate;

    private final Optional<String> bsummary;

    private final Optional<OwnType> btype;

    private final Optional<String> bzip;

    private final Optional<List<Contacts>> contacts;

    private final Optional<String> dbaname;

    private final Optional<String> ein;

    private final Optional<String> externalPaypointId;

    private final Optional<String> faxnumber;

    private final Optional<Double> highticketamt;

    private final Optional<String> legalname;

    private final Optional<String> license;

    private final Optional<String> licstate;

    private final Optional<String> maddress;

    private final Optional<String> maddress1;

    private final Optional<String> mcc;

    private final Optional<String> mcity;

    private final Optional<String> mcountry;

    private final Optional<String> mstate;

    private final Optional<String> mzip;

    private final Optional<Long> orgId;

    private final Optional<List<Owners>> ownership;

    private final Optional<Double> payoutAverageMonthlyVolume;

    private final Optional<Double> payoutAverageTicketLimit;

    private final Optional<Double> payoutCreditLimit;

    private final Optional<Double> payoutHighTicketAmount;

    private final Optional<String> phonenumber;

    private final Optional<String> recipientEmail;

    private final Optional<Boolean> recipientEmailNotification;

    private final Optional<Boolean> resumable;

    private final Optional<SignerDataRequest> signer;

    private final Optional<String> startdate;

    private final Optional<String> taxfillname;

    private final Optional<Long> templateId;

    private final Optional<Double> ticketamt;

    private final Optional<String> website;

    private final Optional<Whencharged> whenCharged;

    private final Optional<Whendelivered> whenDelivered;

    private final Optional<Whenprovided> whenProvided;

    private final Optional<Whenrefunded> whenRefunded;

    private final Optional<String> repCode;

    private final Optional<String> repName;

    private final Optional<String> repOffice;

    private final Map<String, Object> additionalProperties;

    private ApplicationData(
            Optional<Services> services,
            Optional<Double> annualRevenue,
            Optional<List<FileContent>> attachments,
            Optional<Double> avgmonthly,
            Optional<String> baddress,
            Optional<String> baddress1,
            Optional<Bank> bankData,
            Optional<String> bcity,
            Optional<String> bcountry,
            Optional<Integer> binperson,
            Optional<Integer> binphone,
            Optional<Integer> binweb,
            Optional<String> bstate,
            Optional<String> bsummary,
            Optional<OwnType> btype,
            Optional<String> bzip,
            Optional<List<Contacts>> contacts,
            Optional<String> dbaname,
            Optional<String> ein,
            Optional<String> externalPaypointId,
            Optional<String> faxnumber,
            Optional<Double> highticketamt,
            Optional<String> legalname,
            Optional<String> license,
            Optional<String> licstate,
            Optional<String> maddress,
            Optional<String> maddress1,
            Optional<String> mcc,
            Optional<String> mcity,
            Optional<String> mcountry,
            Optional<String> mstate,
            Optional<String> mzip,
            Optional<Long> orgId,
            Optional<List<Owners>> ownership,
            Optional<Double> payoutAverageMonthlyVolume,
            Optional<Double> payoutAverageTicketLimit,
            Optional<Double> payoutCreditLimit,
            Optional<Double> payoutHighTicketAmount,
            Optional<String> phonenumber,
            Optional<String> recipientEmail,
            Optional<Boolean> recipientEmailNotification,
            Optional<Boolean> resumable,
            Optional<SignerDataRequest> signer,
            Optional<String> startdate,
            Optional<String> taxfillname,
            Optional<Long> templateId,
            Optional<Double> ticketamt,
            Optional<String> website,
            Optional<Whencharged> whenCharged,
            Optional<Whendelivered> whenDelivered,
            Optional<Whenprovided> whenProvided,
            Optional<Whenrefunded> whenRefunded,
            Optional<String> repCode,
            Optional<String> repName,
            Optional<String> repOffice,
            Map<String, Object> additionalProperties) {
        this.services = services;
        this.annualRevenue = annualRevenue;
        this.attachments = attachments;
        this.avgmonthly = avgmonthly;
        this.baddress = baddress;
        this.baddress1 = baddress1;
        this.bankData = bankData;
        this.bcity = bcity;
        this.bcountry = bcountry;
        this.binperson = binperson;
        this.binphone = binphone;
        this.binweb = binweb;
        this.bstate = bstate;
        this.bsummary = bsummary;
        this.btype = btype;
        this.bzip = bzip;
        this.contacts = contacts;
        this.dbaname = dbaname;
        this.ein = ein;
        this.externalPaypointId = externalPaypointId;
        this.faxnumber = faxnumber;
        this.highticketamt = highticketamt;
        this.legalname = legalname;
        this.license = license;
        this.licstate = licstate;
        this.maddress = maddress;
        this.maddress1 = maddress1;
        this.mcc = mcc;
        this.mcity = mcity;
        this.mcountry = mcountry;
        this.mstate = mstate;
        this.mzip = mzip;
        this.orgId = orgId;
        this.ownership = ownership;
        this.payoutAverageMonthlyVolume = payoutAverageMonthlyVolume;
        this.payoutAverageTicketLimit = payoutAverageTicketLimit;
        this.payoutCreditLimit = payoutCreditLimit;
        this.payoutHighTicketAmount = payoutHighTicketAmount;
        this.phonenumber = phonenumber;
        this.recipientEmail = recipientEmail;
        this.recipientEmailNotification = recipientEmailNotification;
        this.resumable = resumable;
        this.signer = signer;
        this.startdate = startdate;
        this.taxfillname = taxfillname;
        this.templateId = templateId;
        this.ticketamt = ticketamt;
        this.website = website;
        this.whenCharged = whenCharged;
        this.whenDelivered = whenDelivered;
        this.whenProvided = whenProvided;
        this.whenRefunded = whenRefunded;
        this.repCode = repCode;
        this.repName = repName;
        this.repOffice = repOffice;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("services")
    public Optional<Services> getServices() {
        return services;
    }

    @JsonProperty("annualRevenue")
    public Optional<Double> getAnnualRevenue() {
        return annualRevenue;
    }

    @JsonProperty("attachments")
    public Optional<List<FileContent>> getAttachments() {
        return attachments;
    }

    @JsonProperty("avgmonthly")
    public Optional<Double> getAvgmonthly() {
        return avgmonthly;
    }

    @JsonProperty("baddress")
    public Optional<String> getBaddress() {
        return baddress;
    }

    @JsonProperty("baddress1")
    public Optional<String> getBaddress1() {
        return baddress1;
    }

    @JsonProperty("bankData")
    public Optional<Bank> getBankData() {
        return bankData;
    }

    @JsonProperty("bcity")
    public Optional<String> getBcity() {
        return bcity;
    }

    @JsonProperty("bcountry")
    public Optional<String> getBcountry() {
        return bcountry;
    }

    @JsonProperty("binperson")
    public Optional<Integer> getBinperson() {
        return binperson;
    }

    @JsonProperty("binphone")
    public Optional<Integer> getBinphone() {
        return binphone;
    }

    @JsonProperty("binweb")
    public Optional<Integer> getBinweb() {
        return binweb;
    }

    @JsonProperty("bstate")
    public Optional<String> getBstate() {
        return bstate;
    }

    @JsonProperty("bsummary")
    public Optional<String> getBsummary() {
        return bsummary;
    }

    @JsonProperty("btype")
    public Optional<OwnType> getBtype() {
        return btype;
    }

    @JsonProperty("bzip")
    public Optional<String> getBzip() {
        return bzip;
    }

    @JsonProperty("contacts")
    public Optional<List<Contacts>> getContacts() {
        return contacts;
    }

    @JsonProperty("dbaname")
    public Optional<String> getDbaname() {
        return dbaname;
    }

    @JsonProperty("ein")
    public Optional<String> getEin() {
        return ein;
    }

    @JsonProperty("externalPaypointId")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    @JsonProperty("faxnumber")
    public Optional<String> getFaxnumber() {
        return faxnumber;
    }

    @JsonProperty("highticketamt")
    public Optional<Double> getHighticketamt() {
        return highticketamt;
    }

    @JsonProperty("legalname")
    public Optional<String> getLegalname() {
        return legalname;
    }

    @JsonProperty("license")
    public Optional<String> getLicense() {
        return license;
    }

    @JsonProperty("licstate")
    public Optional<String> getLicstate() {
        return licstate;
    }

    @JsonProperty("maddress")
    public Optional<String> getMaddress() {
        return maddress;
    }

    @JsonProperty("maddress1")
    public Optional<String> getMaddress1() {
        return maddress1;
    }

    @JsonProperty("mcc")
    public Optional<String> getMcc() {
        return mcc;
    }

    @JsonProperty("mcity")
    public Optional<String> getMcity() {
        return mcity;
    }

    @JsonProperty("mcountry")
    public Optional<String> getMcountry() {
        return mcountry;
    }

    @JsonProperty("mstate")
    public Optional<String> getMstate() {
        return mstate;
    }

    @JsonProperty("mzip")
    public Optional<String> getMzip() {
        return mzip;
    }

    @JsonProperty("orgId")
    public Optional<Long> getOrgId() {
        return orgId;
    }

    @JsonProperty("ownership")
    public Optional<List<Owners>> getOwnership() {
        return ownership;
    }

    @JsonProperty("payoutAverageMonthlyVolume")
    public Optional<Double> getPayoutAverageMonthlyVolume() {
        return payoutAverageMonthlyVolume;
    }

    @JsonProperty("payoutAverageTicketLimit")
    public Optional<Double> getPayoutAverageTicketLimit() {
        return payoutAverageTicketLimit;
    }

    @JsonProperty("payoutCreditLimit")
    public Optional<Double> getPayoutCreditLimit() {
        return payoutCreditLimit;
    }

    @JsonProperty("payoutHighTicketAmount")
    public Optional<Double> getPayoutHighTicketAmount() {
        return payoutHighTicketAmount;
    }

    @JsonProperty("phonenumber")
    public Optional<String> getPhonenumber() {
        return phonenumber;
    }

    /**
     * @return Email address for the applicant. This is used to send the applicant a boarding link.
     */
    @JsonProperty("recipientEmail")
    public Optional<String> getRecipientEmail() {
        return recipientEmail;
    }

    @JsonProperty("recipientEmailNotification")
    public Optional<Boolean> getRecipientEmailNotification() {
        return recipientEmailNotification;
    }

    @JsonProperty("resumable")
    public Optional<Boolean> getResumable() {
        return resumable;
    }

    @JsonProperty("signer")
    public Optional<SignerDataRequest> getSigner() {
        return signer;
    }

    @JsonProperty("startdate")
    public Optional<String> getStartdate() {
        return startdate;
    }

    @JsonProperty("taxfillname")
    public Optional<String> getTaxfillname() {
        return taxfillname;
    }

    @JsonProperty("templateId")
    public Optional<Long> getTemplateId() {
        return templateId;
    }

    @JsonProperty("ticketamt")
    public Optional<Double> getTicketamt() {
        return ticketamt;
    }

    @JsonProperty("website")
    public Optional<String> getWebsite() {
        return website;
    }

    @JsonProperty("whenCharged")
    public Optional<Whencharged> getWhenCharged() {
        return whenCharged;
    }

    @JsonProperty("whenDelivered")
    public Optional<Whendelivered> getWhenDelivered() {
        return whenDelivered;
    }

    @JsonProperty("whenProvided")
    public Optional<Whenprovided> getWhenProvided() {
        return whenProvided;
    }

    @JsonProperty("whenRefunded")
    public Optional<Whenrefunded> getWhenRefunded() {
        return whenRefunded;
    }

    @JsonProperty("RepCode")
    public Optional<String> getRepCode() {
        return repCode;
    }

    @JsonProperty("RepName")
    public Optional<String> getRepName() {
        return repName;
    }

    @JsonProperty("RepOffice")
    public Optional<String> getRepOffice() {
        return repOffice;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApplicationData && equalTo((ApplicationData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApplicationData other) {
        return services.equals(other.services)
                && annualRevenue.equals(other.annualRevenue)
                && attachments.equals(other.attachments)
                && avgmonthly.equals(other.avgmonthly)
                && baddress.equals(other.baddress)
                && baddress1.equals(other.baddress1)
                && bankData.equals(other.bankData)
                && bcity.equals(other.bcity)
                && bcountry.equals(other.bcountry)
                && binperson.equals(other.binperson)
                && binphone.equals(other.binphone)
                && binweb.equals(other.binweb)
                && bstate.equals(other.bstate)
                && bsummary.equals(other.bsummary)
                && btype.equals(other.btype)
                && bzip.equals(other.bzip)
                && contacts.equals(other.contacts)
                && dbaname.equals(other.dbaname)
                && ein.equals(other.ein)
                && externalPaypointId.equals(other.externalPaypointId)
                && faxnumber.equals(other.faxnumber)
                && highticketamt.equals(other.highticketamt)
                && legalname.equals(other.legalname)
                && license.equals(other.license)
                && licstate.equals(other.licstate)
                && maddress.equals(other.maddress)
                && maddress1.equals(other.maddress1)
                && mcc.equals(other.mcc)
                && mcity.equals(other.mcity)
                && mcountry.equals(other.mcountry)
                && mstate.equals(other.mstate)
                && mzip.equals(other.mzip)
                && orgId.equals(other.orgId)
                && ownership.equals(other.ownership)
                && payoutAverageMonthlyVolume.equals(other.payoutAverageMonthlyVolume)
                && payoutAverageTicketLimit.equals(other.payoutAverageTicketLimit)
                && payoutCreditLimit.equals(other.payoutCreditLimit)
                && payoutHighTicketAmount.equals(other.payoutHighTicketAmount)
                && phonenumber.equals(other.phonenumber)
                && recipientEmail.equals(other.recipientEmail)
                && recipientEmailNotification.equals(other.recipientEmailNotification)
                && resumable.equals(other.resumable)
                && signer.equals(other.signer)
                && startdate.equals(other.startdate)
                && taxfillname.equals(other.taxfillname)
                && templateId.equals(other.templateId)
                && ticketamt.equals(other.ticketamt)
                && website.equals(other.website)
                && whenCharged.equals(other.whenCharged)
                && whenDelivered.equals(other.whenDelivered)
                && whenProvided.equals(other.whenProvided)
                && whenRefunded.equals(other.whenRefunded)
                && repCode.equals(other.repCode)
                && repName.equals(other.repName)
                && repOffice.equals(other.repOffice);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.services,
                this.annualRevenue,
                this.attachments,
                this.avgmonthly,
                this.baddress,
                this.baddress1,
                this.bankData,
                this.bcity,
                this.bcountry,
                this.binperson,
                this.binphone,
                this.binweb,
                this.bstate,
                this.bsummary,
                this.btype,
                this.bzip,
                this.contacts,
                this.dbaname,
                this.ein,
                this.externalPaypointId,
                this.faxnumber,
                this.highticketamt,
                this.legalname,
                this.license,
                this.licstate,
                this.maddress,
                this.maddress1,
                this.mcc,
                this.mcity,
                this.mcountry,
                this.mstate,
                this.mzip,
                this.orgId,
                this.ownership,
                this.payoutAverageMonthlyVolume,
                this.payoutAverageTicketLimit,
                this.payoutCreditLimit,
                this.payoutHighTicketAmount,
                this.phonenumber,
                this.recipientEmail,
                this.recipientEmailNotification,
                this.resumable,
                this.signer,
                this.startdate,
                this.taxfillname,
                this.templateId,
                this.ticketamt,
                this.website,
                this.whenCharged,
                this.whenDelivered,
                this.whenProvided,
                this.whenRefunded,
                this.repCode,
                this.repName,
                this.repOffice);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Services> services = Optional.empty();

        private Optional<Double> annualRevenue = Optional.empty();

        private Optional<List<FileContent>> attachments = Optional.empty();

        private Optional<Double> avgmonthly = Optional.empty();

        private Optional<String> baddress = Optional.empty();

        private Optional<String> baddress1 = Optional.empty();

        private Optional<Bank> bankData = Optional.empty();

        private Optional<String> bcity = Optional.empty();

        private Optional<String> bcountry = Optional.empty();

        private Optional<Integer> binperson = Optional.empty();

        private Optional<Integer> binphone = Optional.empty();

        private Optional<Integer> binweb = Optional.empty();

        private Optional<String> bstate = Optional.empty();

        private Optional<String> bsummary = Optional.empty();

        private Optional<OwnType> btype = Optional.empty();

        private Optional<String> bzip = Optional.empty();

        private Optional<List<Contacts>> contacts = Optional.empty();

        private Optional<String> dbaname = Optional.empty();

        private Optional<String> ein = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<String> faxnumber = Optional.empty();

        private Optional<Double> highticketamt = Optional.empty();

        private Optional<String> legalname = Optional.empty();

        private Optional<String> license = Optional.empty();

        private Optional<String> licstate = Optional.empty();

        private Optional<String> maddress = Optional.empty();

        private Optional<String> maddress1 = Optional.empty();

        private Optional<String> mcc = Optional.empty();

        private Optional<String> mcity = Optional.empty();

        private Optional<String> mcountry = Optional.empty();

        private Optional<String> mstate = Optional.empty();

        private Optional<String> mzip = Optional.empty();

        private Optional<Long> orgId = Optional.empty();

        private Optional<List<Owners>> ownership = Optional.empty();

        private Optional<Double> payoutAverageMonthlyVolume = Optional.empty();

        private Optional<Double> payoutAverageTicketLimit = Optional.empty();

        private Optional<Double> payoutCreditLimit = Optional.empty();

        private Optional<Double> payoutHighTicketAmount = Optional.empty();

        private Optional<String> phonenumber = Optional.empty();

        private Optional<String> recipientEmail = Optional.empty();

        private Optional<Boolean> recipientEmailNotification = Optional.empty();

        private Optional<Boolean> resumable = Optional.empty();

        private Optional<SignerDataRequest> signer = Optional.empty();

        private Optional<String> startdate = Optional.empty();

        private Optional<String> taxfillname = Optional.empty();

        private Optional<Long> templateId = Optional.empty();

        private Optional<Double> ticketamt = Optional.empty();

        private Optional<String> website = Optional.empty();

        private Optional<Whencharged> whenCharged = Optional.empty();

        private Optional<Whendelivered> whenDelivered = Optional.empty();

        private Optional<Whenprovided> whenProvided = Optional.empty();

        private Optional<Whenrefunded> whenRefunded = Optional.empty();

        private Optional<String> repCode = Optional.empty();

        private Optional<String> repName = Optional.empty();

        private Optional<String> repOffice = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ApplicationData other) {
            services(other.getServices());
            annualRevenue(other.getAnnualRevenue());
            attachments(other.getAttachments());
            avgmonthly(other.getAvgmonthly());
            baddress(other.getBaddress());
            baddress1(other.getBaddress1());
            bankData(other.getBankData());
            bcity(other.getBcity());
            bcountry(other.getBcountry());
            binperson(other.getBinperson());
            binphone(other.getBinphone());
            binweb(other.getBinweb());
            bstate(other.getBstate());
            bsummary(other.getBsummary());
            btype(other.getBtype());
            bzip(other.getBzip());
            contacts(other.getContacts());
            dbaname(other.getDbaname());
            ein(other.getEin());
            externalPaypointId(other.getExternalPaypointId());
            faxnumber(other.getFaxnumber());
            highticketamt(other.getHighticketamt());
            legalname(other.getLegalname());
            license(other.getLicense());
            licstate(other.getLicstate());
            maddress(other.getMaddress());
            maddress1(other.getMaddress1());
            mcc(other.getMcc());
            mcity(other.getMcity());
            mcountry(other.getMcountry());
            mstate(other.getMstate());
            mzip(other.getMzip());
            orgId(other.getOrgId());
            ownership(other.getOwnership());
            payoutAverageMonthlyVolume(other.getPayoutAverageMonthlyVolume());
            payoutAverageTicketLimit(other.getPayoutAverageTicketLimit());
            payoutCreditLimit(other.getPayoutCreditLimit());
            payoutHighTicketAmount(other.getPayoutHighTicketAmount());
            phonenumber(other.getPhonenumber());
            recipientEmail(other.getRecipientEmail());
            recipientEmailNotification(other.getRecipientEmailNotification());
            resumable(other.getResumable());
            signer(other.getSigner());
            startdate(other.getStartdate());
            taxfillname(other.getTaxfillname());
            templateId(other.getTemplateId());
            ticketamt(other.getTicketamt());
            website(other.getWebsite());
            whenCharged(other.getWhenCharged());
            whenDelivered(other.getWhenDelivered());
            whenProvided(other.getWhenProvided());
            whenRefunded(other.getWhenRefunded());
            repCode(other.getRepCode());
            repName(other.getRepName());
            repOffice(other.getRepOffice());
            return this;
        }

        @JsonSetter(value = "services", nulls = Nulls.SKIP)
        public Builder services(Optional<Services> services) {
            this.services = services;
            return this;
        }

        public Builder services(Services services) {
            this.services = Optional.ofNullable(services);
            return this;
        }

        @JsonSetter(value = "annualRevenue", nulls = Nulls.SKIP)
        public Builder annualRevenue(Optional<Double> annualRevenue) {
            this.annualRevenue = annualRevenue;
            return this;
        }

        public Builder annualRevenue(Double annualRevenue) {
            this.annualRevenue = Optional.ofNullable(annualRevenue);
            return this;
        }

        @JsonSetter(value = "attachments", nulls = Nulls.SKIP)
        public Builder attachments(Optional<List<FileContent>> attachments) {
            this.attachments = attachments;
            return this;
        }

        public Builder attachments(List<FileContent> attachments) {
            this.attachments = Optional.ofNullable(attachments);
            return this;
        }

        @JsonSetter(value = "avgmonthly", nulls = Nulls.SKIP)
        public Builder avgmonthly(Optional<Double> avgmonthly) {
            this.avgmonthly = avgmonthly;
            return this;
        }

        public Builder avgmonthly(Double avgmonthly) {
            this.avgmonthly = Optional.ofNullable(avgmonthly);
            return this;
        }

        @JsonSetter(value = "baddress", nulls = Nulls.SKIP)
        public Builder baddress(Optional<String> baddress) {
            this.baddress = baddress;
            return this;
        }

        public Builder baddress(String baddress) {
            this.baddress = Optional.ofNullable(baddress);
            return this;
        }

        @JsonSetter(value = "baddress1", nulls = Nulls.SKIP)
        public Builder baddress1(Optional<String> baddress1) {
            this.baddress1 = baddress1;
            return this;
        }

        public Builder baddress1(String baddress1) {
            this.baddress1 = Optional.ofNullable(baddress1);
            return this;
        }

        @JsonSetter(value = "bankData", nulls = Nulls.SKIP)
        public Builder bankData(Optional<Bank> bankData) {
            this.bankData = bankData;
            return this;
        }

        public Builder bankData(Bank bankData) {
            this.bankData = Optional.ofNullable(bankData);
            return this;
        }

        @JsonSetter(value = "bcity", nulls = Nulls.SKIP)
        public Builder bcity(Optional<String> bcity) {
            this.bcity = bcity;
            return this;
        }

        public Builder bcity(String bcity) {
            this.bcity = Optional.ofNullable(bcity);
            return this;
        }

        @JsonSetter(value = "bcountry", nulls = Nulls.SKIP)
        public Builder bcountry(Optional<String> bcountry) {
            this.bcountry = bcountry;
            return this;
        }

        public Builder bcountry(String bcountry) {
            this.bcountry = Optional.ofNullable(bcountry);
            return this;
        }

        @JsonSetter(value = "binperson", nulls = Nulls.SKIP)
        public Builder binperson(Optional<Integer> binperson) {
            this.binperson = binperson;
            return this;
        }

        public Builder binperson(Integer binperson) {
            this.binperson = Optional.ofNullable(binperson);
            return this;
        }

        @JsonSetter(value = "binphone", nulls = Nulls.SKIP)
        public Builder binphone(Optional<Integer> binphone) {
            this.binphone = binphone;
            return this;
        }

        public Builder binphone(Integer binphone) {
            this.binphone = Optional.ofNullable(binphone);
            return this;
        }

        @JsonSetter(value = "binweb", nulls = Nulls.SKIP)
        public Builder binweb(Optional<Integer> binweb) {
            this.binweb = binweb;
            return this;
        }

        public Builder binweb(Integer binweb) {
            this.binweb = Optional.ofNullable(binweb);
            return this;
        }

        @JsonSetter(value = "bstate", nulls = Nulls.SKIP)
        public Builder bstate(Optional<String> bstate) {
            this.bstate = bstate;
            return this;
        }

        public Builder bstate(String bstate) {
            this.bstate = Optional.ofNullable(bstate);
            return this;
        }

        @JsonSetter(value = "bsummary", nulls = Nulls.SKIP)
        public Builder bsummary(Optional<String> bsummary) {
            this.bsummary = bsummary;
            return this;
        }

        public Builder bsummary(String bsummary) {
            this.bsummary = Optional.ofNullable(bsummary);
            return this;
        }

        @JsonSetter(value = "btype", nulls = Nulls.SKIP)
        public Builder btype(Optional<OwnType> btype) {
            this.btype = btype;
            return this;
        }

        public Builder btype(OwnType btype) {
            this.btype = Optional.ofNullable(btype);
            return this;
        }

        @JsonSetter(value = "bzip", nulls = Nulls.SKIP)
        public Builder bzip(Optional<String> bzip) {
            this.bzip = bzip;
            return this;
        }

        public Builder bzip(String bzip) {
            this.bzip = Optional.ofNullable(bzip);
            return this;
        }

        @JsonSetter(value = "contacts", nulls = Nulls.SKIP)
        public Builder contacts(Optional<List<Contacts>> contacts) {
            this.contacts = contacts;
            return this;
        }

        public Builder contacts(List<Contacts> contacts) {
            this.contacts = Optional.ofNullable(contacts);
            return this;
        }

        @JsonSetter(value = "dbaname", nulls = Nulls.SKIP)
        public Builder dbaname(Optional<String> dbaname) {
            this.dbaname = dbaname;
            return this;
        }

        public Builder dbaname(String dbaname) {
            this.dbaname = Optional.ofNullable(dbaname);
            return this;
        }

        @JsonSetter(value = "ein", nulls = Nulls.SKIP)
        public Builder ein(Optional<String> ein) {
            this.ein = ein;
            return this;
        }

        public Builder ein(String ein) {
            this.ein = Optional.ofNullable(ein);
            return this;
        }

        @JsonSetter(value = "externalPaypointId", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        @JsonSetter(value = "faxnumber", nulls = Nulls.SKIP)
        public Builder faxnumber(Optional<String> faxnumber) {
            this.faxnumber = faxnumber;
            return this;
        }

        public Builder faxnumber(String faxnumber) {
            this.faxnumber = Optional.ofNullable(faxnumber);
            return this;
        }

        @JsonSetter(value = "highticketamt", nulls = Nulls.SKIP)
        public Builder highticketamt(Optional<Double> highticketamt) {
            this.highticketamt = highticketamt;
            return this;
        }

        public Builder highticketamt(Double highticketamt) {
            this.highticketamt = Optional.ofNullable(highticketamt);
            return this;
        }

        @JsonSetter(value = "legalname", nulls = Nulls.SKIP)
        public Builder legalname(Optional<String> legalname) {
            this.legalname = legalname;
            return this;
        }

        public Builder legalname(String legalname) {
            this.legalname = Optional.ofNullable(legalname);
            return this;
        }

        @JsonSetter(value = "license", nulls = Nulls.SKIP)
        public Builder license(Optional<String> license) {
            this.license = license;
            return this;
        }

        public Builder license(String license) {
            this.license = Optional.ofNullable(license);
            return this;
        }

        @JsonSetter(value = "licstate", nulls = Nulls.SKIP)
        public Builder licstate(Optional<String> licstate) {
            this.licstate = licstate;
            return this;
        }

        public Builder licstate(String licstate) {
            this.licstate = Optional.ofNullable(licstate);
            return this;
        }

        @JsonSetter(value = "maddress", nulls = Nulls.SKIP)
        public Builder maddress(Optional<String> maddress) {
            this.maddress = maddress;
            return this;
        }

        public Builder maddress(String maddress) {
            this.maddress = Optional.ofNullable(maddress);
            return this;
        }

        @JsonSetter(value = "maddress1", nulls = Nulls.SKIP)
        public Builder maddress1(Optional<String> maddress1) {
            this.maddress1 = maddress1;
            return this;
        }

        public Builder maddress1(String maddress1) {
            this.maddress1 = Optional.ofNullable(maddress1);
            return this;
        }

        @JsonSetter(value = "mcc", nulls = Nulls.SKIP)
        public Builder mcc(Optional<String> mcc) {
            this.mcc = mcc;
            return this;
        }

        public Builder mcc(String mcc) {
            this.mcc = Optional.ofNullable(mcc);
            return this;
        }

        @JsonSetter(value = "mcity", nulls = Nulls.SKIP)
        public Builder mcity(Optional<String> mcity) {
            this.mcity = mcity;
            return this;
        }

        public Builder mcity(String mcity) {
            this.mcity = Optional.ofNullable(mcity);
            return this;
        }

        @JsonSetter(value = "mcountry", nulls = Nulls.SKIP)
        public Builder mcountry(Optional<String> mcountry) {
            this.mcountry = mcountry;
            return this;
        }

        public Builder mcountry(String mcountry) {
            this.mcountry = Optional.ofNullable(mcountry);
            return this;
        }

        @JsonSetter(value = "mstate", nulls = Nulls.SKIP)
        public Builder mstate(Optional<String> mstate) {
            this.mstate = mstate;
            return this;
        }

        public Builder mstate(String mstate) {
            this.mstate = Optional.ofNullable(mstate);
            return this;
        }

        @JsonSetter(value = "mzip", nulls = Nulls.SKIP)
        public Builder mzip(Optional<String> mzip) {
            this.mzip = mzip;
            return this;
        }

        public Builder mzip(String mzip) {
            this.mzip = Optional.ofNullable(mzip);
            return this;
        }

        @JsonSetter(value = "orgId", nulls = Nulls.SKIP)
        public Builder orgId(Optional<Long> orgId) {
            this.orgId = orgId;
            return this;
        }

        public Builder orgId(Long orgId) {
            this.orgId = Optional.ofNullable(orgId);
            return this;
        }

        @JsonSetter(value = "ownership", nulls = Nulls.SKIP)
        public Builder ownership(Optional<List<Owners>> ownership) {
            this.ownership = ownership;
            return this;
        }

        public Builder ownership(List<Owners> ownership) {
            this.ownership = Optional.ofNullable(ownership);
            return this;
        }

        @JsonSetter(value = "payoutAverageMonthlyVolume", nulls = Nulls.SKIP)
        public Builder payoutAverageMonthlyVolume(Optional<Double> payoutAverageMonthlyVolume) {
            this.payoutAverageMonthlyVolume = payoutAverageMonthlyVolume;
            return this;
        }

        public Builder payoutAverageMonthlyVolume(Double payoutAverageMonthlyVolume) {
            this.payoutAverageMonthlyVolume = Optional.ofNullable(payoutAverageMonthlyVolume);
            return this;
        }

        @JsonSetter(value = "payoutAverageTicketLimit", nulls = Nulls.SKIP)
        public Builder payoutAverageTicketLimit(Optional<Double> payoutAverageTicketLimit) {
            this.payoutAverageTicketLimit = payoutAverageTicketLimit;
            return this;
        }

        public Builder payoutAverageTicketLimit(Double payoutAverageTicketLimit) {
            this.payoutAverageTicketLimit = Optional.ofNullable(payoutAverageTicketLimit);
            return this;
        }

        @JsonSetter(value = "payoutCreditLimit", nulls = Nulls.SKIP)
        public Builder payoutCreditLimit(Optional<Double> payoutCreditLimit) {
            this.payoutCreditLimit = payoutCreditLimit;
            return this;
        }

        public Builder payoutCreditLimit(Double payoutCreditLimit) {
            this.payoutCreditLimit = Optional.ofNullable(payoutCreditLimit);
            return this;
        }

        @JsonSetter(value = "payoutHighTicketAmount", nulls = Nulls.SKIP)
        public Builder payoutHighTicketAmount(Optional<Double> payoutHighTicketAmount) {
            this.payoutHighTicketAmount = payoutHighTicketAmount;
            return this;
        }

        public Builder payoutHighTicketAmount(Double payoutHighTicketAmount) {
            this.payoutHighTicketAmount = Optional.ofNullable(payoutHighTicketAmount);
            return this;
        }

        @JsonSetter(value = "phonenumber", nulls = Nulls.SKIP)
        public Builder phonenumber(Optional<String> phonenumber) {
            this.phonenumber = phonenumber;
            return this;
        }

        public Builder phonenumber(String phonenumber) {
            this.phonenumber = Optional.ofNullable(phonenumber);
            return this;
        }

        /**
         * <p>Email address for the applicant. This is used to send the applicant a boarding link.</p>
         */
        @JsonSetter(value = "recipientEmail", nulls = Nulls.SKIP)
        public Builder recipientEmail(Optional<String> recipientEmail) {
            this.recipientEmail = recipientEmail;
            return this;
        }

        public Builder recipientEmail(String recipientEmail) {
            this.recipientEmail = Optional.ofNullable(recipientEmail);
            return this;
        }

        @JsonSetter(value = "recipientEmailNotification", nulls = Nulls.SKIP)
        public Builder recipientEmailNotification(Optional<Boolean> recipientEmailNotification) {
            this.recipientEmailNotification = recipientEmailNotification;
            return this;
        }

        public Builder recipientEmailNotification(Boolean recipientEmailNotification) {
            this.recipientEmailNotification = Optional.ofNullable(recipientEmailNotification);
            return this;
        }

        @JsonSetter(value = "resumable", nulls = Nulls.SKIP)
        public Builder resumable(Optional<Boolean> resumable) {
            this.resumable = resumable;
            return this;
        }

        public Builder resumable(Boolean resumable) {
            this.resumable = Optional.ofNullable(resumable);
            return this;
        }

        @JsonSetter(value = "signer", nulls = Nulls.SKIP)
        public Builder signer(Optional<SignerDataRequest> signer) {
            this.signer = signer;
            return this;
        }

        public Builder signer(SignerDataRequest signer) {
            this.signer = Optional.ofNullable(signer);
            return this;
        }

        @JsonSetter(value = "startdate", nulls = Nulls.SKIP)
        public Builder startdate(Optional<String> startdate) {
            this.startdate = startdate;
            return this;
        }

        public Builder startdate(String startdate) {
            this.startdate = Optional.ofNullable(startdate);
            return this;
        }

        @JsonSetter(value = "taxfillname", nulls = Nulls.SKIP)
        public Builder taxfillname(Optional<String> taxfillname) {
            this.taxfillname = taxfillname;
            return this;
        }

        public Builder taxfillname(String taxfillname) {
            this.taxfillname = Optional.ofNullable(taxfillname);
            return this;
        }

        @JsonSetter(value = "templateId", nulls = Nulls.SKIP)
        public Builder templateId(Optional<Long> templateId) {
            this.templateId = templateId;
            return this;
        }

        public Builder templateId(Long templateId) {
            this.templateId = Optional.ofNullable(templateId);
            return this;
        }

        @JsonSetter(value = "ticketamt", nulls = Nulls.SKIP)
        public Builder ticketamt(Optional<Double> ticketamt) {
            this.ticketamt = ticketamt;
            return this;
        }

        public Builder ticketamt(Double ticketamt) {
            this.ticketamt = Optional.ofNullable(ticketamt);
            return this;
        }

        @JsonSetter(value = "website", nulls = Nulls.SKIP)
        public Builder website(Optional<String> website) {
            this.website = website;
            return this;
        }

        public Builder website(String website) {
            this.website = Optional.ofNullable(website);
            return this;
        }

        @JsonSetter(value = "whenCharged", nulls = Nulls.SKIP)
        public Builder whenCharged(Optional<Whencharged> whenCharged) {
            this.whenCharged = whenCharged;
            return this;
        }

        public Builder whenCharged(Whencharged whenCharged) {
            this.whenCharged = Optional.ofNullable(whenCharged);
            return this;
        }

        @JsonSetter(value = "whenDelivered", nulls = Nulls.SKIP)
        public Builder whenDelivered(Optional<Whendelivered> whenDelivered) {
            this.whenDelivered = whenDelivered;
            return this;
        }

        public Builder whenDelivered(Whendelivered whenDelivered) {
            this.whenDelivered = Optional.ofNullable(whenDelivered);
            return this;
        }

        @JsonSetter(value = "whenProvided", nulls = Nulls.SKIP)
        public Builder whenProvided(Optional<Whenprovided> whenProvided) {
            this.whenProvided = whenProvided;
            return this;
        }

        public Builder whenProvided(Whenprovided whenProvided) {
            this.whenProvided = Optional.ofNullable(whenProvided);
            return this;
        }

        @JsonSetter(value = "whenRefunded", nulls = Nulls.SKIP)
        public Builder whenRefunded(Optional<Whenrefunded> whenRefunded) {
            this.whenRefunded = whenRefunded;
            return this;
        }

        public Builder whenRefunded(Whenrefunded whenRefunded) {
            this.whenRefunded = Optional.ofNullable(whenRefunded);
            return this;
        }

        @JsonSetter(value = "RepCode", nulls = Nulls.SKIP)
        public Builder repCode(Optional<String> repCode) {
            this.repCode = repCode;
            return this;
        }

        public Builder repCode(String repCode) {
            this.repCode = Optional.ofNullable(repCode);
            return this;
        }

        @JsonSetter(value = "RepName", nulls = Nulls.SKIP)
        public Builder repName(Optional<String> repName) {
            this.repName = repName;
            return this;
        }

        public Builder repName(String repName) {
            this.repName = Optional.ofNullable(repName);
            return this;
        }

        @JsonSetter(value = "RepOffice", nulls = Nulls.SKIP)
        public Builder repOffice(Optional<String> repOffice) {
            this.repOffice = repOffice;
            return this;
        }

        public Builder repOffice(String repOffice) {
            this.repOffice = Optional.ofNullable(repOffice);
            return this;
        }

        public ApplicationData build() {
            return new ApplicationData(
                    services,
                    annualRevenue,
                    attachments,
                    avgmonthly,
                    baddress,
                    baddress1,
                    bankData,
                    bcity,
                    bcountry,
                    binperson,
                    binphone,
                    binweb,
                    bstate,
                    bsummary,
                    btype,
                    bzip,
                    contacts,
                    dbaname,
                    ein,
                    externalPaypointId,
                    faxnumber,
                    highticketamt,
                    legalname,
                    license,
                    licstate,
                    maddress,
                    maddress1,
                    mcc,
                    mcity,
                    mcountry,
                    mstate,
                    mzip,
                    orgId,
                    ownership,
                    payoutAverageMonthlyVolume,
                    payoutAverageTicketLimit,
                    payoutCreditLimit,
                    payoutHighTicketAmount,
                    phonenumber,
                    recipientEmail,
                    recipientEmailNotification,
                    resumable,
                    signer,
                    startdate,
                    taxfillname,
                    templateId,
                    ticketamt,
                    website,
                    whenCharged,
                    whenDelivered,
                    whenProvided,
                    whenRefunded,
                    repCode,
                    repName,
                    repOffice,
                    additionalProperties);
        }
    }
}
