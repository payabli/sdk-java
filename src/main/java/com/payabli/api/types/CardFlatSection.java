/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CardFlatSection.Builder.class)
public final class CardFlatSection {
    private final Optional<List<CardType>> tiers;

    private final Optional<Boolean> visible;

    private final Map<String, Object> additionalProperties;

    private CardFlatSection(
            Optional<List<CardType>> tiers, Optional<Boolean> visible, Map<String, Object> additionalProperties) {
        this.tiers = tiers;
        this.visible = visible;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("tiers")
    public Optional<List<CardType>> getTiers() {
        return tiers;
    }

    @JsonProperty("visible")
    public Optional<Boolean> getVisible() {
        return visible;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CardFlatSection && equalTo((CardFlatSection) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CardFlatSection other) {
        return tiers.equals(other.tiers) && visible.equals(other.visible);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.tiers, this.visible);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<CardType>> tiers = Optional.empty();

        private Optional<Boolean> visible = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CardFlatSection other) {
            tiers(other.getTiers());
            visible(other.getVisible());
            return this;
        }

        @JsonSetter(value = "tiers", nulls = Nulls.SKIP)
        public Builder tiers(Optional<List<CardType>> tiers) {
            this.tiers = tiers;
            return this;
        }

        public Builder tiers(List<CardType> tiers) {
            this.tiers = Optional.ofNullable(tiers);
            return this;
        }

        @JsonSetter(value = "visible", nulls = Nulls.SKIP)
        public Builder visible(Optional<Boolean> visible) {
            this.visible = visible;
            return this;
        }

        public Builder visible(Boolean visible) {
            this.visible = Optional.ofNullable(visible);
            return this;
        }

        public CardFlatSection build() {
            return new CardFlatSection(tiers, visible, additionalProperties);
        }
    }
}
