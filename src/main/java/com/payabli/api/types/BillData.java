/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BillData.Builder.class)
public final class BillData {
    private final Optional<String> additionalData;

    private final Optional<List<FileContent>> attachments;

    private final Optional<String> company;

    private final Optional<Double> discount;

    private final Optional<Double> dutyAmount;

    private final Optional<String> firstName;

    private final Optional<Double> freightAmount;

    private final Optional<Frequency> frequency;

    private final Optional<Double> invoiceAmount;

    private final Optional<String> invoiceDate;

    private final Optional<String> invoiceDueDate;

    private final Optional<String> invoiceEndDate;

    private final Optional<String> invoiceNumber;

    private final Optional<Integer> invoiceStatus;

    private final Optional<Integer> invoiceType;

    private final Optional<List<BillItem>> items;

    private final Optional<String> lastName;

    private final Optional<String> notes;

    private final Optional<BillDataPaymentTerms> paymentTerms;

    private final Optional<String> purchaseOrder;

    private final Optional<String> shippingAddress1;

    private final Optional<String> shippingAddress2;

    private final Optional<String> shippingCity;

    private final Optional<String> shippingCountry;

    private final Optional<String> shippingEmail;

    private final Optional<String> shippingFromZip;

    private final Optional<String> shippingPhone;

    private final Optional<String> shippingState;

    private final Optional<String> shippingZip;

    private final Optional<String> summaryCommodityCode;

    private final Optional<Double> tax;

    private final Optional<String> termsConditions;

    private final Map<String, Object> additionalProperties;

    private BillData(
            Optional<String> additionalData,
            Optional<List<FileContent>> attachments,
            Optional<String> company,
            Optional<Double> discount,
            Optional<Double> dutyAmount,
            Optional<String> firstName,
            Optional<Double> freightAmount,
            Optional<Frequency> frequency,
            Optional<Double> invoiceAmount,
            Optional<String> invoiceDate,
            Optional<String> invoiceDueDate,
            Optional<String> invoiceEndDate,
            Optional<String> invoiceNumber,
            Optional<Integer> invoiceStatus,
            Optional<Integer> invoiceType,
            Optional<List<BillItem>> items,
            Optional<String> lastName,
            Optional<String> notes,
            Optional<BillDataPaymentTerms> paymentTerms,
            Optional<String> purchaseOrder,
            Optional<String> shippingAddress1,
            Optional<String> shippingAddress2,
            Optional<String> shippingCity,
            Optional<String> shippingCountry,
            Optional<String> shippingEmail,
            Optional<String> shippingFromZip,
            Optional<String> shippingPhone,
            Optional<String> shippingState,
            Optional<String> shippingZip,
            Optional<String> summaryCommodityCode,
            Optional<Double> tax,
            Optional<String> termsConditions,
            Map<String, Object> additionalProperties) {
        this.additionalData = additionalData;
        this.attachments = attachments;
        this.company = company;
        this.discount = discount;
        this.dutyAmount = dutyAmount;
        this.firstName = firstName;
        this.freightAmount = freightAmount;
        this.frequency = frequency;
        this.invoiceAmount = invoiceAmount;
        this.invoiceDate = invoiceDate;
        this.invoiceDueDate = invoiceDueDate;
        this.invoiceEndDate = invoiceEndDate;
        this.invoiceNumber = invoiceNumber;
        this.invoiceStatus = invoiceStatus;
        this.invoiceType = invoiceType;
        this.items = items;
        this.lastName = lastName;
        this.notes = notes;
        this.paymentTerms = paymentTerms;
        this.purchaseOrder = purchaseOrder;
        this.shippingAddress1 = shippingAddress1;
        this.shippingAddress2 = shippingAddress2;
        this.shippingCity = shippingCity;
        this.shippingCountry = shippingCountry;
        this.shippingEmail = shippingEmail;
        this.shippingFromZip = shippingFromZip;
        this.shippingPhone = shippingPhone;
        this.shippingState = shippingState;
        this.shippingZip = shippingZip;
        this.summaryCommodityCode = summaryCommodityCode;
        this.tax = tax;
        this.termsConditions = termsConditions;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("AdditionalData")
    public Optional<String> getAdditionalData() {
        return additionalData;
    }

    @JsonProperty("attachments")
    public Optional<List<FileContent>> getAttachments() {
        return attachments;
    }

    /**
     * @return Company name of the recipient of the invoice.
     */
    @JsonProperty("company")
    public Optional<String> getCompany() {
        return company;
    }

    @JsonProperty("discount")
    public Optional<Double> getDiscount() {
        return discount;
    }

    @JsonProperty("dutyAmount")
    public Optional<Double> getDutyAmount() {
        return dutyAmount;
    }

    /**
     * @return First name of the recipient of the invoice.
     */
    @JsonProperty("firstName")
    public Optional<String> getFirstName() {
        return firstName;
    }

    @JsonProperty("freightAmount")
    public Optional<Double> getFreightAmount() {
        return freightAmount;
    }

    /**
     * @return Frequency of scheduled invoice.
     */
    @JsonProperty("frequency")
    public Optional<Frequency> getFrequency() {
        return frequency;
    }

    @JsonProperty("invoiceAmount")
    public Optional<Double> getInvoiceAmount() {
        return invoiceAmount;
    }

    /**
     * @return Invoice date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
     */
    @JsonProperty("invoiceDate")
    public Optional<String> getInvoiceDate() {
        return invoiceDate;
    }

    /**
     * @return Invoice due date in one of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
     */
    @JsonProperty("invoiceDueDate")
    public Optional<String> getInvoiceDueDate() {
        return invoiceDueDate;
    }

    /**
     * @return Indicate the date to finish a scheduled invoice cycle (`invoiceType`` = 1) in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
     */
    @JsonProperty("invoiceEndDate")
    public Optional<String> getInvoiceEndDate() {
        return invoiceEndDate;
    }

    /**
     * @return Invoice number. Identifies the invoice under a paypoint.
     */
    @JsonProperty("invoiceNumber")
    public Optional<String> getInvoiceNumber() {
        return invoiceNumber;
    }

    @JsonProperty("invoiceStatus")
    public Optional<Integer> getInvoiceStatus() {
        return invoiceStatus;
    }

    @JsonProperty("invoiceType")
    public Optional<Integer> getInvoiceType() {
        return invoiceType;
    }

    /**
     * @return Array of line items included in the invoice.
     */
    @JsonProperty("items")
    public Optional<List<BillItem>> getItems() {
        return items;
    }

    /**
     * @return Last name of the recipient of the invoice.
     */
    @JsonProperty("lastName")
    public Optional<String> getLastName() {
        return lastName;
    }

    /**
     * @return Notes included in the invoice.
     */
    @JsonProperty("notes")
    public Optional<String> getNotes() {
        return notes;
    }

    @JsonProperty("paymentTerms")
    public Optional<BillDataPaymentTerms> getPaymentTerms() {
        return paymentTerms;
    }

    @JsonProperty("purchaseOrder")
    public Optional<String> getPurchaseOrder() {
        return purchaseOrder;
    }

    @JsonProperty("shippingAddress1")
    public Optional<String> getShippingAddress1() {
        return shippingAddress1;
    }

    @JsonProperty("shippingAddress2")
    public Optional<String> getShippingAddress2() {
        return shippingAddress2;
    }

    @JsonProperty("shippingCity")
    public Optional<String> getShippingCity() {
        return shippingCity;
    }

    @JsonProperty("shippingCountry")
    public Optional<String> getShippingCountry() {
        return shippingCountry;
    }

    /**
     * @return Shipping recipient's contact email address.
     */
    @JsonProperty("shippingEmail")
    public Optional<String> getShippingEmail() {
        return shippingEmail;
    }

    @JsonProperty("shippingFromZip")
    public Optional<String> getShippingFromZip() {
        return shippingFromZip;
    }

    /**
     * @return Recipient phone number.
     */
    @JsonProperty("shippingPhone")
    public Optional<String> getShippingPhone() {
        return shippingPhone;
    }

    @JsonProperty("shippingState")
    public Optional<String> getShippingState() {
        return shippingState;
    }

    @JsonProperty("shippingZip")
    public Optional<String> getShippingZip() {
        return shippingZip;
    }

    @JsonProperty("summaryCommodityCode")
    public Optional<String> getSummaryCommodityCode() {
        return summaryCommodityCode;
    }

    @JsonProperty("tax")
    public Optional<Double> getTax() {
        return tax;
    }

    @JsonProperty("termsConditions")
    public Optional<String> getTermsConditions() {
        return termsConditions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BillData && equalTo((BillData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BillData other) {
        return additionalData.equals(other.additionalData)
                && attachments.equals(other.attachments)
                && company.equals(other.company)
                && discount.equals(other.discount)
                && dutyAmount.equals(other.dutyAmount)
                && firstName.equals(other.firstName)
                && freightAmount.equals(other.freightAmount)
                && frequency.equals(other.frequency)
                && invoiceAmount.equals(other.invoiceAmount)
                && invoiceDate.equals(other.invoiceDate)
                && invoiceDueDate.equals(other.invoiceDueDate)
                && invoiceEndDate.equals(other.invoiceEndDate)
                && invoiceNumber.equals(other.invoiceNumber)
                && invoiceStatus.equals(other.invoiceStatus)
                && invoiceType.equals(other.invoiceType)
                && items.equals(other.items)
                && lastName.equals(other.lastName)
                && notes.equals(other.notes)
                && paymentTerms.equals(other.paymentTerms)
                && purchaseOrder.equals(other.purchaseOrder)
                && shippingAddress1.equals(other.shippingAddress1)
                && shippingAddress2.equals(other.shippingAddress2)
                && shippingCity.equals(other.shippingCity)
                && shippingCountry.equals(other.shippingCountry)
                && shippingEmail.equals(other.shippingEmail)
                && shippingFromZip.equals(other.shippingFromZip)
                && shippingPhone.equals(other.shippingPhone)
                && shippingState.equals(other.shippingState)
                && shippingZip.equals(other.shippingZip)
                && summaryCommodityCode.equals(other.summaryCommodityCode)
                && tax.equals(other.tax)
                && termsConditions.equals(other.termsConditions);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.additionalData,
                this.attachments,
                this.company,
                this.discount,
                this.dutyAmount,
                this.firstName,
                this.freightAmount,
                this.frequency,
                this.invoiceAmount,
                this.invoiceDate,
                this.invoiceDueDate,
                this.invoiceEndDate,
                this.invoiceNumber,
                this.invoiceStatus,
                this.invoiceType,
                this.items,
                this.lastName,
                this.notes,
                this.paymentTerms,
                this.purchaseOrder,
                this.shippingAddress1,
                this.shippingAddress2,
                this.shippingCity,
                this.shippingCountry,
                this.shippingEmail,
                this.shippingFromZip,
                this.shippingPhone,
                this.shippingState,
                this.shippingZip,
                this.summaryCommodityCode,
                this.tax,
                this.termsConditions);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> additionalData = Optional.empty();

        private Optional<List<FileContent>> attachments = Optional.empty();

        private Optional<String> company = Optional.empty();

        private Optional<Double> discount = Optional.empty();

        private Optional<Double> dutyAmount = Optional.empty();

        private Optional<String> firstName = Optional.empty();

        private Optional<Double> freightAmount = Optional.empty();

        private Optional<Frequency> frequency = Optional.empty();

        private Optional<Double> invoiceAmount = Optional.empty();

        private Optional<String> invoiceDate = Optional.empty();

        private Optional<String> invoiceDueDate = Optional.empty();

        private Optional<String> invoiceEndDate = Optional.empty();

        private Optional<String> invoiceNumber = Optional.empty();

        private Optional<Integer> invoiceStatus = Optional.empty();

        private Optional<Integer> invoiceType = Optional.empty();

        private Optional<List<BillItem>> items = Optional.empty();

        private Optional<String> lastName = Optional.empty();

        private Optional<String> notes = Optional.empty();

        private Optional<BillDataPaymentTerms> paymentTerms = Optional.empty();

        private Optional<String> purchaseOrder = Optional.empty();

        private Optional<String> shippingAddress1 = Optional.empty();

        private Optional<String> shippingAddress2 = Optional.empty();

        private Optional<String> shippingCity = Optional.empty();

        private Optional<String> shippingCountry = Optional.empty();

        private Optional<String> shippingEmail = Optional.empty();

        private Optional<String> shippingFromZip = Optional.empty();

        private Optional<String> shippingPhone = Optional.empty();

        private Optional<String> shippingState = Optional.empty();

        private Optional<String> shippingZip = Optional.empty();

        private Optional<String> summaryCommodityCode = Optional.empty();

        private Optional<Double> tax = Optional.empty();

        private Optional<String> termsConditions = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BillData other) {
            additionalData(other.getAdditionalData());
            attachments(other.getAttachments());
            company(other.getCompany());
            discount(other.getDiscount());
            dutyAmount(other.getDutyAmount());
            firstName(other.getFirstName());
            freightAmount(other.getFreightAmount());
            frequency(other.getFrequency());
            invoiceAmount(other.getInvoiceAmount());
            invoiceDate(other.getInvoiceDate());
            invoiceDueDate(other.getInvoiceDueDate());
            invoiceEndDate(other.getInvoiceEndDate());
            invoiceNumber(other.getInvoiceNumber());
            invoiceStatus(other.getInvoiceStatus());
            invoiceType(other.getInvoiceType());
            items(other.getItems());
            lastName(other.getLastName());
            notes(other.getNotes());
            paymentTerms(other.getPaymentTerms());
            purchaseOrder(other.getPurchaseOrder());
            shippingAddress1(other.getShippingAddress1());
            shippingAddress2(other.getShippingAddress2());
            shippingCity(other.getShippingCity());
            shippingCountry(other.getShippingCountry());
            shippingEmail(other.getShippingEmail());
            shippingFromZip(other.getShippingFromZip());
            shippingPhone(other.getShippingPhone());
            shippingState(other.getShippingState());
            shippingZip(other.getShippingZip());
            summaryCommodityCode(other.getSummaryCommodityCode());
            tax(other.getTax());
            termsConditions(other.getTermsConditions());
            return this;
        }

        @JsonSetter(value = "AdditionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<String> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(String additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        @JsonSetter(value = "attachments", nulls = Nulls.SKIP)
        public Builder attachments(Optional<List<FileContent>> attachments) {
            this.attachments = attachments;
            return this;
        }

        public Builder attachments(List<FileContent> attachments) {
            this.attachments = Optional.ofNullable(attachments);
            return this;
        }

        /**
         * <p>Company name of the recipient of the invoice.</p>
         */
        @JsonSetter(value = "company", nulls = Nulls.SKIP)
        public Builder company(Optional<String> company) {
            this.company = company;
            return this;
        }

        public Builder company(String company) {
            this.company = Optional.ofNullable(company);
            return this;
        }

        @JsonSetter(value = "discount", nulls = Nulls.SKIP)
        public Builder discount(Optional<Double> discount) {
            this.discount = discount;
            return this;
        }

        public Builder discount(Double discount) {
            this.discount = Optional.ofNullable(discount);
            return this;
        }

        @JsonSetter(value = "dutyAmount", nulls = Nulls.SKIP)
        public Builder dutyAmount(Optional<Double> dutyAmount) {
            this.dutyAmount = dutyAmount;
            return this;
        }

        public Builder dutyAmount(Double dutyAmount) {
            this.dutyAmount = Optional.ofNullable(dutyAmount);
            return this;
        }

        /**
         * <p>First name of the recipient of the invoice.</p>
         */
        @JsonSetter(value = "firstName", nulls = Nulls.SKIP)
        public Builder firstName(Optional<String> firstName) {
            this.firstName = firstName;
            return this;
        }

        public Builder firstName(String firstName) {
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        @JsonSetter(value = "freightAmount", nulls = Nulls.SKIP)
        public Builder freightAmount(Optional<Double> freightAmount) {
            this.freightAmount = freightAmount;
            return this;
        }

        public Builder freightAmount(Double freightAmount) {
            this.freightAmount = Optional.ofNullable(freightAmount);
            return this;
        }

        /**
         * <p>Frequency of scheduled invoice.</p>
         */
        @JsonSetter(value = "frequency", nulls = Nulls.SKIP)
        public Builder frequency(Optional<Frequency> frequency) {
            this.frequency = frequency;
            return this;
        }

        public Builder frequency(Frequency frequency) {
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        @JsonSetter(value = "invoiceAmount", nulls = Nulls.SKIP)
        public Builder invoiceAmount(Optional<Double> invoiceAmount) {
            this.invoiceAmount = invoiceAmount;
            return this;
        }

        public Builder invoiceAmount(Double invoiceAmount) {
            this.invoiceAmount = Optional.ofNullable(invoiceAmount);
            return this;
        }

        /**
         * <p>Invoice date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         */
        @JsonSetter(value = "invoiceDate", nulls = Nulls.SKIP)
        public Builder invoiceDate(Optional<String> invoiceDate) {
            this.invoiceDate = invoiceDate;
            return this;
        }

        public Builder invoiceDate(String invoiceDate) {
            this.invoiceDate = Optional.ofNullable(invoiceDate);
            return this;
        }

        /**
         * <p>Invoice due date in one of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         */
        @JsonSetter(value = "invoiceDueDate", nulls = Nulls.SKIP)
        public Builder invoiceDueDate(Optional<String> invoiceDueDate) {
            this.invoiceDueDate = invoiceDueDate;
            return this;
        }

        public Builder invoiceDueDate(String invoiceDueDate) {
            this.invoiceDueDate = Optional.ofNullable(invoiceDueDate);
            return this;
        }

        /**
         * <p>Indicate the date to finish a scheduled invoice cycle (`invoiceType`` = 1) in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         */
        @JsonSetter(value = "invoiceEndDate", nulls = Nulls.SKIP)
        public Builder invoiceEndDate(Optional<String> invoiceEndDate) {
            this.invoiceEndDate = invoiceEndDate;
            return this;
        }

        public Builder invoiceEndDate(String invoiceEndDate) {
            this.invoiceEndDate = Optional.ofNullable(invoiceEndDate);
            return this;
        }

        /**
         * <p>Invoice number. Identifies the invoice under a paypoint.</p>
         */
        @JsonSetter(value = "invoiceNumber", nulls = Nulls.SKIP)
        public Builder invoiceNumber(Optional<String> invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }

        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = Optional.ofNullable(invoiceNumber);
            return this;
        }

        @JsonSetter(value = "invoiceStatus", nulls = Nulls.SKIP)
        public Builder invoiceStatus(Optional<Integer> invoiceStatus) {
            this.invoiceStatus = invoiceStatus;
            return this;
        }

        public Builder invoiceStatus(Integer invoiceStatus) {
            this.invoiceStatus = Optional.ofNullable(invoiceStatus);
            return this;
        }

        @JsonSetter(value = "invoiceType", nulls = Nulls.SKIP)
        public Builder invoiceType(Optional<Integer> invoiceType) {
            this.invoiceType = invoiceType;
            return this;
        }

        public Builder invoiceType(Integer invoiceType) {
            this.invoiceType = Optional.ofNullable(invoiceType);
            return this;
        }

        /**
         * <p>Array of line items included in the invoice.</p>
         */
        @JsonSetter(value = "items", nulls = Nulls.SKIP)
        public Builder items(Optional<List<BillItem>> items) {
            this.items = items;
            return this;
        }

        public Builder items(List<BillItem> items) {
            this.items = Optional.ofNullable(items);
            return this;
        }

        /**
         * <p>Last name of the recipient of the invoice.</p>
         */
        @JsonSetter(value = "lastName", nulls = Nulls.SKIP)
        public Builder lastName(Optional<String> lastName) {
            this.lastName = lastName;
            return this;
        }

        public Builder lastName(String lastName) {
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        /**
         * <p>Notes included in the invoice.</p>
         */
        @JsonSetter(value = "notes", nulls = Nulls.SKIP)
        public Builder notes(Optional<String> notes) {
            this.notes = notes;
            return this;
        }

        public Builder notes(String notes) {
            this.notes = Optional.ofNullable(notes);
            return this;
        }

        @JsonSetter(value = "paymentTerms", nulls = Nulls.SKIP)
        public Builder paymentTerms(Optional<BillDataPaymentTerms> paymentTerms) {
            this.paymentTerms = paymentTerms;
            return this;
        }

        public Builder paymentTerms(BillDataPaymentTerms paymentTerms) {
            this.paymentTerms = Optional.ofNullable(paymentTerms);
            return this;
        }

        @JsonSetter(value = "purchaseOrder", nulls = Nulls.SKIP)
        public Builder purchaseOrder(Optional<String> purchaseOrder) {
            this.purchaseOrder = purchaseOrder;
            return this;
        }

        public Builder purchaseOrder(String purchaseOrder) {
            this.purchaseOrder = Optional.ofNullable(purchaseOrder);
            return this;
        }

        @JsonSetter(value = "shippingAddress1", nulls = Nulls.SKIP)
        public Builder shippingAddress1(Optional<String> shippingAddress1) {
            this.shippingAddress1 = shippingAddress1;
            return this;
        }

        public Builder shippingAddress1(String shippingAddress1) {
            this.shippingAddress1 = Optional.ofNullable(shippingAddress1);
            return this;
        }

        @JsonSetter(value = "shippingAddress2", nulls = Nulls.SKIP)
        public Builder shippingAddress2(Optional<String> shippingAddress2) {
            this.shippingAddress2 = shippingAddress2;
            return this;
        }

        public Builder shippingAddress2(String shippingAddress2) {
            this.shippingAddress2 = Optional.ofNullable(shippingAddress2);
            return this;
        }

        @JsonSetter(value = "shippingCity", nulls = Nulls.SKIP)
        public Builder shippingCity(Optional<String> shippingCity) {
            this.shippingCity = shippingCity;
            return this;
        }

        public Builder shippingCity(String shippingCity) {
            this.shippingCity = Optional.ofNullable(shippingCity);
            return this;
        }

        @JsonSetter(value = "shippingCountry", nulls = Nulls.SKIP)
        public Builder shippingCountry(Optional<String> shippingCountry) {
            this.shippingCountry = shippingCountry;
            return this;
        }

        public Builder shippingCountry(String shippingCountry) {
            this.shippingCountry = Optional.ofNullable(shippingCountry);
            return this;
        }

        /**
         * <p>Shipping recipient's contact email address.</p>
         */
        @JsonSetter(value = "shippingEmail", nulls = Nulls.SKIP)
        public Builder shippingEmail(Optional<String> shippingEmail) {
            this.shippingEmail = shippingEmail;
            return this;
        }

        public Builder shippingEmail(String shippingEmail) {
            this.shippingEmail = Optional.ofNullable(shippingEmail);
            return this;
        }

        @JsonSetter(value = "shippingFromZip", nulls = Nulls.SKIP)
        public Builder shippingFromZip(Optional<String> shippingFromZip) {
            this.shippingFromZip = shippingFromZip;
            return this;
        }

        public Builder shippingFromZip(String shippingFromZip) {
            this.shippingFromZip = Optional.ofNullable(shippingFromZip);
            return this;
        }

        /**
         * <p>Recipient phone number.</p>
         */
        @JsonSetter(value = "shippingPhone", nulls = Nulls.SKIP)
        public Builder shippingPhone(Optional<String> shippingPhone) {
            this.shippingPhone = shippingPhone;
            return this;
        }

        public Builder shippingPhone(String shippingPhone) {
            this.shippingPhone = Optional.ofNullable(shippingPhone);
            return this;
        }

        @JsonSetter(value = "shippingState", nulls = Nulls.SKIP)
        public Builder shippingState(Optional<String> shippingState) {
            this.shippingState = shippingState;
            return this;
        }

        public Builder shippingState(String shippingState) {
            this.shippingState = Optional.ofNullable(shippingState);
            return this;
        }

        @JsonSetter(value = "shippingZip", nulls = Nulls.SKIP)
        public Builder shippingZip(Optional<String> shippingZip) {
            this.shippingZip = shippingZip;
            return this;
        }

        public Builder shippingZip(String shippingZip) {
            this.shippingZip = Optional.ofNullable(shippingZip);
            return this;
        }

        @JsonSetter(value = "summaryCommodityCode", nulls = Nulls.SKIP)
        public Builder summaryCommodityCode(Optional<String> summaryCommodityCode) {
            this.summaryCommodityCode = summaryCommodityCode;
            return this;
        }

        public Builder summaryCommodityCode(String summaryCommodityCode) {
            this.summaryCommodityCode = Optional.ofNullable(summaryCommodityCode);
            return this;
        }

        @JsonSetter(value = "tax", nulls = Nulls.SKIP)
        public Builder tax(Optional<Double> tax) {
            this.tax = tax;
            return this;
        }

        public Builder tax(Double tax) {
            this.tax = Optional.ofNullable(tax);
            return this;
        }

        @JsonSetter(value = "termsConditions", nulls = Nulls.SKIP)
        public Builder termsConditions(Optional<String> termsConditions) {
            this.termsConditions = termsConditions;
            return this;
        }

        public Builder termsConditions(String termsConditions) {
            this.termsConditions = Optional.ofNullable(termsConditions);
            return this;
        }

        public BillData build() {
            return new BillData(
                    additionalData,
                    attachments,
                    company,
                    discount,
                    dutyAmount,
                    firstName,
                    freightAmount,
                    frequency,
                    invoiceAmount,
                    invoiceDate,
                    invoiceDueDate,
                    invoiceEndDate,
                    invoiceNumber,
                    invoiceStatus,
                    invoiceType,
                    items,
                    lastName,
                    notes,
                    paymentTerms,
                    purchaseOrder,
                    shippingAddress1,
                    shippingAddress2,
                    shippingCity,
                    shippingCountry,
                    shippingEmail,
                    shippingFromZip,
                    shippingPhone,
                    shippingState,
                    shippingZip,
                    summaryCommodityCode,
                    tax,
                    termsConditions,
                    additionalProperties);
        }
    }
}
