/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TierItemPass.Builder.class)
public final class TierItemPass {
    private final Optional<Double> amountFeeoneTime;

    private final Optional<Double> amountFeeRecurring;

    private final Optional<Double> highPayRange;

    private final Optional<Double> lowPayRange;

    private final Optional<Double> percentFeeoneTime;

    private final Optional<Double> percentFeeRecurring;

    private final Map<String, Object> additionalProperties;

    private TierItemPass(
            Optional<Double> amountFeeoneTime,
            Optional<Double> amountFeeRecurring,
            Optional<Double> highPayRange,
            Optional<Double> lowPayRange,
            Optional<Double> percentFeeoneTime,
            Optional<Double> percentFeeRecurring,
            Map<String, Object> additionalProperties) {
        this.amountFeeoneTime = amountFeeoneTime;
        this.amountFeeRecurring = amountFeeRecurring;
        this.highPayRange = highPayRange;
        this.lowPayRange = lowPayRange;
        this.percentFeeoneTime = percentFeeoneTime;
        this.percentFeeRecurring = percentFeeRecurring;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("amountFeeone-time")
    public Optional<Double> getAmountFeeoneTime() {
        return amountFeeoneTime;
    }

    @JsonProperty("amountFeeRecurring")
    public Optional<Double> getAmountFeeRecurring() {
        return amountFeeRecurring;
    }

    @JsonProperty("highPayRange")
    public Optional<Double> getHighPayRange() {
        return highPayRange;
    }

    @JsonProperty("lowPayRange")
    public Optional<Double> getLowPayRange() {
        return lowPayRange;
    }

    @JsonProperty("percentFeeone-time")
    public Optional<Double> getPercentFeeoneTime() {
        return percentFeeoneTime;
    }

    @JsonProperty("percentFeeRecurring")
    public Optional<Double> getPercentFeeRecurring() {
        return percentFeeRecurring;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TierItemPass && equalTo((TierItemPass) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TierItemPass other) {
        return amountFeeoneTime.equals(other.amountFeeoneTime)
                && amountFeeRecurring.equals(other.amountFeeRecurring)
                && highPayRange.equals(other.highPayRange)
                && lowPayRange.equals(other.lowPayRange)
                && percentFeeoneTime.equals(other.percentFeeoneTime)
                && percentFeeRecurring.equals(other.percentFeeRecurring);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.amountFeeoneTime,
                this.amountFeeRecurring,
                this.highPayRange,
                this.lowPayRange,
                this.percentFeeoneTime,
                this.percentFeeRecurring);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> amountFeeoneTime = Optional.empty();

        private Optional<Double> amountFeeRecurring = Optional.empty();

        private Optional<Double> highPayRange = Optional.empty();

        private Optional<Double> lowPayRange = Optional.empty();

        private Optional<Double> percentFeeoneTime = Optional.empty();

        private Optional<Double> percentFeeRecurring = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TierItemPass other) {
            amountFeeoneTime(other.getAmountFeeoneTime());
            amountFeeRecurring(other.getAmountFeeRecurring());
            highPayRange(other.getHighPayRange());
            lowPayRange(other.getLowPayRange());
            percentFeeoneTime(other.getPercentFeeoneTime());
            percentFeeRecurring(other.getPercentFeeRecurring());
            return this;
        }

        @JsonSetter(value = "amountFeeone-time", nulls = Nulls.SKIP)
        public Builder amountFeeoneTime(Optional<Double> amountFeeoneTime) {
            this.amountFeeoneTime = amountFeeoneTime;
            return this;
        }

        public Builder amountFeeoneTime(Double amountFeeoneTime) {
            this.amountFeeoneTime = Optional.ofNullable(amountFeeoneTime);
            return this;
        }

        @JsonSetter(value = "amountFeeRecurring", nulls = Nulls.SKIP)
        public Builder amountFeeRecurring(Optional<Double> amountFeeRecurring) {
            this.amountFeeRecurring = amountFeeRecurring;
            return this;
        }

        public Builder amountFeeRecurring(Double amountFeeRecurring) {
            this.amountFeeRecurring = Optional.ofNullable(amountFeeRecurring);
            return this;
        }

        @JsonSetter(value = "highPayRange", nulls = Nulls.SKIP)
        public Builder highPayRange(Optional<Double> highPayRange) {
            this.highPayRange = highPayRange;
            return this;
        }

        public Builder highPayRange(Double highPayRange) {
            this.highPayRange = Optional.ofNullable(highPayRange);
            return this;
        }

        @JsonSetter(value = "lowPayRange", nulls = Nulls.SKIP)
        public Builder lowPayRange(Optional<Double> lowPayRange) {
            this.lowPayRange = lowPayRange;
            return this;
        }

        public Builder lowPayRange(Double lowPayRange) {
            this.lowPayRange = Optional.ofNullable(lowPayRange);
            return this;
        }

        @JsonSetter(value = "percentFeeone-time", nulls = Nulls.SKIP)
        public Builder percentFeeoneTime(Optional<Double> percentFeeoneTime) {
            this.percentFeeoneTime = percentFeeoneTime;
            return this;
        }

        public Builder percentFeeoneTime(Double percentFeeoneTime) {
            this.percentFeeoneTime = Optional.ofNullable(percentFeeoneTime);
            return this;
        }

        @JsonSetter(value = "percentFeeRecurring", nulls = Nulls.SKIP)
        public Builder percentFeeRecurring(Optional<Double> percentFeeRecurring) {
            this.percentFeeRecurring = percentFeeRecurring;
            return this;
        }

        public Builder percentFeeRecurring(Double percentFeeRecurring) {
            this.percentFeeRecurring = Optional.ofNullable(percentFeeRecurring);
            return this;
        }

        public TierItemPass build() {
            return new TierItemPass(
                    amountFeeoneTime,
                    amountFeeRecurring,
                    highPayRange,
                    lowPayRange,
                    percentFeeoneTime,
                    percentFeeRecurring,
                    additionalProperties);
        }
    }
}
