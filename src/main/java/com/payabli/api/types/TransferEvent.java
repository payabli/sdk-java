/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransferEvent.Builder.class)
public final class TransferEvent {
    private final String description;

    private final OffsetDateTime eventTime;

    private final String refData;

    private final String extraData;

    private final String source;

    private final Map<String, Object> additionalProperties;

    private TransferEvent(
            String description,
            OffsetDateTime eventTime,
            String refData,
            String extraData,
            String source,
            Map<String, Object> additionalProperties) {
        this.description = description;
        this.eventTime = eventTime;
        this.refData = refData;
        this.extraData = extraData;
        this.source = source;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Description of the transfer event.
     */
    @JsonProperty("description")
    public String getDescription() {
        return description;
    }

    /**
     * @return Date and time when the transfer event occurred.
     */
    @JsonProperty("eventTime")
    public OffsetDateTime getEventTime() {
        return eventTime;
    }

    /**
     * @return Reference data associated with the transfer event.
     */
    @JsonProperty("refData")
    public String getRefData() {
        return refData;
    }

    /**
     * @return Additional data associated with the transfer event.
     */
    @JsonProperty("extraData")
    public String getExtraData() {
        return extraData;
    }

    /**
     * @return Source of the transfer event.
     */
    @JsonProperty("source")
    public String getSource() {
        return source;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransferEvent && equalTo((TransferEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransferEvent other) {
        return description.equals(other.description)
                && eventTime.equals(other.eventTime)
                && refData.equals(other.refData)
                && extraData.equals(other.extraData)
                && source.equals(other.source);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.description, this.eventTime, this.refData, this.extraData, this.source);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static DescriptionStage builder() {
        return new Builder();
    }

    public interface DescriptionStage {
        /**
         * <p>Description of the transfer event.</p>
         */
        EventTimeStage description(@NotNull String description);

        Builder from(TransferEvent other);
    }

    public interface EventTimeStage {
        /**
         * <p>Date and time when the transfer event occurred.</p>
         */
        RefDataStage eventTime(@NotNull OffsetDateTime eventTime);
    }

    public interface RefDataStage {
        /**
         * <p>Reference data associated with the transfer event.</p>
         */
        ExtraDataStage refData(@NotNull String refData);
    }

    public interface ExtraDataStage {
        /**
         * <p>Additional data associated with the transfer event.</p>
         */
        SourceStage extraData(@NotNull String extraData);
    }

    public interface SourceStage {
        /**
         * <p>Source of the transfer event.</p>
         */
        _FinalStage source(@NotNull String source);
    }

    public interface _FinalStage {
        TransferEvent build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements DescriptionStage, EventTimeStage, RefDataStage, ExtraDataStage, SourceStage, _FinalStage {
        private String description;

        private OffsetDateTime eventTime;

        private String refData;

        private String extraData;

        private String source;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TransferEvent other) {
            description(other.getDescription());
            eventTime(other.getEventTime());
            refData(other.getRefData());
            extraData(other.getExtraData());
            source(other.getSource());
            return this;
        }

        /**
         * <p>Description of the transfer event.</p>
         * <p>Description of the transfer event.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("description")
        public EventTimeStage description(@NotNull String description) {
            this.description = Objects.requireNonNull(description, "description must not be null");
            return this;
        }

        /**
         * <p>Date and time when the transfer event occurred.</p>
         * <p>Date and time when the transfer event occurred.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("eventTime")
        public RefDataStage eventTime(@NotNull OffsetDateTime eventTime) {
            this.eventTime = Objects.requireNonNull(eventTime, "eventTime must not be null");
            return this;
        }

        /**
         * <p>Reference data associated with the transfer event.</p>
         * <p>Reference data associated with the transfer event.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("refData")
        public ExtraDataStage refData(@NotNull String refData) {
            this.refData = Objects.requireNonNull(refData, "refData must not be null");
            return this;
        }

        /**
         * <p>Additional data associated with the transfer event.</p>
         * <p>Additional data associated with the transfer event.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("extraData")
        public SourceStage extraData(@NotNull String extraData) {
            this.extraData = Objects.requireNonNull(extraData, "extraData must not be null");
            return this;
        }

        /**
         * <p>Source of the transfer event.</p>
         * <p>Source of the transfer event.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("source")
        public _FinalStage source(@NotNull String source) {
            this.source = Objects.requireNonNull(source, "source must not be null");
            return this;
        }

        @java.lang.Override
        public TransferEvent build() {
            return new TransferEvent(description, eventTime, refData, extraData, source, additionalProperties);
        }
    }
}
