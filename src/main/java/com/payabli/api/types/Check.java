/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Check.Builder.class)
public final class Check {
    private final String achHolder;

    private final Map<String, Object> additionalProperties;

    private Check(String achHolder, Map<String, Object> additionalProperties) {
        this.achHolder = achHolder;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The checking accountholder's name.
     */
    @JsonProperty("achHolder")
    public String getAchHolder() {
        return achHolder;
    }

    /**
     * @return Method to use for the transaction. Use <code>check</code> for a paper check transaction. When the method is <code>check</code>, then <code>paymentDetails.checkNumber</code> is required.
     */
    @JsonProperty("method")
    public String getMethod() {
        return "check";
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Check && equalTo((Check) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Check other) {
        return achHolder.equals(other.achHolder);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.achHolder);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AchHolderStage builder() {
        return new Builder();
    }

    public interface AchHolderStage {
        /**
         * <p>The checking accountholder's name.</p>
         */
        _FinalStage achHolder(@NotNull String achHolder);

        Builder from(Check other);
    }

    public interface _FinalStage {
        Check build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AchHolderStage, _FinalStage {
        private String achHolder;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Check other) {
            achHolder(other.getAchHolder());
            return this;
        }

        /**
         * <p>The checking accountholder's name.</p>
         * <p>The checking accountholder's name.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("achHolder")
        public _FinalStage achHolder(@NotNull String achHolder) {
            this.achHolder = Objects.requireNonNull(achHolder, "achHolder must not be null");
            return this;
        }

        @java.lang.Override
        public Check build() {
            return new Check(achHolder, additionalProperties);
        }
    }
}
