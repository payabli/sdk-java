/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LinkData.Builder.class)
public final class LinkData {
    private final Optional<Boolean> ro;

    private final Optional<Boolean> rq;

    private final Optional<String> validator;

    private final Optional<String> value;

    private final Map<String, Object> additionalProperties;

    private LinkData(
            Optional<Boolean> ro,
            Optional<Boolean> rq,
            Optional<String> validator,
            Optional<String> value,
            Map<String, Object> additionalProperties) {
        this.ro = ro;
        this.rq = rq;
        this.validator = validator;
        this.value = value;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("ro")
    public Optional<Boolean> getRo() {
        return ro;
    }

    @JsonProperty("rq")
    public Optional<Boolean> getRq() {
        return rq;
    }

    /**
     * @return The type of validation applied to the field. Available values:
     * <ul>
     * <li>text</li>
     * <li>alpha</li>
     * <li>ein</li>
     * <li>url</li>
     * <li>phone</li>
     * <li>alphanumeric</li>
     * <li>zipcode</li>
     * <li>numbers</li>
     * <li>float</li>
     * <li>ssn</li>
     * <li>email</li>
     * <li>routing</li>
     * </ul>
     */
    @JsonProperty("validator")
    public Optional<String> getValidator() {
        return validator;
    }

    @JsonProperty("value")
    public Optional<String> getValue() {
        return value;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LinkData && equalTo((LinkData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LinkData other) {
        return ro.equals(other.ro)
                && rq.equals(other.rq)
                && validator.equals(other.validator)
                && value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.ro, this.rq, this.validator, this.value);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> ro = Optional.empty();

        private Optional<Boolean> rq = Optional.empty();

        private Optional<String> validator = Optional.empty();

        private Optional<String> value = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(LinkData other) {
            ro(other.getRo());
            rq(other.getRq());
            validator(other.getValidator());
            value(other.getValue());
            return this;
        }

        @JsonSetter(value = "ro", nulls = Nulls.SKIP)
        public Builder ro(Optional<Boolean> ro) {
            this.ro = ro;
            return this;
        }

        public Builder ro(Boolean ro) {
            this.ro = Optional.ofNullable(ro);
            return this;
        }

        @JsonSetter(value = "rq", nulls = Nulls.SKIP)
        public Builder rq(Optional<Boolean> rq) {
            this.rq = rq;
            return this;
        }

        public Builder rq(Boolean rq) {
            this.rq = Optional.ofNullable(rq);
            return this;
        }

        /**
         * <p>The type of validation applied to the field. Available values:</p>
         * <ul>
         * <li>text</li>
         * <li>alpha</li>
         * <li>ein</li>
         * <li>url</li>
         * <li>phone</li>
         * <li>alphanumeric</li>
         * <li>zipcode</li>
         * <li>numbers</li>
         * <li>float</li>
         * <li>ssn</li>
         * <li>email</li>
         * <li>routing</li>
         * </ul>
         */
        @JsonSetter(value = "validator", nulls = Nulls.SKIP)
        public Builder validator(Optional<String> validator) {
            this.validator = validator;
            return this;
        }

        public Builder validator(String validator) {
            this.validator = Optional.ofNullable(validator);
            return this;
        }

        @JsonSetter(value = "value", nulls = Nulls.SKIP)
        public Builder value(Optional<String> value) {
            this.value = value;
            return this;
        }

        public Builder value(String value) {
            this.value = Optional.ofNullable(value);
            return this;
        }

        public LinkData build() {
            return new LinkData(ro, rq, validator, value, additionalProperties);
        }
    }
}
