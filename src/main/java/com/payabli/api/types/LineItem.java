/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LineItem.Builder.class)
public final class LineItem {
    private final Optional<List<Optional<String>>> itemCategories;

    private final Optional<String> itemCommodityCode;

    private final double itemCost;

    private final Optional<String> itemDescription;

    private final Optional<Integer> itemMode;

    private final Optional<String> itemProductCode;

    private final Optional<String> itemProductName;

    private final int itemQty;

    private final Optional<String> itemUnitOfMeasure;

    private final Map<String, Object> additionalProperties;

    private LineItem(
            Optional<List<Optional<String>>> itemCategories,
            Optional<String> itemCommodityCode,
            double itemCost,
            Optional<String> itemDescription,
            Optional<Integer> itemMode,
            Optional<String> itemProductCode,
            Optional<String> itemProductName,
            int itemQty,
            Optional<String> itemUnitOfMeasure,
            Map<String, Object> additionalProperties) {
        this.itemCategories = itemCategories;
        this.itemCommodityCode = itemCommodityCode;
        this.itemCost = itemCost;
        this.itemDescription = itemDescription;
        this.itemMode = itemMode;
        this.itemProductCode = itemProductCode;
        this.itemProductName = itemProductName;
        this.itemQty = itemQty;
        this.itemUnitOfMeasure = itemUnitOfMeasure;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Array of tags classifying item or product.
     */
    @JsonProperty("itemCategories")
    public Optional<List<Optional<String>>> getItemCategories() {
        return itemCategories;
    }

    @JsonProperty("itemCommodityCode")
    public Optional<String> getItemCommodityCode() {
        return itemCommodityCode;
    }

    /**
     * @return Item or product price per unit.
     */
    @JsonProperty("itemCost")
    public double getItemCost() {
        return itemCost;
    }

    @JsonProperty("itemDescription")
    public Optional<String> getItemDescription() {
        return itemDescription;
    }

    /**
     * @return Internal class of item or product: value '0' is only for invoices, '1' for bills, and '2' is common for both.
     */
    @JsonProperty("itemMode")
    public Optional<Integer> getItemMode() {
        return itemMode;
    }

    @JsonProperty("itemProductCode")
    public Optional<String> getItemProductCode() {
        return itemProductCode;
    }

    @JsonProperty("itemProductName")
    public Optional<String> getItemProductName() {
        return itemProductName;
    }

    /**
     * @return Quantity of item or product.
     */
    @JsonProperty("itemQty")
    public int getItemQty() {
        return itemQty;
    }

    @JsonProperty("itemUnitOfMeasure")
    public Optional<String> getItemUnitOfMeasure() {
        return itemUnitOfMeasure;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LineItem && equalTo((LineItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LineItem other) {
        return itemCategories.equals(other.itemCategories)
                && itemCommodityCode.equals(other.itemCommodityCode)
                && itemCost == other.itemCost
                && itemDescription.equals(other.itemDescription)
                && itemMode.equals(other.itemMode)
                && itemProductCode.equals(other.itemProductCode)
                && itemProductName.equals(other.itemProductName)
                && itemQty == other.itemQty
                && itemUnitOfMeasure.equals(other.itemUnitOfMeasure);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.itemCategories,
                this.itemCommodityCode,
                this.itemCost,
                this.itemDescription,
                this.itemMode,
                this.itemProductCode,
                this.itemProductName,
                this.itemQty,
                this.itemUnitOfMeasure);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ItemCostStage builder() {
        return new Builder();
    }

    public interface ItemCostStage {
        /**
         * <p>Item or product price per unit.</p>
         */
        ItemQtyStage itemCost(double itemCost);

        Builder from(LineItem other);
    }

    public interface ItemQtyStage {
        /**
         * <p>Quantity of item or product.</p>
         */
        _FinalStage itemQty(int itemQty);
    }

    public interface _FinalStage {
        LineItem build();

        /**
         * <p>Array of tags classifying item or product.</p>
         */
        _FinalStage itemCategories(Optional<List<Optional<String>>> itemCategories);

        _FinalStage itemCategories(List<Optional<String>> itemCategories);

        _FinalStage itemCommodityCode(Optional<String> itemCommodityCode);

        _FinalStage itemCommodityCode(String itemCommodityCode);

        _FinalStage itemDescription(Optional<String> itemDescription);

        _FinalStage itemDescription(String itemDescription);

        /**
         * <p>Internal class of item or product: value '0' is only for invoices, '1' for bills, and '2' is common for both.</p>
         */
        _FinalStage itemMode(Optional<Integer> itemMode);

        _FinalStage itemMode(Integer itemMode);

        _FinalStage itemProductCode(Optional<String> itemProductCode);

        _FinalStage itemProductCode(String itemProductCode);

        _FinalStage itemProductName(Optional<String> itemProductName);

        _FinalStage itemProductName(String itemProductName);

        _FinalStage itemUnitOfMeasure(Optional<String> itemUnitOfMeasure);

        _FinalStage itemUnitOfMeasure(String itemUnitOfMeasure);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ItemCostStage, ItemQtyStage, _FinalStage {
        private double itemCost;

        private int itemQty;

        private Optional<String> itemUnitOfMeasure = Optional.empty();

        private Optional<String> itemProductName = Optional.empty();

        private Optional<String> itemProductCode = Optional.empty();

        private Optional<Integer> itemMode = Optional.empty();

        private Optional<String> itemDescription = Optional.empty();

        private Optional<String> itemCommodityCode = Optional.empty();

        private Optional<List<Optional<String>>> itemCategories = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(LineItem other) {
            itemCategories(other.getItemCategories());
            itemCommodityCode(other.getItemCommodityCode());
            itemCost(other.getItemCost());
            itemDescription(other.getItemDescription());
            itemMode(other.getItemMode());
            itemProductCode(other.getItemProductCode());
            itemProductName(other.getItemProductName());
            itemQty(other.getItemQty());
            itemUnitOfMeasure(other.getItemUnitOfMeasure());
            return this;
        }

        /**
         * <p>Item or product price per unit.</p>
         * <p>Item or product price per unit.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("itemCost")
        public ItemQtyStage itemCost(double itemCost) {
            this.itemCost = itemCost;
            return this;
        }

        /**
         * <p>Quantity of item or product.</p>
         * <p>Quantity of item or product.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("itemQty")
        public _FinalStage itemQty(int itemQty) {
            this.itemQty = itemQty;
            return this;
        }

        @java.lang.Override
        public _FinalStage itemUnitOfMeasure(String itemUnitOfMeasure) {
            this.itemUnitOfMeasure = Optional.ofNullable(itemUnitOfMeasure);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "itemUnitOfMeasure", nulls = Nulls.SKIP)
        public _FinalStage itemUnitOfMeasure(Optional<String> itemUnitOfMeasure) {
            this.itemUnitOfMeasure = itemUnitOfMeasure;
            return this;
        }

        @java.lang.Override
        public _FinalStage itemProductName(String itemProductName) {
            this.itemProductName = Optional.ofNullable(itemProductName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "itemProductName", nulls = Nulls.SKIP)
        public _FinalStage itemProductName(Optional<String> itemProductName) {
            this.itemProductName = itemProductName;
            return this;
        }

        @java.lang.Override
        public _FinalStage itemProductCode(String itemProductCode) {
            this.itemProductCode = Optional.ofNullable(itemProductCode);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "itemProductCode", nulls = Nulls.SKIP)
        public _FinalStage itemProductCode(Optional<String> itemProductCode) {
            this.itemProductCode = itemProductCode;
            return this;
        }

        /**
         * <p>Internal class of item or product: value '0' is only for invoices, '1' for bills, and '2' is common for both.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage itemMode(Integer itemMode) {
            this.itemMode = Optional.ofNullable(itemMode);
            return this;
        }

        /**
         * <p>Internal class of item or product: value '0' is only for invoices, '1' for bills, and '2' is common for both.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "itemMode", nulls = Nulls.SKIP)
        public _FinalStage itemMode(Optional<Integer> itemMode) {
            this.itemMode = itemMode;
            return this;
        }

        @java.lang.Override
        public _FinalStage itemDescription(String itemDescription) {
            this.itemDescription = Optional.ofNullable(itemDescription);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "itemDescription", nulls = Nulls.SKIP)
        public _FinalStage itemDescription(Optional<String> itemDescription) {
            this.itemDescription = itemDescription;
            return this;
        }

        @java.lang.Override
        public _FinalStage itemCommodityCode(String itemCommodityCode) {
            this.itemCommodityCode = Optional.ofNullable(itemCommodityCode);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "itemCommodityCode", nulls = Nulls.SKIP)
        public _FinalStage itemCommodityCode(Optional<String> itemCommodityCode) {
            this.itemCommodityCode = itemCommodityCode;
            return this;
        }

        /**
         * <p>Array of tags classifying item or product.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage itemCategories(List<Optional<String>> itemCategories) {
            this.itemCategories = Optional.ofNullable(itemCategories);
            return this;
        }

        /**
         * <p>Array of tags classifying item or product.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "itemCategories", nulls = Nulls.SKIP)
        public _FinalStage itemCategories(Optional<List<Optional<String>>> itemCategories) {
            this.itemCategories = itemCategories;
            return this;
        }

        @java.lang.Override
        public LineItem build() {
            return new LineItem(
                    itemCategories,
                    itemCommodityCode,
                    itemCost,
                    itemDescription,
                    itemMode,
                    itemProductCode,
                    itemProductName,
                    itemQty,
                    itemUnitOfMeasure,
                    additionalProperties);
        }
    }
}
