/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TemplateAdditionalDataField.Builder.class)
public final class TemplateAdditionalDataField {
    private final Optional<Boolean> visible;

    private final Optional<Boolean> readOnly;

    private final Optional<Boolean> required;

    private final Optional<Integer> posRow;

    private final Optional<Integer> posCol;

    private final Optional<String> value;

    private final Optional<String> label;

    private final Optional<String> type;

    private final Map<String, Object> additionalProperties;

    private TemplateAdditionalDataField(
            Optional<Boolean> visible,
            Optional<Boolean> readOnly,
            Optional<Boolean> required,
            Optional<Integer> posRow,
            Optional<Integer> posCol,
            Optional<String> value,
            Optional<String> label,
            Optional<String> type,
            Map<String, Object> additionalProperties) {
        this.visible = visible;
        this.readOnly = readOnly;
        this.required = required;
        this.posRow = posRow;
        this.posCol = posCol;
        this.value = value;
        this.label = label;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("visible")
    public Optional<Boolean> getVisible() {
        return visible;
    }

    @JsonProperty("readOnly")
    public Optional<Boolean> getReadOnly() {
        return readOnly;
    }

    @JsonProperty("required")
    public Optional<Boolean> getRequired() {
        return required;
    }

    @JsonProperty("posRow")
    public Optional<Integer> getPosRow() {
        return posRow;
    }

    @JsonProperty("posCol")
    public Optional<Integer> getPosCol() {
        return posCol;
    }

    @JsonProperty("value")
    public Optional<String> getValue() {
        return value;
    }

    @JsonProperty("label")
    public Optional<String> getLabel() {
        return label;
    }

    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TemplateAdditionalDataField && equalTo((TemplateAdditionalDataField) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TemplateAdditionalDataField other) {
        return visible.equals(other.visible)
                && readOnly.equals(other.readOnly)
                && required.equals(other.required)
                && posRow.equals(other.posRow)
                && posCol.equals(other.posCol)
                && value.equals(other.value)
                && label.equals(other.label)
                && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.visible,
                this.readOnly,
                this.required,
                this.posRow,
                this.posCol,
                this.value,
                this.label,
                this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> visible = Optional.empty();

        private Optional<Boolean> readOnly = Optional.empty();

        private Optional<Boolean> required = Optional.empty();

        private Optional<Integer> posRow = Optional.empty();

        private Optional<Integer> posCol = Optional.empty();

        private Optional<String> value = Optional.empty();

        private Optional<String> label = Optional.empty();

        private Optional<String> type = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TemplateAdditionalDataField other) {
            visible(other.getVisible());
            readOnly(other.getReadOnly());
            required(other.getRequired());
            posRow(other.getPosRow());
            posCol(other.getPosCol());
            value(other.getValue());
            label(other.getLabel());
            type(other.getType());
            return this;
        }

        @JsonSetter(value = "visible", nulls = Nulls.SKIP)
        public Builder visible(Optional<Boolean> visible) {
            this.visible = visible;
            return this;
        }

        public Builder visible(Boolean visible) {
            this.visible = Optional.ofNullable(visible);
            return this;
        }

        @JsonSetter(value = "readOnly", nulls = Nulls.SKIP)
        public Builder readOnly(Optional<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(Boolean readOnly) {
            this.readOnly = Optional.ofNullable(readOnly);
            return this;
        }

        @JsonSetter(value = "required", nulls = Nulls.SKIP)
        public Builder required(Optional<Boolean> required) {
            this.required = required;
            return this;
        }

        public Builder required(Boolean required) {
            this.required = Optional.ofNullable(required);
            return this;
        }

        @JsonSetter(value = "posRow", nulls = Nulls.SKIP)
        public Builder posRow(Optional<Integer> posRow) {
            this.posRow = posRow;
            return this;
        }

        public Builder posRow(Integer posRow) {
            this.posRow = Optional.ofNullable(posRow);
            return this;
        }

        @JsonSetter(value = "posCol", nulls = Nulls.SKIP)
        public Builder posCol(Optional<Integer> posCol) {
            this.posCol = posCol;
            return this;
        }

        public Builder posCol(Integer posCol) {
            this.posCol = Optional.ofNullable(posCol);
            return this;
        }

        @JsonSetter(value = "value", nulls = Nulls.SKIP)
        public Builder value(Optional<String> value) {
            this.value = value;
            return this;
        }

        public Builder value(String value) {
            this.value = Optional.ofNullable(value);
            return this;
        }

        @JsonSetter(value = "label", nulls = Nulls.SKIP)
        public Builder label(Optional<String> label) {
            this.label = label;
            return this;
        }

        public Builder label(String label) {
            this.label = Optional.ofNullable(label);
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        public TemplateAdditionalDataField build() {
            return new TemplateAdditionalDataField(
                    visible, readOnly, required, posRow, posCol, value, label, type, additionalProperties);
        }
    }
}
