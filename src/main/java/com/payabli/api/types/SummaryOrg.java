/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SummaryOrg.Builder.class)
public final class SummaryOrg {
    private final Optional<Double> amountSubs;

    private final Optional<Double> amountTx;

    private final Optional<Integer> childOrgs;

    private final Optional<Integer> childPaypoints;

    private final Optional<Integer> countSubs;

    private final Optional<Integer> countTx;

    private final Map<String, Object> additionalProperties;

    private SummaryOrg(
            Optional<Double> amountSubs,
            Optional<Double> amountTx,
            Optional<Integer> childOrgs,
            Optional<Integer> childPaypoints,
            Optional<Integer> countSubs,
            Optional<Integer> countTx,
            Map<String, Object> additionalProperties) {
        this.amountSubs = amountSubs;
        this.amountTx = amountTx;
        this.childOrgs = childOrgs;
        this.childPaypoints = childPaypoints;
        this.countSubs = countSubs;
        this.countTx = countTx;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("amountSubs")
    public Optional<Double> getAmountSubs() {
        return amountSubs;
    }

    @JsonProperty("amountTx")
    public Optional<Double> getAmountTx() {
        return amountTx;
    }

    @JsonProperty("childOrgs")
    public Optional<Integer> getChildOrgs() {
        return childOrgs;
    }

    @JsonProperty("childPaypoints")
    public Optional<Integer> getChildPaypoints() {
        return childPaypoints;
    }

    @JsonProperty("countSubs")
    public Optional<Integer> getCountSubs() {
        return countSubs;
    }

    @JsonProperty("countTx")
    public Optional<Integer> getCountTx() {
        return countTx;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SummaryOrg && equalTo((SummaryOrg) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SummaryOrg other) {
        return amountSubs.equals(other.amountSubs)
                && amountTx.equals(other.amountTx)
                && childOrgs.equals(other.childOrgs)
                && childPaypoints.equals(other.childPaypoints)
                && countSubs.equals(other.countSubs)
                && countTx.equals(other.countTx);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.amountSubs, this.amountTx, this.childOrgs, this.childPaypoints, this.countSubs, this.countTx);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> amountSubs = Optional.empty();

        private Optional<Double> amountTx = Optional.empty();

        private Optional<Integer> childOrgs = Optional.empty();

        private Optional<Integer> childPaypoints = Optional.empty();

        private Optional<Integer> countSubs = Optional.empty();

        private Optional<Integer> countTx = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SummaryOrg other) {
            amountSubs(other.getAmountSubs());
            amountTx(other.getAmountTx());
            childOrgs(other.getChildOrgs());
            childPaypoints(other.getChildPaypoints());
            countSubs(other.getCountSubs());
            countTx(other.getCountTx());
            return this;
        }

        @JsonSetter(value = "amountSubs", nulls = Nulls.SKIP)
        public Builder amountSubs(Optional<Double> amountSubs) {
            this.amountSubs = amountSubs;
            return this;
        }

        public Builder amountSubs(Double amountSubs) {
            this.amountSubs = Optional.ofNullable(amountSubs);
            return this;
        }

        @JsonSetter(value = "amountTx", nulls = Nulls.SKIP)
        public Builder amountTx(Optional<Double> amountTx) {
            this.amountTx = amountTx;
            return this;
        }

        public Builder amountTx(Double amountTx) {
            this.amountTx = Optional.ofNullable(amountTx);
            return this;
        }

        @JsonSetter(value = "childOrgs", nulls = Nulls.SKIP)
        public Builder childOrgs(Optional<Integer> childOrgs) {
            this.childOrgs = childOrgs;
            return this;
        }

        public Builder childOrgs(Integer childOrgs) {
            this.childOrgs = Optional.ofNullable(childOrgs);
            return this;
        }

        @JsonSetter(value = "childPaypoints", nulls = Nulls.SKIP)
        public Builder childPaypoints(Optional<Integer> childPaypoints) {
            this.childPaypoints = childPaypoints;
            return this;
        }

        public Builder childPaypoints(Integer childPaypoints) {
            this.childPaypoints = Optional.ofNullable(childPaypoints);
            return this;
        }

        @JsonSetter(value = "countSubs", nulls = Nulls.SKIP)
        public Builder countSubs(Optional<Integer> countSubs) {
            this.countSubs = countSubs;
            return this;
        }

        public Builder countSubs(Integer countSubs) {
            this.countSubs = Optional.ofNullable(countSubs);
            return this;
        }

        @JsonSetter(value = "countTx", nulls = Nulls.SKIP)
        public Builder countTx(Optional<Integer> countTx) {
            this.countTx = countTx;
            return this;
        }

        public Builder countTx(Integer countTx) {
            this.countTx = Optional.ofNullable(countTx);
            return this;
        }

        public SummaryOrg build() {
            return new SummaryOrg(
                    amountSubs, amountTx, childOrgs, childPaypoints, countSubs, countTx, additionalProperties);
        }
    }
}
