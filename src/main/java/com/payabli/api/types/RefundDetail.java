/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RefundDetail.Builder.class)
public final class RefundDetail {
    private final Optional<List<PaymentCategories>> categories;

    private final Optional<List<SplitFundingRefundContent>> splitRefunding;

    private final Map<String, Object> additionalProperties;

    private RefundDetail(
            Optional<List<PaymentCategories>> categories,
            Optional<List<SplitFundingRefundContent>> splitRefunding,
            Map<String, Object> additionalProperties) {
        this.categories = categories;
        this.splitRefunding = splitRefunding;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Array of payment categories/line items describing the amount to be paid. Note: These categories are for information only and aren't validated against the total amount provided.
     */
    @JsonProperty("categories")
    public Optional<List<PaymentCategories>> getCategories() {
        return categories;
    }

    /**
     * @return Array of objects containing split instructions for the refund.
     */
    @JsonProperty("splitRefunding")
    public Optional<List<SplitFundingRefundContent>> getSplitRefunding() {
        return splitRefunding;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RefundDetail && equalTo((RefundDetail) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RefundDetail other) {
        return categories.equals(other.categories) && splitRefunding.equals(other.splitRefunding);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.categories, this.splitRefunding);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<PaymentCategories>> categories = Optional.empty();

        private Optional<List<SplitFundingRefundContent>> splitRefunding = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RefundDetail other) {
            categories(other.getCategories());
            splitRefunding(other.getSplitRefunding());
            return this;
        }

        /**
         * <p>Array of payment categories/line items describing the amount to be paid. Note: These categories are for information only and aren't validated against the total amount provided.</p>
         */
        @JsonSetter(value = "categories", nulls = Nulls.SKIP)
        public Builder categories(Optional<List<PaymentCategories>> categories) {
            this.categories = categories;
            return this;
        }

        public Builder categories(List<PaymentCategories> categories) {
            this.categories = Optional.ofNullable(categories);
            return this;
        }

        /**
         * <p>Array of objects containing split instructions for the refund.</p>
         */
        @JsonSetter(value = "splitRefunding", nulls = Nulls.SKIP)
        public Builder splitRefunding(Optional<List<SplitFundingRefundContent>> splitRefunding) {
            this.splitRefunding = splitRefunding;
            return this;
        }

        public Builder splitRefunding(List<SplitFundingRefundContent> splitRefunding) {
            this.splitRefunding = Optional.ofNullable(splitRefunding);
            return this;
        }

        public RefundDetail build() {
            return new RefundDetail(categories, splitRefunding, additionalProperties);
        }
    }
}
