/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransferDetailRecord.Builder.class)
public final class TransferDetailRecord {
    private final int transferDetailId;

    private final int transferId;

    private final String transactionId;

    private final Optional<String> transactionNumber;

    private final long paypointId;

    private final String type;

    private final Optional<String> category;

    private final double grossAmount;

    private final double chargeBackAmount;

    private final double returnedAmount;

    private final double refundAmount;

    private final double holdAmount;

    private final double releasedAmount;

    private final double billingFeesAmount;

    private final double thirdPartyPaidAmount;

    private final double adjustmentsAmount;

    private final double netTransferAmount;

    private final double splitFundingAmount;

    private final Optional<List<BillingFeeDetail>> billingFeesDetails;

    private final Optional<String> parentOrgName;

    private final Optional<String> paypointDbaname;

    private final Optional<String> paypointLegalname;

    private final Optional<String> paypointEntryname;

    private final Optional<String> paymentTransId;

    private final Optional<String> connectorName;

    private final Optional<String> externalProcessorInformation;

    private final Optional<String> gatewayTransId;

    private final Optional<String> orderId;

    private final Optional<String> method;

    private final Optional<String> batchNumber;

    private final Optional<Double> batchAmount;

    private final Optional<Long> payorId;

    private final Optional<QueryPaymentData> paymentData;

    private final Optional<Integer> transStatus;

    private final Optional<Double> totalAmount;

    private final Optional<Double> netAmount;

    private final Optional<Double> feeAmount;

    private final Optional<Integer> settlementStatus;

    private final Optional<String> operation;

    private final Optional<QueryResponseData> responseData;

    private final Optional<String> source;

    private final Optional<Integer> scheduleReference;

    private final Optional<Long> orgId;

    private final Optional<Long> refundId;

    private final Optional<Long> returnedId;

    private final Optional<Long> chargebackId;

    private final Optional<Long> retrievalId;

    private final Optional<Object> transAdditionalData;

    private final Optional<BillData> invoiceData;

    private final Optional<Long> entrypageId;

    private final Optional<String> externalPaypointId;

    private final Optional<OffsetDateTime> transactionTime;

    private final Optional<QueryTransactionPayorData> customer;

    private final Optional<List<SplitFundingContent>> splitFundingInstructions;

    private final Optional<List<QueryCFeeTransaction>> cfeeTransactions;

    private final Optional<List<QueryTransactionEvents>> transactionEvents;

    private final Optional<Double> pendingFeeAmount;

    private final Optional<Boolean> riskFlagged;

    private final Optional<OffsetDateTime> riskFlaggedOn;

    private final Optional<String> riskStatus;

    private final Optional<String> riskReason;

    private final Optional<String> riskAction;

    private final Optional<Integer> riskActionCode;

    private final Optional<String> deviceId;

    private final Optional<String> achSecCode;

    private final Optional<AchHolderType> achHolderType;

    private final Optional<String> ipAddress;

    private final Map<String, Object> additionalProperties;

    private TransferDetailRecord(
            int transferDetailId,
            int transferId,
            String transactionId,
            Optional<String> transactionNumber,
            long paypointId,
            String type,
            Optional<String> category,
            double grossAmount,
            double chargeBackAmount,
            double returnedAmount,
            double refundAmount,
            double holdAmount,
            double releasedAmount,
            double billingFeesAmount,
            double thirdPartyPaidAmount,
            double adjustmentsAmount,
            double netTransferAmount,
            double splitFundingAmount,
            Optional<List<BillingFeeDetail>> billingFeesDetails,
            Optional<String> parentOrgName,
            Optional<String> paypointDbaname,
            Optional<String> paypointLegalname,
            Optional<String> paypointEntryname,
            Optional<String> paymentTransId,
            Optional<String> connectorName,
            Optional<String> externalProcessorInformation,
            Optional<String> gatewayTransId,
            Optional<String> orderId,
            Optional<String> method,
            Optional<String> batchNumber,
            Optional<Double> batchAmount,
            Optional<Long> payorId,
            Optional<QueryPaymentData> paymentData,
            Optional<Integer> transStatus,
            Optional<Double> totalAmount,
            Optional<Double> netAmount,
            Optional<Double> feeAmount,
            Optional<Integer> settlementStatus,
            Optional<String> operation,
            Optional<QueryResponseData> responseData,
            Optional<String> source,
            Optional<Integer> scheduleReference,
            Optional<Long> orgId,
            Optional<Long> refundId,
            Optional<Long> returnedId,
            Optional<Long> chargebackId,
            Optional<Long> retrievalId,
            Optional<Object> transAdditionalData,
            Optional<BillData> invoiceData,
            Optional<Long> entrypageId,
            Optional<String> externalPaypointId,
            Optional<OffsetDateTime> transactionTime,
            Optional<QueryTransactionPayorData> customer,
            Optional<List<SplitFundingContent>> splitFundingInstructions,
            Optional<List<QueryCFeeTransaction>> cfeeTransactions,
            Optional<List<QueryTransactionEvents>> transactionEvents,
            Optional<Double> pendingFeeAmount,
            Optional<Boolean> riskFlagged,
            Optional<OffsetDateTime> riskFlaggedOn,
            Optional<String> riskStatus,
            Optional<String> riskReason,
            Optional<String> riskAction,
            Optional<Integer> riskActionCode,
            Optional<String> deviceId,
            Optional<String> achSecCode,
            Optional<AchHolderType> achHolderType,
            Optional<String> ipAddress,
            Map<String, Object> additionalProperties) {
        this.transferDetailId = transferDetailId;
        this.transferId = transferId;
        this.transactionId = transactionId;
        this.transactionNumber = transactionNumber;
        this.paypointId = paypointId;
        this.type = type;
        this.category = category;
        this.grossAmount = grossAmount;
        this.chargeBackAmount = chargeBackAmount;
        this.returnedAmount = returnedAmount;
        this.refundAmount = refundAmount;
        this.holdAmount = holdAmount;
        this.releasedAmount = releasedAmount;
        this.billingFeesAmount = billingFeesAmount;
        this.thirdPartyPaidAmount = thirdPartyPaidAmount;
        this.adjustmentsAmount = adjustmentsAmount;
        this.netTransferAmount = netTransferAmount;
        this.splitFundingAmount = splitFundingAmount;
        this.billingFeesDetails = billingFeesDetails;
        this.parentOrgName = parentOrgName;
        this.paypointDbaname = paypointDbaname;
        this.paypointLegalname = paypointLegalname;
        this.paypointEntryname = paypointEntryname;
        this.paymentTransId = paymentTransId;
        this.connectorName = connectorName;
        this.externalProcessorInformation = externalProcessorInformation;
        this.gatewayTransId = gatewayTransId;
        this.orderId = orderId;
        this.method = method;
        this.batchNumber = batchNumber;
        this.batchAmount = batchAmount;
        this.payorId = payorId;
        this.paymentData = paymentData;
        this.transStatus = transStatus;
        this.totalAmount = totalAmount;
        this.netAmount = netAmount;
        this.feeAmount = feeAmount;
        this.settlementStatus = settlementStatus;
        this.operation = operation;
        this.responseData = responseData;
        this.source = source;
        this.scheduleReference = scheduleReference;
        this.orgId = orgId;
        this.refundId = refundId;
        this.returnedId = returnedId;
        this.chargebackId = chargebackId;
        this.retrievalId = retrievalId;
        this.transAdditionalData = transAdditionalData;
        this.invoiceData = invoiceData;
        this.entrypageId = entrypageId;
        this.externalPaypointId = externalPaypointId;
        this.transactionTime = transactionTime;
        this.customer = customer;
        this.splitFundingInstructions = splitFundingInstructions;
        this.cfeeTransactions = cfeeTransactions;
        this.transactionEvents = transactionEvents;
        this.pendingFeeAmount = pendingFeeAmount;
        this.riskFlagged = riskFlagged;
        this.riskFlaggedOn = riskFlaggedOn;
        this.riskStatus = riskStatus;
        this.riskReason = riskReason;
        this.riskAction = riskAction;
        this.riskActionCode = riskActionCode;
        this.deviceId = deviceId;
        this.achSecCode = achSecCode;
        this.achHolderType = achHolderType;
        this.ipAddress = ipAddress;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique identifier for the transfer detail record
     */
    @JsonProperty("transferDetailId")
    public int getTransferDetailId() {
        return transferDetailId;
    }

    /**
     * @return The ID of the transfer this detail belongs to
     */
    @JsonProperty("transferId")
    public int getTransferId() {
        return transferId;
    }

    /**
     * @return The transaction ID in Payabli's system
     */
    @JsonProperty("transactionId")
    public String getTransactionId() {
        return transactionId;
    }

    /**
     * @return External transaction reference number
     */
    @JsonProperty("transactionNumber")
    public Optional<String> getTransactionNumber() {
        return transactionNumber;
    }

    /**
     * @return The ID of the paypoint this transaction belongs to
     */
    @JsonProperty("paypointId")
    public long getPaypointId() {
        return paypointId;
    }

    /**
     * @return The transaction type (credit or debit)
     */
    @JsonProperty("type")
    public String getType() {
        return type;
    }

    /**
     * @return A field used to categorize the transaction details. Values include: auth, decline, refund, adj, cb, split
     */
    @JsonProperty("category")
    public Optional<String> getCategory() {
        return category;
    }

    /**
     * @return The gross amount of the transaction
     */
    @JsonProperty("grossAmount")
    public double getGrossAmount() {
        return grossAmount;
    }

    /**
     * @return Chargeback amount deducted from transaction
     */
    @JsonProperty("chargeBackAmount")
    public double getChargeBackAmount() {
        return chargeBackAmount;
    }

    /**
     * @return ACH return amount deducted from transaction
     */
    @JsonProperty("returnedAmount")
    public double getReturnedAmount() {
        return returnedAmount;
    }

    /**
     * @return Refund amount deducted from transaction
     */
    @JsonProperty("refundAmount")
    public double getRefundAmount() {
        return refundAmount;
    }

    /**
     * @return Amount being held for fraud or risk concerns
     */
    @JsonProperty("holdAmount")
    public double getHoldAmount() {
        return holdAmount;
    }

    /**
     * @return Previously held funds that have been released after a risk review
     */
    @JsonProperty("releasedAmount")
    public double getReleasedAmount() {
        return releasedAmount;
    }

    /**
     * @return Charges applied for transactions and services
     */
    @JsonProperty("billingFeesAmount")
    public double getBillingFeesAmount() {
        return billingFeesAmount;
    }

    /**
     * @return Payments captured in the batch cycle that are deposited separately. For example,  checks or cash payments recorded in the batch but not deposited via Payabli,  or card brands making a direct transfer in certain situations.
     */
    @JsonProperty("thirdPartyPaidAmount")
    public double getThirdPartyPaidAmount() {
        return thirdPartyPaidAmount;
    }

    /**
     * @return Corrections applied to Billing &amp; Fees charges
     */
    @JsonProperty("adjustmentsAmount")
    public double getAdjustmentsAmount() {
        return adjustmentsAmount;
    }

    /**
     * @return The net amount after all deductions
     */
    @JsonProperty("netTransferAmount")
    public double getNetTransferAmount() {
        return netTransferAmount;
    }

    /**
     * @return Total amount directed to split funding destinations
     */
    @JsonProperty("splitFundingAmount")
    public double getSplitFundingAmount() {
        return splitFundingAmount;
    }

    /**
     * @return Detailed breakdown of billing fees applied to the transaction
     */
    @JsonProperty("billingFeesDetails")
    public Optional<List<BillingFeeDetail>> getBillingFeesDetails() {
        return billingFeesDetails;
    }

    /**
     * @return The name of the parent organization
     */
    @JsonProperty("ParentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    /**
     * @return The paypoint's DBA name
     */
    @JsonProperty("PaypointDbaname")
    public Optional<String> getPaypointDbaname() {
        return paypointDbaname;
    }

    /**
     * @return The paypoint's legal name
     */
    @JsonProperty("PaypointLegalname")
    public Optional<String> getPaypointLegalname() {
        return paypointLegalname;
    }

    /**
     * @return The paypoint's entryname
     */
    @JsonProperty("PaypointEntryname")
    public Optional<String> getPaypointEntryname() {
        return paypointEntryname;
    }

    /**
     * @return The transaction ID for the payment
     */
    @JsonProperty("PaymentTransId")
    public Optional<String> getPaymentTransId() {
        return paymentTransId;
    }

    /**
     * @return The payment connector used to process the transaction
     */
    @JsonProperty("ConnectorName")
    public Optional<String> getConnectorName() {
        return connectorName;
    }

    /**
     * @return Processor information, used for troubleshooting and reporting. This field contains a value when the API key used to make the request has management permissions.
     */
    @JsonProperty("ExternalProcessorInformation")
    public Optional<String> getExternalProcessorInformation() {
        return externalProcessorInformation;
    }

    /**
     * @return Internal identifier used for processing
     */
    @JsonProperty("GatewayTransId")
    public Optional<String> getGatewayTransId() {
        return gatewayTransId;
    }

    /**
     * @return Custom identifier for the transaction
     */
    @JsonProperty("OrderId")
    public Optional<String> getOrderId() {
        return orderId;
    }

    /**
     * @return Payment method used: card, ach, or wallet
     */
    @JsonProperty("Method")
    public Optional<String> getMethod() {
        return method;
    }

    /**
     * @return The batch number the transaction was included in
     */
    @JsonProperty("BatchNumber")
    public Optional<String> getBatchNumber() {
        return batchNumber;
    }

    /**
     * @return The amount of the batch
     */
    @JsonProperty("BatchAmount")
    public Optional<Double> getBatchAmount() {
        return batchAmount;
    }

    /**
     * @return Unique ID for customer linked to the transaction
     */
    @JsonProperty("PayorId")
    public Optional<Long> getPayorId() {
        return payorId;
    }

    /**
     * @return Details about the payment method and transaction
     */
    @JsonProperty("PaymentData")
    public Optional<QueryPaymentData> getPaymentData() {
        return paymentData;
    }

    /**
     * @return Status of transaction. See <a href="/developers/references/money-in-statuses#money-in-transaction-status">the docs</a> for a full reference.
     */
    @JsonProperty("TransStatus")
    public Optional<Integer> getTransStatus() {
        return transStatus;
    }

    /**
     * @return Transaction total amount (including service fee or sub-charge)
     */
    @JsonProperty("TotalAmount")
    public Optional<Double> getTotalAmount() {
        return totalAmount;
    }

    /**
     * @return Net amount paid
     */
    @JsonProperty("NetAmount")
    public Optional<Double> getNetAmount() {
        return netAmount;
    }

    /**
     * @return Service fee or sub-charge applied
     */
    @JsonProperty("FeeAmount")
    public Optional<Double> getFeeAmount() {
        return feeAmount;
    }

    /**
     * @return Settlement status for transaction. See <a href="/developers/references/money-in-statuses#payment-funding-status">the docs</a> for a full reference.
     */
    @JsonProperty("SettlementStatus")
    public Optional<Integer> getSettlementStatus() {
        return settlementStatus;
    }

    /**
     * @return The transaction's operation
     */
    @JsonProperty("Operation")
    public Optional<String> getOperation() {
        return operation;
    }

    /**
     * @return Details about the transaction response
     */
    @JsonProperty("ResponseData")
    public Optional<QueryResponseData> getResponseData() {
        return responseData;
    }

    /**
     * @return Custom identifier to indicate the transaction or request source
     */
    @JsonProperty("Source")
    public Optional<String> getSource() {
        return source;
    }

    /**
     * @return Reference to the subscription or schedule that originated the transaction
     */
    @JsonProperty("ScheduleReference")
    public Optional<Integer> getScheduleReference() {
        return scheduleReference;
    }

    /**
     * @return ID of immediate parent organization
     */
    @JsonProperty("OrgId")
    public Optional<Long> getOrgId() {
        return orgId;
    }

    /**
     * @return Identifier of refund transaction linked to this payment
     */
    @JsonProperty("RefundId")
    public Optional<Long> getRefundId() {
        return refundId;
    }

    /**
     * @return Identifier of return/chargeback transaction linked to this payment
     */
    @JsonProperty("ReturnedId")
    public Optional<Long> getReturnedId() {
        return returnedId;
    }

    /**
     * @return Identifier of chargeback transaction
     */
    @JsonProperty("ChargebackId")
    public Optional<Long> getChargebackId() {
        return chargebackId;
    }

    /**
     * @return Identifier of retrieval request
     */
    @JsonProperty("RetrievalId")
    public Optional<Long> getRetrievalId() {
        return retrievalId;
    }

    /**
     * @return Additional transaction data
     */
    @JsonProperty("TransAdditionalData")
    public Optional<Object> getTransAdditionalData() {
        return transAdditionalData;
    }

    /**
     * @return Associated invoice data
     */
    @JsonProperty("invoiceData")
    public Optional<BillData> getInvoiceData() {
        return invoiceData;
    }

    /**
     * @return Internal reference ID to the payment page capturing the payment
     */
    @JsonProperty("EntrypageId")
    public Optional<Long> getEntrypageId() {
        return entrypageId;
    }

    /**
     * @return A custom identifier for the paypoint
     */
    @JsonProperty("externalPaypointID")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    /**
     * @return Transaction date and time, in UTC
     */
    @JsonProperty("TransactionTime")
    public Optional<OffsetDateTime> getTransactionTime() {
        return transactionTime;
    }

    /**
     * @return Customer information associated with the transaction
     */
    @JsonProperty("Customer")
    public Optional<QueryTransactionPayorData> getCustomer() {
        return customer;
    }

    /**
     * @return Split funding instructions for the transaction
     */
    @JsonProperty("splitFundingInstructions")
    public Optional<List<SplitFundingContent>> getSplitFundingInstructions() {
        return splitFundingInstructions;
    }

    /**
     * @return Service Fee or sub-charge transactions associated to the main transaction
     */
    @JsonProperty("CfeeTransactions")
    public Optional<List<QueryCFeeTransaction>> getCfeeTransactions() {
        return cfeeTransactions;
    }

    /**
     * @return Events associated with this transaction
     */
    @JsonProperty("TransactionEvents")
    public Optional<List<QueryTransactionEvents>> getTransactionEvents() {
        return transactionEvents;
    }

    /**
     * @return Pending fee amount for the transaction
     */
    @JsonProperty("PendingFeeAmount")
    public Optional<Double> getPendingFeeAmount() {
        return pendingFeeAmount;
    }

    /**
     * @return Indicates if the transaction was flagged for risk
     */
    @JsonProperty("RiskFlagged")
    public Optional<Boolean> getRiskFlagged() {
        return riskFlagged;
    }

    /**
     * @return Timestamp when the transaction was flagged for risk
     */
    @JsonProperty("RiskFlaggedOn")
    public Optional<OffsetDateTime> getRiskFlaggedOn() {
        return riskFlaggedOn;
    }

    /**
     * @return Current risk status of the transaction
     */
    @JsonProperty("RiskStatus")
    public Optional<String> getRiskStatus() {
        return riskStatus;
    }

    /**
     * @return Reason for risk flagging
     */
    @JsonProperty("RiskReason")
    public Optional<String> getRiskReason() {
        return riskReason;
    }

    /**
     * @return Action taken due to risk assessment
     */
    @JsonProperty("RiskAction")
    public Optional<String> getRiskAction() {
        return riskAction;
    }

    /**
     * @return Numeric code representing the risk action
     */
    @JsonProperty("RiskActionCode")
    public Optional<Integer> getRiskActionCode() {
        return riskActionCode;
    }

    /**
     * @return Identifier of registered cloud device used in the transaction
     */
    @JsonProperty("DeviceId")
    public Optional<String> getDeviceId() {
        return deviceId;
    }

    /**
     * @return Standard Entry Class (SEC) code for ACH transactions
     */
    @JsonProperty("AchSecCode")
    public Optional<String> getAchSecCode() {
        return achSecCode;
    }

    /**
     * @return Type of ACH account holder (personal or business)
     */
    @JsonProperty("AchHolderType")
    public Optional<AchHolderType> getAchHolderType() {
        return achHolderType;
    }

    /**
     * @return IP address of the transaction source
     */
    @JsonProperty("IPAddress")
    public Optional<String> getIpAddress() {
        return ipAddress;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransferDetailRecord && equalTo((TransferDetailRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransferDetailRecord other) {
        return transferDetailId == other.transferDetailId
                && transferId == other.transferId
                && transactionId.equals(other.transactionId)
                && transactionNumber.equals(other.transactionNumber)
                && paypointId == other.paypointId
                && type.equals(other.type)
                && category.equals(other.category)
                && grossAmount == other.grossAmount
                && chargeBackAmount == other.chargeBackAmount
                && returnedAmount == other.returnedAmount
                && refundAmount == other.refundAmount
                && holdAmount == other.holdAmount
                && releasedAmount == other.releasedAmount
                && billingFeesAmount == other.billingFeesAmount
                && thirdPartyPaidAmount == other.thirdPartyPaidAmount
                && adjustmentsAmount == other.adjustmentsAmount
                && netTransferAmount == other.netTransferAmount
                && splitFundingAmount == other.splitFundingAmount
                && billingFeesDetails.equals(other.billingFeesDetails)
                && parentOrgName.equals(other.parentOrgName)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointLegalname.equals(other.paypointLegalname)
                && paypointEntryname.equals(other.paypointEntryname)
                && paymentTransId.equals(other.paymentTransId)
                && connectorName.equals(other.connectorName)
                && externalProcessorInformation.equals(other.externalProcessorInformation)
                && gatewayTransId.equals(other.gatewayTransId)
                && orderId.equals(other.orderId)
                && method.equals(other.method)
                && batchNumber.equals(other.batchNumber)
                && batchAmount.equals(other.batchAmount)
                && payorId.equals(other.payorId)
                && paymentData.equals(other.paymentData)
                && transStatus.equals(other.transStatus)
                && totalAmount.equals(other.totalAmount)
                && netAmount.equals(other.netAmount)
                && feeAmount.equals(other.feeAmount)
                && settlementStatus.equals(other.settlementStatus)
                && operation.equals(other.operation)
                && responseData.equals(other.responseData)
                && source.equals(other.source)
                && scheduleReference.equals(other.scheduleReference)
                && orgId.equals(other.orgId)
                && refundId.equals(other.refundId)
                && returnedId.equals(other.returnedId)
                && chargebackId.equals(other.chargebackId)
                && retrievalId.equals(other.retrievalId)
                && transAdditionalData.equals(other.transAdditionalData)
                && invoiceData.equals(other.invoiceData)
                && entrypageId.equals(other.entrypageId)
                && externalPaypointId.equals(other.externalPaypointId)
                && transactionTime.equals(other.transactionTime)
                && customer.equals(other.customer)
                && splitFundingInstructions.equals(other.splitFundingInstructions)
                && cfeeTransactions.equals(other.cfeeTransactions)
                && transactionEvents.equals(other.transactionEvents)
                && pendingFeeAmount.equals(other.pendingFeeAmount)
                && riskFlagged.equals(other.riskFlagged)
                && riskFlaggedOn.equals(other.riskFlaggedOn)
                && riskStatus.equals(other.riskStatus)
                && riskReason.equals(other.riskReason)
                && riskAction.equals(other.riskAction)
                && riskActionCode.equals(other.riskActionCode)
                && deviceId.equals(other.deviceId)
                && achSecCode.equals(other.achSecCode)
                && achHolderType.equals(other.achHolderType)
                && ipAddress.equals(other.ipAddress);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.transferDetailId,
                this.transferId,
                this.transactionId,
                this.transactionNumber,
                this.paypointId,
                this.type,
                this.category,
                this.grossAmount,
                this.chargeBackAmount,
                this.returnedAmount,
                this.refundAmount,
                this.holdAmount,
                this.releasedAmount,
                this.billingFeesAmount,
                this.thirdPartyPaidAmount,
                this.adjustmentsAmount,
                this.netTransferAmount,
                this.splitFundingAmount,
                this.billingFeesDetails,
                this.parentOrgName,
                this.paypointDbaname,
                this.paypointLegalname,
                this.paypointEntryname,
                this.paymentTransId,
                this.connectorName,
                this.externalProcessorInformation,
                this.gatewayTransId,
                this.orderId,
                this.method,
                this.batchNumber,
                this.batchAmount,
                this.payorId,
                this.paymentData,
                this.transStatus,
                this.totalAmount,
                this.netAmount,
                this.feeAmount,
                this.settlementStatus,
                this.operation,
                this.responseData,
                this.source,
                this.scheduleReference,
                this.orgId,
                this.refundId,
                this.returnedId,
                this.chargebackId,
                this.retrievalId,
                this.transAdditionalData,
                this.invoiceData,
                this.entrypageId,
                this.externalPaypointId,
                this.transactionTime,
                this.customer,
                this.splitFundingInstructions,
                this.cfeeTransactions,
                this.transactionEvents,
                this.pendingFeeAmount,
                this.riskFlagged,
                this.riskFlaggedOn,
                this.riskStatus,
                this.riskReason,
                this.riskAction,
                this.riskActionCode,
                this.deviceId,
                this.achSecCode,
                this.achHolderType,
                this.ipAddress);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TransferDetailIdStage builder() {
        return new Builder();
    }

    public interface TransferDetailIdStage {
        /**
         * <p>Unique identifier for the transfer detail record</p>
         */
        TransferIdStage transferDetailId(int transferDetailId);

        Builder from(TransferDetailRecord other);
    }

    public interface TransferIdStage {
        /**
         * <p>The ID of the transfer this detail belongs to</p>
         */
        TransactionIdStage transferId(int transferId);
    }

    public interface TransactionIdStage {
        /**
         * <p>The transaction ID in Payabli's system</p>
         */
        PaypointIdStage transactionId(@NotNull String transactionId);
    }

    public interface PaypointIdStage {
        /**
         * <p>The ID of the paypoint this transaction belongs to</p>
         */
        TypeStage paypointId(long paypointId);
    }

    public interface TypeStage {
        /**
         * <p>The transaction type (credit or debit)</p>
         */
        GrossAmountStage type(@NotNull String type);
    }

    public interface GrossAmountStage {
        /**
         * <p>The gross amount of the transaction</p>
         */
        ChargeBackAmountStage grossAmount(double grossAmount);
    }

    public interface ChargeBackAmountStage {
        /**
         * <p>Chargeback amount deducted from transaction</p>
         */
        ReturnedAmountStage chargeBackAmount(double chargeBackAmount);
    }

    public interface ReturnedAmountStage {
        /**
         * <p>ACH return amount deducted from transaction</p>
         */
        RefundAmountStage returnedAmount(double returnedAmount);
    }

    public interface RefundAmountStage {
        /**
         * <p>Refund amount deducted from transaction</p>
         */
        HoldAmountStage refundAmount(double refundAmount);
    }

    public interface HoldAmountStage {
        /**
         * <p>Amount being held for fraud or risk concerns</p>
         */
        ReleasedAmountStage holdAmount(double holdAmount);
    }

    public interface ReleasedAmountStage {
        /**
         * <p>Previously held funds that have been released after a risk review</p>
         */
        BillingFeesAmountStage releasedAmount(double releasedAmount);
    }

    public interface BillingFeesAmountStage {
        /**
         * <p>Charges applied for transactions and services</p>
         */
        ThirdPartyPaidAmountStage billingFeesAmount(double billingFeesAmount);
    }

    public interface ThirdPartyPaidAmountStage {
        /**
         * <p>Payments captured in the batch cycle that are deposited separately. For example,  checks or cash payments recorded in the batch but not deposited via Payabli,  or card brands making a direct transfer in certain situations.</p>
         */
        AdjustmentsAmountStage thirdPartyPaidAmount(double thirdPartyPaidAmount);
    }

    public interface AdjustmentsAmountStage {
        /**
         * <p>Corrections applied to Billing &amp; Fees charges</p>
         */
        NetTransferAmountStage adjustmentsAmount(double adjustmentsAmount);
    }

    public interface NetTransferAmountStage {
        /**
         * <p>The net amount after all deductions</p>
         */
        SplitFundingAmountStage netTransferAmount(double netTransferAmount);
    }

    public interface SplitFundingAmountStage {
        /**
         * <p>Total amount directed to split funding destinations</p>
         */
        _FinalStage splitFundingAmount(double splitFundingAmount);
    }

    public interface _FinalStage {
        TransferDetailRecord build();

        /**
         * <p>External transaction reference number</p>
         */
        _FinalStage transactionNumber(Optional<String> transactionNumber);

        _FinalStage transactionNumber(String transactionNumber);

        /**
         * <p>A field used to categorize the transaction details. Values include: auth, decline, refund, adj, cb, split</p>
         */
        _FinalStage category(Optional<String> category);

        _FinalStage category(String category);

        /**
         * <p>Detailed breakdown of billing fees applied to the transaction</p>
         */
        _FinalStage billingFeesDetails(Optional<List<BillingFeeDetail>> billingFeesDetails);

        _FinalStage billingFeesDetails(List<BillingFeeDetail> billingFeesDetails);

        /**
         * <p>The name of the parent organization</p>
         */
        _FinalStage parentOrgName(Optional<String> parentOrgName);

        _FinalStage parentOrgName(String parentOrgName);

        /**
         * <p>The paypoint's DBA name</p>
         */
        _FinalStage paypointDbaname(Optional<String> paypointDbaname);

        _FinalStage paypointDbaname(String paypointDbaname);

        /**
         * <p>The paypoint's legal name</p>
         */
        _FinalStage paypointLegalname(Optional<String> paypointLegalname);

        _FinalStage paypointLegalname(String paypointLegalname);

        /**
         * <p>The paypoint's entryname</p>
         */
        _FinalStage paypointEntryname(Optional<String> paypointEntryname);

        _FinalStage paypointEntryname(String paypointEntryname);

        /**
         * <p>The transaction ID for the payment</p>
         */
        _FinalStage paymentTransId(Optional<String> paymentTransId);

        _FinalStage paymentTransId(String paymentTransId);

        /**
         * <p>The payment connector used to process the transaction</p>
         */
        _FinalStage connectorName(Optional<String> connectorName);

        _FinalStage connectorName(String connectorName);

        /**
         * <p>Processor information, used for troubleshooting and reporting. This field contains a value when the API key used to make the request has management permissions.</p>
         */
        _FinalStage externalProcessorInformation(Optional<String> externalProcessorInformation);

        _FinalStage externalProcessorInformation(String externalProcessorInformation);

        /**
         * <p>Internal identifier used for processing</p>
         */
        _FinalStage gatewayTransId(Optional<String> gatewayTransId);

        _FinalStage gatewayTransId(String gatewayTransId);

        /**
         * <p>Custom identifier for the transaction</p>
         */
        _FinalStage orderId(Optional<String> orderId);

        _FinalStage orderId(String orderId);

        /**
         * <p>Payment method used: card, ach, or wallet</p>
         */
        _FinalStage method(Optional<String> method);

        _FinalStage method(String method);

        /**
         * <p>The batch number the transaction was included in</p>
         */
        _FinalStage batchNumber(Optional<String> batchNumber);

        _FinalStage batchNumber(String batchNumber);

        /**
         * <p>The amount of the batch</p>
         */
        _FinalStage batchAmount(Optional<Double> batchAmount);

        _FinalStage batchAmount(Double batchAmount);

        /**
         * <p>Unique ID for customer linked to the transaction</p>
         */
        _FinalStage payorId(Optional<Long> payorId);

        _FinalStage payorId(Long payorId);

        /**
         * <p>Details about the payment method and transaction</p>
         */
        _FinalStage paymentData(Optional<QueryPaymentData> paymentData);

        _FinalStage paymentData(QueryPaymentData paymentData);

        /**
         * <p>Status of transaction. See <a href="/developers/references/money-in-statuses#money-in-transaction-status">the docs</a> for a full reference.</p>
         */
        _FinalStage transStatus(Optional<Integer> transStatus);

        _FinalStage transStatus(Integer transStatus);

        /**
         * <p>Transaction total amount (including service fee or sub-charge)</p>
         */
        _FinalStage totalAmount(Optional<Double> totalAmount);

        _FinalStage totalAmount(Double totalAmount);

        /**
         * <p>Net amount paid</p>
         */
        _FinalStage netAmount(Optional<Double> netAmount);

        _FinalStage netAmount(Double netAmount);

        /**
         * <p>Service fee or sub-charge applied</p>
         */
        _FinalStage feeAmount(Optional<Double> feeAmount);

        _FinalStage feeAmount(Double feeAmount);

        /**
         * <p>Settlement status for transaction. See <a href="/developers/references/money-in-statuses#payment-funding-status">the docs</a> for a full reference.</p>
         */
        _FinalStage settlementStatus(Optional<Integer> settlementStatus);

        _FinalStage settlementStatus(Integer settlementStatus);

        /**
         * <p>The transaction's operation</p>
         */
        _FinalStage operation(Optional<String> operation);

        _FinalStage operation(String operation);

        /**
         * <p>Details about the transaction response</p>
         */
        _FinalStage responseData(Optional<QueryResponseData> responseData);

        _FinalStage responseData(QueryResponseData responseData);

        /**
         * <p>Custom identifier to indicate the transaction or request source</p>
         */
        _FinalStage source(Optional<String> source);

        _FinalStage source(String source);

        /**
         * <p>Reference to the subscription or schedule that originated the transaction</p>
         */
        _FinalStage scheduleReference(Optional<Integer> scheduleReference);

        _FinalStage scheduleReference(Integer scheduleReference);

        /**
         * <p>ID of immediate parent organization</p>
         */
        _FinalStage orgId(Optional<Long> orgId);

        _FinalStage orgId(Long orgId);

        /**
         * <p>Identifier of refund transaction linked to this payment</p>
         */
        _FinalStage refundId(Optional<Long> refundId);

        _FinalStage refundId(Long refundId);

        /**
         * <p>Identifier of return/chargeback transaction linked to this payment</p>
         */
        _FinalStage returnedId(Optional<Long> returnedId);

        _FinalStage returnedId(Long returnedId);

        /**
         * <p>Identifier of chargeback transaction</p>
         */
        _FinalStage chargebackId(Optional<Long> chargebackId);

        _FinalStage chargebackId(Long chargebackId);

        /**
         * <p>Identifier of retrieval request</p>
         */
        _FinalStage retrievalId(Optional<Long> retrievalId);

        _FinalStage retrievalId(Long retrievalId);

        /**
         * <p>Additional transaction data</p>
         */
        _FinalStage transAdditionalData(Optional<Object> transAdditionalData);

        _FinalStage transAdditionalData(Object transAdditionalData);

        /**
         * <p>Associated invoice data</p>
         */
        _FinalStage invoiceData(Optional<BillData> invoiceData);

        _FinalStage invoiceData(BillData invoiceData);

        /**
         * <p>Internal reference ID to the payment page capturing the payment</p>
         */
        _FinalStage entrypageId(Optional<Long> entrypageId);

        _FinalStage entrypageId(Long entrypageId);

        /**
         * <p>A custom identifier for the paypoint</p>
         */
        _FinalStage externalPaypointId(Optional<String> externalPaypointId);

        _FinalStage externalPaypointId(String externalPaypointId);

        /**
         * <p>Transaction date and time, in UTC</p>
         */
        _FinalStage transactionTime(Optional<OffsetDateTime> transactionTime);

        _FinalStage transactionTime(OffsetDateTime transactionTime);

        /**
         * <p>Customer information associated with the transaction</p>
         */
        _FinalStage customer(Optional<QueryTransactionPayorData> customer);

        _FinalStage customer(QueryTransactionPayorData customer);

        /**
         * <p>Split funding instructions for the transaction</p>
         */
        _FinalStage splitFundingInstructions(Optional<List<SplitFundingContent>> splitFundingInstructions);

        _FinalStage splitFundingInstructions(List<SplitFundingContent> splitFundingInstructions);

        /**
         * <p>Service Fee or sub-charge transactions associated to the main transaction</p>
         */
        _FinalStage cfeeTransactions(Optional<List<QueryCFeeTransaction>> cfeeTransactions);

        _FinalStage cfeeTransactions(List<QueryCFeeTransaction> cfeeTransactions);

        /**
         * <p>Events associated with this transaction</p>
         */
        _FinalStage transactionEvents(Optional<List<QueryTransactionEvents>> transactionEvents);

        _FinalStage transactionEvents(List<QueryTransactionEvents> transactionEvents);

        /**
         * <p>Pending fee amount for the transaction</p>
         */
        _FinalStage pendingFeeAmount(Optional<Double> pendingFeeAmount);

        _FinalStage pendingFeeAmount(Double pendingFeeAmount);

        /**
         * <p>Indicates if the transaction was flagged for risk</p>
         */
        _FinalStage riskFlagged(Optional<Boolean> riskFlagged);

        _FinalStage riskFlagged(Boolean riskFlagged);

        /**
         * <p>Timestamp when the transaction was flagged for risk</p>
         */
        _FinalStage riskFlaggedOn(Optional<OffsetDateTime> riskFlaggedOn);

        _FinalStage riskFlaggedOn(OffsetDateTime riskFlaggedOn);

        /**
         * <p>Current risk status of the transaction</p>
         */
        _FinalStage riskStatus(Optional<String> riskStatus);

        _FinalStage riskStatus(String riskStatus);

        /**
         * <p>Reason for risk flagging</p>
         */
        _FinalStage riskReason(Optional<String> riskReason);

        _FinalStage riskReason(String riskReason);

        /**
         * <p>Action taken due to risk assessment</p>
         */
        _FinalStage riskAction(Optional<String> riskAction);

        _FinalStage riskAction(String riskAction);

        /**
         * <p>Numeric code representing the risk action</p>
         */
        _FinalStage riskActionCode(Optional<Integer> riskActionCode);

        _FinalStage riskActionCode(Integer riskActionCode);

        /**
         * <p>Identifier of registered cloud device used in the transaction</p>
         */
        _FinalStage deviceId(Optional<String> deviceId);

        _FinalStage deviceId(String deviceId);

        /**
         * <p>Standard Entry Class (SEC) code for ACH transactions</p>
         */
        _FinalStage achSecCode(Optional<String> achSecCode);

        _FinalStage achSecCode(String achSecCode);

        /**
         * <p>Type of ACH account holder (personal or business)</p>
         */
        _FinalStage achHolderType(Optional<AchHolderType> achHolderType);

        _FinalStage achHolderType(AchHolderType achHolderType);

        /**
         * <p>IP address of the transaction source</p>
         */
        _FinalStage ipAddress(Optional<String> ipAddress);

        _FinalStage ipAddress(String ipAddress);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements TransferDetailIdStage,
                    TransferIdStage,
                    TransactionIdStage,
                    PaypointIdStage,
                    TypeStage,
                    GrossAmountStage,
                    ChargeBackAmountStage,
                    ReturnedAmountStage,
                    RefundAmountStage,
                    HoldAmountStage,
                    ReleasedAmountStage,
                    BillingFeesAmountStage,
                    ThirdPartyPaidAmountStage,
                    AdjustmentsAmountStage,
                    NetTransferAmountStage,
                    SplitFundingAmountStage,
                    _FinalStage {
        private int transferDetailId;

        private int transferId;

        private String transactionId;

        private long paypointId;

        private String type;

        private double grossAmount;

        private double chargeBackAmount;

        private double returnedAmount;

        private double refundAmount;

        private double holdAmount;

        private double releasedAmount;

        private double billingFeesAmount;

        private double thirdPartyPaidAmount;

        private double adjustmentsAmount;

        private double netTransferAmount;

        private double splitFundingAmount;

        private Optional<String> ipAddress = Optional.empty();

        private Optional<AchHolderType> achHolderType = Optional.empty();

        private Optional<String> achSecCode = Optional.empty();

        private Optional<String> deviceId = Optional.empty();

        private Optional<Integer> riskActionCode = Optional.empty();

        private Optional<String> riskAction = Optional.empty();

        private Optional<String> riskReason = Optional.empty();

        private Optional<String> riskStatus = Optional.empty();

        private Optional<OffsetDateTime> riskFlaggedOn = Optional.empty();

        private Optional<Boolean> riskFlagged = Optional.empty();

        private Optional<Double> pendingFeeAmount = Optional.empty();

        private Optional<List<QueryTransactionEvents>> transactionEvents = Optional.empty();

        private Optional<List<QueryCFeeTransaction>> cfeeTransactions = Optional.empty();

        private Optional<List<SplitFundingContent>> splitFundingInstructions = Optional.empty();

        private Optional<QueryTransactionPayorData> customer = Optional.empty();

        private Optional<OffsetDateTime> transactionTime = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<Long> entrypageId = Optional.empty();

        private Optional<BillData> invoiceData = Optional.empty();

        private Optional<Object> transAdditionalData = Optional.empty();

        private Optional<Long> retrievalId = Optional.empty();

        private Optional<Long> chargebackId = Optional.empty();

        private Optional<Long> returnedId = Optional.empty();

        private Optional<Long> refundId = Optional.empty();

        private Optional<Long> orgId = Optional.empty();

        private Optional<Integer> scheduleReference = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<QueryResponseData> responseData = Optional.empty();

        private Optional<String> operation = Optional.empty();

        private Optional<Integer> settlementStatus = Optional.empty();

        private Optional<Double> feeAmount = Optional.empty();

        private Optional<Double> netAmount = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<Integer> transStatus = Optional.empty();

        private Optional<QueryPaymentData> paymentData = Optional.empty();

        private Optional<Long> payorId = Optional.empty();

        private Optional<Double> batchAmount = Optional.empty();

        private Optional<String> batchNumber = Optional.empty();

        private Optional<String> method = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<String> gatewayTransId = Optional.empty();

        private Optional<String> externalProcessorInformation = Optional.empty();

        private Optional<String> connectorName = Optional.empty();

        private Optional<String> paymentTransId = Optional.empty();

        private Optional<String> paypointEntryname = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<List<BillingFeeDetail>> billingFeesDetails = Optional.empty();

        private Optional<String> category = Optional.empty();

        private Optional<String> transactionNumber = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TransferDetailRecord other) {
            transferDetailId(other.getTransferDetailId());
            transferId(other.getTransferId());
            transactionId(other.getTransactionId());
            transactionNumber(other.getTransactionNumber());
            paypointId(other.getPaypointId());
            type(other.getType());
            category(other.getCategory());
            grossAmount(other.getGrossAmount());
            chargeBackAmount(other.getChargeBackAmount());
            returnedAmount(other.getReturnedAmount());
            refundAmount(other.getRefundAmount());
            holdAmount(other.getHoldAmount());
            releasedAmount(other.getReleasedAmount());
            billingFeesAmount(other.getBillingFeesAmount());
            thirdPartyPaidAmount(other.getThirdPartyPaidAmount());
            adjustmentsAmount(other.getAdjustmentsAmount());
            netTransferAmount(other.getNetTransferAmount());
            splitFundingAmount(other.getSplitFundingAmount());
            billingFeesDetails(other.getBillingFeesDetails());
            parentOrgName(other.getParentOrgName());
            paypointDbaname(other.getPaypointDbaname());
            paypointLegalname(other.getPaypointLegalname());
            paypointEntryname(other.getPaypointEntryname());
            paymentTransId(other.getPaymentTransId());
            connectorName(other.getConnectorName());
            externalProcessorInformation(other.getExternalProcessorInformation());
            gatewayTransId(other.getGatewayTransId());
            orderId(other.getOrderId());
            method(other.getMethod());
            batchNumber(other.getBatchNumber());
            batchAmount(other.getBatchAmount());
            payorId(other.getPayorId());
            paymentData(other.getPaymentData());
            transStatus(other.getTransStatus());
            totalAmount(other.getTotalAmount());
            netAmount(other.getNetAmount());
            feeAmount(other.getFeeAmount());
            settlementStatus(other.getSettlementStatus());
            operation(other.getOperation());
            responseData(other.getResponseData());
            source(other.getSource());
            scheduleReference(other.getScheduleReference());
            orgId(other.getOrgId());
            refundId(other.getRefundId());
            returnedId(other.getReturnedId());
            chargebackId(other.getChargebackId());
            retrievalId(other.getRetrievalId());
            transAdditionalData(other.getTransAdditionalData());
            invoiceData(other.getInvoiceData());
            entrypageId(other.getEntrypageId());
            externalPaypointId(other.getExternalPaypointId());
            transactionTime(other.getTransactionTime());
            customer(other.getCustomer());
            splitFundingInstructions(other.getSplitFundingInstructions());
            cfeeTransactions(other.getCfeeTransactions());
            transactionEvents(other.getTransactionEvents());
            pendingFeeAmount(other.getPendingFeeAmount());
            riskFlagged(other.getRiskFlagged());
            riskFlaggedOn(other.getRiskFlaggedOn());
            riskStatus(other.getRiskStatus());
            riskReason(other.getRiskReason());
            riskAction(other.getRiskAction());
            riskActionCode(other.getRiskActionCode());
            deviceId(other.getDeviceId());
            achSecCode(other.getAchSecCode());
            achHolderType(other.getAchHolderType());
            ipAddress(other.getIpAddress());
            return this;
        }

        /**
         * <p>Unique identifier for the transfer detail record</p>
         * <p>Unique identifier for the transfer detail record</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("transferDetailId")
        public TransferIdStage transferDetailId(int transferDetailId) {
            this.transferDetailId = transferDetailId;
            return this;
        }

        /**
         * <p>The ID of the transfer this detail belongs to</p>
         * <p>The ID of the transfer this detail belongs to</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("transferId")
        public TransactionIdStage transferId(int transferId) {
            this.transferId = transferId;
            return this;
        }

        /**
         * <p>The transaction ID in Payabli's system</p>
         * <p>The transaction ID in Payabli's system</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("transactionId")
        public PaypointIdStage transactionId(@NotNull String transactionId) {
            this.transactionId = Objects.requireNonNull(transactionId, "transactionId must not be null");
            return this;
        }

        /**
         * <p>The ID of the paypoint this transaction belongs to</p>
         * <p>The ID of the paypoint this transaction belongs to</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("paypointId")
        public TypeStage paypointId(long paypointId) {
            this.paypointId = paypointId;
            return this;
        }

        /**
         * <p>The transaction type (credit or debit)</p>
         * <p>The transaction type (credit or debit)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("type")
        public GrossAmountStage type(@NotNull String type) {
            this.type = Objects.requireNonNull(type, "type must not be null");
            return this;
        }

        /**
         * <p>The gross amount of the transaction</p>
         * <p>The gross amount of the transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("grossAmount")
        public ChargeBackAmountStage grossAmount(double grossAmount) {
            this.grossAmount = grossAmount;
            return this;
        }

        /**
         * <p>Chargeback amount deducted from transaction</p>
         * <p>Chargeback amount deducted from transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("chargeBackAmount")
        public ReturnedAmountStage chargeBackAmount(double chargeBackAmount) {
            this.chargeBackAmount = chargeBackAmount;
            return this;
        }

        /**
         * <p>ACH return amount deducted from transaction</p>
         * <p>ACH return amount deducted from transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("returnedAmount")
        public RefundAmountStage returnedAmount(double returnedAmount) {
            this.returnedAmount = returnedAmount;
            return this;
        }

        /**
         * <p>Refund amount deducted from transaction</p>
         * <p>Refund amount deducted from transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("refundAmount")
        public HoldAmountStage refundAmount(double refundAmount) {
            this.refundAmount = refundAmount;
            return this;
        }

        /**
         * <p>Amount being held for fraud or risk concerns</p>
         * <p>Amount being held for fraud or risk concerns</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("holdAmount")
        public ReleasedAmountStage holdAmount(double holdAmount) {
            this.holdAmount = holdAmount;
            return this;
        }

        /**
         * <p>Previously held funds that have been released after a risk review</p>
         * <p>Previously held funds that have been released after a risk review</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("releasedAmount")
        public BillingFeesAmountStage releasedAmount(double releasedAmount) {
            this.releasedAmount = releasedAmount;
            return this;
        }

        /**
         * <p>Charges applied for transactions and services</p>
         * <p>Charges applied for transactions and services</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("billingFeesAmount")
        public ThirdPartyPaidAmountStage billingFeesAmount(double billingFeesAmount) {
            this.billingFeesAmount = billingFeesAmount;
            return this;
        }

        /**
         * <p>Payments captured in the batch cycle that are deposited separately. For example,  checks or cash payments recorded in the batch but not deposited via Payabli,  or card brands making a direct transfer in certain situations.</p>
         * <p>Payments captured in the batch cycle that are deposited separately. For example,  checks or cash payments recorded in the batch but not deposited via Payabli,  or card brands making a direct transfer in certain situations.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("thirdPartyPaidAmount")
        public AdjustmentsAmountStage thirdPartyPaidAmount(double thirdPartyPaidAmount) {
            this.thirdPartyPaidAmount = thirdPartyPaidAmount;
            return this;
        }

        /**
         * <p>Corrections applied to Billing &amp; Fees charges</p>
         * <p>Corrections applied to Billing &amp; Fees charges</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("adjustmentsAmount")
        public NetTransferAmountStage adjustmentsAmount(double adjustmentsAmount) {
            this.adjustmentsAmount = adjustmentsAmount;
            return this;
        }

        /**
         * <p>The net amount after all deductions</p>
         * <p>The net amount after all deductions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("netTransferAmount")
        public SplitFundingAmountStage netTransferAmount(double netTransferAmount) {
            this.netTransferAmount = netTransferAmount;
            return this;
        }

        /**
         * <p>Total amount directed to split funding destinations</p>
         * <p>Total amount directed to split funding destinations</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("splitFundingAmount")
        public _FinalStage splitFundingAmount(double splitFundingAmount) {
            this.splitFundingAmount = splitFundingAmount;
            return this;
        }

        /**
         * <p>IP address of the transaction source</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ipAddress(String ipAddress) {
            this.ipAddress = Optional.ofNullable(ipAddress);
            return this;
        }

        /**
         * <p>IP address of the transaction source</p>
         */
        @java.lang.Override
        @JsonSetter(value = "IPAddress", nulls = Nulls.SKIP)
        public _FinalStage ipAddress(Optional<String> ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }

        /**
         * <p>Type of ACH account holder (personal or business)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage achHolderType(AchHolderType achHolderType) {
            this.achHolderType = Optional.ofNullable(achHolderType);
            return this;
        }

        /**
         * <p>Type of ACH account holder (personal or business)</p>
         */
        @java.lang.Override
        @JsonSetter(value = "AchHolderType", nulls = Nulls.SKIP)
        public _FinalStage achHolderType(Optional<AchHolderType> achHolderType) {
            this.achHolderType = achHolderType;
            return this;
        }

        /**
         * <p>Standard Entry Class (SEC) code for ACH transactions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage achSecCode(String achSecCode) {
            this.achSecCode = Optional.ofNullable(achSecCode);
            return this;
        }

        /**
         * <p>Standard Entry Class (SEC) code for ACH transactions</p>
         */
        @java.lang.Override
        @JsonSetter(value = "AchSecCode", nulls = Nulls.SKIP)
        public _FinalStage achSecCode(Optional<String> achSecCode) {
            this.achSecCode = achSecCode;
            return this;
        }

        /**
         * <p>Identifier of registered cloud device used in the transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage deviceId(String deviceId) {
            this.deviceId = Optional.ofNullable(deviceId);
            return this;
        }

        /**
         * <p>Identifier of registered cloud device used in the transaction</p>
         */
        @java.lang.Override
        @JsonSetter(value = "DeviceId", nulls = Nulls.SKIP)
        public _FinalStage deviceId(Optional<String> deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        /**
         * <p>Numeric code representing the risk action</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage riskActionCode(Integer riskActionCode) {
            this.riskActionCode = Optional.ofNullable(riskActionCode);
            return this;
        }

        /**
         * <p>Numeric code representing the risk action</p>
         */
        @java.lang.Override
        @JsonSetter(value = "RiskActionCode", nulls = Nulls.SKIP)
        public _FinalStage riskActionCode(Optional<Integer> riskActionCode) {
            this.riskActionCode = riskActionCode;
            return this;
        }

        /**
         * <p>Action taken due to risk assessment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage riskAction(String riskAction) {
            this.riskAction = Optional.ofNullable(riskAction);
            return this;
        }

        /**
         * <p>Action taken due to risk assessment</p>
         */
        @java.lang.Override
        @JsonSetter(value = "RiskAction", nulls = Nulls.SKIP)
        public _FinalStage riskAction(Optional<String> riskAction) {
            this.riskAction = riskAction;
            return this;
        }

        /**
         * <p>Reason for risk flagging</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage riskReason(String riskReason) {
            this.riskReason = Optional.ofNullable(riskReason);
            return this;
        }

        /**
         * <p>Reason for risk flagging</p>
         */
        @java.lang.Override
        @JsonSetter(value = "RiskReason", nulls = Nulls.SKIP)
        public _FinalStage riskReason(Optional<String> riskReason) {
            this.riskReason = riskReason;
            return this;
        }

        /**
         * <p>Current risk status of the transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage riskStatus(String riskStatus) {
            this.riskStatus = Optional.ofNullable(riskStatus);
            return this;
        }

        /**
         * <p>Current risk status of the transaction</p>
         */
        @java.lang.Override
        @JsonSetter(value = "RiskStatus", nulls = Nulls.SKIP)
        public _FinalStage riskStatus(Optional<String> riskStatus) {
            this.riskStatus = riskStatus;
            return this;
        }

        /**
         * <p>Timestamp when the transaction was flagged for risk</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage riskFlaggedOn(OffsetDateTime riskFlaggedOn) {
            this.riskFlaggedOn = Optional.ofNullable(riskFlaggedOn);
            return this;
        }

        /**
         * <p>Timestamp when the transaction was flagged for risk</p>
         */
        @java.lang.Override
        @JsonSetter(value = "RiskFlaggedOn", nulls = Nulls.SKIP)
        public _FinalStage riskFlaggedOn(Optional<OffsetDateTime> riskFlaggedOn) {
            this.riskFlaggedOn = riskFlaggedOn;
            return this;
        }

        /**
         * <p>Indicates if the transaction was flagged for risk</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage riskFlagged(Boolean riskFlagged) {
            this.riskFlagged = Optional.ofNullable(riskFlagged);
            return this;
        }

        /**
         * <p>Indicates if the transaction was flagged for risk</p>
         */
        @java.lang.Override
        @JsonSetter(value = "RiskFlagged", nulls = Nulls.SKIP)
        public _FinalStage riskFlagged(Optional<Boolean> riskFlagged) {
            this.riskFlagged = riskFlagged;
            return this;
        }

        /**
         * <p>Pending fee amount for the transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage pendingFeeAmount(Double pendingFeeAmount) {
            this.pendingFeeAmount = Optional.ofNullable(pendingFeeAmount);
            return this;
        }

        /**
         * <p>Pending fee amount for the transaction</p>
         */
        @java.lang.Override
        @JsonSetter(value = "PendingFeeAmount", nulls = Nulls.SKIP)
        public _FinalStage pendingFeeAmount(Optional<Double> pendingFeeAmount) {
            this.pendingFeeAmount = pendingFeeAmount;
            return this;
        }

        /**
         * <p>Events associated with this transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transactionEvents(List<QueryTransactionEvents> transactionEvents) {
            this.transactionEvents = Optional.ofNullable(transactionEvents);
            return this;
        }

        /**
         * <p>Events associated with this transaction</p>
         */
        @java.lang.Override
        @JsonSetter(value = "TransactionEvents", nulls = Nulls.SKIP)
        public _FinalStage transactionEvents(Optional<List<QueryTransactionEvents>> transactionEvents) {
            this.transactionEvents = transactionEvents;
            return this;
        }

        /**
         * <p>Service Fee or sub-charge transactions associated to the main transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cfeeTransactions(List<QueryCFeeTransaction> cfeeTransactions) {
            this.cfeeTransactions = Optional.ofNullable(cfeeTransactions);
            return this;
        }

        /**
         * <p>Service Fee or sub-charge transactions associated to the main transaction</p>
         */
        @java.lang.Override
        @JsonSetter(value = "CfeeTransactions", nulls = Nulls.SKIP)
        public _FinalStage cfeeTransactions(Optional<List<QueryCFeeTransaction>> cfeeTransactions) {
            this.cfeeTransactions = cfeeTransactions;
            return this;
        }

        /**
         * <p>Split funding instructions for the transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage splitFundingInstructions(List<SplitFundingContent> splitFundingInstructions) {
            this.splitFundingInstructions = Optional.ofNullable(splitFundingInstructions);
            return this;
        }

        /**
         * <p>Split funding instructions for the transaction</p>
         */
        @java.lang.Override
        @JsonSetter(value = "splitFundingInstructions", nulls = Nulls.SKIP)
        public _FinalStage splitFundingInstructions(Optional<List<SplitFundingContent>> splitFundingInstructions) {
            this.splitFundingInstructions = splitFundingInstructions;
            return this;
        }

        /**
         * <p>Customer information associated with the transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customer(QueryTransactionPayorData customer) {
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        /**
         * <p>Customer information associated with the transaction</p>
         */
        @java.lang.Override
        @JsonSetter(value = "Customer", nulls = Nulls.SKIP)
        public _FinalStage customer(Optional<QueryTransactionPayorData> customer) {
            this.customer = customer;
            return this;
        }

        /**
         * <p>Transaction date and time, in UTC</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transactionTime(OffsetDateTime transactionTime) {
            this.transactionTime = Optional.ofNullable(transactionTime);
            return this;
        }

        /**
         * <p>Transaction date and time, in UTC</p>
         */
        @java.lang.Override
        @JsonSetter(value = "TransactionTime", nulls = Nulls.SKIP)
        public _FinalStage transactionTime(Optional<OffsetDateTime> transactionTime) {
            this.transactionTime = transactionTime;
            return this;
        }

        /**
         * <p>A custom identifier for the paypoint</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        /**
         * <p>A custom identifier for the paypoint</p>
         */
        @java.lang.Override
        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public _FinalStage externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        /**
         * <p>Internal reference ID to the payment page capturing the payment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage entrypageId(Long entrypageId) {
            this.entrypageId = Optional.ofNullable(entrypageId);
            return this;
        }

        /**
         * <p>Internal reference ID to the payment page capturing the payment</p>
         */
        @java.lang.Override
        @JsonSetter(value = "EntrypageId", nulls = Nulls.SKIP)
        public _FinalStage entrypageId(Optional<Long> entrypageId) {
            this.entrypageId = entrypageId;
            return this;
        }

        /**
         * <p>Associated invoice data</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage invoiceData(BillData invoiceData) {
            this.invoiceData = Optional.ofNullable(invoiceData);
            return this;
        }

        /**
         * <p>Associated invoice data</p>
         */
        @java.lang.Override
        @JsonSetter(value = "invoiceData", nulls = Nulls.SKIP)
        public _FinalStage invoiceData(Optional<BillData> invoiceData) {
            this.invoiceData = invoiceData;
            return this;
        }

        /**
         * <p>Additional transaction data</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transAdditionalData(Object transAdditionalData) {
            this.transAdditionalData = Optional.ofNullable(transAdditionalData);
            return this;
        }

        /**
         * <p>Additional transaction data</p>
         */
        @java.lang.Override
        @JsonSetter(value = "TransAdditionalData", nulls = Nulls.SKIP)
        public _FinalStage transAdditionalData(Optional<Object> transAdditionalData) {
            this.transAdditionalData = transAdditionalData;
            return this;
        }

        /**
         * <p>Identifier of retrieval request</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage retrievalId(Long retrievalId) {
            this.retrievalId = Optional.ofNullable(retrievalId);
            return this;
        }

        /**
         * <p>Identifier of retrieval request</p>
         */
        @java.lang.Override
        @JsonSetter(value = "RetrievalId", nulls = Nulls.SKIP)
        public _FinalStage retrievalId(Optional<Long> retrievalId) {
            this.retrievalId = retrievalId;
            return this;
        }

        /**
         * <p>Identifier of chargeback transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage chargebackId(Long chargebackId) {
            this.chargebackId = Optional.ofNullable(chargebackId);
            return this;
        }

        /**
         * <p>Identifier of chargeback transaction</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ChargebackId", nulls = Nulls.SKIP)
        public _FinalStage chargebackId(Optional<Long> chargebackId) {
            this.chargebackId = chargebackId;
            return this;
        }

        /**
         * <p>Identifier of return/chargeback transaction linked to this payment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage returnedId(Long returnedId) {
            this.returnedId = Optional.ofNullable(returnedId);
            return this;
        }

        /**
         * <p>Identifier of return/chargeback transaction linked to this payment</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ReturnedId", nulls = Nulls.SKIP)
        public _FinalStage returnedId(Optional<Long> returnedId) {
            this.returnedId = returnedId;
            return this;
        }

        /**
         * <p>Identifier of refund transaction linked to this payment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage refundId(Long refundId) {
            this.refundId = Optional.ofNullable(refundId);
            return this;
        }

        /**
         * <p>Identifier of refund transaction linked to this payment</p>
         */
        @java.lang.Override
        @JsonSetter(value = "RefundId", nulls = Nulls.SKIP)
        public _FinalStage refundId(Optional<Long> refundId) {
            this.refundId = refundId;
            return this;
        }

        /**
         * <p>ID of immediate parent organization</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage orgId(Long orgId) {
            this.orgId = Optional.ofNullable(orgId);
            return this;
        }

        /**
         * <p>ID of immediate parent organization</p>
         */
        @java.lang.Override
        @JsonSetter(value = "OrgId", nulls = Nulls.SKIP)
        public _FinalStage orgId(Optional<Long> orgId) {
            this.orgId = orgId;
            return this;
        }

        /**
         * <p>Reference to the subscription or schedule that originated the transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage scheduleReference(Integer scheduleReference) {
            this.scheduleReference = Optional.ofNullable(scheduleReference);
            return this;
        }

        /**
         * <p>Reference to the subscription or schedule that originated the transaction</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ScheduleReference", nulls = Nulls.SKIP)
        public _FinalStage scheduleReference(Optional<Integer> scheduleReference) {
            this.scheduleReference = scheduleReference;
            return this;
        }

        /**
         * <p>Custom identifier to indicate the transaction or request source</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * <p>Custom identifier to indicate the transaction or request source</p>
         */
        @java.lang.Override
        @JsonSetter(value = "Source", nulls = Nulls.SKIP)
        public _FinalStage source(Optional<String> source) {
            this.source = source;
            return this;
        }

        /**
         * <p>Details about the transaction response</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage responseData(QueryResponseData responseData) {
            this.responseData = Optional.ofNullable(responseData);
            return this;
        }

        /**
         * <p>Details about the transaction response</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ResponseData", nulls = Nulls.SKIP)
        public _FinalStage responseData(Optional<QueryResponseData> responseData) {
            this.responseData = responseData;
            return this;
        }

        /**
         * <p>The transaction's operation</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage operation(String operation) {
            this.operation = Optional.ofNullable(operation);
            return this;
        }

        /**
         * <p>The transaction's operation</p>
         */
        @java.lang.Override
        @JsonSetter(value = "Operation", nulls = Nulls.SKIP)
        public _FinalStage operation(Optional<String> operation) {
            this.operation = operation;
            return this;
        }

        /**
         * <p>Settlement status for transaction. See <a href="/developers/references/money-in-statuses#payment-funding-status">the docs</a> for a full reference.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage settlementStatus(Integer settlementStatus) {
            this.settlementStatus = Optional.ofNullable(settlementStatus);
            return this;
        }

        /**
         * <p>Settlement status for transaction. See <a href="/developers/references/money-in-statuses#payment-funding-status">the docs</a> for a full reference.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "SettlementStatus", nulls = Nulls.SKIP)
        public _FinalStage settlementStatus(Optional<Integer> settlementStatus) {
            this.settlementStatus = settlementStatus;
            return this;
        }

        /**
         * <p>Service fee or sub-charge applied</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage feeAmount(Double feeAmount) {
            this.feeAmount = Optional.ofNullable(feeAmount);
            return this;
        }

        /**
         * <p>Service fee or sub-charge applied</p>
         */
        @java.lang.Override
        @JsonSetter(value = "FeeAmount", nulls = Nulls.SKIP)
        public _FinalStage feeAmount(Optional<Double> feeAmount) {
            this.feeAmount = feeAmount;
            return this;
        }

        /**
         * <p>Net amount paid</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage netAmount(Double netAmount) {
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        /**
         * <p>Net amount paid</p>
         */
        @java.lang.Override
        @JsonSetter(value = "NetAmount", nulls = Nulls.SKIP)
        public _FinalStage netAmount(Optional<Double> netAmount) {
            this.netAmount = netAmount;
            return this;
        }

        /**
         * <p>Transaction total amount (including service fee or sub-charge)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * <p>Transaction total amount (including service fee or sub-charge)</p>
         */
        @java.lang.Override
        @JsonSetter(value = "TotalAmount", nulls = Nulls.SKIP)
        public _FinalStage totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * <p>Status of transaction. See <a href="/developers/references/money-in-statuses#money-in-transaction-status">the docs</a> for a full reference.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transStatus(Integer transStatus) {
            this.transStatus = Optional.ofNullable(transStatus);
            return this;
        }

        /**
         * <p>Status of transaction. See <a href="/developers/references/money-in-statuses#money-in-transaction-status">the docs</a> for a full reference.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "TransStatus", nulls = Nulls.SKIP)
        public _FinalStage transStatus(Optional<Integer> transStatus) {
            this.transStatus = transStatus;
            return this;
        }

        /**
         * <p>Details about the payment method and transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentData(QueryPaymentData paymentData) {
            this.paymentData = Optional.ofNullable(paymentData);
            return this;
        }

        /**
         * <p>Details about the payment method and transaction</p>
         */
        @java.lang.Override
        @JsonSetter(value = "PaymentData", nulls = Nulls.SKIP)
        public _FinalStage paymentData(Optional<QueryPaymentData> paymentData) {
            this.paymentData = paymentData;
            return this;
        }

        /**
         * <p>Unique ID for customer linked to the transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage payorId(Long payorId) {
            this.payorId = Optional.ofNullable(payorId);
            return this;
        }

        /**
         * <p>Unique ID for customer linked to the transaction</p>
         */
        @java.lang.Override
        @JsonSetter(value = "PayorId", nulls = Nulls.SKIP)
        public _FinalStage payorId(Optional<Long> payorId) {
            this.payorId = payorId;
            return this;
        }

        /**
         * <p>The amount of the batch</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchAmount(Double batchAmount) {
            this.batchAmount = Optional.ofNullable(batchAmount);
            return this;
        }

        /**
         * <p>The amount of the batch</p>
         */
        @java.lang.Override
        @JsonSetter(value = "BatchAmount", nulls = Nulls.SKIP)
        public _FinalStage batchAmount(Optional<Double> batchAmount) {
            this.batchAmount = batchAmount;
            return this;
        }

        /**
         * <p>The batch number the transaction was included in</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchNumber(String batchNumber) {
            this.batchNumber = Optional.ofNullable(batchNumber);
            return this;
        }

        /**
         * <p>The batch number the transaction was included in</p>
         */
        @java.lang.Override
        @JsonSetter(value = "BatchNumber", nulls = Nulls.SKIP)
        public _FinalStage batchNumber(Optional<String> batchNumber) {
            this.batchNumber = batchNumber;
            return this;
        }

        /**
         * <p>Payment method used: card, ach, or wallet</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage method(String method) {
            this.method = Optional.ofNullable(method);
            return this;
        }

        /**
         * <p>Payment method used: card, ach, or wallet</p>
         */
        @java.lang.Override
        @JsonSetter(value = "Method", nulls = Nulls.SKIP)
        public _FinalStage method(Optional<String> method) {
            this.method = method;
            return this;
        }

        /**
         * <p>Custom identifier for the transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        /**
         * <p>Custom identifier for the transaction</p>
         */
        @java.lang.Override
        @JsonSetter(value = "OrderId", nulls = Nulls.SKIP)
        public _FinalStage orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        /**
         * <p>Internal identifier used for processing</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage gatewayTransId(String gatewayTransId) {
            this.gatewayTransId = Optional.ofNullable(gatewayTransId);
            return this;
        }

        /**
         * <p>Internal identifier used for processing</p>
         */
        @java.lang.Override
        @JsonSetter(value = "GatewayTransId", nulls = Nulls.SKIP)
        public _FinalStage gatewayTransId(Optional<String> gatewayTransId) {
            this.gatewayTransId = gatewayTransId;
            return this;
        }

        /**
         * <p>Processor information, used for troubleshooting and reporting. This field contains a value when the API key used to make the request has management permissions.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage externalProcessorInformation(String externalProcessorInformation) {
            this.externalProcessorInformation = Optional.ofNullable(externalProcessorInformation);
            return this;
        }

        /**
         * <p>Processor information, used for troubleshooting and reporting. This field contains a value when the API key used to make the request has management permissions.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ExternalProcessorInformation", nulls = Nulls.SKIP)
        public _FinalStage externalProcessorInformation(Optional<String> externalProcessorInformation) {
            this.externalProcessorInformation = externalProcessorInformation;
            return this;
        }

        /**
         * <p>The payment connector used to process the transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage connectorName(String connectorName) {
            this.connectorName = Optional.ofNullable(connectorName);
            return this;
        }

        /**
         * <p>The payment connector used to process the transaction</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ConnectorName", nulls = Nulls.SKIP)
        public _FinalStage connectorName(Optional<String> connectorName) {
            this.connectorName = connectorName;
            return this;
        }

        /**
         * <p>The transaction ID for the payment</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentTransId(String paymentTransId) {
            this.paymentTransId = Optional.ofNullable(paymentTransId);
            return this;
        }

        /**
         * <p>The transaction ID for the payment</p>
         */
        @java.lang.Override
        @JsonSetter(value = "PaymentTransId", nulls = Nulls.SKIP)
        public _FinalStage paymentTransId(Optional<String> paymentTransId) {
            this.paymentTransId = paymentTransId;
            return this;
        }

        /**
         * <p>The paypoint's entryname</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paypointEntryname(String paypointEntryname) {
            this.paypointEntryname = Optional.ofNullable(paypointEntryname);
            return this;
        }

        /**
         * <p>The paypoint's entryname</p>
         */
        @java.lang.Override
        @JsonSetter(value = "PaypointEntryname", nulls = Nulls.SKIP)
        public _FinalStage paypointEntryname(Optional<String> paypointEntryname) {
            this.paypointEntryname = paypointEntryname;
            return this;
        }

        /**
         * <p>The paypoint's legal name</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        /**
         * <p>The paypoint's legal name</p>
         */
        @java.lang.Override
        @JsonSetter(value = "PaypointLegalname", nulls = Nulls.SKIP)
        public _FinalStage paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        /**
         * <p>The paypoint's DBA name</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        /**
         * <p>The paypoint's DBA name</p>
         */
        @java.lang.Override
        @JsonSetter(value = "PaypointDbaname", nulls = Nulls.SKIP)
        public _FinalStage paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        /**
         * <p>The name of the parent organization</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        /**
         * <p>The name of the parent organization</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public _FinalStage parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        /**
         * <p>Detailed breakdown of billing fees applied to the transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage billingFeesDetails(List<BillingFeeDetail> billingFeesDetails) {
            this.billingFeesDetails = Optional.ofNullable(billingFeesDetails);
            return this;
        }

        /**
         * <p>Detailed breakdown of billing fees applied to the transaction</p>
         */
        @java.lang.Override
        @JsonSetter(value = "billingFeesDetails", nulls = Nulls.SKIP)
        public _FinalStage billingFeesDetails(Optional<List<BillingFeeDetail>> billingFeesDetails) {
            this.billingFeesDetails = billingFeesDetails;
            return this;
        }

        /**
         * <p>A field used to categorize the transaction details. Values include: auth, decline, refund, adj, cb, split</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage category(String category) {
            this.category = Optional.ofNullable(category);
            return this;
        }

        /**
         * <p>A field used to categorize the transaction details. Values include: auth, decline, refund, adj, cb, split</p>
         */
        @java.lang.Override
        @JsonSetter(value = "category", nulls = Nulls.SKIP)
        public _FinalStage category(Optional<String> category) {
            this.category = category;
            return this;
        }

        /**
         * <p>External transaction reference number</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transactionNumber(String transactionNumber) {
            this.transactionNumber = Optional.ofNullable(transactionNumber);
            return this;
        }

        /**
         * <p>External transaction reference number</p>
         */
        @java.lang.Override
        @JsonSetter(value = "transactionNumber", nulls = Nulls.SKIP)
        public _FinalStage transactionNumber(Optional<String> transactionNumber) {
            this.transactionNumber = transactionNumber;
            return this;
        }

        @java.lang.Override
        public TransferDetailRecord build() {
            return new TransferDetailRecord(
                    transferDetailId,
                    transferId,
                    transactionId,
                    transactionNumber,
                    paypointId,
                    type,
                    category,
                    grossAmount,
                    chargeBackAmount,
                    returnedAmount,
                    refundAmount,
                    holdAmount,
                    releasedAmount,
                    billingFeesAmount,
                    thirdPartyPaidAmount,
                    adjustmentsAmount,
                    netTransferAmount,
                    splitFundingAmount,
                    billingFeesDetails,
                    parentOrgName,
                    paypointDbaname,
                    paypointLegalname,
                    paypointEntryname,
                    paymentTransId,
                    connectorName,
                    externalProcessorInformation,
                    gatewayTransId,
                    orderId,
                    method,
                    batchNumber,
                    batchAmount,
                    payorId,
                    paymentData,
                    transStatus,
                    totalAmount,
                    netAmount,
                    feeAmount,
                    settlementStatus,
                    operation,
                    responseData,
                    source,
                    scheduleReference,
                    orgId,
                    refundId,
                    returnedId,
                    chargebackId,
                    retrievalId,
                    transAdditionalData,
                    invoiceData,
                    entrypageId,
                    externalPaypointId,
                    transactionTime,
                    customer,
                    splitFundingInstructions,
                    cfeeTransactions,
                    transactionEvents,
                    pendingFeeAmount,
                    riskFlagged,
                    riskFlaggedOn,
                    riskStatus,
                    riskReason,
                    riskAction,
                    riskActionCode,
                    deviceId,
                    achSecCode,
                    achHolderType,
                    ipAddress,
                    additionalProperties);
        }
    }
}
