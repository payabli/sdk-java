/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AchService.Builder.class)
public final class AchService {
    private final Optional<AchAbsorbSection> achAbsorb;

    private final Optional<TemplateElement> achAbsorbHighPayRange;

    private final Optional<TemplateElement> achAbsorbLowPayRange;

    private final Optional<AchAcceptanceElement> achAcceptance;

    private final Optional<AchFeeSection> achFees;

    private final Optional<TemplateElement> achPassHighPayRange;

    private final Optional<TemplateElement> achPassLowPayRange;

    private final Optional<AchPassThroughSection> achPassThrough;

    private final Optional<TemplateElement> batchCutoffTime;

    private final Optional<TemplateElement> discountFrequency;

    private final Optional<TemplateElement> fundingRollup;

    private final Optional<TemplateElement> gateway;

    private final Optional<TemplateElement> pdfTemplateId;

    private final Optional<Long> pricingPlan;

    private final Optional<TemplateElement> pricingType;

    private final Optional<TemplateElement> processor;

    private final Optional<TemplateElement> provider;

    private final Optional<TemplateElement> tierName;

    private final Optional<Boolean> visible;

    private final Map<String, Object> additionalProperties;

    private AchService(
            Optional<AchAbsorbSection> achAbsorb,
            Optional<TemplateElement> achAbsorbHighPayRange,
            Optional<TemplateElement> achAbsorbLowPayRange,
            Optional<AchAcceptanceElement> achAcceptance,
            Optional<AchFeeSection> achFees,
            Optional<TemplateElement> achPassHighPayRange,
            Optional<TemplateElement> achPassLowPayRange,
            Optional<AchPassThroughSection> achPassThrough,
            Optional<TemplateElement> batchCutoffTime,
            Optional<TemplateElement> discountFrequency,
            Optional<TemplateElement> fundingRollup,
            Optional<TemplateElement> gateway,
            Optional<TemplateElement> pdfTemplateId,
            Optional<Long> pricingPlan,
            Optional<TemplateElement> pricingType,
            Optional<TemplateElement> processor,
            Optional<TemplateElement> provider,
            Optional<TemplateElement> tierName,
            Optional<Boolean> visible,
            Map<String, Object> additionalProperties) {
        this.achAbsorb = achAbsorb;
        this.achAbsorbHighPayRange = achAbsorbHighPayRange;
        this.achAbsorbLowPayRange = achAbsorbLowPayRange;
        this.achAcceptance = achAcceptance;
        this.achFees = achFees;
        this.achPassHighPayRange = achPassHighPayRange;
        this.achPassLowPayRange = achPassLowPayRange;
        this.achPassThrough = achPassThrough;
        this.batchCutoffTime = batchCutoffTime;
        this.discountFrequency = discountFrequency;
        this.fundingRollup = fundingRollup;
        this.gateway = gateway;
        this.pdfTemplateId = pdfTemplateId;
        this.pricingPlan = pricingPlan;
        this.pricingType = pricingType;
        this.processor = processor;
        this.provider = provider;
        this.tierName = tierName;
        this.visible = visible;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("achAbsorb")
    public Optional<AchAbsorbSection> getAchAbsorb() {
        return achAbsorb;
    }

    @JsonProperty("achAbsorb_highPayRange")
    public Optional<TemplateElement> getAchAbsorbHighPayRange() {
        return achAbsorbHighPayRange;
    }

    @JsonProperty("achAbsorb_lowPayRange")
    public Optional<TemplateElement> getAchAbsorbLowPayRange() {
        return achAbsorbLowPayRange;
    }

    @JsonProperty("achAcceptance")
    public Optional<AchAcceptanceElement> getAchAcceptance() {
        return achAcceptance;
    }

    @JsonProperty("achFees")
    public Optional<AchFeeSection> getAchFees() {
        return achFees;
    }

    @JsonProperty("achPass_highPayRange")
    public Optional<TemplateElement> getAchPassHighPayRange() {
        return achPassHighPayRange;
    }

    @JsonProperty("achPass_lowPayRange")
    public Optional<TemplateElement> getAchPassLowPayRange() {
        return achPassLowPayRange;
    }

    @JsonProperty("achPassThrough")
    public Optional<AchPassThroughSection> getAchPassThrough() {
        return achPassThrough;
    }

    /**
     * @return Controls how to present the <code>batchCutoffTime</code> field on the application. If this field isn't sent, batch cut off time defaults to 5 ET.
     */
    @JsonProperty("batchCutoffTime")
    public Optional<TemplateElement> getBatchCutoffTime() {
        return batchCutoffTime;
    }

    @JsonProperty("discountFrequency")
    public Optional<TemplateElement> getDiscountFrequency() {
        return discountFrequency;
    }

    @JsonProperty("fundingRollup")
    public Optional<TemplateElement> getFundingRollup() {
        return fundingRollup;
    }

    @JsonProperty("gateway")
    public Optional<TemplateElement> getGateway() {
        return gateway;
    }

    @JsonProperty("pdfTemplateId")
    public Optional<TemplateElement> getPdfTemplateId() {
        return pdfTemplateId;
    }

    @JsonProperty("pricingPlan")
    public Optional<Long> getPricingPlan() {
        return pricingPlan;
    }

    @JsonProperty("pricingType")
    public Optional<TemplateElement> getPricingType() {
        return pricingType;
    }

    @JsonProperty("processor")
    public Optional<TemplateElement> getProcessor() {
        return processor;
    }

    @JsonProperty("provider")
    public Optional<TemplateElement> getProvider() {
        return provider;
    }

    @JsonProperty("tierName")
    public Optional<TemplateElement> getTierName() {
        return tierName;
    }

    @JsonProperty("visible")
    public Optional<Boolean> getVisible() {
        return visible;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AchService && equalTo((AchService) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AchService other) {
        return achAbsorb.equals(other.achAbsorb)
                && achAbsorbHighPayRange.equals(other.achAbsorbHighPayRange)
                && achAbsorbLowPayRange.equals(other.achAbsorbLowPayRange)
                && achAcceptance.equals(other.achAcceptance)
                && achFees.equals(other.achFees)
                && achPassHighPayRange.equals(other.achPassHighPayRange)
                && achPassLowPayRange.equals(other.achPassLowPayRange)
                && achPassThrough.equals(other.achPassThrough)
                && batchCutoffTime.equals(other.batchCutoffTime)
                && discountFrequency.equals(other.discountFrequency)
                && fundingRollup.equals(other.fundingRollup)
                && gateway.equals(other.gateway)
                && pdfTemplateId.equals(other.pdfTemplateId)
                && pricingPlan.equals(other.pricingPlan)
                && pricingType.equals(other.pricingType)
                && processor.equals(other.processor)
                && provider.equals(other.provider)
                && tierName.equals(other.tierName)
                && visible.equals(other.visible);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.achAbsorb,
                this.achAbsorbHighPayRange,
                this.achAbsorbLowPayRange,
                this.achAcceptance,
                this.achFees,
                this.achPassHighPayRange,
                this.achPassLowPayRange,
                this.achPassThrough,
                this.batchCutoffTime,
                this.discountFrequency,
                this.fundingRollup,
                this.gateway,
                this.pdfTemplateId,
                this.pricingPlan,
                this.pricingType,
                this.processor,
                this.provider,
                this.tierName,
                this.visible);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<AchAbsorbSection> achAbsorb = Optional.empty();

        private Optional<TemplateElement> achAbsorbHighPayRange = Optional.empty();

        private Optional<TemplateElement> achAbsorbLowPayRange = Optional.empty();

        private Optional<AchAcceptanceElement> achAcceptance = Optional.empty();

        private Optional<AchFeeSection> achFees = Optional.empty();

        private Optional<TemplateElement> achPassHighPayRange = Optional.empty();

        private Optional<TemplateElement> achPassLowPayRange = Optional.empty();

        private Optional<AchPassThroughSection> achPassThrough = Optional.empty();

        private Optional<TemplateElement> batchCutoffTime = Optional.empty();

        private Optional<TemplateElement> discountFrequency = Optional.empty();

        private Optional<TemplateElement> fundingRollup = Optional.empty();

        private Optional<TemplateElement> gateway = Optional.empty();

        private Optional<TemplateElement> pdfTemplateId = Optional.empty();

        private Optional<Long> pricingPlan = Optional.empty();

        private Optional<TemplateElement> pricingType = Optional.empty();

        private Optional<TemplateElement> processor = Optional.empty();

        private Optional<TemplateElement> provider = Optional.empty();

        private Optional<TemplateElement> tierName = Optional.empty();

        private Optional<Boolean> visible = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AchService other) {
            achAbsorb(other.getAchAbsorb());
            achAbsorbHighPayRange(other.getAchAbsorbHighPayRange());
            achAbsorbLowPayRange(other.getAchAbsorbLowPayRange());
            achAcceptance(other.getAchAcceptance());
            achFees(other.getAchFees());
            achPassHighPayRange(other.getAchPassHighPayRange());
            achPassLowPayRange(other.getAchPassLowPayRange());
            achPassThrough(other.getAchPassThrough());
            batchCutoffTime(other.getBatchCutoffTime());
            discountFrequency(other.getDiscountFrequency());
            fundingRollup(other.getFundingRollup());
            gateway(other.getGateway());
            pdfTemplateId(other.getPdfTemplateId());
            pricingPlan(other.getPricingPlan());
            pricingType(other.getPricingType());
            processor(other.getProcessor());
            provider(other.getProvider());
            tierName(other.getTierName());
            visible(other.getVisible());
            return this;
        }

        @JsonSetter(value = "achAbsorb", nulls = Nulls.SKIP)
        public Builder achAbsorb(Optional<AchAbsorbSection> achAbsorb) {
            this.achAbsorb = achAbsorb;
            return this;
        }

        public Builder achAbsorb(AchAbsorbSection achAbsorb) {
            this.achAbsorb = Optional.ofNullable(achAbsorb);
            return this;
        }

        @JsonSetter(value = "achAbsorb_highPayRange", nulls = Nulls.SKIP)
        public Builder achAbsorbHighPayRange(Optional<TemplateElement> achAbsorbHighPayRange) {
            this.achAbsorbHighPayRange = achAbsorbHighPayRange;
            return this;
        }

        public Builder achAbsorbHighPayRange(TemplateElement achAbsorbHighPayRange) {
            this.achAbsorbHighPayRange = Optional.ofNullable(achAbsorbHighPayRange);
            return this;
        }

        @JsonSetter(value = "achAbsorb_lowPayRange", nulls = Nulls.SKIP)
        public Builder achAbsorbLowPayRange(Optional<TemplateElement> achAbsorbLowPayRange) {
            this.achAbsorbLowPayRange = achAbsorbLowPayRange;
            return this;
        }

        public Builder achAbsorbLowPayRange(TemplateElement achAbsorbLowPayRange) {
            this.achAbsorbLowPayRange = Optional.ofNullable(achAbsorbLowPayRange);
            return this;
        }

        @JsonSetter(value = "achAcceptance", nulls = Nulls.SKIP)
        public Builder achAcceptance(Optional<AchAcceptanceElement> achAcceptance) {
            this.achAcceptance = achAcceptance;
            return this;
        }

        public Builder achAcceptance(AchAcceptanceElement achAcceptance) {
            this.achAcceptance = Optional.ofNullable(achAcceptance);
            return this;
        }

        @JsonSetter(value = "achFees", nulls = Nulls.SKIP)
        public Builder achFees(Optional<AchFeeSection> achFees) {
            this.achFees = achFees;
            return this;
        }

        public Builder achFees(AchFeeSection achFees) {
            this.achFees = Optional.ofNullable(achFees);
            return this;
        }

        @JsonSetter(value = "achPass_highPayRange", nulls = Nulls.SKIP)
        public Builder achPassHighPayRange(Optional<TemplateElement> achPassHighPayRange) {
            this.achPassHighPayRange = achPassHighPayRange;
            return this;
        }

        public Builder achPassHighPayRange(TemplateElement achPassHighPayRange) {
            this.achPassHighPayRange = Optional.ofNullable(achPassHighPayRange);
            return this;
        }

        @JsonSetter(value = "achPass_lowPayRange", nulls = Nulls.SKIP)
        public Builder achPassLowPayRange(Optional<TemplateElement> achPassLowPayRange) {
            this.achPassLowPayRange = achPassLowPayRange;
            return this;
        }

        public Builder achPassLowPayRange(TemplateElement achPassLowPayRange) {
            this.achPassLowPayRange = Optional.ofNullable(achPassLowPayRange);
            return this;
        }

        @JsonSetter(value = "achPassThrough", nulls = Nulls.SKIP)
        public Builder achPassThrough(Optional<AchPassThroughSection> achPassThrough) {
            this.achPassThrough = achPassThrough;
            return this;
        }

        public Builder achPassThrough(AchPassThroughSection achPassThrough) {
            this.achPassThrough = Optional.ofNullable(achPassThrough);
            return this;
        }

        /**
         * <p>Controls how to present the <code>batchCutoffTime</code> field on the application. If this field isn't sent, batch cut off time defaults to 5 ET.</p>
         */
        @JsonSetter(value = "batchCutoffTime", nulls = Nulls.SKIP)
        public Builder batchCutoffTime(Optional<TemplateElement> batchCutoffTime) {
            this.batchCutoffTime = batchCutoffTime;
            return this;
        }

        public Builder batchCutoffTime(TemplateElement batchCutoffTime) {
            this.batchCutoffTime = Optional.ofNullable(batchCutoffTime);
            return this;
        }

        @JsonSetter(value = "discountFrequency", nulls = Nulls.SKIP)
        public Builder discountFrequency(Optional<TemplateElement> discountFrequency) {
            this.discountFrequency = discountFrequency;
            return this;
        }

        public Builder discountFrequency(TemplateElement discountFrequency) {
            this.discountFrequency = Optional.ofNullable(discountFrequency);
            return this;
        }

        @JsonSetter(value = "fundingRollup", nulls = Nulls.SKIP)
        public Builder fundingRollup(Optional<TemplateElement> fundingRollup) {
            this.fundingRollup = fundingRollup;
            return this;
        }

        public Builder fundingRollup(TemplateElement fundingRollup) {
            this.fundingRollup = Optional.ofNullable(fundingRollup);
            return this;
        }

        @JsonSetter(value = "gateway", nulls = Nulls.SKIP)
        public Builder gateway(Optional<TemplateElement> gateway) {
            this.gateway = gateway;
            return this;
        }

        public Builder gateway(TemplateElement gateway) {
            this.gateway = Optional.ofNullable(gateway);
            return this;
        }

        @JsonSetter(value = "pdfTemplateId", nulls = Nulls.SKIP)
        public Builder pdfTemplateId(Optional<TemplateElement> pdfTemplateId) {
            this.pdfTemplateId = pdfTemplateId;
            return this;
        }

        public Builder pdfTemplateId(TemplateElement pdfTemplateId) {
            this.pdfTemplateId = Optional.ofNullable(pdfTemplateId);
            return this;
        }

        @JsonSetter(value = "pricingPlan", nulls = Nulls.SKIP)
        public Builder pricingPlan(Optional<Long> pricingPlan) {
            this.pricingPlan = pricingPlan;
            return this;
        }

        public Builder pricingPlan(Long pricingPlan) {
            this.pricingPlan = Optional.ofNullable(pricingPlan);
            return this;
        }

        @JsonSetter(value = "pricingType", nulls = Nulls.SKIP)
        public Builder pricingType(Optional<TemplateElement> pricingType) {
            this.pricingType = pricingType;
            return this;
        }

        public Builder pricingType(TemplateElement pricingType) {
            this.pricingType = Optional.ofNullable(pricingType);
            return this;
        }

        @JsonSetter(value = "processor", nulls = Nulls.SKIP)
        public Builder processor(Optional<TemplateElement> processor) {
            this.processor = processor;
            return this;
        }

        public Builder processor(TemplateElement processor) {
            this.processor = Optional.ofNullable(processor);
            return this;
        }

        @JsonSetter(value = "provider", nulls = Nulls.SKIP)
        public Builder provider(Optional<TemplateElement> provider) {
            this.provider = provider;
            return this;
        }

        public Builder provider(TemplateElement provider) {
            this.provider = Optional.ofNullable(provider);
            return this;
        }

        @JsonSetter(value = "tierName", nulls = Nulls.SKIP)
        public Builder tierName(Optional<TemplateElement> tierName) {
            this.tierName = tierName;
            return this;
        }

        public Builder tierName(TemplateElement tierName) {
            this.tierName = Optional.ofNullable(tierName);
            return this;
        }

        @JsonSetter(value = "visible", nulls = Nulls.SKIP)
        public Builder visible(Optional<Boolean> visible) {
            this.visible = visible;
            return this;
        }

        public Builder visible(Boolean visible) {
            this.visible = Optional.ofNullable(visible);
            return this;
        }

        public AchService build() {
            return new AchService(
                    achAbsorb,
                    achAbsorbHighPayRange,
                    achAbsorbLowPayRange,
                    achAcceptance,
                    achFees,
                    achPassHighPayRange,
                    achPassLowPayRange,
                    achPassThrough,
                    batchCutoffTime,
                    discountFrequency,
                    fundingRollup,
                    gateway,
                    pdfTemplateId,
                    pricingPlan,
                    pricingType,
                    processor,
                    provider,
                    tierName,
                    visible,
                    additionalProperties);
        }
    }
}
