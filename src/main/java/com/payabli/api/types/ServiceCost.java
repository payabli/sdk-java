/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ServiceCost.Builder.class)
public final class ServiceCost {
    private final Optional<String> description;

    private final Optional<Boolean> enabled;

    private final Optional<Double> monthlyCost;

    private final Optional<String> name;

    private final Optional<Boolean> reseller;

    private final Optional<Double> setupCost;

    private final Optional<Double> txCost;

    private final Optional<Double> txPercentCost;

    private final Map<String, Object> additionalProperties;

    private ServiceCost(
            Optional<String> description,
            Optional<Boolean> enabled,
            Optional<Double> monthlyCost,
            Optional<String> name,
            Optional<Boolean> reseller,
            Optional<Double> setupCost,
            Optional<Double> txCost,
            Optional<Double> txPercentCost,
            Map<String, Object> additionalProperties) {
        this.description = description;
        this.enabled = enabled;
        this.monthlyCost = monthlyCost;
        this.name = name;
        this.reseller = reseller;
        this.setupCost = setupCost;
        this.txCost = txCost;
        this.txPercentCost = txPercentCost;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("enabled")
    public Optional<Boolean> getEnabled() {
        return enabled;
    }

    @JsonProperty("monthlyCost")
    public Optional<Double> getMonthlyCost() {
        return monthlyCost;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("reseller")
    public Optional<Boolean> getReseller() {
        return reseller;
    }

    @JsonProperty("setupCost")
    public Optional<Double> getSetupCost() {
        return setupCost;
    }

    @JsonProperty("txCost")
    public Optional<Double> getTxCost() {
        return txCost;
    }

    @JsonProperty("txPercentCost")
    public Optional<Double> getTxPercentCost() {
        return txPercentCost;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ServiceCost && equalTo((ServiceCost) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ServiceCost other) {
        return description.equals(other.description)
                && enabled.equals(other.enabled)
                && monthlyCost.equals(other.monthlyCost)
                && name.equals(other.name)
                && reseller.equals(other.reseller)
                && setupCost.equals(other.setupCost)
                && txCost.equals(other.txCost)
                && txPercentCost.equals(other.txPercentCost);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.description,
                this.enabled,
                this.monthlyCost,
                this.name,
                this.reseller,
                this.setupCost,
                this.txCost,
                this.txPercentCost);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> description = Optional.empty();

        private Optional<Boolean> enabled = Optional.empty();

        private Optional<Double> monthlyCost = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<Boolean> reseller = Optional.empty();

        private Optional<Double> setupCost = Optional.empty();

        private Optional<Double> txCost = Optional.empty();

        private Optional<Double> txPercentCost = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ServiceCost other) {
            description(other.getDescription());
            enabled(other.getEnabled());
            monthlyCost(other.getMonthlyCost());
            name(other.getName());
            reseller(other.getReseller());
            setupCost(other.getSetupCost());
            txCost(other.getTxCost());
            txPercentCost(other.getTxPercentCost());
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        @JsonSetter(value = "monthlyCost", nulls = Nulls.SKIP)
        public Builder monthlyCost(Optional<Double> monthlyCost) {
            this.monthlyCost = monthlyCost;
            return this;
        }

        public Builder monthlyCost(Double monthlyCost) {
            this.monthlyCost = Optional.ofNullable(monthlyCost);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "reseller", nulls = Nulls.SKIP)
        public Builder reseller(Optional<Boolean> reseller) {
            this.reseller = reseller;
            return this;
        }

        public Builder reseller(Boolean reseller) {
            this.reseller = Optional.ofNullable(reseller);
            return this;
        }

        @JsonSetter(value = "setupCost", nulls = Nulls.SKIP)
        public Builder setupCost(Optional<Double> setupCost) {
            this.setupCost = setupCost;
            return this;
        }

        public Builder setupCost(Double setupCost) {
            this.setupCost = Optional.ofNullable(setupCost);
            return this;
        }

        @JsonSetter(value = "txCost", nulls = Nulls.SKIP)
        public Builder txCost(Optional<Double> txCost) {
            this.txCost = txCost;
            return this;
        }

        public Builder txCost(Double txCost) {
            this.txCost = Optional.ofNullable(txCost);
            return this;
        }

        @JsonSetter(value = "txPercentCost", nulls = Nulls.SKIP)
        public Builder txPercentCost(Optional<Double> txPercentCost) {
            this.txPercentCost = txPercentCost;
            return this;
        }

        public Builder txPercentCost(Double txPercentCost) {
            this.txPercentCost = Optional.ofNullable(txPercentCost);
            return this;
        }

        public ServiceCost build() {
            return new ServiceCost(
                    description,
                    enabled,
                    monthlyCost,
                    name,
                    reseller,
                    setupCost,
                    txCost,
                    txPercentCost,
                    additionalProperties);
        }
    }
}
