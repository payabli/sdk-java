/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PushPayLinkRequestEmail.Builder.class)
public final class PushPayLinkRequestEmail {
    private final Optional<List<String>> additionalEmails;

    private final Optional<Boolean> attachFile;

    private final Map<String, Object> additionalProperties;

    private PushPayLinkRequestEmail(
            Optional<List<String>> additionalEmails,
            Optional<Boolean> attachFile,
            Map<String, Object> additionalProperties) {
        this.additionalEmails = additionalEmails;
        this.attachFile = attachFile;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return List of additional email addresses you want to send the paylink to, formatted as an array.
     * Payment links and opt-in requests are sent to the customer email address on file, and additional
     * recipients can be specified here.
     */
    @JsonProperty("additionalEmails")
    public Optional<List<String>> getAdditionalEmails() {
        return additionalEmails;
    }

    /**
     * @return When <code>true</code>, attaches a PDF version of the invoice to the email.
     */
    @JsonProperty("attachFile")
    public Optional<Boolean> getAttachFile() {
        return attachFile;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PushPayLinkRequestEmail && equalTo((PushPayLinkRequestEmail) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PushPayLinkRequestEmail other) {
        return additionalEmails.equals(other.additionalEmails) && attachFile.equals(other.attachFile);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.additionalEmails, this.attachFile);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> additionalEmails = Optional.empty();

        private Optional<Boolean> attachFile = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PushPayLinkRequestEmail other) {
            additionalEmails(other.getAdditionalEmails());
            attachFile(other.getAttachFile());
            return this;
        }

        /**
         * <p>List of additional email addresses you want to send the paylink to, formatted as an array.
         * Payment links and opt-in requests are sent to the customer email address on file, and additional
         * recipients can be specified here.</p>
         */
        @JsonSetter(value = "additionalEmails", nulls = Nulls.SKIP)
        public Builder additionalEmails(Optional<List<String>> additionalEmails) {
            this.additionalEmails = additionalEmails;
            return this;
        }

        public Builder additionalEmails(List<String> additionalEmails) {
            this.additionalEmails = Optional.ofNullable(additionalEmails);
            return this;
        }

        /**
         * <p>When <code>true</code>, attaches a PDF version of the invoice to the email.</p>
         */
        @JsonSetter(value = "attachFile", nulls = Nulls.SKIP)
        public Builder attachFile(Optional<Boolean> attachFile) {
            this.attachFile = attachFile;
            return this;
        }

        public Builder attachFile(Boolean attachFile) {
            this.attachFile = Optional.ofNullable(attachFile);
            return this;
        }

        public PushPayLinkRequestEmail build() {
            return new PushPayLinkRequestEmail(additionalEmails, attachFile, additionalProperties);
        }
    }
}
