/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PageContent.Builder.class)
public final class PageContent {
    private final Optional<AmountElement> amount;

    private final Optional<AutoElement> autopay;

    private final Optional<ContactElement> contactUs;

    private final Optional<String> entry;

    private final Optional<InvoiceElement> invoices;

    private final Optional<Element> logo;

    private final Optional<LabelElement> messageBeforePaying;

    private final Optional<String> name;

    private final Optional<NoteElement> notes;

    private final Optional<PageElement> page;

    private final Optional<LabelElement> paymentButton;

    private final Optional<MethodElement> paymentMethods;

    private final Optional<PayorElement> payor;

    private final Optional<HeaderElement> review;

    private final Optional<String> subdomain;

    private final Map<String, Object> additionalProperties;

    private PageContent(
            Optional<AmountElement> amount,
            Optional<AutoElement> autopay,
            Optional<ContactElement> contactUs,
            Optional<String> entry,
            Optional<InvoiceElement> invoices,
            Optional<Element> logo,
            Optional<LabelElement> messageBeforePaying,
            Optional<String> name,
            Optional<NoteElement> notes,
            Optional<PageElement> page,
            Optional<LabelElement> paymentButton,
            Optional<MethodElement> paymentMethods,
            Optional<PayorElement> payor,
            Optional<HeaderElement> review,
            Optional<String> subdomain,
            Map<String, Object> additionalProperties) {
        this.amount = amount;
        this.autopay = autopay;
        this.contactUs = contactUs;
        this.entry = entry;
        this.invoices = invoices;
        this.logo = logo;
        this.messageBeforePaying = messageBeforePaying;
        this.name = name;
        this.notes = notes;
        this.page = page;
        this.paymentButton = paymentButton;
        this.paymentMethods = paymentMethods;
        this.payor = payor;
        this.review = review;
        this.subdomain = subdomain;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Amount section of payment page
     */
    @JsonProperty("amount")
    public Optional<AmountElement> getAmount() {
        return amount;
    }

    /**
     * @return Autopay section of payment page
     */
    @JsonProperty("autopay")
    public Optional<AutoElement> getAutopay() {
        return autopay;
    }

    /**
     * @return ContactUs section of payment page
     */
    @JsonProperty("contactUs")
    public Optional<ContactElement> getContactUs() {
        return contactUs;
    }

    /**
     * @return Identifier of entry point owner of page
     */
    @JsonProperty("entry")
    public Optional<String> getEntry() {
        return entry;
    }

    /**
     * @return Invoices section of payment page
     */
    @JsonProperty("invoices")
    public Optional<InvoiceElement> getInvoices() {
        return invoices;
    }

    /**
     * @return Logo section of payment page
     */
    @JsonProperty("logo")
    public Optional<Element> getLogo() {
        return logo;
    }

    /**
     * @return Message section of payment page
     */
    @JsonProperty("messageBeforePaying")
    public Optional<LabelElement> getMessageBeforePaying() {
        return messageBeforePaying;
    }

    /**
     * @return Descriptor of page
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return Notes section of payment page
     */
    @JsonProperty("notes")
    public Optional<NoteElement> getNotes() {
        return notes;
    }

    /**
     * @return Page header section of payment page
     */
    @JsonProperty("page")
    public Optional<PageElement> getPage() {
        return page;
    }

    /**
     * @return Payment button section of payment page
     */
    @JsonProperty("paymentButton")
    public Optional<LabelElement> getPaymentButton() {
        return paymentButton;
    }

    /**
     * @return Payment methods section of payment page
     */
    @JsonProperty("paymentMethods")
    public Optional<MethodElement> getPaymentMethods() {
        return paymentMethods;
    }

    /**
     * @return Customer/Payor section of payment page
     */
    @JsonProperty("payor")
    public Optional<PayorElement> getPayor() {
        return payor;
    }

    /**
     * @return Review section of payment page
     */
    @JsonProperty("review")
    public Optional<HeaderElement> getReview() {
        return review;
    }

    /**
     * @return Unique identifier assigned to the page.
     */
    @JsonProperty("subdomain")
    public Optional<String> getSubdomain() {
        return subdomain;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PageContent && equalTo((PageContent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PageContent other) {
        return amount.equals(other.amount)
                && autopay.equals(other.autopay)
                && contactUs.equals(other.contactUs)
                && entry.equals(other.entry)
                && invoices.equals(other.invoices)
                && logo.equals(other.logo)
                && messageBeforePaying.equals(other.messageBeforePaying)
                && name.equals(other.name)
                && notes.equals(other.notes)
                && page.equals(other.page)
                && paymentButton.equals(other.paymentButton)
                && paymentMethods.equals(other.paymentMethods)
                && payor.equals(other.payor)
                && review.equals(other.review)
                && subdomain.equals(other.subdomain);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.amount,
                this.autopay,
                this.contactUs,
                this.entry,
                this.invoices,
                this.logo,
                this.messageBeforePaying,
                this.name,
                this.notes,
                this.page,
                this.paymentButton,
                this.paymentMethods,
                this.payor,
                this.review,
                this.subdomain);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<AmountElement> amount = Optional.empty();

        private Optional<AutoElement> autopay = Optional.empty();

        private Optional<ContactElement> contactUs = Optional.empty();

        private Optional<String> entry = Optional.empty();

        private Optional<InvoiceElement> invoices = Optional.empty();

        private Optional<Element> logo = Optional.empty();

        private Optional<LabelElement> messageBeforePaying = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<NoteElement> notes = Optional.empty();

        private Optional<PageElement> page = Optional.empty();

        private Optional<LabelElement> paymentButton = Optional.empty();

        private Optional<MethodElement> paymentMethods = Optional.empty();

        private Optional<PayorElement> payor = Optional.empty();

        private Optional<HeaderElement> review = Optional.empty();

        private Optional<String> subdomain = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PageContent other) {
            amount(other.getAmount());
            autopay(other.getAutopay());
            contactUs(other.getContactUs());
            entry(other.getEntry());
            invoices(other.getInvoices());
            logo(other.getLogo());
            messageBeforePaying(other.getMessageBeforePaying());
            name(other.getName());
            notes(other.getNotes());
            page(other.getPage());
            paymentButton(other.getPaymentButton());
            paymentMethods(other.getPaymentMethods());
            payor(other.getPayor());
            review(other.getReview());
            subdomain(other.getSubdomain());
            return this;
        }

        /**
         * <p>Amount section of payment page</p>
         */
        @JsonSetter(value = "amount", nulls = Nulls.SKIP)
        public Builder amount(Optional<AmountElement> amount) {
            this.amount = amount;
            return this;
        }

        public Builder amount(AmountElement amount) {
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * <p>Autopay section of payment page</p>
         */
        @JsonSetter(value = "autopay", nulls = Nulls.SKIP)
        public Builder autopay(Optional<AutoElement> autopay) {
            this.autopay = autopay;
            return this;
        }

        public Builder autopay(AutoElement autopay) {
            this.autopay = Optional.ofNullable(autopay);
            return this;
        }

        /**
         * <p>ContactUs section of payment page</p>
         */
        @JsonSetter(value = "contactUs", nulls = Nulls.SKIP)
        public Builder contactUs(Optional<ContactElement> contactUs) {
            this.contactUs = contactUs;
            return this;
        }

        public Builder contactUs(ContactElement contactUs) {
            this.contactUs = Optional.ofNullable(contactUs);
            return this;
        }

        /**
         * <p>Identifier of entry point owner of page</p>
         */
        @JsonSetter(value = "entry", nulls = Nulls.SKIP)
        public Builder entry(Optional<String> entry) {
            this.entry = entry;
            return this;
        }

        public Builder entry(String entry) {
            this.entry = Optional.ofNullable(entry);
            return this;
        }

        /**
         * <p>Invoices section of payment page</p>
         */
        @JsonSetter(value = "invoices", nulls = Nulls.SKIP)
        public Builder invoices(Optional<InvoiceElement> invoices) {
            this.invoices = invoices;
            return this;
        }

        public Builder invoices(InvoiceElement invoices) {
            this.invoices = Optional.ofNullable(invoices);
            return this;
        }

        /**
         * <p>Logo section of payment page</p>
         */
        @JsonSetter(value = "logo", nulls = Nulls.SKIP)
        public Builder logo(Optional<Element> logo) {
            this.logo = logo;
            return this;
        }

        public Builder logo(Element logo) {
            this.logo = Optional.ofNullable(logo);
            return this;
        }

        /**
         * <p>Message section of payment page</p>
         */
        @JsonSetter(value = "messageBeforePaying", nulls = Nulls.SKIP)
        public Builder messageBeforePaying(Optional<LabelElement> messageBeforePaying) {
            this.messageBeforePaying = messageBeforePaying;
            return this;
        }

        public Builder messageBeforePaying(LabelElement messageBeforePaying) {
            this.messageBeforePaying = Optional.ofNullable(messageBeforePaying);
            return this;
        }

        /**
         * <p>Descriptor of page</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>Notes section of payment page</p>
         */
        @JsonSetter(value = "notes", nulls = Nulls.SKIP)
        public Builder notes(Optional<NoteElement> notes) {
            this.notes = notes;
            return this;
        }

        public Builder notes(NoteElement notes) {
            this.notes = Optional.ofNullable(notes);
            return this;
        }

        /**
         * <p>Page header section of payment page</p>
         */
        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<PageElement> page) {
            this.page = page;
            return this;
        }

        public Builder page(PageElement page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * <p>Payment button section of payment page</p>
         */
        @JsonSetter(value = "paymentButton", nulls = Nulls.SKIP)
        public Builder paymentButton(Optional<LabelElement> paymentButton) {
            this.paymentButton = paymentButton;
            return this;
        }

        public Builder paymentButton(LabelElement paymentButton) {
            this.paymentButton = Optional.ofNullable(paymentButton);
            return this;
        }

        /**
         * <p>Payment methods section of payment page</p>
         */
        @JsonSetter(value = "paymentMethods", nulls = Nulls.SKIP)
        public Builder paymentMethods(Optional<MethodElement> paymentMethods) {
            this.paymentMethods = paymentMethods;
            return this;
        }

        public Builder paymentMethods(MethodElement paymentMethods) {
            this.paymentMethods = Optional.ofNullable(paymentMethods);
            return this;
        }

        /**
         * <p>Customer/Payor section of payment page</p>
         */
        @JsonSetter(value = "payor", nulls = Nulls.SKIP)
        public Builder payor(Optional<PayorElement> payor) {
            this.payor = payor;
            return this;
        }

        public Builder payor(PayorElement payor) {
            this.payor = Optional.ofNullable(payor);
            return this;
        }

        /**
         * <p>Review section of payment page</p>
         */
        @JsonSetter(value = "review", nulls = Nulls.SKIP)
        public Builder review(Optional<HeaderElement> review) {
            this.review = review;
            return this;
        }

        public Builder review(HeaderElement review) {
            this.review = Optional.ofNullable(review);
            return this;
        }

        /**
         * <p>Unique identifier assigned to the page.</p>
         */
        @JsonSetter(value = "subdomain", nulls = Nulls.SKIP)
        public Builder subdomain(Optional<String> subdomain) {
            this.subdomain = subdomain;
            return this;
        }

        public Builder subdomain(String subdomain) {
            this.subdomain = Optional.ofNullable(subdomain);
            return this;
        }

        public PageContent build() {
            return new PageContent(
                    amount,
                    autopay,
                    contactUs,
                    entry,
                    invoices,
                    logo,
                    messageBeforePaying,
                    name,
                    notes,
                    page,
                    paymentButton,
                    paymentMethods,
                    payor,
                    review,
                    subdomain,
                    additionalProperties);
        }
    }
}
