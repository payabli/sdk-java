/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FileContent.Builder.class)
public final class FileContent {
    private final Optional<String> fContent;

    private final Optional<String> filename;

    private final Optional<FileContentFtype> ftype;

    private final Optional<String> furl;

    private final Map<String, Object> additionalProperties;

    private FileContent(
            Optional<String> fContent,
            Optional<String> filename,
            Optional<FileContentFtype> ftype,
            Optional<String> furl,
            Map<String, Object> additionalProperties) {
        this.fContent = fContent;
        this.filename = filename;
        this.ftype = ftype;
        this.furl = furl;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Content of file, Base64-encoded. Ignored if furl is specified. Max upload size is 30 MB.
     */
    @JsonProperty("fContent")
    public Optional<String> getFContent() {
        return fContent;
    }

    /**
     * @return The name of the attached file.
     */
    @JsonProperty("filename")
    public Optional<String> getFilename() {
        return filename;
    }

    /**
     * @return The MIME type of the file (if content is provided)
     */
    @JsonProperty("ftype")
    public Optional<FileContentFtype> getFtype() {
        return ftype;
    }

    /**
     * @return Optional URL provided to show or download the file remotely
     */
    @JsonProperty("furl")
    public Optional<String> getFurl() {
        return furl;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FileContent && equalTo((FileContent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FileContent other) {
        return fContent.equals(other.fContent)
                && filename.equals(other.filename)
                && ftype.equals(other.ftype)
                && furl.equals(other.furl);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.fContent, this.filename, this.ftype, this.furl);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> fContent = Optional.empty();

        private Optional<String> filename = Optional.empty();

        private Optional<FileContentFtype> ftype = Optional.empty();

        private Optional<String> furl = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FileContent other) {
            fContent(other.getFContent());
            filename(other.getFilename());
            ftype(other.getFtype());
            furl(other.getFurl());
            return this;
        }

        /**
         * <p>Content of file, Base64-encoded. Ignored if furl is specified. Max upload size is 30 MB.</p>
         */
        @JsonSetter(value = "fContent", nulls = Nulls.SKIP)
        public Builder fContent(Optional<String> fContent) {
            this.fContent = fContent;
            return this;
        }

        public Builder fContent(String fContent) {
            this.fContent = Optional.ofNullable(fContent);
            return this;
        }

        /**
         * <p>The name of the attached file.</p>
         */
        @JsonSetter(value = "filename", nulls = Nulls.SKIP)
        public Builder filename(Optional<String> filename) {
            this.filename = filename;
            return this;
        }

        public Builder filename(String filename) {
            this.filename = Optional.ofNullable(filename);
            return this;
        }

        /**
         * <p>The MIME type of the file (if content is provided)</p>
         */
        @JsonSetter(value = "ftype", nulls = Nulls.SKIP)
        public Builder ftype(Optional<FileContentFtype> ftype) {
            this.ftype = ftype;
            return this;
        }

        public Builder ftype(FileContentFtype ftype) {
            this.ftype = Optional.ofNullable(ftype);
            return this;
        }

        /**
         * <p>Optional URL provided to show or download the file remotely</p>
         */
        @JsonSetter(value = "furl", nulls = Nulls.SKIP)
        public Builder furl(Optional<String> furl) {
            this.furl = furl;
            return this;
        }

        public Builder furl(String furl) {
            this.furl = Optional.ofNullable(furl);
            return this;
        }

        public FileContent build() {
            return new FileContent(fContent, filename, ftype, furl, additionalProperties);
        }
    }
}
