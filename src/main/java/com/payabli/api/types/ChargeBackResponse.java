/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ChargeBackResponse.Builder.class)
public final class ChargeBackResponse {
    private final Optional<BoardingApplicationAttachments> attachments;

    private final Optional<String> contactEmail;

    private final Optional<String> contactName;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<Long> id;

    private final Optional<String> notes;

    private final Map<String, Object> additionalProperties;

    private ChargeBackResponse(
            Optional<BoardingApplicationAttachments> attachments,
            Optional<String> contactEmail,
            Optional<String> contactName,
            Optional<OffsetDateTime> createdAt,
            Optional<Long> id,
            Optional<String> notes,
            Map<String, Object> additionalProperties) {
        this.attachments = attachments;
        this.contactEmail = contactEmail;
        this.contactName = contactName;
        this.createdAt = createdAt;
        this.id = id;
        this.notes = notes;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Object with attached files to response
     */
    @JsonProperty("attachments")
    public Optional<BoardingApplicationAttachments> getAttachments() {
        return attachments;
    }

    /**
     * @return Email of response submitter.
     */
    @JsonProperty("contactEmail")
    public Optional<String> getContactEmail() {
        return contactEmail;
    }

    /**
     * @return Name of response submitter
     */
    @JsonProperty("contactName")
    public Optional<String> getContactName() {
        return contactName;
    }

    /**
     * @return Timestamp when response was submitted, in UTC.
     */
    @JsonProperty("createdAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return Chargeback response identifier
     */
    @JsonProperty("id")
    public Optional<Long> getId() {
        return id;
    }

    /**
     * @return Response notes
     */
    @JsonProperty("notes")
    public Optional<String> getNotes() {
        return notes;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ChargeBackResponse && equalTo((ChargeBackResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ChargeBackResponse other) {
        return attachments.equals(other.attachments)
                && contactEmail.equals(other.contactEmail)
                && contactName.equals(other.contactName)
                && createdAt.equals(other.createdAt)
                && id.equals(other.id)
                && notes.equals(other.notes);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.attachments, this.contactEmail, this.contactName, this.createdAt, this.id, this.notes);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<BoardingApplicationAttachments> attachments = Optional.empty();

        private Optional<String> contactEmail = Optional.empty();

        private Optional<String> contactName = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<Long> id = Optional.empty();

        private Optional<String> notes = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ChargeBackResponse other) {
            attachments(other.getAttachments());
            contactEmail(other.getContactEmail());
            contactName(other.getContactName());
            createdAt(other.getCreatedAt());
            id(other.getId());
            notes(other.getNotes());
            return this;
        }

        /**
         * <p>Object with attached files to response</p>
         */
        @JsonSetter(value = "attachments", nulls = Nulls.SKIP)
        public Builder attachments(Optional<BoardingApplicationAttachments> attachments) {
            this.attachments = attachments;
            return this;
        }

        public Builder attachments(BoardingApplicationAttachments attachments) {
            this.attachments = Optional.ofNullable(attachments);
            return this;
        }

        /**
         * <p>Email of response submitter.</p>
         */
        @JsonSetter(value = "contactEmail", nulls = Nulls.SKIP)
        public Builder contactEmail(Optional<String> contactEmail) {
            this.contactEmail = contactEmail;
            return this;
        }

        public Builder contactEmail(String contactEmail) {
            this.contactEmail = Optional.ofNullable(contactEmail);
            return this;
        }

        /**
         * <p>Name of response submitter</p>
         */
        @JsonSetter(value = "contactName", nulls = Nulls.SKIP)
        public Builder contactName(Optional<String> contactName) {
            this.contactName = contactName;
            return this;
        }

        public Builder contactName(String contactName) {
            this.contactName = Optional.ofNullable(contactName);
            return this;
        }

        /**
         * <p>Timestamp when response was submitted, in UTC.</p>
         */
        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>Chargeback response identifier</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<Long> id) {
            this.id = id;
            return this;
        }

        public Builder id(Long id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>Response notes</p>
         */
        @JsonSetter(value = "notes", nulls = Nulls.SKIP)
        public Builder notes(Optional<String> notes) {
            this.notes = notes;
            return this;
        }

        public Builder notes(String notes) {
            this.notes = Optional.ofNullable(notes);
            return this;
        }

        public ChargeBackResponse build() {
            return new ChargeBackResponse(
                    attachments, contactEmail, contactName, createdAt, id, notes, additionalProperties);
        }
    }
}
