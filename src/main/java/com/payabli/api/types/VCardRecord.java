/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VCardRecord.Builder.class)
public final class VCardRecord {
    private final Optional<Boolean> vcardSent;

    private final Optional<String> cardToken;

    private final Optional<String> cardNumber;

    private final Optional<String> cvc;

    private final Optional<String> expirationDate;

    private final Optional<String> status;

    private final Optional<Double> amount;

    private final Optional<Double> currentBalance;

    private final Optional<Double> expenseLimit;

    private final Optional<String> expenseLimitPeriod;

    private final Optional<Integer> maxNumberOfUses;

    private final Optional<Integer> currentNumberOfUses;

    private final Optional<Boolean> exactAmount;

    private final Optional<String> mcc;

    private final Optional<String> tcc;

    private final Optional<String> misc1;

    private final Optional<String> misc2;

    private final Optional<OffsetDateTime> dateCreated;

    private final Optional<OffsetDateTime> dateModified;

    private final Optional<AssociatedVendor> associatedVendor;

    private final Optional<CustomerData> associatedCustomer;

    private final Optional<String> parentOrgName;

    private final Optional<String> paypointDbaname;

    private final Optional<String> paypointLegalname;

    private final Optional<String> paypointEntryname;

    private final Optional<String> externalPaypointId;

    private final Map<String, Object> additionalProperties;

    private VCardRecord(
            Optional<Boolean> vcardSent,
            Optional<String> cardToken,
            Optional<String> cardNumber,
            Optional<String> cvc,
            Optional<String> expirationDate,
            Optional<String> status,
            Optional<Double> amount,
            Optional<Double> currentBalance,
            Optional<Double> expenseLimit,
            Optional<String> expenseLimitPeriod,
            Optional<Integer> maxNumberOfUses,
            Optional<Integer> currentNumberOfUses,
            Optional<Boolean> exactAmount,
            Optional<String> mcc,
            Optional<String> tcc,
            Optional<String> misc1,
            Optional<String> misc2,
            Optional<OffsetDateTime> dateCreated,
            Optional<OffsetDateTime> dateModified,
            Optional<AssociatedVendor> associatedVendor,
            Optional<CustomerData> associatedCustomer,
            Optional<String> parentOrgName,
            Optional<String> paypointDbaname,
            Optional<String> paypointLegalname,
            Optional<String> paypointEntryname,
            Optional<String> externalPaypointId,
            Map<String, Object> additionalProperties) {
        this.vcardSent = vcardSent;
        this.cardToken = cardToken;
        this.cardNumber = cardNumber;
        this.cvc = cvc;
        this.expirationDate = expirationDate;
        this.status = status;
        this.amount = amount;
        this.currentBalance = currentBalance;
        this.expenseLimit = expenseLimit;
        this.expenseLimitPeriod = expenseLimitPeriod;
        this.maxNumberOfUses = maxNumberOfUses;
        this.currentNumberOfUses = currentNumberOfUses;
        this.exactAmount = exactAmount;
        this.mcc = mcc;
        this.tcc = tcc;
        this.misc1 = misc1;
        this.misc2 = misc2;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.associatedVendor = associatedVendor;
        this.associatedCustomer = associatedCustomer;
        this.parentOrgName = parentOrgName;
        this.paypointDbaname = paypointDbaname;
        this.paypointLegalname = paypointLegalname;
        this.paypointEntryname = paypointEntryname;
        this.externalPaypointId = externalPaypointId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return When <code>true</code>, the vCard has been sent.
     */
    @JsonProperty("vcardSent")
    public Optional<Boolean> getVcardSent() {
        return vcardSent;
    }

    @JsonProperty("cardToken")
    public Optional<String> getCardToken() {
        return cardToken;
    }

    /**
     * @return The vCard number.
     */
    @JsonProperty("cardNumber")
    public Optional<String> getCardNumber() {
        return cardNumber;
    }

    /**
     * @return The vCard CVC number.
     */
    @JsonProperty("cvc")
    public Optional<String> getCvc() {
        return cvc;
    }

    /**
     * @return Expiration date in format YYYY-MM-DD. The minimum time to expire is 3 months, maximum is 3 years. If not provided, the default is 6 months.
     */
    @JsonProperty("expirationDate")
    public Optional<String> getExpirationDate() {
        return expirationDate;
    }

    @JsonProperty("status")
    public Optional<String> getStatus() {
        return status;
    }

    /**
     * @return The vCard amount.
     */
    @JsonProperty("amount")
    public Optional<Double> getAmount() {
        return amount;
    }

    /**
     * @return The vCard's current balance.
     */
    @JsonProperty("currentBalance")
    public Optional<Double> getCurrentBalance() {
        return currentBalance;
    }

    @JsonProperty("expenseLimit")
    public Optional<Double> getExpenseLimit() {
        return expenseLimit;
    }

    @JsonProperty("expenseLimitPeriod")
    public Optional<String> getExpenseLimitPeriod() {
        return expenseLimitPeriod;
    }

    @JsonProperty("maxNumberOfUses")
    public Optional<Integer> getMaxNumberOfUses() {
        return maxNumberOfUses;
    }

    @JsonProperty("currentNumberOfUses")
    public Optional<Integer> getCurrentNumberOfUses() {
        return currentNumberOfUses;
    }

    @JsonProperty("exactAmount")
    public Optional<Boolean> getExactAmount() {
        return exactAmount;
    }

    /**
     * @return MCC assigned to vCard.
     */
    @JsonProperty("mcc")
    public Optional<String> getMcc() {
        return mcc;
    }

    /**
     * @return TCC assigned to vCard.
     */
    @JsonProperty("tcc")
    public Optional<String> getTcc() {
        return tcc;
    }

    /**
     * @return Custom field 1.
     */
    @JsonProperty("misc1")
    public Optional<String> getMisc1() {
        return misc1;
    }

    /**
     * @return Custom field 2.
     */
    @JsonProperty("misc2")
    public Optional<String> getMisc2() {
        return misc2;
    }

    @JsonProperty("dateCreated")
    public Optional<OffsetDateTime> getDateCreated() {
        return dateCreated;
    }

    @JsonProperty("dateModified")
    public Optional<OffsetDateTime> getDateModified() {
        return dateModified;
    }

    @JsonProperty("associatedVendor")
    public Optional<AssociatedVendor> getAssociatedVendor() {
        return associatedVendor;
    }

    @JsonProperty("associatedCustomer")
    public Optional<CustomerData> getAssociatedCustomer() {
        return associatedCustomer;
    }

    @JsonProperty("ParentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    /**
     * @return The paypoint's DBA name.
     */
    @JsonProperty("PaypointDbaname")
    public Optional<String> getPaypointDbaname() {
        return paypointDbaname;
    }

    /**
     * @return The paypoint's legal name.
     */
    @JsonProperty("PaypointLegalname")
    public Optional<String> getPaypointLegalname() {
        return paypointLegalname;
    }

    /**
     * @return The paypoint's entry name (entrypoint).
     */
    @JsonProperty("PaypointEntryname")
    public Optional<String> getPaypointEntryname() {
        return paypointEntryname;
    }

    @JsonProperty("externalPaypointID")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VCardRecord && equalTo((VCardRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VCardRecord other) {
        return vcardSent.equals(other.vcardSent)
                && cardToken.equals(other.cardToken)
                && cardNumber.equals(other.cardNumber)
                && cvc.equals(other.cvc)
                && expirationDate.equals(other.expirationDate)
                && status.equals(other.status)
                && amount.equals(other.amount)
                && currentBalance.equals(other.currentBalance)
                && expenseLimit.equals(other.expenseLimit)
                && expenseLimitPeriod.equals(other.expenseLimitPeriod)
                && maxNumberOfUses.equals(other.maxNumberOfUses)
                && currentNumberOfUses.equals(other.currentNumberOfUses)
                && exactAmount.equals(other.exactAmount)
                && mcc.equals(other.mcc)
                && tcc.equals(other.tcc)
                && misc1.equals(other.misc1)
                && misc2.equals(other.misc2)
                && dateCreated.equals(other.dateCreated)
                && dateModified.equals(other.dateModified)
                && associatedVendor.equals(other.associatedVendor)
                && associatedCustomer.equals(other.associatedCustomer)
                && parentOrgName.equals(other.parentOrgName)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointLegalname.equals(other.paypointLegalname)
                && paypointEntryname.equals(other.paypointEntryname)
                && externalPaypointId.equals(other.externalPaypointId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.vcardSent,
                this.cardToken,
                this.cardNumber,
                this.cvc,
                this.expirationDate,
                this.status,
                this.amount,
                this.currentBalance,
                this.expenseLimit,
                this.expenseLimitPeriod,
                this.maxNumberOfUses,
                this.currentNumberOfUses,
                this.exactAmount,
                this.mcc,
                this.tcc,
                this.misc1,
                this.misc2,
                this.dateCreated,
                this.dateModified,
                this.associatedVendor,
                this.associatedCustomer,
                this.parentOrgName,
                this.paypointDbaname,
                this.paypointLegalname,
                this.paypointEntryname,
                this.externalPaypointId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> vcardSent = Optional.empty();

        private Optional<String> cardToken = Optional.empty();

        private Optional<String> cardNumber = Optional.empty();

        private Optional<String> cvc = Optional.empty();

        private Optional<String> expirationDate = Optional.empty();

        private Optional<String> status = Optional.empty();

        private Optional<Double> amount = Optional.empty();

        private Optional<Double> currentBalance = Optional.empty();

        private Optional<Double> expenseLimit = Optional.empty();

        private Optional<String> expenseLimitPeriod = Optional.empty();

        private Optional<Integer> maxNumberOfUses = Optional.empty();

        private Optional<Integer> currentNumberOfUses = Optional.empty();

        private Optional<Boolean> exactAmount = Optional.empty();

        private Optional<String> mcc = Optional.empty();

        private Optional<String> tcc = Optional.empty();

        private Optional<String> misc1 = Optional.empty();

        private Optional<String> misc2 = Optional.empty();

        private Optional<OffsetDateTime> dateCreated = Optional.empty();

        private Optional<OffsetDateTime> dateModified = Optional.empty();

        private Optional<AssociatedVendor> associatedVendor = Optional.empty();

        private Optional<CustomerData> associatedCustomer = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<String> paypointEntryname = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(VCardRecord other) {
            vcardSent(other.getVcardSent());
            cardToken(other.getCardToken());
            cardNumber(other.getCardNumber());
            cvc(other.getCvc());
            expirationDate(other.getExpirationDate());
            status(other.getStatus());
            amount(other.getAmount());
            currentBalance(other.getCurrentBalance());
            expenseLimit(other.getExpenseLimit());
            expenseLimitPeriod(other.getExpenseLimitPeriod());
            maxNumberOfUses(other.getMaxNumberOfUses());
            currentNumberOfUses(other.getCurrentNumberOfUses());
            exactAmount(other.getExactAmount());
            mcc(other.getMcc());
            tcc(other.getTcc());
            misc1(other.getMisc1());
            misc2(other.getMisc2());
            dateCreated(other.getDateCreated());
            dateModified(other.getDateModified());
            associatedVendor(other.getAssociatedVendor());
            associatedCustomer(other.getAssociatedCustomer());
            parentOrgName(other.getParentOrgName());
            paypointDbaname(other.getPaypointDbaname());
            paypointLegalname(other.getPaypointLegalname());
            paypointEntryname(other.getPaypointEntryname());
            externalPaypointId(other.getExternalPaypointId());
            return this;
        }

        /**
         * <p>When <code>true</code>, the vCard has been sent.</p>
         */
        @JsonSetter(value = "vcardSent", nulls = Nulls.SKIP)
        public Builder vcardSent(Optional<Boolean> vcardSent) {
            this.vcardSent = vcardSent;
            return this;
        }

        public Builder vcardSent(Boolean vcardSent) {
            this.vcardSent = Optional.ofNullable(vcardSent);
            return this;
        }

        @JsonSetter(value = "cardToken", nulls = Nulls.SKIP)
        public Builder cardToken(Optional<String> cardToken) {
            this.cardToken = cardToken;
            return this;
        }

        public Builder cardToken(String cardToken) {
            this.cardToken = Optional.ofNullable(cardToken);
            return this;
        }

        /**
         * <p>The vCard number.</p>
         */
        @JsonSetter(value = "cardNumber", nulls = Nulls.SKIP)
        public Builder cardNumber(Optional<String> cardNumber) {
            this.cardNumber = cardNumber;
            return this;
        }

        public Builder cardNumber(String cardNumber) {
            this.cardNumber = Optional.ofNullable(cardNumber);
            return this;
        }

        /**
         * <p>The vCard CVC number.</p>
         */
        @JsonSetter(value = "cvc", nulls = Nulls.SKIP)
        public Builder cvc(Optional<String> cvc) {
            this.cvc = cvc;
            return this;
        }

        public Builder cvc(String cvc) {
            this.cvc = Optional.ofNullable(cvc);
            return this;
        }

        /**
         * <p>Expiration date in format YYYY-MM-DD. The minimum time to expire is 3 months, maximum is 3 years. If not provided, the default is 6 months.</p>
         */
        @JsonSetter(value = "expirationDate", nulls = Nulls.SKIP)
        public Builder expirationDate(Optional<String> expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }

        public Builder expirationDate(String expirationDate) {
            this.expirationDate = Optional.ofNullable(expirationDate);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<String> status) {
            this.status = status;
            return this;
        }

        public Builder status(String status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>The vCard amount.</p>
         */
        @JsonSetter(value = "amount", nulls = Nulls.SKIP)
        public Builder amount(Optional<Double> amount) {
            this.amount = amount;
            return this;
        }

        public Builder amount(Double amount) {
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * <p>The vCard's current balance.</p>
         */
        @JsonSetter(value = "currentBalance", nulls = Nulls.SKIP)
        public Builder currentBalance(Optional<Double> currentBalance) {
            this.currentBalance = currentBalance;
            return this;
        }

        public Builder currentBalance(Double currentBalance) {
            this.currentBalance = Optional.ofNullable(currentBalance);
            return this;
        }

        @JsonSetter(value = "expenseLimit", nulls = Nulls.SKIP)
        public Builder expenseLimit(Optional<Double> expenseLimit) {
            this.expenseLimit = expenseLimit;
            return this;
        }

        public Builder expenseLimit(Double expenseLimit) {
            this.expenseLimit = Optional.ofNullable(expenseLimit);
            return this;
        }

        @JsonSetter(value = "expenseLimitPeriod", nulls = Nulls.SKIP)
        public Builder expenseLimitPeriod(Optional<String> expenseLimitPeriod) {
            this.expenseLimitPeriod = expenseLimitPeriod;
            return this;
        }

        public Builder expenseLimitPeriod(String expenseLimitPeriod) {
            this.expenseLimitPeriod = Optional.ofNullable(expenseLimitPeriod);
            return this;
        }

        @JsonSetter(value = "maxNumberOfUses", nulls = Nulls.SKIP)
        public Builder maxNumberOfUses(Optional<Integer> maxNumberOfUses) {
            this.maxNumberOfUses = maxNumberOfUses;
            return this;
        }

        public Builder maxNumberOfUses(Integer maxNumberOfUses) {
            this.maxNumberOfUses = Optional.ofNullable(maxNumberOfUses);
            return this;
        }

        @JsonSetter(value = "currentNumberOfUses", nulls = Nulls.SKIP)
        public Builder currentNumberOfUses(Optional<Integer> currentNumberOfUses) {
            this.currentNumberOfUses = currentNumberOfUses;
            return this;
        }

        public Builder currentNumberOfUses(Integer currentNumberOfUses) {
            this.currentNumberOfUses = Optional.ofNullable(currentNumberOfUses);
            return this;
        }

        @JsonSetter(value = "exactAmount", nulls = Nulls.SKIP)
        public Builder exactAmount(Optional<Boolean> exactAmount) {
            this.exactAmount = exactAmount;
            return this;
        }

        public Builder exactAmount(Boolean exactAmount) {
            this.exactAmount = Optional.ofNullable(exactAmount);
            return this;
        }

        /**
         * <p>MCC assigned to vCard.</p>
         */
        @JsonSetter(value = "mcc", nulls = Nulls.SKIP)
        public Builder mcc(Optional<String> mcc) {
            this.mcc = mcc;
            return this;
        }

        public Builder mcc(String mcc) {
            this.mcc = Optional.ofNullable(mcc);
            return this;
        }

        /**
         * <p>TCC assigned to vCard.</p>
         */
        @JsonSetter(value = "tcc", nulls = Nulls.SKIP)
        public Builder tcc(Optional<String> tcc) {
            this.tcc = tcc;
            return this;
        }

        public Builder tcc(String tcc) {
            this.tcc = Optional.ofNullable(tcc);
            return this;
        }

        /**
         * <p>Custom field 1.</p>
         */
        @JsonSetter(value = "misc1", nulls = Nulls.SKIP)
        public Builder misc1(Optional<String> misc1) {
            this.misc1 = misc1;
            return this;
        }

        public Builder misc1(String misc1) {
            this.misc1 = Optional.ofNullable(misc1);
            return this;
        }

        /**
         * <p>Custom field 2.</p>
         */
        @JsonSetter(value = "misc2", nulls = Nulls.SKIP)
        public Builder misc2(Optional<String> misc2) {
            this.misc2 = misc2;
            return this;
        }

        public Builder misc2(String misc2) {
            this.misc2 = Optional.ofNullable(misc2);
            return this;
        }

        @JsonSetter(value = "dateCreated", nulls = Nulls.SKIP)
        public Builder dateCreated(Optional<OffsetDateTime> dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }

        public Builder dateCreated(OffsetDateTime dateCreated) {
            this.dateCreated = Optional.ofNullable(dateCreated);
            return this;
        }

        @JsonSetter(value = "dateModified", nulls = Nulls.SKIP)
        public Builder dateModified(Optional<OffsetDateTime> dateModified) {
            this.dateModified = dateModified;
            return this;
        }

        public Builder dateModified(OffsetDateTime dateModified) {
            this.dateModified = Optional.ofNullable(dateModified);
            return this;
        }

        @JsonSetter(value = "associatedVendor", nulls = Nulls.SKIP)
        public Builder associatedVendor(Optional<AssociatedVendor> associatedVendor) {
            this.associatedVendor = associatedVendor;
            return this;
        }

        public Builder associatedVendor(AssociatedVendor associatedVendor) {
            this.associatedVendor = Optional.ofNullable(associatedVendor);
            return this;
        }

        @JsonSetter(value = "associatedCustomer", nulls = Nulls.SKIP)
        public Builder associatedCustomer(Optional<CustomerData> associatedCustomer) {
            this.associatedCustomer = associatedCustomer;
            return this;
        }

        public Builder associatedCustomer(CustomerData associatedCustomer) {
            this.associatedCustomer = Optional.ofNullable(associatedCustomer);
            return this;
        }

        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        /**
         * <p>The paypoint's DBA name.</p>
         */
        @JsonSetter(value = "PaypointDbaname", nulls = Nulls.SKIP)
        public Builder paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        public Builder paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        /**
         * <p>The paypoint's legal name.</p>
         */
        @JsonSetter(value = "PaypointLegalname", nulls = Nulls.SKIP)
        public Builder paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        public Builder paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        /**
         * <p>The paypoint's entry name (entrypoint).</p>
         */
        @JsonSetter(value = "PaypointEntryname", nulls = Nulls.SKIP)
        public Builder paypointEntryname(Optional<String> paypointEntryname) {
            this.paypointEntryname = paypointEntryname;
            return this;
        }

        public Builder paypointEntryname(String paypointEntryname) {
            this.paypointEntryname = Optional.ofNullable(paypointEntryname);
            return this;
        }

        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        public VCardRecord build() {
            return new VCardRecord(
                    vcardSent,
                    cardToken,
                    cardNumber,
                    cvc,
                    expirationDate,
                    status,
                    amount,
                    currentBalance,
                    expenseLimit,
                    expenseLimitPeriod,
                    maxNumberOfUses,
                    currentNumberOfUses,
                    exactAmount,
                    mcc,
                    tcc,
                    misc1,
                    misc2,
                    dateCreated,
                    dateModified,
                    associatedVendor,
                    associatedCustomer,
                    parentOrgName,
                    paypointDbaname,
                    paypointLegalname,
                    paypointEntryname,
                    externalPaypointId,
                    additionalProperties);
        }
    }
}
