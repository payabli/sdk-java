/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OSection.Builder.class)
public final class OSection {
    private final Optional<CList> contactList;

    private final Optional<OList> ownList;

    private final Map<String, Object> additionalProperties;

    private OSection(Optional<CList> contactList, Optional<OList> ownList, Map<String, Object> additionalProperties) {
        this.contactList = contactList;
        this.ownList = ownList;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("contact_list")
    public Optional<CList> getContactList() {
        return contactList;
    }

    @JsonProperty("own_list")
    public Optional<OList> getOwnList() {
        return ownList;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OSection && equalTo((OSection) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OSection other) {
        return contactList.equals(other.contactList) && ownList.equals(other.ownList);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.contactList, this.ownList);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CList> contactList = Optional.empty();

        private Optional<OList> ownList = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OSection other) {
            contactList(other.getContactList());
            ownList(other.getOwnList());
            return this;
        }

        @JsonSetter(value = "contact_list", nulls = Nulls.SKIP)
        public Builder contactList(Optional<CList> contactList) {
            this.contactList = contactList;
            return this;
        }

        public Builder contactList(CList contactList) {
            this.contactList = Optional.ofNullable(contactList);
            return this;
        }

        @JsonSetter(value = "own_list", nulls = Nulls.SKIP)
        public Builder ownList(Optional<OList> ownList) {
            this.ownList = ownList;
            return this;
        }

        public Builder ownList(OList ownList) {
            this.ownList = Optional.ofNullable(ownList);
            return this;
        }

        public OSection build() {
            return new OSection(contactList, ownList, additionalProperties);
        }
    }
}
