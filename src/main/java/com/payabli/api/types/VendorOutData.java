/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VendorOutData.Builder.class)
public final class VendorOutData {
    private final Optional<Map<String, Optional<Map<String, Object>>>> additionalData;

    private final Optional<String> address1;

    private final Optional<String> address2;

    private final Optional<BillingData> billingData;

    private final String city;

    private final Optional<List<Contacts>> contacts;

    private final String country;

    private final Optional<String> customerVendorAccount;

    private final String ein;

    private final Optional<String> email;

    private final Optional<Long> internalReferenceId;

    private final Optional<String> locationCode;

    private final Optional<String> mcc;

    private final String name1;

    private final Optional<String> name2;

    private final Optional<String> payeeName1;

    private final Optional<String> payeeName2;

    private final Optional<VendorPaymentMethod> paymentMethod;

    private final String phone;

    private final Optional<String> remitAddress1;

    private final Optional<String> remitAddress2;

    private final Optional<String> remitCity;

    private final Optional<String> remitCountry;

    private final Optional<String> remitState;

    private final Optional<String> remitZip;

    private final String state;

    private final Optional<Integer> vendorId;

    private final Optional<String> vendorNumber;

    private final Optional<Integer> vendorStatus;

    private final String zip;

    private final Map<String, Object> additionalProperties;

    private VendorOutData(
            Optional<Map<String, Optional<Map<String, Object>>>> additionalData,
            Optional<String> address1,
            Optional<String> address2,
            Optional<BillingData> billingData,
            String city,
            Optional<List<Contacts>> contacts,
            String country,
            Optional<String> customerVendorAccount,
            String ein,
            Optional<String> email,
            Optional<Long> internalReferenceId,
            Optional<String> locationCode,
            Optional<String> mcc,
            String name1,
            Optional<String> name2,
            Optional<String> payeeName1,
            Optional<String> payeeName2,
            Optional<VendorPaymentMethod> paymentMethod,
            String phone,
            Optional<String> remitAddress1,
            Optional<String> remitAddress2,
            Optional<String> remitCity,
            Optional<String> remitCountry,
            Optional<String> remitState,
            Optional<String> remitZip,
            String state,
            Optional<Integer> vendorId,
            Optional<String> vendorNumber,
            Optional<Integer> vendorStatus,
            String zip,
            Map<String, Object> additionalProperties) {
        this.additionalData = additionalData;
        this.address1 = address1;
        this.address2 = address2;
        this.billingData = billingData;
        this.city = city;
        this.contacts = contacts;
        this.country = country;
        this.customerVendorAccount = customerVendorAccount;
        this.ein = ein;
        this.email = email;
        this.internalReferenceId = internalReferenceId;
        this.locationCode = locationCode;
        this.mcc = mcc;
        this.name1 = name1;
        this.name2 = name2;
        this.payeeName1 = payeeName1;
        this.payeeName2 = payeeName2;
        this.paymentMethod = paymentMethod;
        this.phone = phone;
        this.remitAddress1 = remitAddress1;
        this.remitAddress2 = remitAddress2;
        this.remitCity = remitCity;
        this.remitCountry = remitCountry;
        this.remitState = remitState;
        this.remitZip = remitZip;
        this.state = state;
        this.vendorId = vendorId;
        this.vendorNumber = vendorNumber;
        this.vendorStatus = vendorStatus;
        this.zip = zip;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("additionalData")
    public Optional<Map<String, Optional<Map<String, Object>>>> getAdditionalData() {
        return additionalData;
    }

    /**
     * @return Vendor's address
     */
    @JsonProperty("Address1")
    public Optional<String> getAddress1() {
        return address1;
    }

    /**
     * @return Additional line for vendor's address.
     */
    @JsonProperty("Address2")
    public Optional<String> getAddress2() {
        return address2;
    }

    /**
     * @return Object containing vendor's bank information.
     */
    @JsonProperty("BillingData")
    public Optional<BillingData> getBillingData() {
        return billingData;
    }

    /**
     * @return Vendor's city.
     */
    @JsonProperty("City")
    public String getCity() {
        return city;
    }

    /**
     * @return Array of objects describing the vendor's contacts.
     */
    @JsonProperty("Contacts")
    public Optional<List<Contacts>> getContacts() {
        return contacts;
    }

    /**
     * @return Vendor's country.
     */
    @JsonProperty("Country")
    public String getCountry() {
        return country;
    }

    /**
     * @return Account number of paypoint in the vendor side.
     */
    @JsonProperty("customerVendorAccount")
    public Optional<String> getCustomerVendorAccount() {
        return customerVendorAccount;
    }

    /**
     * @return EIN/Tax ID for vendor. In reponses, this field is masked, and looks like: <code>XXXXX6789</code>.
     */
    @JsonProperty("EIN")
    public String getEin() {
        return ein;
    }

    /**
     * @return Vendor's email address. Required for vCard.
     */
    @JsonProperty("Email")
    public Optional<String> getEmail() {
        return email;
    }

    /**
     * @return Internal identifier for global vendor account.
     */
    @JsonProperty("InternalReferenceId")
    public Optional<Long> getInternalReferenceId() {
        return internalReferenceId;
    }

    @JsonProperty("LocationCode")
    public Optional<String> getLocationCode() {
        return locationCode;
    }

    @JsonProperty("Mcc")
    public Optional<String> getMcc() {
        return mcc;
    }

    /**
     * @return Primary name for vendor. Required for new vendor.
     */
    @JsonProperty("Name1")
    public String getName1() {
        return name1;
    }

    /**
     * @return Secondary name for vendor.
     */
    @JsonProperty("Name2")
    public Optional<String> getName2() {
        return name2;
    }

    @JsonProperty("payeeName1")
    public Optional<String> getPayeeName1() {
        return payeeName1;
    }

    @JsonProperty("payeeName2")
    public Optional<String> getPayeeName2() {
        return payeeName2;
    }

    @JsonProperty("PaymentMethod")
    public Optional<VendorPaymentMethod> getPaymentMethod() {
        return paymentMethod;
    }

    /**
     * @return Vendor's phone number
     */
    @JsonProperty("Phone")
    public String getPhone() {
        return phone;
    }

    @JsonProperty("remitAddress1")
    public Optional<String> getRemitAddress1() {
        return remitAddress1;
    }

    @JsonProperty("remitAddress2")
    public Optional<String> getRemitAddress2() {
        return remitAddress2;
    }

    @JsonProperty("remitCity")
    public Optional<String> getRemitCity() {
        return remitCity;
    }

    @JsonProperty("remitCountry")
    public Optional<String> getRemitCountry() {
        return remitCountry;
    }

    @JsonProperty("remitState")
    public Optional<String> getRemitState() {
        return remitState;
    }

    @JsonProperty("remitZip")
    public Optional<String> getRemitZip() {
        return remitZip;
    }

    /**
     * @return Vendor's state. Must be a 2 character state code.
     */
    @JsonProperty("State")
    public String getState() {
        return state;
    }

    /**
     * @return Payabli identifier for vendor record. Required when <code>VendorNumber</code> isn't included.
     */
    @JsonProperty("VendorId")
    public Optional<Integer> getVendorId() {
        return vendorId;
    }

    @JsonProperty("VendorNumber")
    public Optional<String> getVendorNumber() {
        return vendorNumber;
    }

    @JsonProperty("VendorStatus")
    public Optional<Integer> getVendorStatus() {
        return vendorStatus;
    }

    /**
     * @return Vendor's zip code.
     */
    @JsonProperty("Zip")
    public String getZip() {
        return zip;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VendorOutData && equalTo((VendorOutData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VendorOutData other) {
        return additionalData.equals(other.additionalData)
                && address1.equals(other.address1)
                && address2.equals(other.address2)
                && billingData.equals(other.billingData)
                && city.equals(other.city)
                && contacts.equals(other.contacts)
                && country.equals(other.country)
                && customerVendorAccount.equals(other.customerVendorAccount)
                && ein.equals(other.ein)
                && email.equals(other.email)
                && internalReferenceId.equals(other.internalReferenceId)
                && locationCode.equals(other.locationCode)
                && mcc.equals(other.mcc)
                && name1.equals(other.name1)
                && name2.equals(other.name2)
                && payeeName1.equals(other.payeeName1)
                && payeeName2.equals(other.payeeName2)
                && paymentMethod.equals(other.paymentMethod)
                && phone.equals(other.phone)
                && remitAddress1.equals(other.remitAddress1)
                && remitAddress2.equals(other.remitAddress2)
                && remitCity.equals(other.remitCity)
                && remitCountry.equals(other.remitCountry)
                && remitState.equals(other.remitState)
                && remitZip.equals(other.remitZip)
                && state.equals(other.state)
                && vendorId.equals(other.vendorId)
                && vendorNumber.equals(other.vendorNumber)
                && vendorStatus.equals(other.vendorStatus)
                && zip.equals(other.zip);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.additionalData,
                this.address1,
                this.address2,
                this.billingData,
                this.city,
                this.contacts,
                this.country,
                this.customerVendorAccount,
                this.ein,
                this.email,
                this.internalReferenceId,
                this.locationCode,
                this.mcc,
                this.name1,
                this.name2,
                this.payeeName1,
                this.payeeName2,
                this.paymentMethod,
                this.phone,
                this.remitAddress1,
                this.remitAddress2,
                this.remitCity,
                this.remitCountry,
                this.remitState,
                this.remitZip,
                this.state,
                this.vendorId,
                this.vendorNumber,
                this.vendorStatus,
                this.zip);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CityStage builder() {
        return new Builder();
    }

    public interface CityStage {
        /**
         * <p>Vendor's city.</p>
         */
        CountryStage city(@NotNull String city);

        Builder from(VendorOutData other);
    }

    public interface CountryStage {
        /**
         * <p>Vendor's country.</p>
         */
        EinStage country(@NotNull String country);
    }

    public interface EinStage {
        /**
         * <p>EIN/Tax ID for vendor. In reponses, this field is masked, and looks like: <code>XXXXX6789</code>.</p>
         */
        Name1Stage ein(@NotNull String ein);
    }

    public interface Name1Stage {
        /**
         * <p>Primary name for vendor. Required for new vendor.</p>
         */
        PhoneStage name1(@NotNull String name1);
    }

    public interface PhoneStage {
        /**
         * <p>Vendor's phone number</p>
         */
        StateStage phone(@NotNull String phone);
    }

    public interface StateStage {
        /**
         * <p>Vendor's state. Must be a 2 character state code.</p>
         */
        ZipStage state(@NotNull String state);
    }

    public interface ZipStage {
        /**
         * <p>Vendor's zip code.</p>
         */
        _FinalStage zip(@NotNull String zip);
    }

    public interface _FinalStage {
        VendorOutData build();

        _FinalStage additionalData(Optional<Map<String, Optional<Map<String, Object>>>> additionalData);

        _FinalStage additionalData(Map<String, Optional<Map<String, Object>>> additionalData);

        /**
         * <p>Vendor's address</p>
         */
        _FinalStage address1(Optional<String> address1);

        _FinalStage address1(String address1);

        /**
         * <p>Additional line for vendor's address.</p>
         */
        _FinalStage address2(Optional<String> address2);

        _FinalStage address2(String address2);

        /**
         * <p>Object containing vendor's bank information.</p>
         */
        _FinalStage billingData(Optional<BillingData> billingData);

        _FinalStage billingData(BillingData billingData);

        /**
         * <p>Array of objects describing the vendor's contacts.</p>
         */
        _FinalStage contacts(Optional<List<Contacts>> contacts);

        _FinalStage contacts(List<Contacts> contacts);

        /**
         * <p>Account number of paypoint in the vendor side.</p>
         */
        _FinalStage customerVendorAccount(Optional<String> customerVendorAccount);

        _FinalStage customerVendorAccount(String customerVendorAccount);

        /**
         * <p>Vendor's email address. Required for vCard.</p>
         */
        _FinalStage email(Optional<String> email);

        _FinalStage email(String email);

        /**
         * <p>Internal identifier for global vendor account.</p>
         */
        _FinalStage internalReferenceId(Optional<Long> internalReferenceId);

        _FinalStage internalReferenceId(Long internalReferenceId);

        _FinalStage locationCode(Optional<String> locationCode);

        _FinalStage locationCode(String locationCode);

        _FinalStage mcc(Optional<String> mcc);

        _FinalStage mcc(String mcc);

        /**
         * <p>Secondary name for vendor.</p>
         */
        _FinalStage name2(Optional<String> name2);

        _FinalStage name2(String name2);

        _FinalStage payeeName1(Optional<String> payeeName1);

        _FinalStage payeeName1(String payeeName1);

        _FinalStage payeeName2(Optional<String> payeeName2);

        _FinalStage payeeName2(String payeeName2);

        _FinalStage paymentMethod(Optional<VendorPaymentMethod> paymentMethod);

        _FinalStage paymentMethod(VendorPaymentMethod paymentMethod);

        _FinalStage remitAddress1(Optional<String> remitAddress1);

        _FinalStage remitAddress1(String remitAddress1);

        _FinalStage remitAddress2(Optional<String> remitAddress2);

        _FinalStage remitAddress2(String remitAddress2);

        _FinalStage remitCity(Optional<String> remitCity);

        _FinalStage remitCity(String remitCity);

        _FinalStage remitCountry(Optional<String> remitCountry);

        _FinalStage remitCountry(String remitCountry);

        _FinalStage remitState(Optional<String> remitState);

        _FinalStage remitState(String remitState);

        _FinalStage remitZip(Optional<String> remitZip);

        _FinalStage remitZip(String remitZip);

        /**
         * <p>Payabli identifier for vendor record. Required when <code>VendorNumber</code> isn't included.</p>
         */
        _FinalStage vendorId(Optional<Integer> vendorId);

        _FinalStage vendorId(Integer vendorId);

        _FinalStage vendorNumber(Optional<String> vendorNumber);

        _FinalStage vendorNumber(String vendorNumber);

        _FinalStage vendorStatus(Optional<Integer> vendorStatus);

        _FinalStage vendorStatus(Integer vendorStatus);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements CityStage, CountryStage, EinStage, Name1Stage, PhoneStage, StateStage, ZipStage, _FinalStage {
        private String city;

        private String country;

        private String ein;

        private String name1;

        private String phone;

        private String state;

        private String zip;

        private Optional<Integer> vendorStatus = Optional.empty();

        private Optional<String> vendorNumber = Optional.empty();

        private Optional<Integer> vendorId = Optional.empty();

        private Optional<String> remitZip = Optional.empty();

        private Optional<String> remitState = Optional.empty();

        private Optional<String> remitCountry = Optional.empty();

        private Optional<String> remitCity = Optional.empty();

        private Optional<String> remitAddress2 = Optional.empty();

        private Optional<String> remitAddress1 = Optional.empty();

        private Optional<VendorPaymentMethod> paymentMethod = Optional.empty();

        private Optional<String> payeeName2 = Optional.empty();

        private Optional<String> payeeName1 = Optional.empty();

        private Optional<String> name2 = Optional.empty();

        private Optional<String> mcc = Optional.empty();

        private Optional<String> locationCode = Optional.empty();

        private Optional<Long> internalReferenceId = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> customerVendorAccount = Optional.empty();

        private Optional<List<Contacts>> contacts = Optional.empty();

        private Optional<BillingData> billingData = Optional.empty();

        private Optional<String> address2 = Optional.empty();

        private Optional<String> address1 = Optional.empty();

        private Optional<Map<String, Optional<Map<String, Object>>>> additionalData = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(VendorOutData other) {
            additionalData(other.getAdditionalData());
            address1(other.getAddress1());
            address2(other.getAddress2());
            billingData(other.getBillingData());
            city(other.getCity());
            contacts(other.getContacts());
            country(other.getCountry());
            customerVendorAccount(other.getCustomerVendorAccount());
            ein(other.getEin());
            email(other.getEmail());
            internalReferenceId(other.getInternalReferenceId());
            locationCode(other.getLocationCode());
            mcc(other.getMcc());
            name1(other.getName1());
            name2(other.getName2());
            payeeName1(other.getPayeeName1());
            payeeName2(other.getPayeeName2());
            paymentMethod(other.getPaymentMethod());
            phone(other.getPhone());
            remitAddress1(other.getRemitAddress1());
            remitAddress2(other.getRemitAddress2());
            remitCity(other.getRemitCity());
            remitCountry(other.getRemitCountry());
            remitState(other.getRemitState());
            remitZip(other.getRemitZip());
            state(other.getState());
            vendorId(other.getVendorId());
            vendorNumber(other.getVendorNumber());
            vendorStatus(other.getVendorStatus());
            zip(other.getZip());
            return this;
        }

        /**
         * <p>Vendor's city.</p>
         * <p>Vendor's city.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("City")
        public CountryStage city(@NotNull String city) {
            this.city = Objects.requireNonNull(city, "city must not be null");
            return this;
        }

        /**
         * <p>Vendor's country.</p>
         * <p>Vendor's country.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("Country")
        public EinStage country(@NotNull String country) {
            this.country = Objects.requireNonNull(country, "country must not be null");
            return this;
        }

        /**
         * <p>EIN/Tax ID for vendor. In reponses, this field is masked, and looks like: <code>XXXXX6789</code>.</p>
         * <p>EIN/Tax ID for vendor. In reponses, this field is masked, and looks like: <code>XXXXX6789</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("EIN")
        public Name1Stage ein(@NotNull String ein) {
            this.ein = Objects.requireNonNull(ein, "ein must not be null");
            return this;
        }

        /**
         * <p>Primary name for vendor. Required for new vendor.</p>
         * <p>Primary name for vendor. Required for new vendor.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("Name1")
        public PhoneStage name1(@NotNull String name1) {
            this.name1 = Objects.requireNonNull(name1, "name1 must not be null");
            return this;
        }

        /**
         * <p>Vendor's phone number</p>
         * <p>Vendor's phone number</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("Phone")
        public StateStage phone(@NotNull String phone) {
            this.phone = Objects.requireNonNull(phone, "phone must not be null");
            return this;
        }

        /**
         * <p>Vendor's state. Must be a 2 character state code.</p>
         * <p>Vendor's state. Must be a 2 character state code.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("State")
        public ZipStage state(@NotNull String state) {
            this.state = Objects.requireNonNull(state, "state must not be null");
            return this;
        }

        /**
         * <p>Vendor's zip code.</p>
         * <p>Vendor's zip code.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("Zip")
        public _FinalStage zip(@NotNull String zip) {
            this.zip = Objects.requireNonNull(zip, "zip must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage vendorStatus(Integer vendorStatus) {
            this.vendorStatus = Optional.ofNullable(vendorStatus);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "VendorStatus", nulls = Nulls.SKIP)
        public _FinalStage vendorStatus(Optional<Integer> vendorStatus) {
            this.vendorStatus = vendorStatus;
            return this;
        }

        @java.lang.Override
        public _FinalStage vendorNumber(String vendorNumber) {
            this.vendorNumber = Optional.ofNullable(vendorNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "VendorNumber", nulls = Nulls.SKIP)
        public _FinalStage vendorNumber(Optional<String> vendorNumber) {
            this.vendorNumber = vendorNumber;
            return this;
        }

        /**
         * <p>Payabli identifier for vendor record. Required when <code>VendorNumber</code> isn't included.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage vendorId(Integer vendorId) {
            this.vendorId = Optional.ofNullable(vendorId);
            return this;
        }

        /**
         * <p>Payabli identifier for vendor record. Required when <code>VendorNumber</code> isn't included.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "VendorId", nulls = Nulls.SKIP)
        public _FinalStage vendorId(Optional<Integer> vendorId) {
            this.vendorId = vendorId;
            return this;
        }

        @java.lang.Override
        public _FinalStage remitZip(String remitZip) {
            this.remitZip = Optional.ofNullable(remitZip);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "remitZip", nulls = Nulls.SKIP)
        public _FinalStage remitZip(Optional<String> remitZip) {
            this.remitZip = remitZip;
            return this;
        }

        @java.lang.Override
        public _FinalStage remitState(String remitState) {
            this.remitState = Optional.ofNullable(remitState);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "remitState", nulls = Nulls.SKIP)
        public _FinalStage remitState(Optional<String> remitState) {
            this.remitState = remitState;
            return this;
        }

        @java.lang.Override
        public _FinalStage remitCountry(String remitCountry) {
            this.remitCountry = Optional.ofNullable(remitCountry);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "remitCountry", nulls = Nulls.SKIP)
        public _FinalStage remitCountry(Optional<String> remitCountry) {
            this.remitCountry = remitCountry;
            return this;
        }

        @java.lang.Override
        public _FinalStage remitCity(String remitCity) {
            this.remitCity = Optional.ofNullable(remitCity);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "remitCity", nulls = Nulls.SKIP)
        public _FinalStage remitCity(Optional<String> remitCity) {
            this.remitCity = remitCity;
            return this;
        }

        @java.lang.Override
        public _FinalStage remitAddress2(String remitAddress2) {
            this.remitAddress2 = Optional.ofNullable(remitAddress2);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "remitAddress2", nulls = Nulls.SKIP)
        public _FinalStage remitAddress2(Optional<String> remitAddress2) {
            this.remitAddress2 = remitAddress2;
            return this;
        }

        @java.lang.Override
        public _FinalStage remitAddress1(String remitAddress1) {
            this.remitAddress1 = Optional.ofNullable(remitAddress1);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "remitAddress1", nulls = Nulls.SKIP)
        public _FinalStage remitAddress1(Optional<String> remitAddress1) {
            this.remitAddress1 = remitAddress1;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentMethod(VendorPaymentMethod paymentMethod) {
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "PaymentMethod", nulls = Nulls.SKIP)
        public _FinalStage paymentMethod(Optional<VendorPaymentMethod> paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }

        @java.lang.Override
        public _FinalStage payeeName2(String payeeName2) {
            this.payeeName2 = Optional.ofNullable(payeeName2);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "payeeName2", nulls = Nulls.SKIP)
        public _FinalStage payeeName2(Optional<String> payeeName2) {
            this.payeeName2 = payeeName2;
            return this;
        }

        @java.lang.Override
        public _FinalStage payeeName1(String payeeName1) {
            this.payeeName1 = Optional.ofNullable(payeeName1);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "payeeName1", nulls = Nulls.SKIP)
        public _FinalStage payeeName1(Optional<String> payeeName1) {
            this.payeeName1 = payeeName1;
            return this;
        }

        /**
         * <p>Secondary name for vendor.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name2(String name2) {
            this.name2 = Optional.ofNullable(name2);
            return this;
        }

        /**
         * <p>Secondary name for vendor.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "Name2", nulls = Nulls.SKIP)
        public _FinalStage name2(Optional<String> name2) {
            this.name2 = name2;
            return this;
        }

        @java.lang.Override
        public _FinalStage mcc(String mcc) {
            this.mcc = Optional.ofNullable(mcc);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "Mcc", nulls = Nulls.SKIP)
        public _FinalStage mcc(Optional<String> mcc) {
            this.mcc = mcc;
            return this;
        }

        @java.lang.Override
        public _FinalStage locationCode(String locationCode) {
            this.locationCode = Optional.ofNullable(locationCode);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "LocationCode", nulls = Nulls.SKIP)
        public _FinalStage locationCode(Optional<String> locationCode) {
            this.locationCode = locationCode;
            return this;
        }

        /**
         * <p>Internal identifier for global vendor account.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage internalReferenceId(Long internalReferenceId) {
            this.internalReferenceId = Optional.ofNullable(internalReferenceId);
            return this;
        }

        /**
         * <p>Internal identifier for global vendor account.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "InternalReferenceId", nulls = Nulls.SKIP)
        public _FinalStage internalReferenceId(Optional<Long> internalReferenceId) {
            this.internalReferenceId = internalReferenceId;
            return this;
        }

        /**
         * <p>Vendor's email address. Required for vCard.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * <p>Vendor's email address. Required for vCard.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "Email", nulls = Nulls.SKIP)
        public _FinalStage email(Optional<String> email) {
            this.email = email;
            return this;
        }

        /**
         * <p>Account number of paypoint in the vendor side.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerVendorAccount(String customerVendorAccount) {
            this.customerVendorAccount = Optional.ofNullable(customerVendorAccount);
            return this;
        }

        /**
         * <p>Account number of paypoint in the vendor side.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customerVendorAccount", nulls = Nulls.SKIP)
        public _FinalStage customerVendorAccount(Optional<String> customerVendorAccount) {
            this.customerVendorAccount = customerVendorAccount;
            return this;
        }

        /**
         * <p>Array of objects describing the vendor's contacts.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage contacts(List<Contacts> contacts) {
            this.contacts = Optional.ofNullable(contacts);
            return this;
        }

        /**
         * <p>Array of objects describing the vendor's contacts.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "Contacts", nulls = Nulls.SKIP)
        public _FinalStage contacts(Optional<List<Contacts>> contacts) {
            this.contacts = contacts;
            return this;
        }

        /**
         * <p>Object containing vendor's bank information.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage billingData(BillingData billingData) {
            this.billingData = Optional.ofNullable(billingData);
            return this;
        }

        /**
         * <p>Object containing vendor's bank information.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "BillingData", nulls = Nulls.SKIP)
        public _FinalStage billingData(Optional<BillingData> billingData) {
            this.billingData = billingData;
            return this;
        }

        /**
         * <p>Additional line for vendor's address.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage address2(String address2) {
            this.address2 = Optional.ofNullable(address2);
            return this;
        }

        /**
         * <p>Additional line for vendor's address.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "Address2", nulls = Nulls.SKIP)
        public _FinalStage address2(Optional<String> address2) {
            this.address2 = address2;
            return this;
        }

        /**
         * <p>Vendor's address</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage address1(String address1) {
            this.address1 = Optional.ofNullable(address1);
            return this;
        }

        /**
         * <p>Vendor's address</p>
         */
        @java.lang.Override
        @JsonSetter(value = "Address1", nulls = Nulls.SKIP)
        public _FinalStage address1(Optional<String> address1) {
            this.address1 = address1;
            return this;
        }

        @java.lang.Override
        public _FinalStage additionalData(Map<String, Optional<Map<String, Object>>> additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "additionalData", nulls = Nulls.SKIP)
        public _FinalStage additionalData(Optional<Map<String, Optional<Map<String, Object>>>> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        @java.lang.Override
        public VendorOutData build() {
            return new VendorOutData(
                    additionalData,
                    address1,
                    address2,
                    billingData,
                    city,
                    contacts,
                    country,
                    customerVendorAccount,
                    ein,
                    email,
                    internalReferenceId,
                    locationCode,
                    mcc,
                    name1,
                    name2,
                    payeeName1,
                    payeeName2,
                    paymentMethod,
                    phone,
                    remitAddress1,
                    remitAddress2,
                    remitCity,
                    remitCountry,
                    remitState,
                    remitZip,
                    state,
                    vendorId,
                    vendorNumber,
                    vendorStatus,
                    zip,
                    additionalProperties);
        }
    }
}
