/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryResponseSettlementsRecordsItem.Builder.class)
public final class QueryResponseSettlementsRecordsItem {
    private final Optional<Double> batchAmount;

    private final Optional<String> batchNumber;

    private final Optional<String> category;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<QueryTransactionPayorData> customer;

    private final Optional<OffsetDateTime> depositDate;

    private final Optional<OffsetDateTime> expectedDepositDate;

    private final Optional<String> externalPaypointId;

    private final Optional<String> gatewayTransId;

    private final Optional<Integer> id;

    private final Optional<BillData> invoiceData;

    private final Optional<Integer> isHold;

    private final Optional<String> maskedAccount;

    private final Optional<String> method;

    private final Optional<Double> netAmount;

    private final Optional<String> operation;

    private final Optional<String> orderId;

    private final Optional<String> parentOrgName;

    private final Optional<QueryPaymentData> paymentData;

    private final Optional<String> paymentTransId;

    private final Optional<Integer> paymentTransStatus;

    private final Optional<String> paypointDbaname;

    private final Optional<String> paypointEntryname;

    private final Optional<String> paypointLegalname;

    private final Optional<QueryResponseData> responseData;

    private final Optional<Integer> scheduleReference;

    private final Optional<Double> settledAmount;

    private final Optional<OffsetDateTime> settlementDate;

    private final Optional<String> source;

    private final Optional<Integer> status;

    private final Optional<List<QueryTransactionEvents>> transactionEvents;

    private final Optional<OffsetDateTime> transactionTime;

    private final Optional<String> transMethod;

    private final Optional<String> type;

    private final Map<String, Object> additionalProperties;

    private QueryResponseSettlementsRecordsItem(
            Optional<Double> batchAmount,
            Optional<String> batchNumber,
            Optional<String> category,
            Optional<OffsetDateTime> createdAt,
            Optional<QueryTransactionPayorData> customer,
            Optional<OffsetDateTime> depositDate,
            Optional<OffsetDateTime> expectedDepositDate,
            Optional<String> externalPaypointId,
            Optional<String> gatewayTransId,
            Optional<Integer> id,
            Optional<BillData> invoiceData,
            Optional<Integer> isHold,
            Optional<String> maskedAccount,
            Optional<String> method,
            Optional<Double> netAmount,
            Optional<String> operation,
            Optional<String> orderId,
            Optional<String> parentOrgName,
            Optional<QueryPaymentData> paymentData,
            Optional<String> paymentTransId,
            Optional<Integer> paymentTransStatus,
            Optional<String> paypointDbaname,
            Optional<String> paypointEntryname,
            Optional<String> paypointLegalname,
            Optional<QueryResponseData> responseData,
            Optional<Integer> scheduleReference,
            Optional<Double> settledAmount,
            Optional<OffsetDateTime> settlementDate,
            Optional<String> source,
            Optional<Integer> status,
            Optional<List<QueryTransactionEvents>> transactionEvents,
            Optional<OffsetDateTime> transactionTime,
            Optional<String> transMethod,
            Optional<String> type,
            Map<String, Object> additionalProperties) {
        this.batchAmount = batchAmount;
        this.batchNumber = batchNumber;
        this.category = category;
        this.createdAt = createdAt;
        this.customer = customer;
        this.depositDate = depositDate;
        this.expectedDepositDate = expectedDepositDate;
        this.externalPaypointId = externalPaypointId;
        this.gatewayTransId = gatewayTransId;
        this.id = id;
        this.invoiceData = invoiceData;
        this.isHold = isHold;
        this.maskedAccount = maskedAccount;
        this.method = method;
        this.netAmount = netAmount;
        this.operation = operation;
        this.orderId = orderId;
        this.parentOrgName = parentOrgName;
        this.paymentData = paymentData;
        this.paymentTransId = paymentTransId;
        this.paymentTransStatus = paymentTransStatus;
        this.paypointDbaname = paypointDbaname;
        this.paypointEntryname = paypointEntryname;
        this.paypointLegalname = paypointLegalname;
        this.responseData = responseData;
        this.scheduleReference = scheduleReference;
        this.settledAmount = settledAmount;
        this.settlementDate = settlementDate;
        this.source = source;
        this.status = status;
        this.transactionEvents = transactionEvents;
        this.transactionTime = transactionTime;
        this.transMethod = transMethod;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The batch amount.
     */
    @JsonProperty("BatchAmount")
    public Optional<Double> getBatchAmount() {
        return batchAmount;
    }

    @JsonProperty("BatchNumber")
    public Optional<String> getBatchNumber() {
        return batchNumber;
    }

    @JsonProperty("Category")
    public Optional<String> getCategory() {
        return category;
    }

    @JsonProperty("CreatedAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("Customer")
    public Optional<QueryTransactionPayorData> getCustomer() {
        return customer;
    }

    @JsonProperty("DepositDate")
    public Optional<OffsetDateTime> getDepositDate() {
        return depositDate;
    }

    @JsonProperty("ExpectedDepositDate")
    public Optional<OffsetDateTime> getExpectedDepositDate() {
        return expectedDepositDate;
    }

    @JsonProperty("externalPaypointID")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    /**
     * @return Internal identifier used for processing.
     */
    @JsonProperty("GatewayTransId")
    public Optional<String> getGatewayTransId() {
        return gatewayTransId;
    }

    @JsonProperty("Id")
    public Optional<Integer> getId() {
        return id;
    }

    @JsonProperty("invoiceData")
    public Optional<BillData> getInvoiceData() {
        return invoiceData;
    }

    /**
     * @return Describes whether the transaction is being held or not.
     * <p>1 - Transaction is held</p>
     * <p>0 - Transaction isn't being held</p>
     */
    @JsonProperty("isHold")
    public Optional<Integer> getIsHold() {
        return isHold;
    }

    @JsonProperty("MaskedAccount")
    public Optional<String> getMaskedAccount() {
        return maskedAccount;
    }

    /**
     * @return The payment method.
     */
    @JsonProperty("Method")
    public Optional<String> getMethod() {
        return method;
    }

    /**
     * @return Net amount paid.
     */
    @JsonProperty("NetAmount")
    public Optional<Double> getNetAmount() {
        return netAmount;
    }

    /**
     * @return The operation performed.
     */
    @JsonProperty("Operation")
    public Optional<String> getOperation() {
        return operation;
    }

    @JsonProperty("OrderId")
    public Optional<String> getOrderId() {
        return orderId;
    }

    @JsonProperty("ParentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    @JsonProperty("PaymentData")
    public Optional<QueryPaymentData> getPaymentData() {
        return paymentData;
    }

    /**
     * @return The transaction ID for the payment.
     */
    @JsonProperty("PaymentTransId")
    public Optional<String> getPaymentTransId() {
        return paymentTransId;
    }

    @JsonProperty("PaymentTransStatus")
    public Optional<Integer> getPaymentTransStatus() {
        return paymentTransStatus;
    }

    /**
     * @return Paypoint DBA name.
     */
    @JsonProperty("PaypointDbaname")
    public Optional<String> getPaypointDbaname() {
        return paypointDbaname;
    }

    /**
     * @return Paypoint entryname.
     */
    @JsonProperty("PaypointEntryname")
    public Optional<String> getPaypointEntryname() {
        return paypointEntryname;
    }

    /**
     * @return Paypoint legal name.
     */
    @JsonProperty("PaypointLegalname")
    public Optional<String> getPaypointLegalname() {
        return paypointLegalname;
    }

    @JsonProperty("ResponseData")
    public Optional<QueryResponseData> getResponseData() {
        return responseData;
    }

    /**
     * @return Reference to the subscription originating the transaction.
     */
    @JsonProperty("ScheduleReference")
    public Optional<Integer> getScheduleReference() {
        return scheduleReference;
    }

    /**
     * @return The transaction amount.
     */
    @JsonProperty("SettledAmount")
    public Optional<Double> getSettledAmount() {
        return settledAmount;
    }

    /**
     * @return
     */
    @JsonProperty("SettlementDate")
    public Optional<OffsetDateTime> getSettlementDate() {
        return settlementDate;
    }

    @JsonProperty("Source")
    public Optional<String> getSource() {
        return source;
    }

    @JsonProperty("Status")
    public Optional<Integer> getStatus() {
        return status;
    }

    /**
     * @return Events associated with this transaction.
     */
    @JsonProperty("TransactionEvents")
    public Optional<List<QueryTransactionEvents>> getTransactionEvents() {
        return transactionEvents;
    }

    @JsonProperty("TransactionTime")
    public Optional<OffsetDateTime> getTransactionTime() {
        return transactionTime;
    }

    /**
     * @return Payment method used: card or ach.
     */
    @JsonProperty("TransMethod")
    public Optional<String> getTransMethod() {
        return transMethod;
    }

    /**
     * @return The transaction type: credit or debit.
     */
    @JsonProperty("Type")
    public Optional<String> getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryResponseSettlementsRecordsItem
                && equalTo((QueryResponseSettlementsRecordsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryResponseSettlementsRecordsItem other) {
        return batchAmount.equals(other.batchAmount)
                && batchNumber.equals(other.batchNumber)
                && category.equals(other.category)
                && createdAt.equals(other.createdAt)
                && customer.equals(other.customer)
                && depositDate.equals(other.depositDate)
                && expectedDepositDate.equals(other.expectedDepositDate)
                && externalPaypointId.equals(other.externalPaypointId)
                && gatewayTransId.equals(other.gatewayTransId)
                && id.equals(other.id)
                && invoiceData.equals(other.invoiceData)
                && isHold.equals(other.isHold)
                && maskedAccount.equals(other.maskedAccount)
                && method.equals(other.method)
                && netAmount.equals(other.netAmount)
                && operation.equals(other.operation)
                && orderId.equals(other.orderId)
                && parentOrgName.equals(other.parentOrgName)
                && paymentData.equals(other.paymentData)
                && paymentTransId.equals(other.paymentTransId)
                && paymentTransStatus.equals(other.paymentTransStatus)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointEntryname.equals(other.paypointEntryname)
                && paypointLegalname.equals(other.paypointLegalname)
                && responseData.equals(other.responseData)
                && scheduleReference.equals(other.scheduleReference)
                && settledAmount.equals(other.settledAmount)
                && settlementDate.equals(other.settlementDate)
                && source.equals(other.source)
                && status.equals(other.status)
                && transactionEvents.equals(other.transactionEvents)
                && transactionTime.equals(other.transactionTime)
                && transMethod.equals(other.transMethod)
                && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.batchAmount,
                this.batchNumber,
                this.category,
                this.createdAt,
                this.customer,
                this.depositDate,
                this.expectedDepositDate,
                this.externalPaypointId,
                this.gatewayTransId,
                this.id,
                this.invoiceData,
                this.isHold,
                this.maskedAccount,
                this.method,
                this.netAmount,
                this.operation,
                this.orderId,
                this.parentOrgName,
                this.paymentData,
                this.paymentTransId,
                this.paymentTransStatus,
                this.paypointDbaname,
                this.paypointEntryname,
                this.paypointLegalname,
                this.responseData,
                this.scheduleReference,
                this.settledAmount,
                this.settlementDate,
                this.source,
                this.status,
                this.transactionEvents,
                this.transactionTime,
                this.transMethod,
                this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> batchAmount = Optional.empty();

        private Optional<String> batchNumber = Optional.empty();

        private Optional<String> category = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<QueryTransactionPayorData> customer = Optional.empty();

        private Optional<OffsetDateTime> depositDate = Optional.empty();

        private Optional<OffsetDateTime> expectedDepositDate = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<String> gatewayTransId = Optional.empty();

        private Optional<Integer> id = Optional.empty();

        private Optional<BillData> invoiceData = Optional.empty();

        private Optional<Integer> isHold = Optional.empty();

        private Optional<String> maskedAccount = Optional.empty();

        private Optional<String> method = Optional.empty();

        private Optional<Double> netAmount = Optional.empty();

        private Optional<String> operation = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<QueryPaymentData> paymentData = Optional.empty();

        private Optional<String> paymentTransId = Optional.empty();

        private Optional<Integer> paymentTransStatus = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> paypointEntryname = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<QueryResponseData> responseData = Optional.empty();

        private Optional<Integer> scheduleReference = Optional.empty();

        private Optional<Double> settledAmount = Optional.empty();

        private Optional<OffsetDateTime> settlementDate = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<Integer> status = Optional.empty();

        private Optional<List<QueryTransactionEvents>> transactionEvents = Optional.empty();

        private Optional<OffsetDateTime> transactionTime = Optional.empty();

        private Optional<String> transMethod = Optional.empty();

        private Optional<String> type = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryResponseSettlementsRecordsItem other) {
            batchAmount(other.getBatchAmount());
            batchNumber(other.getBatchNumber());
            category(other.getCategory());
            createdAt(other.getCreatedAt());
            customer(other.getCustomer());
            depositDate(other.getDepositDate());
            expectedDepositDate(other.getExpectedDepositDate());
            externalPaypointId(other.getExternalPaypointId());
            gatewayTransId(other.getGatewayTransId());
            id(other.getId());
            invoiceData(other.getInvoiceData());
            isHold(other.getIsHold());
            maskedAccount(other.getMaskedAccount());
            method(other.getMethod());
            netAmount(other.getNetAmount());
            operation(other.getOperation());
            orderId(other.getOrderId());
            parentOrgName(other.getParentOrgName());
            paymentData(other.getPaymentData());
            paymentTransId(other.getPaymentTransId());
            paymentTransStatus(other.getPaymentTransStatus());
            paypointDbaname(other.getPaypointDbaname());
            paypointEntryname(other.getPaypointEntryname());
            paypointLegalname(other.getPaypointLegalname());
            responseData(other.getResponseData());
            scheduleReference(other.getScheduleReference());
            settledAmount(other.getSettledAmount());
            settlementDate(other.getSettlementDate());
            source(other.getSource());
            status(other.getStatus());
            transactionEvents(other.getTransactionEvents());
            transactionTime(other.getTransactionTime());
            transMethod(other.getTransMethod());
            type(other.getType());
            return this;
        }

        /**
         * <p>The batch amount.</p>
         */
        @JsonSetter(value = "BatchAmount", nulls = Nulls.SKIP)
        public Builder batchAmount(Optional<Double> batchAmount) {
            this.batchAmount = batchAmount;
            return this;
        }

        public Builder batchAmount(Double batchAmount) {
            this.batchAmount = Optional.ofNullable(batchAmount);
            return this;
        }

        @JsonSetter(value = "BatchNumber", nulls = Nulls.SKIP)
        public Builder batchNumber(Optional<String> batchNumber) {
            this.batchNumber = batchNumber;
            return this;
        }

        public Builder batchNumber(String batchNumber) {
            this.batchNumber = Optional.ofNullable(batchNumber);
            return this;
        }

        @JsonSetter(value = "Category", nulls = Nulls.SKIP)
        public Builder category(Optional<String> category) {
            this.category = category;
            return this;
        }

        public Builder category(String category) {
            this.category = Optional.ofNullable(category);
            return this;
        }

        @JsonSetter(value = "CreatedAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "Customer", nulls = Nulls.SKIP)
        public Builder customer(Optional<QueryTransactionPayorData> customer) {
            this.customer = customer;
            return this;
        }

        public Builder customer(QueryTransactionPayorData customer) {
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        @JsonSetter(value = "DepositDate", nulls = Nulls.SKIP)
        public Builder depositDate(Optional<OffsetDateTime> depositDate) {
            this.depositDate = depositDate;
            return this;
        }

        public Builder depositDate(OffsetDateTime depositDate) {
            this.depositDate = Optional.ofNullable(depositDate);
            return this;
        }

        @JsonSetter(value = "ExpectedDepositDate", nulls = Nulls.SKIP)
        public Builder expectedDepositDate(Optional<OffsetDateTime> expectedDepositDate) {
            this.expectedDepositDate = expectedDepositDate;
            return this;
        }

        public Builder expectedDepositDate(OffsetDateTime expectedDepositDate) {
            this.expectedDepositDate = Optional.ofNullable(expectedDepositDate);
            return this;
        }

        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        /**
         * <p>Internal identifier used for processing.</p>
         */
        @JsonSetter(value = "GatewayTransId", nulls = Nulls.SKIP)
        public Builder gatewayTransId(Optional<String> gatewayTransId) {
            this.gatewayTransId = gatewayTransId;
            return this;
        }

        public Builder gatewayTransId(String gatewayTransId) {
            this.gatewayTransId = Optional.ofNullable(gatewayTransId);
            return this;
        }

        @JsonSetter(value = "Id", nulls = Nulls.SKIP)
        public Builder id(Optional<Integer> id) {
            this.id = id;
            return this;
        }

        public Builder id(Integer id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "invoiceData", nulls = Nulls.SKIP)
        public Builder invoiceData(Optional<BillData> invoiceData) {
            this.invoiceData = invoiceData;
            return this;
        }

        public Builder invoiceData(BillData invoiceData) {
            this.invoiceData = Optional.ofNullable(invoiceData);
            return this;
        }

        /**
         * <p>Describes whether the transaction is being held or not.</p>
         * <p>1 - Transaction is held</p>
         * <p>0 - Transaction isn't being held</p>
         */
        @JsonSetter(value = "isHold", nulls = Nulls.SKIP)
        public Builder isHold(Optional<Integer> isHold) {
            this.isHold = isHold;
            return this;
        }

        public Builder isHold(Integer isHold) {
            this.isHold = Optional.ofNullable(isHold);
            return this;
        }

        @JsonSetter(value = "MaskedAccount", nulls = Nulls.SKIP)
        public Builder maskedAccount(Optional<String> maskedAccount) {
            this.maskedAccount = maskedAccount;
            return this;
        }

        public Builder maskedAccount(String maskedAccount) {
            this.maskedAccount = Optional.ofNullable(maskedAccount);
            return this;
        }

        /**
         * <p>The payment method.</p>
         */
        @JsonSetter(value = "Method", nulls = Nulls.SKIP)
        public Builder method(Optional<String> method) {
            this.method = method;
            return this;
        }

        public Builder method(String method) {
            this.method = Optional.ofNullable(method);
            return this;
        }

        /**
         * <p>Net amount paid.</p>
         */
        @JsonSetter(value = "NetAmount", nulls = Nulls.SKIP)
        public Builder netAmount(Optional<Double> netAmount) {
            this.netAmount = netAmount;
            return this;
        }

        public Builder netAmount(Double netAmount) {
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        /**
         * <p>The operation performed.</p>
         */
        @JsonSetter(value = "Operation", nulls = Nulls.SKIP)
        public Builder operation(Optional<String> operation) {
            this.operation = operation;
            return this;
        }

        public Builder operation(String operation) {
            this.operation = Optional.ofNullable(operation);
            return this;
        }

        @JsonSetter(value = "OrderId", nulls = Nulls.SKIP)
        public Builder orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        public Builder orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        @JsonSetter(value = "PaymentData", nulls = Nulls.SKIP)
        public Builder paymentData(Optional<QueryPaymentData> paymentData) {
            this.paymentData = paymentData;
            return this;
        }

        public Builder paymentData(QueryPaymentData paymentData) {
            this.paymentData = Optional.ofNullable(paymentData);
            return this;
        }

        /**
         * <p>The transaction ID for the payment.</p>
         */
        @JsonSetter(value = "PaymentTransId", nulls = Nulls.SKIP)
        public Builder paymentTransId(Optional<String> paymentTransId) {
            this.paymentTransId = paymentTransId;
            return this;
        }

        public Builder paymentTransId(String paymentTransId) {
            this.paymentTransId = Optional.ofNullable(paymentTransId);
            return this;
        }

        @JsonSetter(value = "PaymentTransStatus", nulls = Nulls.SKIP)
        public Builder paymentTransStatus(Optional<Integer> paymentTransStatus) {
            this.paymentTransStatus = paymentTransStatus;
            return this;
        }

        public Builder paymentTransStatus(Integer paymentTransStatus) {
            this.paymentTransStatus = Optional.ofNullable(paymentTransStatus);
            return this;
        }

        /**
         * <p>Paypoint DBA name.</p>
         */
        @JsonSetter(value = "PaypointDbaname", nulls = Nulls.SKIP)
        public Builder paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        public Builder paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        /**
         * <p>Paypoint entryname.</p>
         */
        @JsonSetter(value = "PaypointEntryname", nulls = Nulls.SKIP)
        public Builder paypointEntryname(Optional<String> paypointEntryname) {
            this.paypointEntryname = paypointEntryname;
            return this;
        }

        public Builder paypointEntryname(String paypointEntryname) {
            this.paypointEntryname = Optional.ofNullable(paypointEntryname);
            return this;
        }

        /**
         * <p>Paypoint legal name.</p>
         */
        @JsonSetter(value = "PaypointLegalname", nulls = Nulls.SKIP)
        public Builder paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        public Builder paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        @JsonSetter(value = "ResponseData", nulls = Nulls.SKIP)
        public Builder responseData(Optional<QueryResponseData> responseData) {
            this.responseData = responseData;
            return this;
        }

        public Builder responseData(QueryResponseData responseData) {
            this.responseData = Optional.ofNullable(responseData);
            return this;
        }

        /**
         * <p>Reference to the subscription originating the transaction.</p>
         */
        @JsonSetter(value = "ScheduleReference", nulls = Nulls.SKIP)
        public Builder scheduleReference(Optional<Integer> scheduleReference) {
            this.scheduleReference = scheduleReference;
            return this;
        }

        public Builder scheduleReference(Integer scheduleReference) {
            this.scheduleReference = Optional.ofNullable(scheduleReference);
            return this;
        }

        /**
         * <p>The transaction amount.</p>
         */
        @JsonSetter(value = "SettledAmount", nulls = Nulls.SKIP)
        public Builder settledAmount(Optional<Double> settledAmount) {
            this.settledAmount = settledAmount;
            return this;
        }

        public Builder settledAmount(Double settledAmount) {
            this.settledAmount = Optional.ofNullable(settledAmount);
            return this;
        }

        @JsonSetter(value = "SettlementDate", nulls = Nulls.SKIP)
        public Builder settlementDate(Optional<OffsetDateTime> settlementDate) {
            this.settlementDate = settlementDate;
            return this;
        }

        public Builder settlementDate(OffsetDateTime settlementDate) {
            this.settlementDate = Optional.ofNullable(settlementDate);
            return this;
        }

        @JsonSetter(value = "Source", nulls = Nulls.SKIP)
        public Builder source(Optional<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        @JsonSetter(value = "Status", nulls = Nulls.SKIP)
        public Builder status(Optional<Integer> status) {
            this.status = status;
            return this;
        }

        public Builder status(Integer status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>Events associated with this transaction.</p>
         */
        @JsonSetter(value = "TransactionEvents", nulls = Nulls.SKIP)
        public Builder transactionEvents(Optional<List<QueryTransactionEvents>> transactionEvents) {
            this.transactionEvents = transactionEvents;
            return this;
        }

        public Builder transactionEvents(List<QueryTransactionEvents> transactionEvents) {
            this.transactionEvents = Optional.ofNullable(transactionEvents);
            return this;
        }

        @JsonSetter(value = "TransactionTime", nulls = Nulls.SKIP)
        public Builder transactionTime(Optional<OffsetDateTime> transactionTime) {
            this.transactionTime = transactionTime;
            return this;
        }

        public Builder transactionTime(OffsetDateTime transactionTime) {
            this.transactionTime = Optional.ofNullable(transactionTime);
            return this;
        }

        /**
         * <p>Payment method used: card or ach.</p>
         */
        @JsonSetter(value = "TransMethod", nulls = Nulls.SKIP)
        public Builder transMethod(Optional<String> transMethod) {
            this.transMethod = transMethod;
            return this;
        }

        public Builder transMethod(String transMethod) {
            this.transMethod = Optional.ofNullable(transMethod);
            return this;
        }

        /**
         * <p>The transaction type: credit or debit.</p>
         */
        @JsonSetter(value = "Type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        public QueryResponseSettlementsRecordsItem build() {
            return new QueryResponseSettlementsRecordsItem(
                    batchAmount,
                    batchNumber,
                    category,
                    createdAt,
                    customer,
                    depositDate,
                    expectedDepositDate,
                    externalPaypointId,
                    gatewayTransId,
                    id,
                    invoiceData,
                    isHold,
                    maskedAccount,
                    method,
                    netAmount,
                    operation,
                    orderId,
                    parentOrgName,
                    paymentData,
                    paymentTransId,
                    paymentTransStatus,
                    paypointDbaname,
                    paypointEntryname,
                    paypointLegalname,
                    responseData,
                    scheduleReference,
                    settledAmount,
                    settlementDate,
                    source,
                    status,
                    transactionEvents,
                    transactionTime,
                    transMethod,
                    type,
                    additionalProperties);
        }
    }
}
