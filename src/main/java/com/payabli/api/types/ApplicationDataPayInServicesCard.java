/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApplicationDataPayInServicesCard.Builder.class)
public final class ApplicationDataPayInServicesCard implements ICardSetup {
    private final Optional<Boolean> acceptAmex;

    private final Optional<Boolean> acceptDiscover;

    private final Optional<Boolean> acceptMastercard;

    private final Optional<Boolean> acceptVisa;

    private final Map<String, Object> additionalProperties;

    private ApplicationDataPayInServicesCard(
            Optional<Boolean> acceptAmex,
            Optional<Boolean> acceptDiscover,
            Optional<Boolean> acceptMastercard,
            Optional<Boolean> acceptVisa,
            Map<String, Object> additionalProperties) {
        this.acceptAmex = acceptAmex;
        this.acceptDiscover = acceptDiscover;
        this.acceptMastercard = acceptMastercard;
        this.acceptVisa = acceptVisa;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Determines whether American Express is accepted.
     */
    @JsonProperty("acceptAmex")
    @java.lang.Override
    public Optional<Boolean> getAcceptAmex() {
        return acceptAmex;
    }

    /**
     * @return Determines whether Discover is accepted.
     */
    @JsonProperty("acceptDiscover")
    @java.lang.Override
    public Optional<Boolean> getAcceptDiscover() {
        return acceptDiscover;
    }

    /**
     * @return Determines whether Mastercard is accepted.
     */
    @JsonProperty("acceptMastercard")
    @java.lang.Override
    public Optional<Boolean> getAcceptMastercard() {
        return acceptMastercard;
    }

    /**
     * @return Determines whether Visa is accepted.
     */
    @JsonProperty("acceptVisa")
    @java.lang.Override
    public Optional<Boolean> getAcceptVisa() {
        return acceptVisa;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApplicationDataPayInServicesCard && equalTo((ApplicationDataPayInServicesCard) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApplicationDataPayInServicesCard other) {
        return acceptAmex.equals(other.acceptAmex)
                && acceptDiscover.equals(other.acceptDiscover)
                && acceptMastercard.equals(other.acceptMastercard)
                && acceptVisa.equals(other.acceptVisa);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.acceptAmex, this.acceptDiscover, this.acceptMastercard, this.acceptVisa);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> acceptAmex = Optional.empty();

        private Optional<Boolean> acceptDiscover = Optional.empty();

        private Optional<Boolean> acceptMastercard = Optional.empty();

        private Optional<Boolean> acceptVisa = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ApplicationDataPayInServicesCard other) {
            acceptAmex(other.getAcceptAmex());
            acceptDiscover(other.getAcceptDiscover());
            acceptMastercard(other.getAcceptMastercard());
            acceptVisa(other.getAcceptVisa());
            return this;
        }

        /**
         * <p>Determines whether American Express is accepted.</p>
         */
        @JsonSetter(value = "acceptAmex", nulls = Nulls.SKIP)
        public Builder acceptAmex(Optional<Boolean> acceptAmex) {
            this.acceptAmex = acceptAmex;
            return this;
        }

        public Builder acceptAmex(Boolean acceptAmex) {
            this.acceptAmex = Optional.ofNullable(acceptAmex);
            return this;
        }

        /**
         * <p>Determines whether Discover is accepted.</p>
         */
        @JsonSetter(value = "acceptDiscover", nulls = Nulls.SKIP)
        public Builder acceptDiscover(Optional<Boolean> acceptDiscover) {
            this.acceptDiscover = acceptDiscover;
            return this;
        }

        public Builder acceptDiscover(Boolean acceptDiscover) {
            this.acceptDiscover = Optional.ofNullable(acceptDiscover);
            return this;
        }

        /**
         * <p>Determines whether Mastercard is accepted.</p>
         */
        @JsonSetter(value = "acceptMastercard", nulls = Nulls.SKIP)
        public Builder acceptMastercard(Optional<Boolean> acceptMastercard) {
            this.acceptMastercard = acceptMastercard;
            return this;
        }

        public Builder acceptMastercard(Boolean acceptMastercard) {
            this.acceptMastercard = Optional.ofNullable(acceptMastercard);
            return this;
        }

        /**
         * <p>Determines whether Visa is accepted.</p>
         */
        @JsonSetter(value = "acceptVisa", nulls = Nulls.SKIP)
        public Builder acceptVisa(Optional<Boolean> acceptVisa) {
            this.acceptVisa = acceptVisa;
            return this;
        }

        public Builder acceptVisa(Boolean acceptVisa) {
            this.acceptVisa = Optional.ofNullable(acceptVisa);
            return this;
        }

        public ApplicationDataPayInServicesCard build() {
            return new ApplicationDataPayInServicesCard(
                    acceptAmex, acceptDiscover, acceptMastercard, acceptVisa, additionalProperties);
        }
    }
}
