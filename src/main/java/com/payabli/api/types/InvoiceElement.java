/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = InvoiceElement.Builder.class)
public final class InvoiceElement {
    private final Optional<Boolean> enabled;

    private final Optional<LabelElement> invoiceLink;

    private final Optional<Integer> order;

    private final Optional<LabelElement> viewInvoiceDetails;

    private final Map<String, Object> additionalProperties;

    private InvoiceElement(
            Optional<Boolean> enabled,
            Optional<LabelElement> invoiceLink,
            Optional<Integer> order,
            Optional<LabelElement> viewInvoiceDetails,
            Map<String, Object> additionalProperties) {
        this.enabled = enabled;
        this.invoiceLink = invoiceLink;
        this.order = order;
        this.viewInvoiceDetails = viewInvoiceDetails;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("enabled")
    public Optional<Boolean> getEnabled() {
        return enabled;
    }

    /**
     * @return Link to invoice
     */
    @JsonProperty("invoiceLink")
    public Optional<LabelElement> getInvoiceLink() {
        return invoiceLink;
    }

    @JsonProperty("order")
    public Optional<Integer> getOrder() {
        return order;
    }

    /**
     * @return Link to view invoice details
     */
    @JsonProperty("viewInvoiceDetails")
    public Optional<LabelElement> getViewInvoiceDetails() {
        return viewInvoiceDetails;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof InvoiceElement && equalTo((InvoiceElement) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(InvoiceElement other) {
        return enabled.equals(other.enabled)
                && invoiceLink.equals(other.invoiceLink)
                && order.equals(other.order)
                && viewInvoiceDetails.equals(other.viewInvoiceDetails);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.enabled, this.invoiceLink, this.order, this.viewInvoiceDetails);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> enabled = Optional.empty();

        private Optional<LabelElement> invoiceLink = Optional.empty();

        private Optional<Integer> order = Optional.empty();

        private Optional<LabelElement> viewInvoiceDetails = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(InvoiceElement other) {
            enabled(other.getEnabled());
            invoiceLink(other.getInvoiceLink());
            order(other.getOrder());
            viewInvoiceDetails(other.getViewInvoiceDetails());
            return this;
        }

        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * <p>Link to invoice</p>
         */
        @JsonSetter(value = "invoiceLink", nulls = Nulls.SKIP)
        public Builder invoiceLink(Optional<LabelElement> invoiceLink) {
            this.invoiceLink = invoiceLink;
            return this;
        }

        public Builder invoiceLink(LabelElement invoiceLink) {
            this.invoiceLink = Optional.ofNullable(invoiceLink);
            return this;
        }

        @JsonSetter(value = "order", nulls = Nulls.SKIP)
        public Builder order(Optional<Integer> order) {
            this.order = order;
            return this;
        }

        public Builder order(Integer order) {
            this.order = Optional.ofNullable(order);
            return this;
        }

        /**
         * <p>Link to view invoice details</p>
         */
        @JsonSetter(value = "viewInvoiceDetails", nulls = Nulls.SKIP)
        public Builder viewInvoiceDetails(Optional<LabelElement> viewInvoiceDetails) {
            this.viewInvoiceDetails = viewInvoiceDetails;
            return this;
        }

        public Builder viewInvoiceDetails(LabelElement viewInvoiceDetails) {
            this.viewInvoiceDetails = Optional.ofNullable(viewInvoiceDetails);
            return this;
        }

        public InvoiceElement build() {
            return new InvoiceElement(enabled, invoiceLink, order, viewInvoiceDetails, additionalProperties);
        }
    }
}
