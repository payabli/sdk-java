/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VendorQueryRecord.Builder.class)
public final class VendorQueryRecord {
    private final Optional<Map<String, Optional<Map<String, Object>>>> additionalData;

    private final Optional<String> address1;

    private final Optional<String> address2;

    private final Optional<BillingDataResponse> billingData;

    private final Optional<String> city;

    private final Optional<ContactsResponse> contacts;

    private final Optional<String> country;

    private final Optional<OffsetDateTime> createdDate;

    private final Optional<String> customerVendorAccount;

    private final Optional<String> customField1;

    private final Optional<String> customField2;

    private final Optional<String> ein;

    private final Optional<String> email;

    private final Optional<String> enrollmentStatus;

    private final Optional<String> externalPaypointId;

    private final Optional<Long> internalReferenceId;

    private final Optional<OffsetDateTime> lastUpdated;

    private final Optional<String> locationCode;

    private final Optional<String> mcc;

    private final Optional<String> name1;

    private final Optional<String> name2;

    private final Optional<String> parentOrgName;

    private final Optional<Long> parentOrgId;

    private final Optional<String> payeeName1;

    private final Optional<String> payeeName2;

    private final Optional<String> paymentMethod;

    private final Optional<String> paypointDbaname;

    private final Optional<String> paypointEntryname;

    private final Optional<String> paypointLegalname;

    private final Optional<String> phone;

    private final Optional<String> remitAddress1;

    private final Optional<String> remitAddress2;

    private final Optional<String> remitCity;

    private final Optional<String> remitCountry;

    private final Optional<String> remitEmail;

    private final Optional<String> remitState;

    private final Optional<String> remitZip;

    private final Optional<String> state;

    private final Optional<List<VendorResponseStoredMethod>> storedMethods;

    private final Optional<VendorSummary> summary;

    private final Optional<Integer> vendorId;

    private final Optional<String> vendorNumber;

    private final Optional<Integer> vendorStatus;

    private final Optional<String> zip;

    private final Map<String, Object> additionalProperties;

    private VendorQueryRecord(
            Optional<Map<String, Optional<Map<String, Object>>>> additionalData,
            Optional<String> address1,
            Optional<String> address2,
            Optional<BillingDataResponse> billingData,
            Optional<String> city,
            Optional<ContactsResponse> contacts,
            Optional<String> country,
            Optional<OffsetDateTime> createdDate,
            Optional<String> customerVendorAccount,
            Optional<String> customField1,
            Optional<String> customField2,
            Optional<String> ein,
            Optional<String> email,
            Optional<String> enrollmentStatus,
            Optional<String> externalPaypointId,
            Optional<Long> internalReferenceId,
            Optional<OffsetDateTime> lastUpdated,
            Optional<String> locationCode,
            Optional<String> mcc,
            Optional<String> name1,
            Optional<String> name2,
            Optional<String> parentOrgName,
            Optional<Long> parentOrgId,
            Optional<String> payeeName1,
            Optional<String> payeeName2,
            Optional<String> paymentMethod,
            Optional<String> paypointDbaname,
            Optional<String> paypointEntryname,
            Optional<String> paypointLegalname,
            Optional<String> phone,
            Optional<String> remitAddress1,
            Optional<String> remitAddress2,
            Optional<String> remitCity,
            Optional<String> remitCountry,
            Optional<String> remitEmail,
            Optional<String> remitState,
            Optional<String> remitZip,
            Optional<String> state,
            Optional<List<VendorResponseStoredMethod>> storedMethods,
            Optional<VendorSummary> summary,
            Optional<Integer> vendorId,
            Optional<String> vendorNumber,
            Optional<Integer> vendorStatus,
            Optional<String> zip,
            Map<String, Object> additionalProperties) {
        this.additionalData = additionalData;
        this.address1 = address1;
        this.address2 = address2;
        this.billingData = billingData;
        this.city = city;
        this.contacts = contacts;
        this.country = country;
        this.createdDate = createdDate;
        this.customerVendorAccount = customerVendorAccount;
        this.customField1 = customField1;
        this.customField2 = customField2;
        this.ein = ein;
        this.email = email;
        this.enrollmentStatus = enrollmentStatus;
        this.externalPaypointId = externalPaypointId;
        this.internalReferenceId = internalReferenceId;
        this.lastUpdated = lastUpdated;
        this.locationCode = locationCode;
        this.mcc = mcc;
        this.name1 = name1;
        this.name2 = name2;
        this.parentOrgName = parentOrgName;
        this.parentOrgId = parentOrgId;
        this.payeeName1 = payeeName1;
        this.payeeName2 = payeeName2;
        this.paymentMethod = paymentMethod;
        this.paypointDbaname = paypointDbaname;
        this.paypointEntryname = paypointEntryname;
        this.paypointLegalname = paypointLegalname;
        this.phone = phone;
        this.remitAddress1 = remitAddress1;
        this.remitAddress2 = remitAddress2;
        this.remitCity = remitCity;
        this.remitCountry = remitCountry;
        this.remitEmail = remitEmail;
        this.remitState = remitState;
        this.remitZip = remitZip;
        this.state = state;
        this.storedMethods = storedMethods;
        this.summary = summary;
        this.vendorId = vendorId;
        this.vendorNumber = vendorNumber;
        this.vendorStatus = vendorStatus;
        this.zip = zip;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("additionalData")
    public Optional<Map<String, Optional<Map<String, Object>>>> getAdditionalData() {
        return additionalData;
    }

    @JsonProperty("Address1")
    public Optional<String> getAddress1() {
        return address1;
    }

    @JsonProperty("Address2")
    public Optional<String> getAddress2() {
        return address2;
    }

    @JsonProperty("BillingData")
    public Optional<BillingDataResponse> getBillingData() {
        return billingData;
    }

    @JsonProperty("City")
    public Optional<String> getCity() {
        return city;
    }

    @JsonProperty("Contacts")
    public Optional<ContactsResponse> getContacts() {
        return contacts;
    }

    @JsonProperty("Country")
    public Optional<String> getCountry() {
        return country;
    }

    @JsonProperty("CreatedDate")
    public Optional<OffsetDateTime> getCreatedDate() {
        return createdDate;
    }

    @JsonProperty("customerVendorAccount")
    public Optional<String> getCustomerVendorAccount() {
        return customerVendorAccount;
    }

    @JsonProperty("customField1")
    public Optional<String> getCustomField1() {
        return customField1;
    }

    @JsonProperty("customField2")
    public Optional<String> getCustomField2() {
        return customField2;
    }

    @JsonProperty("EIN")
    public Optional<String> getEin() {
        return ein;
    }

    @JsonProperty("Email")
    public Optional<String> getEmail() {
        return email;
    }

    @JsonProperty("EnrollmentStatus")
    public Optional<String> getEnrollmentStatus() {
        return enrollmentStatus;
    }

    @JsonProperty("externalPaypointID")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    @JsonProperty("InternalReferenceId")
    public Optional<Long> getInternalReferenceId() {
        return internalReferenceId;
    }

    @JsonProperty("LastUpdated")
    public Optional<OffsetDateTime> getLastUpdated() {
        return lastUpdated;
    }

    @JsonProperty("LocationCode")
    public Optional<String> getLocationCode() {
        return locationCode;
    }

    @JsonProperty("Mcc")
    public Optional<String> getMcc() {
        return mcc;
    }

    @JsonProperty("Name1")
    public Optional<String> getName1() {
        return name1;
    }

    @JsonProperty("Name2")
    public Optional<String> getName2() {
        return name2;
    }

    @JsonProperty("ParentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    @JsonProperty("ParentOrgId")
    public Optional<Long> getParentOrgId() {
        return parentOrgId;
    }

    @JsonProperty("payeeName1")
    public Optional<String> getPayeeName1() {
        return payeeName1;
    }

    @JsonProperty("payeeName2")
    public Optional<String> getPayeeName2() {
        return payeeName2;
    }

    @JsonProperty("PaymentMethod")
    public Optional<String> getPaymentMethod() {
        return paymentMethod;
    }

    @JsonProperty("PaypointDbaname")
    public Optional<String> getPaypointDbaname() {
        return paypointDbaname;
    }

    @JsonProperty("PaypointEntryname")
    public Optional<String> getPaypointEntryname() {
        return paypointEntryname;
    }

    @JsonProperty("PaypointLegalname")
    public Optional<String> getPaypointLegalname() {
        return paypointLegalname;
    }

    @JsonProperty("Phone")
    public Optional<String> getPhone() {
        return phone;
    }

    @JsonProperty("remitAddress1")
    public Optional<String> getRemitAddress1() {
        return remitAddress1;
    }

    @JsonProperty("remitAddress2")
    public Optional<String> getRemitAddress2() {
        return remitAddress2;
    }

    @JsonProperty("remitCity")
    public Optional<String> getRemitCity() {
        return remitCity;
    }

    @JsonProperty("remitCountry")
    public Optional<String> getRemitCountry() {
        return remitCountry;
    }

    @JsonProperty("RemitEmail")
    public Optional<String> getRemitEmail() {
        return remitEmail;
    }

    @JsonProperty("remitState")
    public Optional<String> getRemitState() {
        return remitState;
    }

    @JsonProperty("remitZip")
    public Optional<String> getRemitZip() {
        return remitZip;
    }

    @JsonProperty("State")
    public Optional<String> getState() {
        return state;
    }

    @JsonProperty("StoredMethods")
    public Optional<List<VendorResponseStoredMethod>> getStoredMethods() {
        return storedMethods;
    }

    @JsonProperty("Summary")
    public Optional<VendorSummary> getSummary() {
        return summary;
    }

    @JsonProperty("VendorId")
    public Optional<Integer> getVendorId() {
        return vendorId;
    }

    @JsonProperty("VendorNumber")
    public Optional<String> getVendorNumber() {
        return vendorNumber;
    }

    @JsonProperty("VendorStatus")
    public Optional<Integer> getVendorStatus() {
        return vendorStatus;
    }

    @JsonProperty("Zip")
    public Optional<String> getZip() {
        return zip;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VendorQueryRecord && equalTo((VendorQueryRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VendorQueryRecord other) {
        return additionalData.equals(other.additionalData)
                && address1.equals(other.address1)
                && address2.equals(other.address2)
                && billingData.equals(other.billingData)
                && city.equals(other.city)
                && contacts.equals(other.contacts)
                && country.equals(other.country)
                && createdDate.equals(other.createdDate)
                && customerVendorAccount.equals(other.customerVendorAccount)
                && customField1.equals(other.customField1)
                && customField2.equals(other.customField2)
                && ein.equals(other.ein)
                && email.equals(other.email)
                && enrollmentStatus.equals(other.enrollmentStatus)
                && externalPaypointId.equals(other.externalPaypointId)
                && internalReferenceId.equals(other.internalReferenceId)
                && lastUpdated.equals(other.lastUpdated)
                && locationCode.equals(other.locationCode)
                && mcc.equals(other.mcc)
                && name1.equals(other.name1)
                && name2.equals(other.name2)
                && parentOrgName.equals(other.parentOrgName)
                && parentOrgId.equals(other.parentOrgId)
                && payeeName1.equals(other.payeeName1)
                && payeeName2.equals(other.payeeName2)
                && paymentMethod.equals(other.paymentMethod)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointEntryname.equals(other.paypointEntryname)
                && paypointLegalname.equals(other.paypointLegalname)
                && phone.equals(other.phone)
                && remitAddress1.equals(other.remitAddress1)
                && remitAddress2.equals(other.remitAddress2)
                && remitCity.equals(other.remitCity)
                && remitCountry.equals(other.remitCountry)
                && remitEmail.equals(other.remitEmail)
                && remitState.equals(other.remitState)
                && remitZip.equals(other.remitZip)
                && state.equals(other.state)
                && storedMethods.equals(other.storedMethods)
                && summary.equals(other.summary)
                && vendorId.equals(other.vendorId)
                && vendorNumber.equals(other.vendorNumber)
                && vendorStatus.equals(other.vendorStatus)
                && zip.equals(other.zip);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.additionalData,
                this.address1,
                this.address2,
                this.billingData,
                this.city,
                this.contacts,
                this.country,
                this.createdDate,
                this.customerVendorAccount,
                this.customField1,
                this.customField2,
                this.ein,
                this.email,
                this.enrollmentStatus,
                this.externalPaypointId,
                this.internalReferenceId,
                this.lastUpdated,
                this.locationCode,
                this.mcc,
                this.name1,
                this.name2,
                this.parentOrgName,
                this.parentOrgId,
                this.payeeName1,
                this.payeeName2,
                this.paymentMethod,
                this.paypointDbaname,
                this.paypointEntryname,
                this.paypointLegalname,
                this.phone,
                this.remitAddress1,
                this.remitAddress2,
                this.remitCity,
                this.remitCountry,
                this.remitEmail,
                this.remitState,
                this.remitZip,
                this.state,
                this.storedMethods,
                this.summary,
                this.vendorId,
                this.vendorNumber,
                this.vendorStatus,
                this.zip);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, Optional<Map<String, Object>>>> additionalData = Optional.empty();

        private Optional<String> address1 = Optional.empty();

        private Optional<String> address2 = Optional.empty();

        private Optional<BillingDataResponse> billingData = Optional.empty();

        private Optional<String> city = Optional.empty();

        private Optional<ContactsResponse> contacts = Optional.empty();

        private Optional<String> country = Optional.empty();

        private Optional<OffsetDateTime> createdDate = Optional.empty();

        private Optional<String> customerVendorAccount = Optional.empty();

        private Optional<String> customField1 = Optional.empty();

        private Optional<String> customField2 = Optional.empty();

        private Optional<String> ein = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> enrollmentStatus = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<Long> internalReferenceId = Optional.empty();

        private Optional<OffsetDateTime> lastUpdated = Optional.empty();

        private Optional<String> locationCode = Optional.empty();

        private Optional<String> mcc = Optional.empty();

        private Optional<String> name1 = Optional.empty();

        private Optional<String> name2 = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<Long> parentOrgId = Optional.empty();

        private Optional<String> payeeName1 = Optional.empty();

        private Optional<String> payeeName2 = Optional.empty();

        private Optional<String> paymentMethod = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> paypointEntryname = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<String> phone = Optional.empty();

        private Optional<String> remitAddress1 = Optional.empty();

        private Optional<String> remitAddress2 = Optional.empty();

        private Optional<String> remitCity = Optional.empty();

        private Optional<String> remitCountry = Optional.empty();

        private Optional<String> remitEmail = Optional.empty();

        private Optional<String> remitState = Optional.empty();

        private Optional<String> remitZip = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<List<VendorResponseStoredMethod>> storedMethods = Optional.empty();

        private Optional<VendorSummary> summary = Optional.empty();

        private Optional<Integer> vendorId = Optional.empty();

        private Optional<String> vendorNumber = Optional.empty();

        private Optional<Integer> vendorStatus = Optional.empty();

        private Optional<String> zip = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(VendorQueryRecord other) {
            additionalData(other.getAdditionalData());
            address1(other.getAddress1());
            address2(other.getAddress2());
            billingData(other.getBillingData());
            city(other.getCity());
            contacts(other.getContacts());
            country(other.getCountry());
            createdDate(other.getCreatedDate());
            customerVendorAccount(other.getCustomerVendorAccount());
            customField1(other.getCustomField1());
            customField2(other.getCustomField2());
            ein(other.getEin());
            email(other.getEmail());
            enrollmentStatus(other.getEnrollmentStatus());
            externalPaypointId(other.getExternalPaypointId());
            internalReferenceId(other.getInternalReferenceId());
            lastUpdated(other.getLastUpdated());
            locationCode(other.getLocationCode());
            mcc(other.getMcc());
            name1(other.getName1());
            name2(other.getName2());
            parentOrgName(other.getParentOrgName());
            parentOrgId(other.getParentOrgId());
            payeeName1(other.getPayeeName1());
            payeeName2(other.getPayeeName2());
            paymentMethod(other.getPaymentMethod());
            paypointDbaname(other.getPaypointDbaname());
            paypointEntryname(other.getPaypointEntryname());
            paypointLegalname(other.getPaypointLegalname());
            phone(other.getPhone());
            remitAddress1(other.getRemitAddress1());
            remitAddress2(other.getRemitAddress2());
            remitCity(other.getRemitCity());
            remitCountry(other.getRemitCountry());
            remitEmail(other.getRemitEmail());
            remitState(other.getRemitState());
            remitZip(other.getRemitZip());
            state(other.getState());
            storedMethods(other.getStoredMethods());
            summary(other.getSummary());
            vendorId(other.getVendorId());
            vendorNumber(other.getVendorNumber());
            vendorStatus(other.getVendorStatus());
            zip(other.getZip());
            return this;
        }

        @JsonSetter(value = "additionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<Map<String, Optional<Map<String, Object>>>> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(Map<String, Optional<Map<String, Object>>> additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        @JsonSetter(value = "Address1", nulls = Nulls.SKIP)
        public Builder address1(Optional<String> address1) {
            this.address1 = address1;
            return this;
        }

        public Builder address1(String address1) {
            this.address1 = Optional.ofNullable(address1);
            return this;
        }

        @JsonSetter(value = "Address2", nulls = Nulls.SKIP)
        public Builder address2(Optional<String> address2) {
            this.address2 = address2;
            return this;
        }

        public Builder address2(String address2) {
            this.address2 = Optional.ofNullable(address2);
            return this;
        }

        @JsonSetter(value = "BillingData", nulls = Nulls.SKIP)
        public Builder billingData(Optional<BillingDataResponse> billingData) {
            this.billingData = billingData;
            return this;
        }

        public Builder billingData(BillingDataResponse billingData) {
            this.billingData = Optional.ofNullable(billingData);
            return this;
        }

        @JsonSetter(value = "City", nulls = Nulls.SKIP)
        public Builder city(Optional<String> city) {
            this.city = city;
            return this;
        }

        public Builder city(String city) {
            this.city = Optional.ofNullable(city);
            return this;
        }

        @JsonSetter(value = "Contacts", nulls = Nulls.SKIP)
        public Builder contacts(Optional<ContactsResponse> contacts) {
            this.contacts = contacts;
            return this;
        }

        public Builder contacts(ContactsResponse contacts) {
            this.contacts = Optional.ofNullable(contacts);
            return this;
        }

        @JsonSetter(value = "Country", nulls = Nulls.SKIP)
        public Builder country(Optional<String> country) {
            this.country = country;
            return this;
        }

        public Builder country(String country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        @JsonSetter(value = "CreatedDate", nulls = Nulls.SKIP)
        public Builder createdDate(Optional<OffsetDateTime> createdDate) {
            this.createdDate = createdDate;
            return this;
        }

        public Builder createdDate(OffsetDateTime createdDate) {
            this.createdDate = Optional.ofNullable(createdDate);
            return this;
        }

        @JsonSetter(value = "customerVendorAccount", nulls = Nulls.SKIP)
        public Builder customerVendorAccount(Optional<String> customerVendorAccount) {
            this.customerVendorAccount = customerVendorAccount;
            return this;
        }

        public Builder customerVendorAccount(String customerVendorAccount) {
            this.customerVendorAccount = Optional.ofNullable(customerVendorAccount);
            return this;
        }

        @JsonSetter(value = "customField1", nulls = Nulls.SKIP)
        public Builder customField1(Optional<String> customField1) {
            this.customField1 = customField1;
            return this;
        }

        public Builder customField1(String customField1) {
            this.customField1 = Optional.ofNullable(customField1);
            return this;
        }

        @JsonSetter(value = "customField2", nulls = Nulls.SKIP)
        public Builder customField2(Optional<String> customField2) {
            this.customField2 = customField2;
            return this;
        }

        public Builder customField2(String customField2) {
            this.customField2 = Optional.ofNullable(customField2);
            return this;
        }

        @JsonSetter(value = "EIN", nulls = Nulls.SKIP)
        public Builder ein(Optional<String> ein) {
            this.ein = ein;
            return this;
        }

        public Builder ein(String ein) {
            this.ein = Optional.ofNullable(ein);
            return this;
        }

        @JsonSetter(value = "Email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        @JsonSetter(value = "EnrollmentStatus", nulls = Nulls.SKIP)
        public Builder enrollmentStatus(Optional<String> enrollmentStatus) {
            this.enrollmentStatus = enrollmentStatus;
            return this;
        }

        public Builder enrollmentStatus(String enrollmentStatus) {
            this.enrollmentStatus = Optional.ofNullable(enrollmentStatus);
            return this;
        }

        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        @JsonSetter(value = "InternalReferenceId", nulls = Nulls.SKIP)
        public Builder internalReferenceId(Optional<Long> internalReferenceId) {
            this.internalReferenceId = internalReferenceId;
            return this;
        }

        public Builder internalReferenceId(Long internalReferenceId) {
            this.internalReferenceId = Optional.ofNullable(internalReferenceId);
            return this;
        }

        @JsonSetter(value = "LastUpdated", nulls = Nulls.SKIP)
        public Builder lastUpdated(Optional<OffsetDateTime> lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }

        public Builder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = Optional.ofNullable(lastUpdated);
            return this;
        }

        @JsonSetter(value = "LocationCode", nulls = Nulls.SKIP)
        public Builder locationCode(Optional<String> locationCode) {
            this.locationCode = locationCode;
            return this;
        }

        public Builder locationCode(String locationCode) {
            this.locationCode = Optional.ofNullable(locationCode);
            return this;
        }

        @JsonSetter(value = "Mcc", nulls = Nulls.SKIP)
        public Builder mcc(Optional<String> mcc) {
            this.mcc = mcc;
            return this;
        }

        public Builder mcc(String mcc) {
            this.mcc = Optional.ofNullable(mcc);
            return this;
        }

        @JsonSetter(value = "Name1", nulls = Nulls.SKIP)
        public Builder name1(Optional<String> name1) {
            this.name1 = name1;
            return this;
        }

        public Builder name1(String name1) {
            this.name1 = Optional.ofNullable(name1);
            return this;
        }

        @JsonSetter(value = "Name2", nulls = Nulls.SKIP)
        public Builder name2(Optional<String> name2) {
            this.name2 = name2;
            return this;
        }

        public Builder name2(String name2) {
            this.name2 = Optional.ofNullable(name2);
            return this;
        }

        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        @JsonSetter(value = "ParentOrgId", nulls = Nulls.SKIP)
        public Builder parentOrgId(Optional<Long> parentOrgId) {
            this.parentOrgId = parentOrgId;
            return this;
        }

        public Builder parentOrgId(Long parentOrgId) {
            this.parentOrgId = Optional.ofNullable(parentOrgId);
            return this;
        }

        @JsonSetter(value = "payeeName1", nulls = Nulls.SKIP)
        public Builder payeeName1(Optional<String> payeeName1) {
            this.payeeName1 = payeeName1;
            return this;
        }

        public Builder payeeName1(String payeeName1) {
            this.payeeName1 = Optional.ofNullable(payeeName1);
            return this;
        }

        @JsonSetter(value = "payeeName2", nulls = Nulls.SKIP)
        public Builder payeeName2(Optional<String> payeeName2) {
            this.payeeName2 = payeeName2;
            return this;
        }

        public Builder payeeName2(String payeeName2) {
            this.payeeName2 = Optional.ofNullable(payeeName2);
            return this;
        }

        @JsonSetter(value = "PaymentMethod", nulls = Nulls.SKIP)
        public Builder paymentMethod(Optional<String> paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }

        public Builder paymentMethod(String paymentMethod) {
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        @JsonSetter(value = "PaypointDbaname", nulls = Nulls.SKIP)
        public Builder paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        public Builder paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        @JsonSetter(value = "PaypointEntryname", nulls = Nulls.SKIP)
        public Builder paypointEntryname(Optional<String> paypointEntryname) {
            this.paypointEntryname = paypointEntryname;
            return this;
        }

        public Builder paypointEntryname(String paypointEntryname) {
            this.paypointEntryname = Optional.ofNullable(paypointEntryname);
            return this;
        }

        @JsonSetter(value = "PaypointLegalname", nulls = Nulls.SKIP)
        public Builder paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        public Builder paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        @JsonSetter(value = "Phone", nulls = Nulls.SKIP)
        public Builder phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        @JsonSetter(value = "remitAddress1", nulls = Nulls.SKIP)
        public Builder remitAddress1(Optional<String> remitAddress1) {
            this.remitAddress1 = remitAddress1;
            return this;
        }

        public Builder remitAddress1(String remitAddress1) {
            this.remitAddress1 = Optional.ofNullable(remitAddress1);
            return this;
        }

        @JsonSetter(value = "remitAddress2", nulls = Nulls.SKIP)
        public Builder remitAddress2(Optional<String> remitAddress2) {
            this.remitAddress2 = remitAddress2;
            return this;
        }

        public Builder remitAddress2(String remitAddress2) {
            this.remitAddress2 = Optional.ofNullable(remitAddress2);
            return this;
        }

        @JsonSetter(value = "remitCity", nulls = Nulls.SKIP)
        public Builder remitCity(Optional<String> remitCity) {
            this.remitCity = remitCity;
            return this;
        }

        public Builder remitCity(String remitCity) {
            this.remitCity = Optional.ofNullable(remitCity);
            return this;
        }

        @JsonSetter(value = "remitCountry", nulls = Nulls.SKIP)
        public Builder remitCountry(Optional<String> remitCountry) {
            this.remitCountry = remitCountry;
            return this;
        }

        public Builder remitCountry(String remitCountry) {
            this.remitCountry = Optional.ofNullable(remitCountry);
            return this;
        }

        @JsonSetter(value = "RemitEmail", nulls = Nulls.SKIP)
        public Builder remitEmail(Optional<String> remitEmail) {
            this.remitEmail = remitEmail;
            return this;
        }

        public Builder remitEmail(String remitEmail) {
            this.remitEmail = Optional.ofNullable(remitEmail);
            return this;
        }

        @JsonSetter(value = "remitState", nulls = Nulls.SKIP)
        public Builder remitState(Optional<String> remitState) {
            this.remitState = remitState;
            return this;
        }

        public Builder remitState(String remitState) {
            this.remitState = Optional.ofNullable(remitState);
            return this;
        }

        @JsonSetter(value = "remitZip", nulls = Nulls.SKIP)
        public Builder remitZip(Optional<String> remitZip) {
            this.remitZip = remitZip;
            return this;
        }

        public Builder remitZip(String remitZip) {
            this.remitZip = Optional.ofNullable(remitZip);
            return this;
        }

        @JsonSetter(value = "State", nulls = Nulls.SKIP)
        public Builder state(Optional<String> state) {
            this.state = state;
            return this;
        }

        public Builder state(String state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        @JsonSetter(value = "StoredMethods", nulls = Nulls.SKIP)
        public Builder storedMethods(Optional<List<VendorResponseStoredMethod>> storedMethods) {
            this.storedMethods = storedMethods;
            return this;
        }

        public Builder storedMethods(List<VendorResponseStoredMethod> storedMethods) {
            this.storedMethods = Optional.ofNullable(storedMethods);
            return this;
        }

        @JsonSetter(value = "Summary", nulls = Nulls.SKIP)
        public Builder summary(Optional<VendorSummary> summary) {
            this.summary = summary;
            return this;
        }

        public Builder summary(VendorSummary summary) {
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        @JsonSetter(value = "VendorId", nulls = Nulls.SKIP)
        public Builder vendorId(Optional<Integer> vendorId) {
            this.vendorId = vendorId;
            return this;
        }

        public Builder vendorId(Integer vendorId) {
            this.vendorId = Optional.ofNullable(vendorId);
            return this;
        }

        @JsonSetter(value = "VendorNumber", nulls = Nulls.SKIP)
        public Builder vendorNumber(Optional<String> vendorNumber) {
            this.vendorNumber = vendorNumber;
            return this;
        }

        public Builder vendorNumber(String vendorNumber) {
            this.vendorNumber = Optional.ofNullable(vendorNumber);
            return this;
        }

        @JsonSetter(value = "VendorStatus", nulls = Nulls.SKIP)
        public Builder vendorStatus(Optional<Integer> vendorStatus) {
            this.vendorStatus = vendorStatus;
            return this;
        }

        public Builder vendorStatus(Integer vendorStatus) {
            this.vendorStatus = Optional.ofNullable(vendorStatus);
            return this;
        }

        @JsonSetter(value = "Zip", nulls = Nulls.SKIP)
        public Builder zip(Optional<String> zip) {
            this.zip = zip;
            return this;
        }

        public Builder zip(String zip) {
            this.zip = Optional.ofNullable(zip);
            return this;
        }

        public VendorQueryRecord build() {
            return new VendorQueryRecord(
                    additionalData,
                    address1,
                    address2,
                    billingData,
                    city,
                    contacts,
                    country,
                    createdDate,
                    customerVendorAccount,
                    customField1,
                    customField2,
                    ein,
                    email,
                    enrollmentStatus,
                    externalPaypointId,
                    internalReferenceId,
                    lastUpdated,
                    locationCode,
                    mcc,
                    name1,
                    name2,
                    parentOrgName,
                    parentOrgId,
                    payeeName1,
                    payeeName2,
                    paymentMethod,
                    paypointDbaname,
                    paypointEntryname,
                    paypointLegalname,
                    phone,
                    remitAddress1,
                    remitAddress2,
                    remitCity,
                    remitCountry,
                    remitEmail,
                    remitState,
                    remitZip,
                    state,
                    storedMethods,
                    summary,
                    vendorId,
                    vendorNumber,
                    vendorStatus,
                    zip,
                    additionalProperties);
        }
    }
}
