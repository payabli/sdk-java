/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaypointEntryConfig.Builder.class)
public final class PaypointEntryConfig {
    private final Optional<String> entryComment;

    private final Optional<String> entryLogo;

    private final Optional<String> entryName;

    private final Optional<List<PayabliPages>> entryPages;

    private final Optional<String> entrySubtitle;

    private final Optional<String> entryTitle;

    private final Optional<Long> idEntry;

    private final Optional<PaypointData> paypoint;

    private final Map<String, Object> additionalProperties;

    private PaypointEntryConfig(
            Optional<String> entryComment,
            Optional<String> entryLogo,
            Optional<String> entryName,
            Optional<List<PayabliPages>> entryPages,
            Optional<String> entrySubtitle,
            Optional<String> entryTitle,
            Optional<Long> idEntry,
            Optional<PaypointData> paypoint,
            Map<String, Object> additionalProperties) {
        this.entryComment = entryComment;
        this.entryLogo = entryLogo;
        this.entryName = entryName;
        this.entryPages = entryPages;
        this.entrySubtitle = entrySubtitle;
        this.entryTitle = entryTitle;
        this.idEntry = idEntry;
        this.paypoint = paypoint;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("EntryComment")
    public Optional<String> getEntryComment() {
        return entryComment;
    }

    @JsonProperty("EntryLogo")
    public Optional<String> getEntryLogo() {
        return entryLogo;
    }

    @JsonProperty("EntryName")
    public Optional<String> getEntryName() {
        return entryName;
    }

    @JsonProperty("EntryPages")
    public Optional<List<PayabliPages>> getEntryPages() {
        return entryPages;
    }

    @JsonProperty("EntrySubtitle")
    public Optional<String> getEntrySubtitle() {
        return entrySubtitle;
    }

    @JsonProperty("EntryTitle")
    public Optional<String> getEntryTitle() {
        return entryTitle;
    }

    @JsonProperty("IdEntry")
    public Optional<Long> getIdEntry() {
        return idEntry;
    }

    @JsonProperty("Paypoint")
    public Optional<PaypointData> getPaypoint() {
        return paypoint;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaypointEntryConfig && equalTo((PaypointEntryConfig) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaypointEntryConfig other) {
        return entryComment.equals(other.entryComment)
                && entryLogo.equals(other.entryLogo)
                && entryName.equals(other.entryName)
                && entryPages.equals(other.entryPages)
                && entrySubtitle.equals(other.entrySubtitle)
                && entryTitle.equals(other.entryTitle)
                && idEntry.equals(other.idEntry)
                && paypoint.equals(other.paypoint);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.entryComment,
                this.entryLogo,
                this.entryName,
                this.entryPages,
                this.entrySubtitle,
                this.entryTitle,
                this.idEntry,
                this.paypoint);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> entryComment = Optional.empty();

        private Optional<String> entryLogo = Optional.empty();

        private Optional<String> entryName = Optional.empty();

        private Optional<List<PayabliPages>> entryPages = Optional.empty();

        private Optional<String> entrySubtitle = Optional.empty();

        private Optional<String> entryTitle = Optional.empty();

        private Optional<Long> idEntry = Optional.empty();

        private Optional<PaypointData> paypoint = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PaypointEntryConfig other) {
            entryComment(other.getEntryComment());
            entryLogo(other.getEntryLogo());
            entryName(other.getEntryName());
            entryPages(other.getEntryPages());
            entrySubtitle(other.getEntrySubtitle());
            entryTitle(other.getEntryTitle());
            idEntry(other.getIdEntry());
            paypoint(other.getPaypoint());
            return this;
        }

        @JsonSetter(value = "EntryComment", nulls = Nulls.SKIP)
        public Builder entryComment(Optional<String> entryComment) {
            this.entryComment = entryComment;
            return this;
        }

        public Builder entryComment(String entryComment) {
            this.entryComment = Optional.ofNullable(entryComment);
            return this;
        }

        @JsonSetter(value = "EntryLogo", nulls = Nulls.SKIP)
        public Builder entryLogo(Optional<String> entryLogo) {
            this.entryLogo = entryLogo;
            return this;
        }

        public Builder entryLogo(String entryLogo) {
            this.entryLogo = Optional.ofNullable(entryLogo);
            return this;
        }

        @JsonSetter(value = "EntryName", nulls = Nulls.SKIP)
        public Builder entryName(Optional<String> entryName) {
            this.entryName = entryName;
            return this;
        }

        public Builder entryName(String entryName) {
            this.entryName = Optional.ofNullable(entryName);
            return this;
        }

        @JsonSetter(value = "EntryPages", nulls = Nulls.SKIP)
        public Builder entryPages(Optional<List<PayabliPages>> entryPages) {
            this.entryPages = entryPages;
            return this;
        }

        public Builder entryPages(List<PayabliPages> entryPages) {
            this.entryPages = Optional.ofNullable(entryPages);
            return this;
        }

        @JsonSetter(value = "EntrySubtitle", nulls = Nulls.SKIP)
        public Builder entrySubtitle(Optional<String> entrySubtitle) {
            this.entrySubtitle = entrySubtitle;
            return this;
        }

        public Builder entrySubtitle(String entrySubtitle) {
            this.entrySubtitle = Optional.ofNullable(entrySubtitle);
            return this;
        }

        @JsonSetter(value = "EntryTitle", nulls = Nulls.SKIP)
        public Builder entryTitle(Optional<String> entryTitle) {
            this.entryTitle = entryTitle;
            return this;
        }

        public Builder entryTitle(String entryTitle) {
            this.entryTitle = Optional.ofNullable(entryTitle);
            return this;
        }

        @JsonSetter(value = "IdEntry", nulls = Nulls.SKIP)
        public Builder idEntry(Optional<Long> idEntry) {
            this.idEntry = idEntry;
            return this;
        }

        public Builder idEntry(Long idEntry) {
            this.idEntry = Optional.ofNullable(idEntry);
            return this;
        }

        @JsonSetter(value = "Paypoint", nulls = Nulls.SKIP)
        public Builder paypoint(Optional<PaypointData> paypoint) {
            this.paypoint = paypoint;
            return this;
        }

        public Builder paypoint(PaypointData paypoint) {
            this.paypoint = Optional.ofNullable(paypoint);
            return this;
        }

        public PaypointEntryConfig build() {
            return new PaypointEntryConfig(
                    entryComment,
                    entryLogo,
                    entryName,
                    entryPages,
                    entrySubtitle,
                    entryTitle,
                    idEntry,
                    paypoint,
                    additionalProperties);
        }
    }
}
