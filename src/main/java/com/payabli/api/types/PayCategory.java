/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PayCategory.Builder.class)
public final class PayCategory {
    private final Optional<String> description;

    private final Optional<String> label;

    private final Optional<String> name;

    private final Optional<Boolean> optionalPay;

    private final Optional<Integer> order;

    private final Optional<Integer> quantity;

    private final Optional<Boolean> showDescription;

    private final Optional<String> type;

    private final Optional<String> value;

    private final Map<String, Object> additionalProperties;

    private PayCategory(
            Optional<String> description,
            Optional<String> label,
            Optional<String> name,
            Optional<Boolean> optionalPay,
            Optional<Integer> order,
            Optional<Integer> quantity,
            Optional<Boolean> showDescription,
            Optional<String> type,
            Optional<String> value,
            Map<String, Object> additionalProperties) {
        this.description = description;
        this.label = label;
        this.name = name;
        this.optionalPay = optionalPay;
        this.order = order;
        this.quantity = quantity;
        this.showDescription = showDescription;
        this.type = type;
        this.value = value;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("label")
    public Optional<String> getLabel() {
        return label;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("optionalPay")
    public Optional<Boolean> getOptionalPay() {
        return optionalPay;
    }

    @JsonProperty("order")
    public Optional<Integer> getOrder() {
        return order;
    }

    @JsonProperty("quantity")
    public Optional<Integer> getQuantity() {
        return quantity;
    }

    @JsonProperty("showDescription")
    public Optional<Boolean> getShowDescription() {
        return showDescription;
    }

    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    @JsonProperty("value")
    public Optional<String> getValue() {
        return value;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PayCategory && equalTo((PayCategory) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PayCategory other) {
        return description.equals(other.description)
                && label.equals(other.label)
                && name.equals(other.name)
                && optionalPay.equals(other.optionalPay)
                && order.equals(other.order)
                && quantity.equals(other.quantity)
                && showDescription.equals(other.showDescription)
                && type.equals(other.type)
                && value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.description,
                this.label,
                this.name,
                this.optionalPay,
                this.order,
                this.quantity,
                this.showDescription,
                this.type,
                this.value);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> description = Optional.empty();

        private Optional<String> label = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<Boolean> optionalPay = Optional.empty();

        private Optional<Integer> order = Optional.empty();

        private Optional<Integer> quantity = Optional.empty();

        private Optional<Boolean> showDescription = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<String> value = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PayCategory other) {
            description(other.getDescription());
            label(other.getLabel());
            name(other.getName());
            optionalPay(other.getOptionalPay());
            order(other.getOrder());
            quantity(other.getQuantity());
            showDescription(other.getShowDescription());
            type(other.getType());
            value(other.getValue());
            return this;
        }

        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @JsonSetter(value = "label", nulls = Nulls.SKIP)
        public Builder label(Optional<String> label) {
            this.label = label;
            return this;
        }

        public Builder label(String label) {
            this.label = Optional.ofNullable(label);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "optionalPay", nulls = Nulls.SKIP)
        public Builder optionalPay(Optional<Boolean> optionalPay) {
            this.optionalPay = optionalPay;
            return this;
        }

        public Builder optionalPay(Boolean optionalPay) {
            this.optionalPay = Optional.ofNullable(optionalPay);
            return this;
        }

        @JsonSetter(value = "order", nulls = Nulls.SKIP)
        public Builder order(Optional<Integer> order) {
            this.order = order;
            return this;
        }

        public Builder order(Integer order) {
            this.order = Optional.ofNullable(order);
            return this;
        }

        @JsonSetter(value = "quantity", nulls = Nulls.SKIP)
        public Builder quantity(Optional<Integer> quantity) {
            this.quantity = quantity;
            return this;
        }

        public Builder quantity(Integer quantity) {
            this.quantity = Optional.ofNullable(quantity);
            return this;
        }

        @JsonSetter(value = "showDescription", nulls = Nulls.SKIP)
        public Builder showDescription(Optional<Boolean> showDescription) {
            this.showDescription = showDescription;
            return this;
        }

        public Builder showDescription(Boolean showDescription) {
            this.showDescription = Optional.ofNullable(showDescription);
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @JsonSetter(value = "value", nulls = Nulls.SKIP)
        public Builder value(Optional<String> value) {
            this.value = value;
            return this;
        }

        public Builder value(String value) {
            this.value = Optional.ofNullable(value);
            return this;
        }

        public PayCategory build() {
            return new PayCategory(
                    description,
                    label,
                    name,
                    optionalPay,
                    order,
                    quantity,
                    showDescription,
                    type,
                    value,
                    additionalProperties);
        }
    }
}
