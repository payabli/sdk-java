/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ServicesSection.Builder.class)
public final class ServicesSection {
    private final Optional<AchService> ach;

    private final Optional<CardService> card;

    private final Optional<String> subFooter;

    private final Optional<String> subHeader;

    private final Optional<Boolean> visible;

    private final Map<String, Object> additionalProperties;

    private ServicesSection(
            Optional<AchService> ach,
            Optional<CardService> card,
            Optional<String> subFooter,
            Optional<String> subHeader,
            Optional<Boolean> visible,
            Map<String, Object> additionalProperties) {
        this.ach = ach;
        this.card = card;
        this.subFooter = subFooter;
        this.subHeader = subHeader;
        this.visible = visible;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("ach")
    public Optional<AchService> getAch() {
        return ach;
    }

    @JsonProperty("card")
    public Optional<CardService> getCard() {
        return card;
    }

    @JsonProperty("subFooter")
    public Optional<String> getSubFooter() {
        return subFooter;
    }

    @JsonProperty("subHeader")
    public Optional<String> getSubHeader() {
        return subHeader;
    }

    @JsonProperty("visible")
    public Optional<Boolean> getVisible() {
        return visible;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ServicesSection && equalTo((ServicesSection) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ServicesSection other) {
        return ach.equals(other.ach)
                && card.equals(other.card)
                && subFooter.equals(other.subFooter)
                && subHeader.equals(other.subHeader)
                && visible.equals(other.visible);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.ach, this.card, this.subFooter, this.subHeader, this.visible);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<AchService> ach = Optional.empty();

        private Optional<CardService> card = Optional.empty();

        private Optional<String> subFooter = Optional.empty();

        private Optional<String> subHeader = Optional.empty();

        private Optional<Boolean> visible = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ServicesSection other) {
            ach(other.getAch());
            card(other.getCard());
            subFooter(other.getSubFooter());
            subHeader(other.getSubHeader());
            visible(other.getVisible());
            return this;
        }

        @JsonSetter(value = "ach", nulls = Nulls.SKIP)
        public Builder ach(Optional<AchService> ach) {
            this.ach = ach;
            return this;
        }

        public Builder ach(AchService ach) {
            this.ach = Optional.ofNullable(ach);
            return this;
        }

        @JsonSetter(value = "card", nulls = Nulls.SKIP)
        public Builder card(Optional<CardService> card) {
            this.card = card;
            return this;
        }

        public Builder card(CardService card) {
            this.card = Optional.ofNullable(card);
            return this;
        }

        @JsonSetter(value = "subFooter", nulls = Nulls.SKIP)
        public Builder subFooter(Optional<String> subFooter) {
            this.subFooter = subFooter;
            return this;
        }

        public Builder subFooter(String subFooter) {
            this.subFooter = Optional.ofNullable(subFooter);
            return this;
        }

        @JsonSetter(value = "subHeader", nulls = Nulls.SKIP)
        public Builder subHeader(Optional<String> subHeader) {
            this.subHeader = subHeader;
            return this;
        }

        public Builder subHeader(String subHeader) {
            this.subHeader = Optional.ofNullable(subHeader);
            return this;
        }

        @JsonSetter(value = "visible", nulls = Nulls.SKIP)
        public Builder visible(Optional<Boolean> visible) {
            this.visible = visible;
            return this;
        }

        public Builder visible(Boolean visible) {
            this.visible = Optional.ofNullable(visible);
            return this;
        }

        public ServicesSection build() {
            return new ServicesSection(ach, card, subFooter, subHeader, visible, additionalProperties);
        }
    }
}
