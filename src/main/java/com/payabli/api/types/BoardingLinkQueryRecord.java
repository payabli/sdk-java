/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BoardingLinkQueryRecord.Builder.class)
public final class BoardingLinkQueryRecord {
    private final Optional<Boolean> acceptOauth;

    private final Optional<Boolean> acceptRegister;

    private final Optional<BuilderData> builderData;

    private final Optional<String> entryAttributes;

    private final Optional<Long> id;

    private final Optional<FileContent> logo;

    private final Optional<Long> orgId;

    private final Optional<String> pageIdentifier;

    private final Optional<Boolean> recipientEmailNotification;

    private final Optional<String> referenceName;

    private final Optional<Long> referenceTemplateId;

    private final Optional<Boolean> resumable;

    private final Map<String, Object> additionalProperties;

    private BoardingLinkQueryRecord(
            Optional<Boolean> acceptOauth,
            Optional<Boolean> acceptRegister,
            Optional<BuilderData> builderData,
            Optional<String> entryAttributes,
            Optional<Long> id,
            Optional<FileContent> logo,
            Optional<Long> orgId,
            Optional<String> pageIdentifier,
            Optional<Boolean> recipientEmailNotification,
            Optional<String> referenceName,
            Optional<Long> referenceTemplateId,
            Optional<Boolean> resumable,
            Map<String, Object> additionalProperties) {
        this.acceptOauth = acceptOauth;
        this.acceptRegister = acceptRegister;
        this.builderData = builderData;
        this.entryAttributes = entryAttributes;
        this.id = id;
        this.logo = logo;
        this.orgId = orgId;
        this.pageIdentifier = pageIdentifier;
        this.recipientEmailNotification = recipientEmailNotification;
        this.referenceName = referenceName;
        this.referenceTemplateId = referenceTemplateId;
        this.resumable = resumable;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("acceptOauth")
    public Optional<Boolean> getAcceptOauth() {
        return acceptOauth;
    }

    @JsonProperty("acceptRegister")
    public Optional<Boolean> getAcceptRegister() {
        return acceptRegister;
    }

    @JsonProperty("builderData")
    public Optional<BuilderData> getBuilderData() {
        return builderData;
    }

    @JsonProperty("entryAttributes")
    public Optional<String> getEntryAttributes() {
        return entryAttributes;
    }

    @JsonProperty("id")
    public Optional<Long> getId() {
        return id;
    }

    /**
     * @return Object containing logo file.
     */
    @JsonProperty("logo")
    public Optional<FileContent> getLogo() {
        return logo;
    }

    @JsonProperty("orgId")
    public Optional<Long> getOrgId() {
        return orgId;
    }

    @JsonProperty("pageIdentifier:")
    public Optional<String> getPageIdentifier() {
        return pageIdentifier;
    }

    @JsonProperty("recipientEmailNotification")
    public Optional<Boolean> getRecipientEmailNotification() {
        return recipientEmailNotification;
    }

    @JsonProperty("referenceName")
    public Optional<String> getReferenceName() {
        return referenceName;
    }

    @JsonProperty("referenceTemplateId")
    public Optional<Long> getReferenceTemplateId() {
        return referenceTemplateId;
    }

    @JsonProperty("resumable")
    public Optional<Boolean> getResumable() {
        return resumable;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BoardingLinkQueryRecord && equalTo((BoardingLinkQueryRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BoardingLinkQueryRecord other) {
        return acceptOauth.equals(other.acceptOauth)
                && acceptRegister.equals(other.acceptRegister)
                && builderData.equals(other.builderData)
                && entryAttributes.equals(other.entryAttributes)
                && id.equals(other.id)
                && logo.equals(other.logo)
                && orgId.equals(other.orgId)
                && pageIdentifier.equals(other.pageIdentifier)
                && recipientEmailNotification.equals(other.recipientEmailNotification)
                && referenceName.equals(other.referenceName)
                && referenceTemplateId.equals(other.referenceTemplateId)
                && resumable.equals(other.resumable);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.acceptOauth,
                this.acceptRegister,
                this.builderData,
                this.entryAttributes,
                this.id,
                this.logo,
                this.orgId,
                this.pageIdentifier,
                this.recipientEmailNotification,
                this.referenceName,
                this.referenceTemplateId,
                this.resumable);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> acceptOauth = Optional.empty();

        private Optional<Boolean> acceptRegister = Optional.empty();

        private Optional<BuilderData> builderData = Optional.empty();

        private Optional<String> entryAttributes = Optional.empty();

        private Optional<Long> id = Optional.empty();

        private Optional<FileContent> logo = Optional.empty();

        private Optional<Long> orgId = Optional.empty();

        private Optional<String> pageIdentifier = Optional.empty();

        private Optional<Boolean> recipientEmailNotification = Optional.empty();

        private Optional<String> referenceName = Optional.empty();

        private Optional<Long> referenceTemplateId = Optional.empty();

        private Optional<Boolean> resumable = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BoardingLinkQueryRecord other) {
            acceptOauth(other.getAcceptOauth());
            acceptRegister(other.getAcceptRegister());
            builderData(other.getBuilderData());
            entryAttributes(other.getEntryAttributes());
            id(other.getId());
            logo(other.getLogo());
            orgId(other.getOrgId());
            pageIdentifier(other.getPageIdentifier());
            recipientEmailNotification(other.getRecipientEmailNotification());
            referenceName(other.getReferenceName());
            referenceTemplateId(other.getReferenceTemplateId());
            resumable(other.getResumable());
            return this;
        }

        @JsonSetter(value = "acceptOauth", nulls = Nulls.SKIP)
        public Builder acceptOauth(Optional<Boolean> acceptOauth) {
            this.acceptOauth = acceptOauth;
            return this;
        }

        public Builder acceptOauth(Boolean acceptOauth) {
            this.acceptOauth = Optional.ofNullable(acceptOauth);
            return this;
        }

        @JsonSetter(value = "acceptRegister", nulls = Nulls.SKIP)
        public Builder acceptRegister(Optional<Boolean> acceptRegister) {
            this.acceptRegister = acceptRegister;
            return this;
        }

        public Builder acceptRegister(Boolean acceptRegister) {
            this.acceptRegister = Optional.ofNullable(acceptRegister);
            return this;
        }

        @JsonSetter(value = "builderData", nulls = Nulls.SKIP)
        public Builder builderData(Optional<BuilderData> builderData) {
            this.builderData = builderData;
            return this;
        }

        public Builder builderData(BuilderData builderData) {
            this.builderData = Optional.ofNullable(builderData);
            return this;
        }

        @JsonSetter(value = "entryAttributes", nulls = Nulls.SKIP)
        public Builder entryAttributes(Optional<String> entryAttributes) {
            this.entryAttributes = entryAttributes;
            return this;
        }

        public Builder entryAttributes(String entryAttributes) {
            this.entryAttributes = Optional.ofNullable(entryAttributes);
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<Long> id) {
            this.id = id;
            return this;
        }

        public Builder id(Long id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>Object containing logo file.</p>
         */
        @JsonSetter(value = "logo", nulls = Nulls.SKIP)
        public Builder logo(Optional<FileContent> logo) {
            this.logo = logo;
            return this;
        }

        public Builder logo(FileContent logo) {
            this.logo = Optional.ofNullable(logo);
            return this;
        }

        @JsonSetter(value = "orgId", nulls = Nulls.SKIP)
        public Builder orgId(Optional<Long> orgId) {
            this.orgId = orgId;
            return this;
        }

        public Builder orgId(Long orgId) {
            this.orgId = Optional.ofNullable(orgId);
            return this;
        }

        @JsonSetter(value = "pageIdentifier:", nulls = Nulls.SKIP)
        public Builder pageIdentifier(Optional<String> pageIdentifier) {
            this.pageIdentifier = pageIdentifier;
            return this;
        }

        public Builder pageIdentifier(String pageIdentifier) {
            this.pageIdentifier = Optional.ofNullable(pageIdentifier);
            return this;
        }

        @JsonSetter(value = "recipientEmailNotification", nulls = Nulls.SKIP)
        public Builder recipientEmailNotification(Optional<Boolean> recipientEmailNotification) {
            this.recipientEmailNotification = recipientEmailNotification;
            return this;
        }

        public Builder recipientEmailNotification(Boolean recipientEmailNotification) {
            this.recipientEmailNotification = Optional.ofNullable(recipientEmailNotification);
            return this;
        }

        @JsonSetter(value = "referenceName", nulls = Nulls.SKIP)
        public Builder referenceName(Optional<String> referenceName) {
            this.referenceName = referenceName;
            return this;
        }

        public Builder referenceName(String referenceName) {
            this.referenceName = Optional.ofNullable(referenceName);
            return this;
        }

        @JsonSetter(value = "referenceTemplateId", nulls = Nulls.SKIP)
        public Builder referenceTemplateId(Optional<Long> referenceTemplateId) {
            this.referenceTemplateId = referenceTemplateId;
            return this;
        }

        public Builder referenceTemplateId(Long referenceTemplateId) {
            this.referenceTemplateId = Optional.ofNullable(referenceTemplateId);
            return this;
        }

        @JsonSetter(value = "resumable", nulls = Nulls.SKIP)
        public Builder resumable(Optional<Boolean> resumable) {
            this.resumable = resumable;
            return this;
        }

        public Builder resumable(Boolean resumable) {
            this.resumable = Optional.ofNullable(resumable);
            return this;
        }

        public BoardingLinkQueryRecord build() {
            return new BoardingLinkQueryRecord(
                    acceptOauth,
                    acceptRegister,
                    builderData,
                    entryAttributes,
                    id,
                    logo,
                    orgId,
                    pageIdentifier,
                    recipientEmailNotification,
                    referenceName,
                    referenceTemplateId,
                    resumable,
                    additionalProperties);
        }
    }
}
