/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryPayoutTransactionSummary.Builder.class)
public final class QueryPayoutTransactionSummary {
    private final Optional<String> pageIdentifier;

    private final Optional<Integer> pageSize;

    private final Optional<Float> totalAmount;

    private final Optional<Integer> totalAuthorized;

    private final Optional<Float> totalAuthorizedAmount;

    private final Optional<Integer> totalCanceled;

    private final Optional<Float> totalCanceledAmount;

    private final Optional<Integer> totalCaptured;

    private final Optional<Float> totalCapturedAmount;

    private final Optional<Float> totalNetAmount;

    private final Optional<Integer> totalOpen;

    private final Optional<Float> totalOpenAmount;

    private final Optional<Integer> totalPages;

    private final Optional<Integer> totalPaid;

    private final Optional<Float> totalPaidAmount;

    private final Optional<Integer> totalOnHold;

    private final Optional<Float> totalOnHoldAmount;

    private final Optional<Integer> totalProcessing;

    private final Optional<Float> totalProcessingAmount;

    private final Optional<Integer> totalRecords;

    private final Map<String, Object> additionalProperties;

    private QueryPayoutTransactionSummary(
            Optional<String> pageIdentifier,
            Optional<Integer> pageSize,
            Optional<Float> totalAmount,
            Optional<Integer> totalAuthorized,
            Optional<Float> totalAuthorizedAmount,
            Optional<Integer> totalCanceled,
            Optional<Float> totalCanceledAmount,
            Optional<Integer> totalCaptured,
            Optional<Float> totalCapturedAmount,
            Optional<Float> totalNetAmount,
            Optional<Integer> totalOpen,
            Optional<Float> totalOpenAmount,
            Optional<Integer> totalPages,
            Optional<Integer> totalPaid,
            Optional<Float> totalPaidAmount,
            Optional<Integer> totalOnHold,
            Optional<Float> totalOnHoldAmount,
            Optional<Integer> totalProcessing,
            Optional<Float> totalProcessingAmount,
            Optional<Integer> totalRecords,
            Map<String, Object> additionalProperties) {
        this.pageIdentifier = pageIdentifier;
        this.pageSize = pageSize;
        this.totalAmount = totalAmount;
        this.totalAuthorized = totalAuthorized;
        this.totalAuthorizedAmount = totalAuthorizedAmount;
        this.totalCanceled = totalCanceled;
        this.totalCanceledAmount = totalCanceledAmount;
        this.totalCaptured = totalCaptured;
        this.totalCapturedAmount = totalCapturedAmount;
        this.totalNetAmount = totalNetAmount;
        this.totalOpen = totalOpen;
        this.totalOpenAmount = totalOpenAmount;
        this.totalPages = totalPages;
        this.totalPaid = totalPaid;
        this.totalPaidAmount = totalPaidAmount;
        this.totalOnHold = totalOnHold;
        this.totalOnHoldAmount = totalOnHoldAmount;
        this.totalProcessing = totalProcessing;
        this.totalProcessingAmount = totalProcessingAmount;
        this.totalRecords = totalRecords;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("pageIdentifier")
    public Optional<String> getPageIdentifier() {
        return pageIdentifier;
    }

    @JsonProperty("pageSize")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    @JsonProperty("totalAmount")
    public Optional<Float> getTotalAmount() {
        return totalAmount;
    }

    @JsonProperty("totalAuthorized")
    public Optional<Integer> getTotalAuthorized() {
        return totalAuthorized;
    }

    @JsonProperty("totalAuthorizedAmount")
    public Optional<Float> getTotalAuthorizedAmount() {
        return totalAuthorizedAmount;
    }

    @JsonProperty("totalCanceled")
    public Optional<Integer> getTotalCanceled() {
        return totalCanceled;
    }

    @JsonProperty("totalCanceledAmount")
    public Optional<Float> getTotalCanceledAmount() {
        return totalCanceledAmount;
    }

    @JsonProperty("totalCaptured")
    public Optional<Integer> getTotalCaptured() {
        return totalCaptured;
    }

    @JsonProperty("totalCapturedAmount")
    public Optional<Float> getTotalCapturedAmount() {
        return totalCapturedAmount;
    }

    @JsonProperty("totalNetAmount")
    public Optional<Float> getTotalNetAmount() {
        return totalNetAmount;
    }

    @JsonProperty("totalOpen")
    public Optional<Integer> getTotalOpen() {
        return totalOpen;
    }

    @JsonProperty("totalOpenAmount")
    public Optional<Float> getTotalOpenAmount() {
        return totalOpenAmount;
    }

    @JsonProperty("totalPages")
    public Optional<Integer> getTotalPages() {
        return totalPages;
    }

    @JsonProperty("totalPaid")
    public Optional<Integer> getTotalPaid() {
        return totalPaid;
    }

    @JsonProperty("totalPaidAmount")
    public Optional<Float> getTotalPaidAmount() {
        return totalPaidAmount;
    }

    /**
     * @return Total number of transactions that are currently on hold.
     */
    @JsonProperty("totalOnHold")
    public Optional<Integer> getTotalOnHold() {
        return totalOnHold;
    }

    /**
     * @return Total amount of transactions that are currently on hold.
     */
    @JsonProperty("totalOnHoldAmount")
    public Optional<Float> getTotalOnHoldAmount() {
        return totalOnHoldAmount;
    }

    @JsonProperty("totalProcessing")
    public Optional<Integer> getTotalProcessing() {
        return totalProcessing;
    }

    @JsonProperty("totalProcessingAmount")
    public Optional<Float> getTotalProcessingAmount() {
        return totalProcessingAmount;
    }

    @JsonProperty("totalRecords")
    public Optional<Integer> getTotalRecords() {
        return totalRecords;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryPayoutTransactionSummary && equalTo((QueryPayoutTransactionSummary) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryPayoutTransactionSummary other) {
        return pageIdentifier.equals(other.pageIdentifier)
                && pageSize.equals(other.pageSize)
                && totalAmount.equals(other.totalAmount)
                && totalAuthorized.equals(other.totalAuthorized)
                && totalAuthorizedAmount.equals(other.totalAuthorizedAmount)
                && totalCanceled.equals(other.totalCanceled)
                && totalCanceledAmount.equals(other.totalCanceledAmount)
                && totalCaptured.equals(other.totalCaptured)
                && totalCapturedAmount.equals(other.totalCapturedAmount)
                && totalNetAmount.equals(other.totalNetAmount)
                && totalOpen.equals(other.totalOpen)
                && totalOpenAmount.equals(other.totalOpenAmount)
                && totalPages.equals(other.totalPages)
                && totalPaid.equals(other.totalPaid)
                && totalPaidAmount.equals(other.totalPaidAmount)
                && totalOnHold.equals(other.totalOnHold)
                && totalOnHoldAmount.equals(other.totalOnHoldAmount)
                && totalProcessing.equals(other.totalProcessing)
                && totalProcessingAmount.equals(other.totalProcessingAmount)
                && totalRecords.equals(other.totalRecords);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.pageIdentifier,
                this.pageSize,
                this.totalAmount,
                this.totalAuthorized,
                this.totalAuthorizedAmount,
                this.totalCanceled,
                this.totalCanceledAmount,
                this.totalCaptured,
                this.totalCapturedAmount,
                this.totalNetAmount,
                this.totalOpen,
                this.totalOpenAmount,
                this.totalPages,
                this.totalPaid,
                this.totalPaidAmount,
                this.totalOnHold,
                this.totalOnHoldAmount,
                this.totalProcessing,
                this.totalProcessingAmount,
                this.totalRecords);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> pageIdentifier = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<Float> totalAmount = Optional.empty();

        private Optional<Integer> totalAuthorized = Optional.empty();

        private Optional<Float> totalAuthorizedAmount = Optional.empty();

        private Optional<Integer> totalCanceled = Optional.empty();

        private Optional<Float> totalCanceledAmount = Optional.empty();

        private Optional<Integer> totalCaptured = Optional.empty();

        private Optional<Float> totalCapturedAmount = Optional.empty();

        private Optional<Float> totalNetAmount = Optional.empty();

        private Optional<Integer> totalOpen = Optional.empty();

        private Optional<Float> totalOpenAmount = Optional.empty();

        private Optional<Integer> totalPages = Optional.empty();

        private Optional<Integer> totalPaid = Optional.empty();

        private Optional<Float> totalPaidAmount = Optional.empty();

        private Optional<Integer> totalOnHold = Optional.empty();

        private Optional<Float> totalOnHoldAmount = Optional.empty();

        private Optional<Integer> totalProcessing = Optional.empty();

        private Optional<Float> totalProcessingAmount = Optional.empty();

        private Optional<Integer> totalRecords = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryPayoutTransactionSummary other) {
            pageIdentifier(other.getPageIdentifier());
            pageSize(other.getPageSize());
            totalAmount(other.getTotalAmount());
            totalAuthorized(other.getTotalAuthorized());
            totalAuthorizedAmount(other.getTotalAuthorizedAmount());
            totalCanceled(other.getTotalCanceled());
            totalCanceledAmount(other.getTotalCanceledAmount());
            totalCaptured(other.getTotalCaptured());
            totalCapturedAmount(other.getTotalCapturedAmount());
            totalNetAmount(other.getTotalNetAmount());
            totalOpen(other.getTotalOpen());
            totalOpenAmount(other.getTotalOpenAmount());
            totalPages(other.getTotalPages());
            totalPaid(other.getTotalPaid());
            totalPaidAmount(other.getTotalPaidAmount());
            totalOnHold(other.getTotalOnHold());
            totalOnHoldAmount(other.getTotalOnHoldAmount());
            totalProcessing(other.getTotalProcessing());
            totalProcessingAmount(other.getTotalProcessingAmount());
            totalRecords(other.getTotalRecords());
            return this;
        }

        @JsonSetter(value = "pageIdentifier", nulls = Nulls.SKIP)
        public Builder pageIdentifier(Optional<String> pageIdentifier) {
            this.pageIdentifier = pageIdentifier;
            return this;
        }

        public Builder pageIdentifier(String pageIdentifier) {
            this.pageIdentifier = Optional.ofNullable(pageIdentifier);
            return this;
        }

        @JsonSetter(value = "pageSize", nulls = Nulls.SKIP)
        public Builder pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        @JsonSetter(value = "totalAmount", nulls = Nulls.SKIP)
        public Builder totalAmount(Optional<Float> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalAmount(Float totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        @JsonSetter(value = "totalAuthorized", nulls = Nulls.SKIP)
        public Builder totalAuthorized(Optional<Integer> totalAuthorized) {
            this.totalAuthorized = totalAuthorized;
            return this;
        }

        public Builder totalAuthorized(Integer totalAuthorized) {
            this.totalAuthorized = Optional.ofNullable(totalAuthorized);
            return this;
        }

        @JsonSetter(value = "totalAuthorizedAmount", nulls = Nulls.SKIP)
        public Builder totalAuthorizedAmount(Optional<Float> totalAuthorizedAmount) {
            this.totalAuthorizedAmount = totalAuthorizedAmount;
            return this;
        }

        public Builder totalAuthorizedAmount(Float totalAuthorizedAmount) {
            this.totalAuthorizedAmount = Optional.ofNullable(totalAuthorizedAmount);
            return this;
        }

        @JsonSetter(value = "totalCanceled", nulls = Nulls.SKIP)
        public Builder totalCanceled(Optional<Integer> totalCanceled) {
            this.totalCanceled = totalCanceled;
            return this;
        }

        public Builder totalCanceled(Integer totalCanceled) {
            this.totalCanceled = Optional.ofNullable(totalCanceled);
            return this;
        }

        @JsonSetter(value = "totalCanceledAmount", nulls = Nulls.SKIP)
        public Builder totalCanceledAmount(Optional<Float> totalCanceledAmount) {
            this.totalCanceledAmount = totalCanceledAmount;
            return this;
        }

        public Builder totalCanceledAmount(Float totalCanceledAmount) {
            this.totalCanceledAmount = Optional.ofNullable(totalCanceledAmount);
            return this;
        }

        @JsonSetter(value = "totalCaptured", nulls = Nulls.SKIP)
        public Builder totalCaptured(Optional<Integer> totalCaptured) {
            this.totalCaptured = totalCaptured;
            return this;
        }

        public Builder totalCaptured(Integer totalCaptured) {
            this.totalCaptured = Optional.ofNullable(totalCaptured);
            return this;
        }

        @JsonSetter(value = "totalCapturedAmount", nulls = Nulls.SKIP)
        public Builder totalCapturedAmount(Optional<Float> totalCapturedAmount) {
            this.totalCapturedAmount = totalCapturedAmount;
            return this;
        }

        public Builder totalCapturedAmount(Float totalCapturedAmount) {
            this.totalCapturedAmount = Optional.ofNullable(totalCapturedAmount);
            return this;
        }

        @JsonSetter(value = "totalNetAmount", nulls = Nulls.SKIP)
        public Builder totalNetAmount(Optional<Float> totalNetAmount) {
            this.totalNetAmount = totalNetAmount;
            return this;
        }

        public Builder totalNetAmount(Float totalNetAmount) {
            this.totalNetAmount = Optional.ofNullable(totalNetAmount);
            return this;
        }

        @JsonSetter(value = "totalOpen", nulls = Nulls.SKIP)
        public Builder totalOpen(Optional<Integer> totalOpen) {
            this.totalOpen = totalOpen;
            return this;
        }

        public Builder totalOpen(Integer totalOpen) {
            this.totalOpen = Optional.ofNullable(totalOpen);
            return this;
        }

        @JsonSetter(value = "totalOpenAmount", nulls = Nulls.SKIP)
        public Builder totalOpenAmount(Optional<Float> totalOpenAmount) {
            this.totalOpenAmount = totalOpenAmount;
            return this;
        }

        public Builder totalOpenAmount(Float totalOpenAmount) {
            this.totalOpenAmount = Optional.ofNullable(totalOpenAmount);
            return this;
        }

        @JsonSetter(value = "totalPages", nulls = Nulls.SKIP)
        public Builder totalPages(Optional<Integer> totalPages) {
            this.totalPages = totalPages;
            return this;
        }

        public Builder totalPages(Integer totalPages) {
            this.totalPages = Optional.ofNullable(totalPages);
            return this;
        }

        @JsonSetter(value = "totalPaid", nulls = Nulls.SKIP)
        public Builder totalPaid(Optional<Integer> totalPaid) {
            this.totalPaid = totalPaid;
            return this;
        }

        public Builder totalPaid(Integer totalPaid) {
            this.totalPaid = Optional.ofNullable(totalPaid);
            return this;
        }

        @JsonSetter(value = "totalPaidAmount", nulls = Nulls.SKIP)
        public Builder totalPaidAmount(Optional<Float> totalPaidAmount) {
            this.totalPaidAmount = totalPaidAmount;
            return this;
        }

        public Builder totalPaidAmount(Float totalPaidAmount) {
            this.totalPaidAmount = Optional.ofNullable(totalPaidAmount);
            return this;
        }

        /**
         * <p>Total number of transactions that are currently on hold.</p>
         */
        @JsonSetter(value = "totalOnHold", nulls = Nulls.SKIP)
        public Builder totalOnHold(Optional<Integer> totalOnHold) {
            this.totalOnHold = totalOnHold;
            return this;
        }

        public Builder totalOnHold(Integer totalOnHold) {
            this.totalOnHold = Optional.ofNullable(totalOnHold);
            return this;
        }

        /**
         * <p>Total amount of transactions that are currently on hold.</p>
         */
        @JsonSetter(value = "totalOnHoldAmount", nulls = Nulls.SKIP)
        public Builder totalOnHoldAmount(Optional<Float> totalOnHoldAmount) {
            this.totalOnHoldAmount = totalOnHoldAmount;
            return this;
        }

        public Builder totalOnHoldAmount(Float totalOnHoldAmount) {
            this.totalOnHoldAmount = Optional.ofNullable(totalOnHoldAmount);
            return this;
        }

        @JsonSetter(value = "totalProcessing", nulls = Nulls.SKIP)
        public Builder totalProcessing(Optional<Integer> totalProcessing) {
            this.totalProcessing = totalProcessing;
            return this;
        }

        public Builder totalProcessing(Integer totalProcessing) {
            this.totalProcessing = Optional.ofNullable(totalProcessing);
            return this;
        }

        @JsonSetter(value = "totalProcessingAmount", nulls = Nulls.SKIP)
        public Builder totalProcessingAmount(Optional<Float> totalProcessingAmount) {
            this.totalProcessingAmount = totalProcessingAmount;
            return this;
        }

        public Builder totalProcessingAmount(Float totalProcessingAmount) {
            this.totalProcessingAmount = Optional.ofNullable(totalProcessingAmount);
            return this;
        }

        @JsonSetter(value = "totalRecords", nulls = Nulls.SKIP)
        public Builder totalRecords(Optional<Integer> totalRecords) {
            this.totalRecords = totalRecords;
            return this;
        }

        public Builder totalRecords(Integer totalRecords) {
            this.totalRecords = Optional.ofNullable(totalRecords);
            return this;
        }

        public QueryPayoutTransactionSummary build() {
            return new QueryPayoutTransactionSummary(
                    pageIdentifier,
                    pageSize,
                    totalAmount,
                    totalAuthorized,
                    totalAuthorizedAmount,
                    totalCanceled,
                    totalCanceledAmount,
                    totalCaptured,
                    totalCapturedAmount,
                    totalNetAmount,
                    totalOpen,
                    totalOpenAmount,
                    totalPages,
                    totalPaid,
                    totalPaidAmount,
                    totalOnHold,
                    totalOnHoldAmount,
                    totalProcessing,
                    totalProcessingAmount,
                    totalRecords,
                    additionalProperties);
        }
    }
}
