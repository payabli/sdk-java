/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryCFeeTransaction.Builder.class)
public final class QueryCFeeTransaction {
    private final Optional<String> cFeeTransid;

    private final Optional<Double> feeAmount;

    private final Optional<String> operation;

    private final Optional<Long> refundId;

    private final Optional<Map<String, Object>> responseData;

    private final Optional<Integer> settlementStatus;

    private final Optional<OffsetDateTime> transactionTime;

    private final Optional<Integer> transStatus;

    private final Map<String, Object> additionalProperties;

    private QueryCFeeTransaction(
            Optional<String> cFeeTransid,
            Optional<Double> feeAmount,
            Optional<String> operation,
            Optional<Long> refundId,
            Optional<Map<String, Object>> responseData,
            Optional<Integer> settlementStatus,
            Optional<OffsetDateTime> transactionTime,
            Optional<Integer> transStatus,
            Map<String, Object> additionalProperties) {
        this.cFeeTransid = cFeeTransid;
        this.feeAmount = feeAmount;
        this.operation = operation;
        this.refundId = refundId;
        this.responseData = responseData;
        this.settlementStatus = settlementStatus;
        this.transactionTime = transactionTime;
        this.transStatus = transStatus;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("cFeeTransid")
    public Optional<String> getCFeeTransid() {
        return cFeeTransid;
    }

    @JsonProperty("feeAmount")
    public Optional<Double> getFeeAmount() {
        return feeAmount;
    }

    @JsonProperty("operation")
    public Optional<String> getOperation() {
        return operation;
    }

    @JsonProperty("refundId")
    public Optional<Long> getRefundId() {
        return refundId;
    }

    @JsonProperty("responseData")
    public Optional<Map<String, Object>> getResponseData() {
        return responseData;
    }

    @JsonProperty("settlementStatus")
    public Optional<Integer> getSettlementStatus() {
        return settlementStatus;
    }

    @JsonProperty("transactionTime")
    public Optional<OffsetDateTime> getTransactionTime() {
        return transactionTime;
    }

    @JsonProperty("transStatus")
    public Optional<Integer> getTransStatus() {
        return transStatus;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryCFeeTransaction && equalTo((QueryCFeeTransaction) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryCFeeTransaction other) {
        return cFeeTransid.equals(other.cFeeTransid)
                && feeAmount.equals(other.feeAmount)
                && operation.equals(other.operation)
                && refundId.equals(other.refundId)
                && responseData.equals(other.responseData)
                && settlementStatus.equals(other.settlementStatus)
                && transactionTime.equals(other.transactionTime)
                && transStatus.equals(other.transStatus);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.cFeeTransid,
                this.feeAmount,
                this.operation,
                this.refundId,
                this.responseData,
                this.settlementStatus,
                this.transactionTime,
                this.transStatus);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> cFeeTransid = Optional.empty();

        private Optional<Double> feeAmount = Optional.empty();

        private Optional<String> operation = Optional.empty();

        private Optional<Long> refundId = Optional.empty();

        private Optional<Map<String, Object>> responseData = Optional.empty();

        private Optional<Integer> settlementStatus = Optional.empty();

        private Optional<OffsetDateTime> transactionTime = Optional.empty();

        private Optional<Integer> transStatus = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryCFeeTransaction other) {
            cFeeTransid(other.getCFeeTransid());
            feeAmount(other.getFeeAmount());
            operation(other.getOperation());
            refundId(other.getRefundId());
            responseData(other.getResponseData());
            settlementStatus(other.getSettlementStatus());
            transactionTime(other.getTransactionTime());
            transStatus(other.getTransStatus());
            return this;
        }

        @JsonSetter(value = "cFeeTransid", nulls = Nulls.SKIP)
        public Builder cFeeTransid(Optional<String> cFeeTransid) {
            this.cFeeTransid = cFeeTransid;
            return this;
        }

        public Builder cFeeTransid(String cFeeTransid) {
            this.cFeeTransid = Optional.ofNullable(cFeeTransid);
            return this;
        }

        @JsonSetter(value = "feeAmount", nulls = Nulls.SKIP)
        public Builder feeAmount(Optional<Double> feeAmount) {
            this.feeAmount = feeAmount;
            return this;
        }

        public Builder feeAmount(Double feeAmount) {
            this.feeAmount = Optional.ofNullable(feeAmount);
            return this;
        }

        @JsonSetter(value = "operation", nulls = Nulls.SKIP)
        public Builder operation(Optional<String> operation) {
            this.operation = operation;
            return this;
        }

        public Builder operation(String operation) {
            this.operation = Optional.ofNullable(operation);
            return this;
        }

        @JsonSetter(value = "refundId", nulls = Nulls.SKIP)
        public Builder refundId(Optional<Long> refundId) {
            this.refundId = refundId;
            return this;
        }

        public Builder refundId(Long refundId) {
            this.refundId = Optional.ofNullable(refundId);
            return this;
        }

        @JsonSetter(value = "responseData", nulls = Nulls.SKIP)
        public Builder responseData(Optional<Map<String, Object>> responseData) {
            this.responseData = responseData;
            return this;
        }

        public Builder responseData(Map<String, Object> responseData) {
            this.responseData = Optional.ofNullable(responseData);
            return this;
        }

        @JsonSetter(value = "settlementStatus", nulls = Nulls.SKIP)
        public Builder settlementStatus(Optional<Integer> settlementStatus) {
            this.settlementStatus = settlementStatus;
            return this;
        }

        public Builder settlementStatus(Integer settlementStatus) {
            this.settlementStatus = Optional.ofNullable(settlementStatus);
            return this;
        }

        @JsonSetter(value = "transactionTime", nulls = Nulls.SKIP)
        public Builder transactionTime(Optional<OffsetDateTime> transactionTime) {
            this.transactionTime = transactionTime;
            return this;
        }

        public Builder transactionTime(OffsetDateTime transactionTime) {
            this.transactionTime = Optional.ofNullable(transactionTime);
            return this;
        }

        @JsonSetter(value = "transStatus", nulls = Nulls.SKIP)
        public Builder transStatus(Optional<Integer> transStatus) {
            this.transStatus = transStatus;
            return this;
        }

        public Builder transStatus(Integer transStatus) {
            this.transStatus = Optional.ofNullable(transStatus);
            return this;
        }

        public QueryCFeeTransaction build() {
            return new QueryCFeeTransaction(
                    cFeeTransid,
                    feeAmount,
                    operation,
                    refundId,
                    responseData,
                    settlementStatus,
                    transactionTime,
                    transStatus,
                    additionalProperties);
        }
    }
}
