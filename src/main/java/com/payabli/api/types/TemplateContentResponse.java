/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TemplateContentResponse.Builder.class)
public final class TemplateContentResponse {
    private final Optional<BusinessSection> businessData;

    private final Optional<DocumentSection> documentsData;

    private final Optional<OwnersSection> ownershipData;

    private final Optional<ProcessingSection> processingData;

    private final Optional<SalesSection> salesData;

    private final Optional<ServicesSection> servicesData;

    private final Optional<UnderwritingDataResponse> underwritingData;

    private final Map<String, Object> additionalProperties;

    private TemplateContentResponse(
            Optional<BusinessSection> businessData,
            Optional<DocumentSection> documentsData,
            Optional<OwnersSection> ownershipData,
            Optional<ProcessingSection> processingData,
            Optional<SalesSection> salesData,
            Optional<ServicesSection> servicesData,
            Optional<UnderwritingDataResponse> underwritingData,
            Map<String, Object> additionalProperties) {
        this.businessData = businessData;
        this.documentsData = documentsData;
        this.ownershipData = ownershipData;
        this.processingData = processingData;
        this.salesData = salesData;
        this.servicesData = servicesData;
        this.underwritingData = underwritingData;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("businessData")
    public Optional<BusinessSection> getBusinessData() {
        return businessData;
    }

    @JsonProperty("documentsData")
    public Optional<DocumentSection> getDocumentsData() {
        return documentsData;
    }

    @JsonProperty("ownershipData")
    public Optional<OwnersSection> getOwnershipData() {
        return ownershipData;
    }

    @JsonProperty("processingData")
    public Optional<ProcessingSection> getProcessingData() {
        return processingData;
    }

    @JsonProperty("salesData")
    public Optional<SalesSection> getSalesData() {
        return salesData;
    }

    @JsonProperty("servicesData")
    public Optional<ServicesSection> getServicesData() {
        return servicesData;
    }

    @JsonProperty("underwritingData")
    public Optional<UnderwritingDataResponse> getUnderwritingData() {
        return underwritingData;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TemplateContentResponse && equalTo((TemplateContentResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TemplateContentResponse other) {
        return businessData.equals(other.businessData)
                && documentsData.equals(other.documentsData)
                && ownershipData.equals(other.ownershipData)
                && processingData.equals(other.processingData)
                && salesData.equals(other.salesData)
                && servicesData.equals(other.servicesData)
                && underwritingData.equals(other.underwritingData);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.businessData,
                this.documentsData,
                this.ownershipData,
                this.processingData,
                this.salesData,
                this.servicesData,
                this.underwritingData);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<BusinessSection> businessData = Optional.empty();

        private Optional<DocumentSection> documentsData = Optional.empty();

        private Optional<OwnersSection> ownershipData = Optional.empty();

        private Optional<ProcessingSection> processingData = Optional.empty();

        private Optional<SalesSection> salesData = Optional.empty();

        private Optional<ServicesSection> servicesData = Optional.empty();

        private Optional<UnderwritingDataResponse> underwritingData = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TemplateContentResponse other) {
            businessData(other.getBusinessData());
            documentsData(other.getDocumentsData());
            ownershipData(other.getOwnershipData());
            processingData(other.getProcessingData());
            salesData(other.getSalesData());
            servicesData(other.getServicesData());
            underwritingData(other.getUnderwritingData());
            return this;
        }

        @JsonSetter(value = "businessData", nulls = Nulls.SKIP)
        public Builder businessData(Optional<BusinessSection> businessData) {
            this.businessData = businessData;
            return this;
        }

        public Builder businessData(BusinessSection businessData) {
            this.businessData = Optional.ofNullable(businessData);
            return this;
        }

        @JsonSetter(value = "documentsData", nulls = Nulls.SKIP)
        public Builder documentsData(Optional<DocumentSection> documentsData) {
            this.documentsData = documentsData;
            return this;
        }

        public Builder documentsData(DocumentSection documentsData) {
            this.documentsData = Optional.ofNullable(documentsData);
            return this;
        }

        @JsonSetter(value = "ownershipData", nulls = Nulls.SKIP)
        public Builder ownershipData(Optional<OwnersSection> ownershipData) {
            this.ownershipData = ownershipData;
            return this;
        }

        public Builder ownershipData(OwnersSection ownershipData) {
            this.ownershipData = Optional.ofNullable(ownershipData);
            return this;
        }

        @JsonSetter(value = "processingData", nulls = Nulls.SKIP)
        public Builder processingData(Optional<ProcessingSection> processingData) {
            this.processingData = processingData;
            return this;
        }

        public Builder processingData(ProcessingSection processingData) {
            this.processingData = Optional.ofNullable(processingData);
            return this;
        }

        @JsonSetter(value = "salesData", nulls = Nulls.SKIP)
        public Builder salesData(Optional<SalesSection> salesData) {
            this.salesData = salesData;
            return this;
        }

        public Builder salesData(SalesSection salesData) {
            this.salesData = Optional.ofNullable(salesData);
            return this;
        }

        @JsonSetter(value = "servicesData", nulls = Nulls.SKIP)
        public Builder servicesData(Optional<ServicesSection> servicesData) {
            this.servicesData = servicesData;
            return this;
        }

        public Builder servicesData(ServicesSection servicesData) {
            this.servicesData = Optional.ofNullable(servicesData);
            return this;
        }

        @JsonSetter(value = "underwritingData", nulls = Nulls.SKIP)
        public Builder underwritingData(Optional<UnderwritingDataResponse> underwritingData) {
            this.underwritingData = underwritingData;
            return this;
        }

        public Builder underwritingData(UnderwritingDataResponse underwritingData) {
            this.underwritingData = Optional.ofNullable(underwritingData);
            return this;
        }

        public TemplateContentResponse build() {
            return new TemplateContentResponse(
                    businessData,
                    documentsData,
                    ownershipData,
                    processingData,
                    salesData,
                    servicesData,
                    underwritingData,
                    additionalProperties);
        }
    }
}
