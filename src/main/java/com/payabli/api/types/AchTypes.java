/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AchTypes.Builder.class)
public final class AchTypes {
    private final Optional<BasicTemplateElement> ccd;

    private final Optional<BasicTemplateElement> ppd;

    private final Optional<BasicTemplateElement> web;

    private final Map<String, Object> additionalProperties;

    private AchTypes(
            Optional<BasicTemplateElement> ccd,
            Optional<BasicTemplateElement> ppd,
            Optional<BasicTemplateElement> web,
            Map<String, Object> additionalProperties) {
        this.ccd = ccd;
        this.ppd = ppd;
        this.web = web;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("ccd")
    public Optional<BasicTemplateElement> getCcd() {
        return ccd;
    }

    @JsonProperty("ppd")
    public Optional<BasicTemplateElement> getPpd() {
        return ppd;
    }

    @JsonProperty("web")
    public Optional<BasicTemplateElement> getWeb() {
        return web;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AchTypes && equalTo((AchTypes) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AchTypes other) {
        return ccd.equals(other.ccd) && ppd.equals(other.ppd) && web.equals(other.web);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.ccd, this.ppd, this.web);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<BasicTemplateElement> ccd = Optional.empty();

        private Optional<BasicTemplateElement> ppd = Optional.empty();

        private Optional<BasicTemplateElement> web = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AchTypes other) {
            ccd(other.getCcd());
            ppd(other.getPpd());
            web(other.getWeb());
            return this;
        }

        @JsonSetter(value = "ccd", nulls = Nulls.SKIP)
        public Builder ccd(Optional<BasicTemplateElement> ccd) {
            this.ccd = ccd;
            return this;
        }

        public Builder ccd(BasicTemplateElement ccd) {
            this.ccd = Optional.ofNullable(ccd);
            return this;
        }

        @JsonSetter(value = "ppd", nulls = Nulls.SKIP)
        public Builder ppd(Optional<BasicTemplateElement> ppd) {
            this.ppd = ppd;
            return this;
        }

        public Builder ppd(BasicTemplateElement ppd) {
            this.ppd = Optional.ofNullable(ppd);
            return this;
        }

        @JsonSetter(value = "web", nulls = Nulls.SKIP)
        public Builder web(Optional<BasicTemplateElement> web) {
            this.web = web;
            return this;
        }

        public Builder web(BasicTemplateElement web) {
            this.web = Optional.ofNullable(web);
            return this;
        }

        public AchTypes build() {
            return new AchTypes(ccd, ppd, web, additionalProperties);
        }
    }
}
