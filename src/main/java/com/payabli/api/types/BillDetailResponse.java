/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BillDetailResponse.Builder.class)
public final class BillDetailResponse {
    private final Optional<List<BillDetailsResponse>> bills;

    private final Optional<FileContent> checkData;

    private final Optional<String> checkNumber;

    private final Optional<String> comments;

    private final Optional<OffsetDateTime> createdDate;

    private final Optional<List<QueryTransactionEvents>> events;

    private final Optional<Double> feeAmount;

    private final Optional<String> gateway;

    private final Optional<Long> idOut;

    private final Optional<OffsetDateTime> lastUpdated;

    private final Optional<Double> netAmount;

    private final Optional<String> parentOrgName;

    private final Optional<QueryPaymentData> paymentData;

    private final Optional<String> paymentGroup;

    private final Optional<String> paymentId;

    private final Optional<String> paymentMethod;

    private final Optional<String> paymentStatus;

    private final Optional<String> paypointDbaname;

    private final Optional<String> paypointLegalname;

    private final Optional<String> source;

    private final Optional<Integer> status;

    private final Optional<String> statusText;

    private final Optional<Double> totalAmount;

    private final Optional<VendorQueryRecord> vendor;

    private final Map<String, Object> additionalProperties;

    private BillDetailResponse(
            Optional<List<BillDetailsResponse>> bills,
            Optional<FileContent> checkData,
            Optional<String> checkNumber,
            Optional<String> comments,
            Optional<OffsetDateTime> createdDate,
            Optional<List<QueryTransactionEvents>> events,
            Optional<Double> feeAmount,
            Optional<String> gateway,
            Optional<Long> idOut,
            Optional<OffsetDateTime> lastUpdated,
            Optional<Double> netAmount,
            Optional<String> parentOrgName,
            Optional<QueryPaymentData> paymentData,
            Optional<String> paymentGroup,
            Optional<String> paymentId,
            Optional<String> paymentMethod,
            Optional<String> paymentStatus,
            Optional<String> paypointDbaname,
            Optional<String> paypointLegalname,
            Optional<String> source,
            Optional<Integer> status,
            Optional<String> statusText,
            Optional<Double> totalAmount,
            Optional<VendorQueryRecord> vendor,
            Map<String, Object> additionalProperties) {
        this.bills = bills;
        this.checkData = checkData;
        this.checkNumber = checkNumber;
        this.comments = comments;
        this.createdDate = createdDate;
        this.events = events;
        this.feeAmount = feeAmount;
        this.gateway = gateway;
        this.idOut = idOut;
        this.lastUpdated = lastUpdated;
        this.netAmount = netAmount;
        this.parentOrgName = parentOrgName;
        this.paymentData = paymentData;
        this.paymentGroup = paymentGroup;
        this.paymentId = paymentId;
        this.paymentMethod = paymentMethod;
        this.paymentStatus = paymentStatus;
        this.paypointDbaname = paypointDbaname;
        this.paypointLegalname = paypointLegalname;
        this.source = source;
        this.status = status;
        this.statusText = statusText;
        this.totalAmount = totalAmount;
        this.vendor = vendor;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Events associated to this transaction.
     */
    @JsonProperty("Bills")
    public Optional<List<BillDetailsResponse>> getBills() {
        return bills;
    }

    /**
     * @return Object referencing to paper check image.
     */
    @JsonProperty("CheckData")
    public Optional<FileContent> getCheckData() {
        return checkData;
    }

    /**
     * @return Paper check number related to payout transaction.
     */
    @JsonProperty("CheckNumber")
    public Optional<String> getCheckNumber() {
        return checkNumber;
    }

    /**
     * @return Any comment or description for payout transaction.
     */
    @JsonProperty("Comments")
    public Optional<String> getComments() {
        return comments;
    }

    /**
     * @return Timestamp when the payment was created, in UTC.
     */
    @JsonProperty("CreatedDate")
    public Optional<OffsetDateTime> getCreatedDate() {
        return createdDate;
    }

    /**
     * @return Events associated to this transaction.
     */
    @JsonProperty("Events")
    public Optional<List<QueryTransactionEvents>> getEvents() {
        return events;
    }

    /**
     * @return Service fee or sub-charge applied.
     */
    @JsonProperty("FeeAmount")
    public Optional<Double> getFeeAmount() {
        return feeAmount;
    }

    @JsonProperty("Gateway")
    public Optional<String> getGateway() {
        return gateway;
    }

    /**
     * @return Identifier of payout transaction.
     */
    @JsonProperty("IdOut")
    public Optional<Long> getIdOut() {
        return idOut;
    }

    /**
     * @return Timestamp when payment record was updated, in UTC.
     */
    @JsonProperty("LastUpdated")
    public Optional<OffsetDateTime> getLastUpdated() {
        return lastUpdated;
    }

    @JsonProperty("NetAmount")
    public Optional<Double> getNetAmount() {
        return netAmount;
    }

    @JsonProperty("parentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    @JsonProperty("PaymentData")
    public Optional<QueryPaymentData> getPaymentData() {
        return paymentData;
    }

    /**
     * @return Unique identifier for group or batch containing the transaction.
     */
    @JsonProperty("PaymentGroup")
    public Optional<String> getPaymentGroup() {
        return paymentGroup;
    }

    @JsonProperty("PaymentId")
    public Optional<String> getPaymentId() {
        return paymentId;
    }

    /**
     * @return Method of payment applied to the transaction.
     */
    @JsonProperty("PaymentMethod")
    public Optional<String> getPaymentMethod() {
        return paymentMethod;
    }

    /**
     * @return Status of payout transaction.
     */
    @JsonProperty("PaymentStatus")
    public Optional<String> getPaymentStatus() {
        return paymentStatus;
    }

    @JsonProperty("paypointDbaname")
    public Optional<String> getPaypointDbaname() {
        return paypointDbaname;
    }

    /**
     * @return Paypoint legal name.
     */
    @JsonProperty("paypointLegalname")
    public Optional<String> getPaypointLegalname() {
        return paypointLegalname;
    }

    @JsonProperty("Source")
    public Optional<String> getSource() {
        return source;
    }

    /**
     * @return Internal status of transaction.
     */
    @JsonProperty("Status")
    public Optional<Integer> getStatus() {
        return status;
    }

    /**
     * @return Status of payout transaction.
     */
    @JsonProperty("StatusText")
    public Optional<String> getStatusText() {
        return statusText;
    }

    /**
     * @return Transaction total amount (including service fee or sub-charge).
     */
    @JsonProperty("TotalAmount")
    public Optional<Double> getTotalAmount() {
        return totalAmount;
    }

    /**
     * @return Vendor related to the payout transaction.
     */
    @JsonProperty("Vendor")
    public Optional<VendorQueryRecord> getVendor() {
        return vendor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BillDetailResponse && equalTo((BillDetailResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BillDetailResponse other) {
        return bills.equals(other.bills)
                && checkData.equals(other.checkData)
                && checkNumber.equals(other.checkNumber)
                && comments.equals(other.comments)
                && createdDate.equals(other.createdDate)
                && events.equals(other.events)
                && feeAmount.equals(other.feeAmount)
                && gateway.equals(other.gateway)
                && idOut.equals(other.idOut)
                && lastUpdated.equals(other.lastUpdated)
                && netAmount.equals(other.netAmount)
                && parentOrgName.equals(other.parentOrgName)
                && paymentData.equals(other.paymentData)
                && paymentGroup.equals(other.paymentGroup)
                && paymentId.equals(other.paymentId)
                && paymentMethod.equals(other.paymentMethod)
                && paymentStatus.equals(other.paymentStatus)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointLegalname.equals(other.paypointLegalname)
                && source.equals(other.source)
                && status.equals(other.status)
                && statusText.equals(other.statusText)
                && totalAmount.equals(other.totalAmount)
                && vendor.equals(other.vendor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.bills,
                this.checkData,
                this.checkNumber,
                this.comments,
                this.createdDate,
                this.events,
                this.feeAmount,
                this.gateway,
                this.idOut,
                this.lastUpdated,
                this.netAmount,
                this.parentOrgName,
                this.paymentData,
                this.paymentGroup,
                this.paymentId,
                this.paymentMethod,
                this.paymentStatus,
                this.paypointDbaname,
                this.paypointLegalname,
                this.source,
                this.status,
                this.statusText,
                this.totalAmount,
                this.vendor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<BillDetailsResponse>> bills = Optional.empty();

        private Optional<FileContent> checkData = Optional.empty();

        private Optional<String> checkNumber = Optional.empty();

        private Optional<String> comments = Optional.empty();

        private Optional<OffsetDateTime> createdDate = Optional.empty();

        private Optional<List<QueryTransactionEvents>> events = Optional.empty();

        private Optional<Double> feeAmount = Optional.empty();

        private Optional<String> gateway = Optional.empty();

        private Optional<Long> idOut = Optional.empty();

        private Optional<OffsetDateTime> lastUpdated = Optional.empty();

        private Optional<Double> netAmount = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<QueryPaymentData> paymentData = Optional.empty();

        private Optional<String> paymentGroup = Optional.empty();

        private Optional<String> paymentId = Optional.empty();

        private Optional<String> paymentMethod = Optional.empty();

        private Optional<String> paymentStatus = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<Integer> status = Optional.empty();

        private Optional<String> statusText = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<VendorQueryRecord> vendor = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BillDetailResponse other) {
            bills(other.getBills());
            checkData(other.getCheckData());
            checkNumber(other.getCheckNumber());
            comments(other.getComments());
            createdDate(other.getCreatedDate());
            events(other.getEvents());
            feeAmount(other.getFeeAmount());
            gateway(other.getGateway());
            idOut(other.getIdOut());
            lastUpdated(other.getLastUpdated());
            netAmount(other.getNetAmount());
            parentOrgName(other.getParentOrgName());
            paymentData(other.getPaymentData());
            paymentGroup(other.getPaymentGroup());
            paymentId(other.getPaymentId());
            paymentMethod(other.getPaymentMethod());
            paymentStatus(other.getPaymentStatus());
            paypointDbaname(other.getPaypointDbaname());
            paypointLegalname(other.getPaypointLegalname());
            source(other.getSource());
            status(other.getStatus());
            statusText(other.getStatusText());
            totalAmount(other.getTotalAmount());
            vendor(other.getVendor());
            return this;
        }

        /**
         * <p>Events associated to this transaction.</p>
         */
        @JsonSetter(value = "Bills", nulls = Nulls.SKIP)
        public Builder bills(Optional<List<BillDetailsResponse>> bills) {
            this.bills = bills;
            return this;
        }

        public Builder bills(List<BillDetailsResponse> bills) {
            this.bills = Optional.ofNullable(bills);
            return this;
        }

        /**
         * <p>Object referencing to paper check image.</p>
         */
        @JsonSetter(value = "CheckData", nulls = Nulls.SKIP)
        public Builder checkData(Optional<FileContent> checkData) {
            this.checkData = checkData;
            return this;
        }

        public Builder checkData(FileContent checkData) {
            this.checkData = Optional.ofNullable(checkData);
            return this;
        }

        /**
         * <p>Paper check number related to payout transaction.</p>
         */
        @JsonSetter(value = "CheckNumber", nulls = Nulls.SKIP)
        public Builder checkNumber(Optional<String> checkNumber) {
            this.checkNumber = checkNumber;
            return this;
        }

        public Builder checkNumber(String checkNumber) {
            this.checkNumber = Optional.ofNullable(checkNumber);
            return this;
        }

        /**
         * <p>Any comment or description for payout transaction.</p>
         */
        @JsonSetter(value = "Comments", nulls = Nulls.SKIP)
        public Builder comments(Optional<String> comments) {
            this.comments = comments;
            return this;
        }

        public Builder comments(String comments) {
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        /**
         * <p>Timestamp when the payment was created, in UTC.</p>
         */
        @JsonSetter(value = "CreatedDate", nulls = Nulls.SKIP)
        public Builder createdDate(Optional<OffsetDateTime> createdDate) {
            this.createdDate = createdDate;
            return this;
        }

        public Builder createdDate(OffsetDateTime createdDate) {
            this.createdDate = Optional.ofNullable(createdDate);
            return this;
        }

        /**
         * <p>Events associated to this transaction.</p>
         */
        @JsonSetter(value = "Events", nulls = Nulls.SKIP)
        public Builder events(Optional<List<QueryTransactionEvents>> events) {
            this.events = events;
            return this;
        }

        public Builder events(List<QueryTransactionEvents> events) {
            this.events = Optional.ofNullable(events);
            return this;
        }

        /**
         * <p>Service fee or sub-charge applied.</p>
         */
        @JsonSetter(value = "FeeAmount", nulls = Nulls.SKIP)
        public Builder feeAmount(Optional<Double> feeAmount) {
            this.feeAmount = feeAmount;
            return this;
        }

        public Builder feeAmount(Double feeAmount) {
            this.feeAmount = Optional.ofNullable(feeAmount);
            return this;
        }

        @JsonSetter(value = "Gateway", nulls = Nulls.SKIP)
        public Builder gateway(Optional<String> gateway) {
            this.gateway = gateway;
            return this;
        }

        public Builder gateway(String gateway) {
            this.gateway = Optional.ofNullable(gateway);
            return this;
        }

        /**
         * <p>Identifier of payout transaction.</p>
         */
        @JsonSetter(value = "IdOut", nulls = Nulls.SKIP)
        public Builder idOut(Optional<Long> idOut) {
            this.idOut = idOut;
            return this;
        }

        public Builder idOut(Long idOut) {
            this.idOut = Optional.ofNullable(idOut);
            return this;
        }

        /**
         * <p>Timestamp when payment record was updated, in UTC.</p>
         */
        @JsonSetter(value = "LastUpdated", nulls = Nulls.SKIP)
        public Builder lastUpdated(Optional<OffsetDateTime> lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }

        public Builder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = Optional.ofNullable(lastUpdated);
            return this;
        }

        @JsonSetter(value = "NetAmount", nulls = Nulls.SKIP)
        public Builder netAmount(Optional<Double> netAmount) {
            this.netAmount = netAmount;
            return this;
        }

        public Builder netAmount(Double netAmount) {
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        @JsonSetter(value = "parentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        @JsonSetter(value = "PaymentData", nulls = Nulls.SKIP)
        public Builder paymentData(Optional<QueryPaymentData> paymentData) {
            this.paymentData = paymentData;
            return this;
        }

        public Builder paymentData(QueryPaymentData paymentData) {
            this.paymentData = Optional.ofNullable(paymentData);
            return this;
        }

        /**
         * <p>Unique identifier for group or batch containing the transaction.</p>
         */
        @JsonSetter(value = "PaymentGroup", nulls = Nulls.SKIP)
        public Builder paymentGroup(Optional<String> paymentGroup) {
            this.paymentGroup = paymentGroup;
            return this;
        }

        public Builder paymentGroup(String paymentGroup) {
            this.paymentGroup = Optional.ofNullable(paymentGroup);
            return this;
        }

        @JsonSetter(value = "PaymentId", nulls = Nulls.SKIP)
        public Builder paymentId(Optional<String> paymentId) {
            this.paymentId = paymentId;
            return this;
        }

        public Builder paymentId(String paymentId) {
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        /**
         * <p>Method of payment applied to the transaction.</p>
         */
        @JsonSetter(value = "PaymentMethod", nulls = Nulls.SKIP)
        public Builder paymentMethod(Optional<String> paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }

        public Builder paymentMethod(String paymentMethod) {
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        /**
         * <p>Status of payout transaction.</p>
         */
        @JsonSetter(value = "PaymentStatus", nulls = Nulls.SKIP)
        public Builder paymentStatus(Optional<String> paymentStatus) {
            this.paymentStatus = paymentStatus;
            return this;
        }

        public Builder paymentStatus(String paymentStatus) {
            this.paymentStatus = Optional.ofNullable(paymentStatus);
            return this;
        }

        @JsonSetter(value = "paypointDbaname", nulls = Nulls.SKIP)
        public Builder paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        public Builder paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        /**
         * <p>Paypoint legal name.</p>
         */
        @JsonSetter(value = "paypointLegalname", nulls = Nulls.SKIP)
        public Builder paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        public Builder paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        @JsonSetter(value = "Source", nulls = Nulls.SKIP)
        public Builder source(Optional<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * <p>Internal status of transaction.</p>
         */
        @JsonSetter(value = "Status", nulls = Nulls.SKIP)
        public Builder status(Optional<Integer> status) {
            this.status = status;
            return this;
        }

        public Builder status(Integer status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>Status of payout transaction.</p>
         */
        @JsonSetter(value = "StatusText", nulls = Nulls.SKIP)
        public Builder statusText(Optional<String> statusText) {
            this.statusText = statusText;
            return this;
        }

        public Builder statusText(String statusText) {
            this.statusText = Optional.ofNullable(statusText);
            return this;
        }

        /**
         * <p>Transaction total amount (including service fee or sub-charge).</p>
         */
        @JsonSetter(value = "TotalAmount", nulls = Nulls.SKIP)
        public Builder totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * <p>Vendor related to the payout transaction.</p>
         */
        @JsonSetter(value = "Vendor", nulls = Nulls.SKIP)
        public Builder vendor(Optional<VendorQueryRecord> vendor) {
            this.vendor = vendor;
            return this;
        }

        public Builder vendor(VendorQueryRecord vendor) {
            this.vendor = Optional.ofNullable(vendor);
            return this;
        }

        public BillDetailResponse build() {
            return new BillDetailResponse(
                    bills,
                    checkData,
                    checkNumber,
                    comments,
                    createdDate,
                    events,
                    feeAmount,
                    gateway,
                    idOut,
                    lastUpdated,
                    netAmount,
                    parentOrgName,
                    paymentData,
                    paymentGroup,
                    paymentId,
                    paymentMethod,
                    paymentStatus,
                    paypointDbaname,
                    paypointLegalname,
                    source,
                    status,
                    statusText,
                    totalAmount,
                    vendor,
                    additionalProperties);
        }
    }
}
