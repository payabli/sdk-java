/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CardService.Builder.class)
public final class CardService {
    private final Optional<TemplateElement> batchCutoffTime;

    private final Optional<CardAcceptanceElement> cardAcceptance;

    private final Optional<CardFeeSection> cardFees;

    private final Optional<CardFlatSection> cardFlat;

    private final Optional<TemplateElement> cardFlatAmountxAuth;

    private final Optional<TemplateElement> cardFlatHighPayRange;

    private final Optional<TemplateElement> cardFlatLowPayRange;

    private final Optional<TemplateElement> cardFlatPercentxAuth;

    private final Optional<CardIcpSection> cardIcp;

    private final Optional<TemplateElement> cardIcpAmountxAuth;

    private final Optional<TemplateElement> cardIcpHighPayRange;

    private final Optional<TemplateElement> cardIcpLowPayRange;

    private final Optional<TemplateElement> cardIcpPercentxAuth;

    private final Optional<CardPassThroughSection> cardPassThrough;

    private final Optional<TemplateElement> cardPassThroughAmountRecurring;

    private final Optional<TemplateElement> cardPassThroughAmountxAuth;

    private final Optional<TemplateElement> cardPassThroughHighPayRange;

    private final Optional<TemplateElement> cardPassThroughLowPayRange;

    private final Optional<TemplateElement> cardPassThroughPercentRecurring;

    private final Optional<TemplateElement> cardPassThroughPercentxAuth;

    private final Optional<TemplateElement> discountFrequency;

    private final Optional<TemplateElement> fundingRollup;

    private final Optional<TemplateElement> gateway;

    private final Optional<TemplateElement> passThroughCost;

    private final Optional<TemplateElement> pdfTemplateId;

    private final Optional<Long> pricingPlan;

    private final Optional<TemplateElement> pricingType;

    private final Optional<TemplateElement> processor;

    private final Optional<TemplateElement> provider;

    private final Optional<TemplateElement> tierName;

    private final Optional<Boolean> visible;

    private final Map<String, Object> additionalProperties;

    private CardService(
            Optional<TemplateElement> batchCutoffTime,
            Optional<CardAcceptanceElement> cardAcceptance,
            Optional<CardFeeSection> cardFees,
            Optional<CardFlatSection> cardFlat,
            Optional<TemplateElement> cardFlatAmountxAuth,
            Optional<TemplateElement> cardFlatHighPayRange,
            Optional<TemplateElement> cardFlatLowPayRange,
            Optional<TemplateElement> cardFlatPercentxAuth,
            Optional<CardIcpSection> cardIcp,
            Optional<TemplateElement> cardIcpAmountxAuth,
            Optional<TemplateElement> cardIcpHighPayRange,
            Optional<TemplateElement> cardIcpLowPayRange,
            Optional<TemplateElement> cardIcpPercentxAuth,
            Optional<CardPassThroughSection> cardPassThrough,
            Optional<TemplateElement> cardPassThroughAmountRecurring,
            Optional<TemplateElement> cardPassThroughAmountxAuth,
            Optional<TemplateElement> cardPassThroughHighPayRange,
            Optional<TemplateElement> cardPassThroughLowPayRange,
            Optional<TemplateElement> cardPassThroughPercentRecurring,
            Optional<TemplateElement> cardPassThroughPercentxAuth,
            Optional<TemplateElement> discountFrequency,
            Optional<TemplateElement> fundingRollup,
            Optional<TemplateElement> gateway,
            Optional<TemplateElement> passThroughCost,
            Optional<TemplateElement> pdfTemplateId,
            Optional<Long> pricingPlan,
            Optional<TemplateElement> pricingType,
            Optional<TemplateElement> processor,
            Optional<TemplateElement> provider,
            Optional<TemplateElement> tierName,
            Optional<Boolean> visible,
            Map<String, Object> additionalProperties) {
        this.batchCutoffTime = batchCutoffTime;
        this.cardAcceptance = cardAcceptance;
        this.cardFees = cardFees;
        this.cardFlat = cardFlat;
        this.cardFlatAmountxAuth = cardFlatAmountxAuth;
        this.cardFlatHighPayRange = cardFlatHighPayRange;
        this.cardFlatLowPayRange = cardFlatLowPayRange;
        this.cardFlatPercentxAuth = cardFlatPercentxAuth;
        this.cardIcp = cardIcp;
        this.cardIcpAmountxAuth = cardIcpAmountxAuth;
        this.cardIcpHighPayRange = cardIcpHighPayRange;
        this.cardIcpLowPayRange = cardIcpLowPayRange;
        this.cardIcpPercentxAuth = cardIcpPercentxAuth;
        this.cardPassThrough = cardPassThrough;
        this.cardPassThroughAmountRecurring = cardPassThroughAmountRecurring;
        this.cardPassThroughAmountxAuth = cardPassThroughAmountxAuth;
        this.cardPassThroughHighPayRange = cardPassThroughHighPayRange;
        this.cardPassThroughLowPayRange = cardPassThroughLowPayRange;
        this.cardPassThroughPercentRecurring = cardPassThroughPercentRecurring;
        this.cardPassThroughPercentxAuth = cardPassThroughPercentxAuth;
        this.discountFrequency = discountFrequency;
        this.fundingRollup = fundingRollup;
        this.gateway = gateway;
        this.passThroughCost = passThroughCost;
        this.pdfTemplateId = pdfTemplateId;
        this.pricingPlan = pricingPlan;
        this.pricingType = pricingType;
        this.processor = processor;
        this.provider = provider;
        this.tierName = tierName;
        this.visible = visible;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Controls how to present the <code>batchCutoffTime</code> field on the application. If this field isn't sent, batch cut off time defaults to 5 ET.
     */
    @JsonProperty("batchCutoffTime")
    public Optional<TemplateElement> getBatchCutoffTime() {
        return batchCutoffTime;
    }

    @JsonProperty("cardAcceptance")
    public Optional<CardAcceptanceElement> getCardAcceptance() {
        return cardAcceptance;
    }

    @JsonProperty("cardFees")
    public Optional<CardFeeSection> getCardFees() {
        return cardFees;
    }

    @JsonProperty("cardFlat")
    public Optional<CardFlatSection> getCardFlat() {
        return cardFlat;
    }

    @JsonProperty("cardFlat_amountxAuth")
    public Optional<TemplateElement> getCardFlatAmountxAuth() {
        return cardFlatAmountxAuth;
    }

    @JsonProperty("cardFlat_highPayRange")
    public Optional<TemplateElement> getCardFlatHighPayRange() {
        return cardFlatHighPayRange;
    }

    @JsonProperty("cardFlat_lowPayRange")
    public Optional<TemplateElement> getCardFlatLowPayRange() {
        return cardFlatLowPayRange;
    }

    @JsonProperty("cardFlat_percentxAuth")
    public Optional<TemplateElement> getCardFlatPercentxAuth() {
        return cardFlatPercentxAuth;
    }

    @JsonProperty("cardICP")
    public Optional<CardIcpSection> getCardIcp() {
        return cardIcp;
    }

    @JsonProperty("cardICP_amountxAuth")
    public Optional<TemplateElement> getCardIcpAmountxAuth() {
        return cardIcpAmountxAuth;
    }

    @JsonProperty("cardICP_highPayRange")
    public Optional<TemplateElement> getCardIcpHighPayRange() {
        return cardIcpHighPayRange;
    }

    @JsonProperty("cardICP_lowPayRange")
    public Optional<TemplateElement> getCardIcpLowPayRange() {
        return cardIcpLowPayRange;
    }

    @JsonProperty("cardICP_percentxAuth")
    public Optional<TemplateElement> getCardIcpPercentxAuth() {
        return cardIcpPercentxAuth;
    }

    @JsonProperty("cardPassThrough")
    public Optional<CardPassThroughSection> getCardPassThrough() {
        return cardPassThrough;
    }

    @JsonProperty("cardPassThrough_amountRecurring")
    public Optional<TemplateElement> getCardPassThroughAmountRecurring() {
        return cardPassThroughAmountRecurring;
    }

    @JsonProperty("cardPassThrough_amountxAuth")
    public Optional<TemplateElement> getCardPassThroughAmountxAuth() {
        return cardPassThroughAmountxAuth;
    }

    @JsonProperty("cardPassThrough_highPayRange")
    public Optional<TemplateElement> getCardPassThroughHighPayRange() {
        return cardPassThroughHighPayRange;
    }

    @JsonProperty("cardPassThrough_lowPayRange")
    public Optional<TemplateElement> getCardPassThroughLowPayRange() {
        return cardPassThroughLowPayRange;
    }

    @JsonProperty("cardPassThrough_percentRecurring")
    public Optional<TemplateElement> getCardPassThroughPercentRecurring() {
        return cardPassThroughPercentRecurring;
    }

    @JsonProperty("cardPassThrough_percentxAuth")
    public Optional<TemplateElement> getCardPassThroughPercentxAuth() {
        return cardPassThroughPercentxAuth;
    }

    @JsonProperty("discountFrequency")
    public Optional<TemplateElement> getDiscountFrequency() {
        return discountFrequency;
    }

    @JsonProperty("fundingRollup")
    public Optional<TemplateElement> getFundingRollup() {
        return fundingRollup;
    }

    @JsonProperty("gateway")
    public Optional<TemplateElement> getGateway() {
        return gateway;
    }

    @JsonProperty("passThroughCost")
    public Optional<TemplateElement> getPassThroughCost() {
        return passThroughCost;
    }

    @JsonProperty("pdfTemplateId")
    public Optional<TemplateElement> getPdfTemplateId() {
        return pdfTemplateId;
    }

    @JsonProperty("pricingPlan")
    public Optional<Long> getPricingPlan() {
        return pricingPlan;
    }

    @JsonProperty("pricingType")
    public Optional<TemplateElement> getPricingType() {
        return pricingType;
    }

    @JsonProperty("processor")
    public Optional<TemplateElement> getProcessor() {
        return processor;
    }

    @JsonProperty("provider")
    public Optional<TemplateElement> getProvider() {
        return provider;
    }

    @JsonProperty("tierName")
    public Optional<TemplateElement> getTierName() {
        return tierName;
    }

    @JsonProperty("visible")
    public Optional<Boolean> getVisible() {
        return visible;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CardService && equalTo((CardService) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CardService other) {
        return batchCutoffTime.equals(other.batchCutoffTime)
                && cardAcceptance.equals(other.cardAcceptance)
                && cardFees.equals(other.cardFees)
                && cardFlat.equals(other.cardFlat)
                && cardFlatAmountxAuth.equals(other.cardFlatAmountxAuth)
                && cardFlatHighPayRange.equals(other.cardFlatHighPayRange)
                && cardFlatLowPayRange.equals(other.cardFlatLowPayRange)
                && cardFlatPercentxAuth.equals(other.cardFlatPercentxAuth)
                && cardIcp.equals(other.cardIcp)
                && cardIcpAmountxAuth.equals(other.cardIcpAmountxAuth)
                && cardIcpHighPayRange.equals(other.cardIcpHighPayRange)
                && cardIcpLowPayRange.equals(other.cardIcpLowPayRange)
                && cardIcpPercentxAuth.equals(other.cardIcpPercentxAuth)
                && cardPassThrough.equals(other.cardPassThrough)
                && cardPassThroughAmountRecurring.equals(other.cardPassThroughAmountRecurring)
                && cardPassThroughAmountxAuth.equals(other.cardPassThroughAmountxAuth)
                && cardPassThroughHighPayRange.equals(other.cardPassThroughHighPayRange)
                && cardPassThroughLowPayRange.equals(other.cardPassThroughLowPayRange)
                && cardPassThroughPercentRecurring.equals(other.cardPassThroughPercentRecurring)
                && cardPassThroughPercentxAuth.equals(other.cardPassThroughPercentxAuth)
                && discountFrequency.equals(other.discountFrequency)
                && fundingRollup.equals(other.fundingRollup)
                && gateway.equals(other.gateway)
                && passThroughCost.equals(other.passThroughCost)
                && pdfTemplateId.equals(other.pdfTemplateId)
                && pricingPlan.equals(other.pricingPlan)
                && pricingType.equals(other.pricingType)
                && processor.equals(other.processor)
                && provider.equals(other.provider)
                && tierName.equals(other.tierName)
                && visible.equals(other.visible);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.batchCutoffTime,
                this.cardAcceptance,
                this.cardFees,
                this.cardFlat,
                this.cardFlatAmountxAuth,
                this.cardFlatHighPayRange,
                this.cardFlatLowPayRange,
                this.cardFlatPercentxAuth,
                this.cardIcp,
                this.cardIcpAmountxAuth,
                this.cardIcpHighPayRange,
                this.cardIcpLowPayRange,
                this.cardIcpPercentxAuth,
                this.cardPassThrough,
                this.cardPassThroughAmountRecurring,
                this.cardPassThroughAmountxAuth,
                this.cardPassThroughHighPayRange,
                this.cardPassThroughLowPayRange,
                this.cardPassThroughPercentRecurring,
                this.cardPassThroughPercentxAuth,
                this.discountFrequency,
                this.fundingRollup,
                this.gateway,
                this.passThroughCost,
                this.pdfTemplateId,
                this.pricingPlan,
                this.pricingType,
                this.processor,
                this.provider,
                this.tierName,
                this.visible);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TemplateElement> batchCutoffTime = Optional.empty();

        private Optional<CardAcceptanceElement> cardAcceptance = Optional.empty();

        private Optional<CardFeeSection> cardFees = Optional.empty();

        private Optional<CardFlatSection> cardFlat = Optional.empty();

        private Optional<TemplateElement> cardFlatAmountxAuth = Optional.empty();

        private Optional<TemplateElement> cardFlatHighPayRange = Optional.empty();

        private Optional<TemplateElement> cardFlatLowPayRange = Optional.empty();

        private Optional<TemplateElement> cardFlatPercentxAuth = Optional.empty();

        private Optional<CardIcpSection> cardIcp = Optional.empty();

        private Optional<TemplateElement> cardIcpAmountxAuth = Optional.empty();

        private Optional<TemplateElement> cardIcpHighPayRange = Optional.empty();

        private Optional<TemplateElement> cardIcpLowPayRange = Optional.empty();

        private Optional<TemplateElement> cardIcpPercentxAuth = Optional.empty();

        private Optional<CardPassThroughSection> cardPassThrough = Optional.empty();

        private Optional<TemplateElement> cardPassThroughAmountRecurring = Optional.empty();

        private Optional<TemplateElement> cardPassThroughAmountxAuth = Optional.empty();

        private Optional<TemplateElement> cardPassThroughHighPayRange = Optional.empty();

        private Optional<TemplateElement> cardPassThroughLowPayRange = Optional.empty();

        private Optional<TemplateElement> cardPassThroughPercentRecurring = Optional.empty();

        private Optional<TemplateElement> cardPassThroughPercentxAuth = Optional.empty();

        private Optional<TemplateElement> discountFrequency = Optional.empty();

        private Optional<TemplateElement> fundingRollup = Optional.empty();

        private Optional<TemplateElement> gateway = Optional.empty();

        private Optional<TemplateElement> passThroughCost = Optional.empty();

        private Optional<TemplateElement> pdfTemplateId = Optional.empty();

        private Optional<Long> pricingPlan = Optional.empty();

        private Optional<TemplateElement> pricingType = Optional.empty();

        private Optional<TemplateElement> processor = Optional.empty();

        private Optional<TemplateElement> provider = Optional.empty();

        private Optional<TemplateElement> tierName = Optional.empty();

        private Optional<Boolean> visible = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CardService other) {
            batchCutoffTime(other.getBatchCutoffTime());
            cardAcceptance(other.getCardAcceptance());
            cardFees(other.getCardFees());
            cardFlat(other.getCardFlat());
            cardFlatAmountxAuth(other.getCardFlatAmountxAuth());
            cardFlatHighPayRange(other.getCardFlatHighPayRange());
            cardFlatLowPayRange(other.getCardFlatLowPayRange());
            cardFlatPercentxAuth(other.getCardFlatPercentxAuth());
            cardIcp(other.getCardIcp());
            cardIcpAmountxAuth(other.getCardIcpAmountxAuth());
            cardIcpHighPayRange(other.getCardIcpHighPayRange());
            cardIcpLowPayRange(other.getCardIcpLowPayRange());
            cardIcpPercentxAuth(other.getCardIcpPercentxAuth());
            cardPassThrough(other.getCardPassThrough());
            cardPassThroughAmountRecurring(other.getCardPassThroughAmountRecurring());
            cardPassThroughAmountxAuth(other.getCardPassThroughAmountxAuth());
            cardPassThroughHighPayRange(other.getCardPassThroughHighPayRange());
            cardPassThroughLowPayRange(other.getCardPassThroughLowPayRange());
            cardPassThroughPercentRecurring(other.getCardPassThroughPercentRecurring());
            cardPassThroughPercentxAuth(other.getCardPassThroughPercentxAuth());
            discountFrequency(other.getDiscountFrequency());
            fundingRollup(other.getFundingRollup());
            gateway(other.getGateway());
            passThroughCost(other.getPassThroughCost());
            pdfTemplateId(other.getPdfTemplateId());
            pricingPlan(other.getPricingPlan());
            pricingType(other.getPricingType());
            processor(other.getProcessor());
            provider(other.getProvider());
            tierName(other.getTierName());
            visible(other.getVisible());
            return this;
        }

        /**
         * <p>Controls how to present the <code>batchCutoffTime</code> field on the application. If this field isn't sent, batch cut off time defaults to 5 ET.</p>
         */
        @JsonSetter(value = "batchCutoffTime", nulls = Nulls.SKIP)
        public Builder batchCutoffTime(Optional<TemplateElement> batchCutoffTime) {
            this.batchCutoffTime = batchCutoffTime;
            return this;
        }

        public Builder batchCutoffTime(TemplateElement batchCutoffTime) {
            this.batchCutoffTime = Optional.ofNullable(batchCutoffTime);
            return this;
        }

        @JsonSetter(value = "cardAcceptance", nulls = Nulls.SKIP)
        public Builder cardAcceptance(Optional<CardAcceptanceElement> cardAcceptance) {
            this.cardAcceptance = cardAcceptance;
            return this;
        }

        public Builder cardAcceptance(CardAcceptanceElement cardAcceptance) {
            this.cardAcceptance = Optional.ofNullable(cardAcceptance);
            return this;
        }

        @JsonSetter(value = "cardFees", nulls = Nulls.SKIP)
        public Builder cardFees(Optional<CardFeeSection> cardFees) {
            this.cardFees = cardFees;
            return this;
        }

        public Builder cardFees(CardFeeSection cardFees) {
            this.cardFees = Optional.ofNullable(cardFees);
            return this;
        }

        @JsonSetter(value = "cardFlat", nulls = Nulls.SKIP)
        public Builder cardFlat(Optional<CardFlatSection> cardFlat) {
            this.cardFlat = cardFlat;
            return this;
        }

        public Builder cardFlat(CardFlatSection cardFlat) {
            this.cardFlat = Optional.ofNullable(cardFlat);
            return this;
        }

        @JsonSetter(value = "cardFlat_amountxAuth", nulls = Nulls.SKIP)
        public Builder cardFlatAmountxAuth(Optional<TemplateElement> cardFlatAmountxAuth) {
            this.cardFlatAmountxAuth = cardFlatAmountxAuth;
            return this;
        }

        public Builder cardFlatAmountxAuth(TemplateElement cardFlatAmountxAuth) {
            this.cardFlatAmountxAuth = Optional.ofNullable(cardFlatAmountxAuth);
            return this;
        }

        @JsonSetter(value = "cardFlat_highPayRange", nulls = Nulls.SKIP)
        public Builder cardFlatHighPayRange(Optional<TemplateElement> cardFlatHighPayRange) {
            this.cardFlatHighPayRange = cardFlatHighPayRange;
            return this;
        }

        public Builder cardFlatHighPayRange(TemplateElement cardFlatHighPayRange) {
            this.cardFlatHighPayRange = Optional.ofNullable(cardFlatHighPayRange);
            return this;
        }

        @JsonSetter(value = "cardFlat_lowPayRange", nulls = Nulls.SKIP)
        public Builder cardFlatLowPayRange(Optional<TemplateElement> cardFlatLowPayRange) {
            this.cardFlatLowPayRange = cardFlatLowPayRange;
            return this;
        }

        public Builder cardFlatLowPayRange(TemplateElement cardFlatLowPayRange) {
            this.cardFlatLowPayRange = Optional.ofNullable(cardFlatLowPayRange);
            return this;
        }

        @JsonSetter(value = "cardFlat_percentxAuth", nulls = Nulls.SKIP)
        public Builder cardFlatPercentxAuth(Optional<TemplateElement> cardFlatPercentxAuth) {
            this.cardFlatPercentxAuth = cardFlatPercentxAuth;
            return this;
        }

        public Builder cardFlatPercentxAuth(TemplateElement cardFlatPercentxAuth) {
            this.cardFlatPercentxAuth = Optional.ofNullable(cardFlatPercentxAuth);
            return this;
        }

        @JsonSetter(value = "cardICP", nulls = Nulls.SKIP)
        public Builder cardIcp(Optional<CardIcpSection> cardIcp) {
            this.cardIcp = cardIcp;
            return this;
        }

        public Builder cardIcp(CardIcpSection cardIcp) {
            this.cardIcp = Optional.ofNullable(cardIcp);
            return this;
        }

        @JsonSetter(value = "cardICP_amountxAuth", nulls = Nulls.SKIP)
        public Builder cardIcpAmountxAuth(Optional<TemplateElement> cardIcpAmountxAuth) {
            this.cardIcpAmountxAuth = cardIcpAmountxAuth;
            return this;
        }

        public Builder cardIcpAmountxAuth(TemplateElement cardIcpAmountxAuth) {
            this.cardIcpAmountxAuth = Optional.ofNullable(cardIcpAmountxAuth);
            return this;
        }

        @JsonSetter(value = "cardICP_highPayRange", nulls = Nulls.SKIP)
        public Builder cardIcpHighPayRange(Optional<TemplateElement> cardIcpHighPayRange) {
            this.cardIcpHighPayRange = cardIcpHighPayRange;
            return this;
        }

        public Builder cardIcpHighPayRange(TemplateElement cardIcpHighPayRange) {
            this.cardIcpHighPayRange = Optional.ofNullable(cardIcpHighPayRange);
            return this;
        }

        @JsonSetter(value = "cardICP_lowPayRange", nulls = Nulls.SKIP)
        public Builder cardIcpLowPayRange(Optional<TemplateElement> cardIcpLowPayRange) {
            this.cardIcpLowPayRange = cardIcpLowPayRange;
            return this;
        }

        public Builder cardIcpLowPayRange(TemplateElement cardIcpLowPayRange) {
            this.cardIcpLowPayRange = Optional.ofNullable(cardIcpLowPayRange);
            return this;
        }

        @JsonSetter(value = "cardICP_percentxAuth", nulls = Nulls.SKIP)
        public Builder cardIcpPercentxAuth(Optional<TemplateElement> cardIcpPercentxAuth) {
            this.cardIcpPercentxAuth = cardIcpPercentxAuth;
            return this;
        }

        public Builder cardIcpPercentxAuth(TemplateElement cardIcpPercentxAuth) {
            this.cardIcpPercentxAuth = Optional.ofNullable(cardIcpPercentxAuth);
            return this;
        }

        @JsonSetter(value = "cardPassThrough", nulls = Nulls.SKIP)
        public Builder cardPassThrough(Optional<CardPassThroughSection> cardPassThrough) {
            this.cardPassThrough = cardPassThrough;
            return this;
        }

        public Builder cardPassThrough(CardPassThroughSection cardPassThrough) {
            this.cardPassThrough = Optional.ofNullable(cardPassThrough);
            return this;
        }

        @JsonSetter(value = "cardPassThrough_amountRecurring", nulls = Nulls.SKIP)
        public Builder cardPassThroughAmountRecurring(Optional<TemplateElement> cardPassThroughAmountRecurring) {
            this.cardPassThroughAmountRecurring = cardPassThroughAmountRecurring;
            return this;
        }

        public Builder cardPassThroughAmountRecurring(TemplateElement cardPassThroughAmountRecurring) {
            this.cardPassThroughAmountRecurring = Optional.ofNullable(cardPassThroughAmountRecurring);
            return this;
        }

        @JsonSetter(value = "cardPassThrough_amountxAuth", nulls = Nulls.SKIP)
        public Builder cardPassThroughAmountxAuth(Optional<TemplateElement> cardPassThroughAmountxAuth) {
            this.cardPassThroughAmountxAuth = cardPassThroughAmountxAuth;
            return this;
        }

        public Builder cardPassThroughAmountxAuth(TemplateElement cardPassThroughAmountxAuth) {
            this.cardPassThroughAmountxAuth = Optional.ofNullable(cardPassThroughAmountxAuth);
            return this;
        }

        @JsonSetter(value = "cardPassThrough_highPayRange", nulls = Nulls.SKIP)
        public Builder cardPassThroughHighPayRange(Optional<TemplateElement> cardPassThroughHighPayRange) {
            this.cardPassThroughHighPayRange = cardPassThroughHighPayRange;
            return this;
        }

        public Builder cardPassThroughHighPayRange(TemplateElement cardPassThroughHighPayRange) {
            this.cardPassThroughHighPayRange = Optional.ofNullable(cardPassThroughHighPayRange);
            return this;
        }

        @JsonSetter(value = "cardPassThrough_lowPayRange", nulls = Nulls.SKIP)
        public Builder cardPassThroughLowPayRange(Optional<TemplateElement> cardPassThroughLowPayRange) {
            this.cardPassThroughLowPayRange = cardPassThroughLowPayRange;
            return this;
        }

        public Builder cardPassThroughLowPayRange(TemplateElement cardPassThroughLowPayRange) {
            this.cardPassThroughLowPayRange = Optional.ofNullable(cardPassThroughLowPayRange);
            return this;
        }

        @JsonSetter(value = "cardPassThrough_percentRecurring", nulls = Nulls.SKIP)
        public Builder cardPassThroughPercentRecurring(Optional<TemplateElement> cardPassThroughPercentRecurring) {
            this.cardPassThroughPercentRecurring = cardPassThroughPercentRecurring;
            return this;
        }

        public Builder cardPassThroughPercentRecurring(TemplateElement cardPassThroughPercentRecurring) {
            this.cardPassThroughPercentRecurring = Optional.ofNullable(cardPassThroughPercentRecurring);
            return this;
        }

        @JsonSetter(value = "cardPassThrough_percentxAuth", nulls = Nulls.SKIP)
        public Builder cardPassThroughPercentxAuth(Optional<TemplateElement> cardPassThroughPercentxAuth) {
            this.cardPassThroughPercentxAuth = cardPassThroughPercentxAuth;
            return this;
        }

        public Builder cardPassThroughPercentxAuth(TemplateElement cardPassThroughPercentxAuth) {
            this.cardPassThroughPercentxAuth = Optional.ofNullable(cardPassThroughPercentxAuth);
            return this;
        }

        @JsonSetter(value = "discountFrequency", nulls = Nulls.SKIP)
        public Builder discountFrequency(Optional<TemplateElement> discountFrequency) {
            this.discountFrequency = discountFrequency;
            return this;
        }

        public Builder discountFrequency(TemplateElement discountFrequency) {
            this.discountFrequency = Optional.ofNullable(discountFrequency);
            return this;
        }

        @JsonSetter(value = "fundingRollup", nulls = Nulls.SKIP)
        public Builder fundingRollup(Optional<TemplateElement> fundingRollup) {
            this.fundingRollup = fundingRollup;
            return this;
        }

        public Builder fundingRollup(TemplateElement fundingRollup) {
            this.fundingRollup = Optional.ofNullable(fundingRollup);
            return this;
        }

        @JsonSetter(value = "gateway", nulls = Nulls.SKIP)
        public Builder gateway(Optional<TemplateElement> gateway) {
            this.gateway = gateway;
            return this;
        }

        public Builder gateway(TemplateElement gateway) {
            this.gateway = Optional.ofNullable(gateway);
            return this;
        }

        @JsonSetter(value = "passThroughCost", nulls = Nulls.SKIP)
        public Builder passThroughCost(Optional<TemplateElement> passThroughCost) {
            this.passThroughCost = passThroughCost;
            return this;
        }

        public Builder passThroughCost(TemplateElement passThroughCost) {
            this.passThroughCost = Optional.ofNullable(passThroughCost);
            return this;
        }

        @JsonSetter(value = "pdfTemplateId", nulls = Nulls.SKIP)
        public Builder pdfTemplateId(Optional<TemplateElement> pdfTemplateId) {
            this.pdfTemplateId = pdfTemplateId;
            return this;
        }

        public Builder pdfTemplateId(TemplateElement pdfTemplateId) {
            this.pdfTemplateId = Optional.ofNullable(pdfTemplateId);
            return this;
        }

        @JsonSetter(value = "pricingPlan", nulls = Nulls.SKIP)
        public Builder pricingPlan(Optional<Long> pricingPlan) {
            this.pricingPlan = pricingPlan;
            return this;
        }

        public Builder pricingPlan(Long pricingPlan) {
            this.pricingPlan = Optional.ofNullable(pricingPlan);
            return this;
        }

        @JsonSetter(value = "pricingType", nulls = Nulls.SKIP)
        public Builder pricingType(Optional<TemplateElement> pricingType) {
            this.pricingType = pricingType;
            return this;
        }

        public Builder pricingType(TemplateElement pricingType) {
            this.pricingType = Optional.ofNullable(pricingType);
            return this;
        }

        @JsonSetter(value = "processor", nulls = Nulls.SKIP)
        public Builder processor(Optional<TemplateElement> processor) {
            this.processor = processor;
            return this;
        }

        public Builder processor(TemplateElement processor) {
            this.processor = Optional.ofNullable(processor);
            return this;
        }

        @JsonSetter(value = "provider", nulls = Nulls.SKIP)
        public Builder provider(Optional<TemplateElement> provider) {
            this.provider = provider;
            return this;
        }

        public Builder provider(TemplateElement provider) {
            this.provider = Optional.ofNullable(provider);
            return this;
        }

        @JsonSetter(value = "tierName", nulls = Nulls.SKIP)
        public Builder tierName(Optional<TemplateElement> tierName) {
            this.tierName = tierName;
            return this;
        }

        public Builder tierName(TemplateElement tierName) {
            this.tierName = Optional.ofNullable(tierName);
            return this;
        }

        @JsonSetter(value = "visible", nulls = Nulls.SKIP)
        public Builder visible(Optional<Boolean> visible) {
            this.visible = visible;
            return this;
        }

        public Builder visible(Boolean visible) {
            this.visible = Optional.ofNullable(visible);
            return this;
        }

        public CardService build() {
            return new CardService(
                    batchCutoffTime,
                    cardAcceptance,
                    cardFees,
                    cardFlat,
                    cardFlatAmountxAuth,
                    cardFlatHighPayRange,
                    cardFlatLowPayRange,
                    cardFlatPercentxAuth,
                    cardIcp,
                    cardIcpAmountxAuth,
                    cardIcpHighPayRange,
                    cardIcpLowPayRange,
                    cardIcpPercentxAuth,
                    cardPassThrough,
                    cardPassThroughAmountRecurring,
                    cardPassThroughAmountxAuth,
                    cardPassThroughHighPayRange,
                    cardPassThroughLowPayRange,
                    cardPassThroughPercentRecurring,
                    cardPassThroughPercentxAuth,
                    discountFrequency,
                    fundingRollup,
                    gateway,
                    passThroughCost,
                    pdfTemplateId,
                    pricingPlan,
                    pricingType,
                    processor,
                    provider,
                    tierName,
                    visible,
                    additionalProperties);
        }
    }
}
