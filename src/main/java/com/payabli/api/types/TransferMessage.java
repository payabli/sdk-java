/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransferMessage.Builder.class)
public final class TransferMessage {
    private final Optional<Integer> id;

    private final Optional<Integer> roomId;

    private final Optional<Integer> userId;

    private final Optional<String> userName;

    private final Optional<String> content;

    private final Optional<String> createdAt;

    private final Optional<Integer> messageType;

    private final Optional<TransferMessageProperties> messageProperties;

    private final Map<String, Object> additionalProperties;

    private TransferMessage(
            Optional<Integer> id,
            Optional<Integer> roomId,
            Optional<Integer> userId,
            Optional<String> userName,
            Optional<String> content,
            Optional<String> createdAt,
            Optional<Integer> messageType,
            Optional<TransferMessageProperties> messageProperties,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.roomId = roomId;
        this.userId = userId;
        this.userName = userName;
        this.content = content;
        this.createdAt = createdAt;
        this.messageType = messageType;
        this.messageProperties = messageProperties;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("Id")
    public Optional<Integer> getId() {
        return id;
    }

    @JsonProperty("RoomId")
    public Optional<Integer> getRoomId() {
        return roomId;
    }

    @JsonProperty("UserId")
    public Optional<Integer> getUserId() {
        return userId;
    }

    @JsonProperty("UserName")
    public Optional<String> getUserName() {
        return userName;
    }

    @JsonProperty("Content")
    public Optional<String> getContent() {
        return content;
    }

    @JsonProperty("CreatedAt")
    public Optional<String> getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("MessageType")
    public Optional<Integer> getMessageType() {
        return messageType;
    }

    @JsonProperty("MessageProperties")
    public Optional<TransferMessageProperties> getMessageProperties() {
        return messageProperties;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransferMessage && equalTo((TransferMessage) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransferMessage other) {
        return id.equals(other.id)
                && roomId.equals(other.roomId)
                && userId.equals(other.userId)
                && userName.equals(other.userName)
                && content.equals(other.content)
                && createdAt.equals(other.createdAt)
                && messageType.equals(other.messageType)
                && messageProperties.equals(other.messageProperties);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.roomId,
                this.userId,
                this.userName,
                this.content,
                this.createdAt,
                this.messageType,
                this.messageProperties);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> id = Optional.empty();

        private Optional<Integer> roomId = Optional.empty();

        private Optional<Integer> userId = Optional.empty();

        private Optional<String> userName = Optional.empty();

        private Optional<String> content = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<Integer> messageType = Optional.empty();

        private Optional<TransferMessageProperties> messageProperties = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TransferMessage other) {
            id(other.getId());
            roomId(other.getRoomId());
            userId(other.getUserId());
            userName(other.getUserName());
            content(other.getContent());
            createdAt(other.getCreatedAt());
            messageType(other.getMessageType());
            messageProperties(other.getMessageProperties());
            return this;
        }

        @JsonSetter(value = "Id", nulls = Nulls.SKIP)
        public Builder id(Optional<Integer> id) {
            this.id = id;
            return this;
        }

        public Builder id(Integer id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "RoomId", nulls = Nulls.SKIP)
        public Builder roomId(Optional<Integer> roomId) {
            this.roomId = roomId;
            return this;
        }

        public Builder roomId(Integer roomId) {
            this.roomId = Optional.ofNullable(roomId);
            return this;
        }

        @JsonSetter(value = "UserId", nulls = Nulls.SKIP)
        public Builder userId(Optional<Integer> userId) {
            this.userId = userId;
            return this;
        }

        public Builder userId(Integer userId) {
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        @JsonSetter(value = "UserName", nulls = Nulls.SKIP)
        public Builder userName(Optional<String> userName) {
            this.userName = userName;
            return this;
        }

        public Builder userName(String userName) {
            this.userName = Optional.ofNullable(userName);
            return this;
        }

        @JsonSetter(value = "Content", nulls = Nulls.SKIP)
        public Builder content(Optional<String> content) {
            this.content = content;
            return this;
        }

        public Builder content(String content) {
            this.content = Optional.ofNullable(content);
            return this;
        }

        @JsonSetter(value = "CreatedAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<String> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "MessageType", nulls = Nulls.SKIP)
        public Builder messageType(Optional<Integer> messageType) {
            this.messageType = messageType;
            return this;
        }

        public Builder messageType(Integer messageType) {
            this.messageType = Optional.ofNullable(messageType);
            return this;
        }

        @JsonSetter(value = "MessageProperties", nulls = Nulls.SKIP)
        public Builder messageProperties(Optional<TransferMessageProperties> messageProperties) {
            this.messageProperties = messageProperties;
            return this;
        }

        public Builder messageProperties(TransferMessageProperties messageProperties) {
            this.messageProperties = Optional.ofNullable(messageProperties);
            return this;
        }

        public TransferMessage build() {
            return new TransferMessage(
                    id,
                    roomId,
                    userId,
                    userName,
                    content,
                    createdAt,
                    messageType,
                    messageProperties,
                    additionalProperties);
        }
    }
}
