/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ChargebackQueryRecords.Builder.class)
public final class ChargebackQueryRecords {
    private final Optional<String> accountType;

    private final Optional<String> caseNumber;

    private final Optional<OffsetDateTime> chargebackDate;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<QueryTransactionPayorData> customer;

    private final Optional<Long> id;

    private final String lastFour;

    private final String method;

    private final Optional<Double> netAmount;

    private final Optional<String> orderId;

    private final Optional<String> parentOrgName;

    private final Optional<QueryPaymentData> paymentData;

    private final Optional<String> paymentId;

    private final Optional<String> paypointDbaname;

    private final Optional<String> paypointEntryname;

    private final Optional<String> paypointLegalname;

    private final Optional<String> reason;

    private final Optional<String> reasonCode;

    private final Optional<String> referenceNumber;

    private final Optional<List<ChargeBackResponse>> responses;

    private final Optional<Integer> status;

    private final Optional<TransactionQueryRecords> transaction;

    private final Optional<OffsetDateTime> transactionTime;

    private final Map<String, Object> additionalProperties;

    private ChargebackQueryRecords(
            Optional<String> accountType,
            Optional<String> caseNumber,
            Optional<OffsetDateTime> chargebackDate,
            Optional<OffsetDateTime> createdAt,
            Optional<QueryTransactionPayorData> customer,
            Optional<Long> id,
            String lastFour,
            String method,
            Optional<Double> netAmount,
            Optional<String> orderId,
            Optional<String> parentOrgName,
            Optional<QueryPaymentData> paymentData,
            Optional<String> paymentId,
            Optional<String> paypointDbaname,
            Optional<String> paypointEntryname,
            Optional<String> paypointLegalname,
            Optional<String> reason,
            Optional<String> reasonCode,
            Optional<String> referenceNumber,
            Optional<List<ChargeBackResponse>> responses,
            Optional<Integer> status,
            Optional<TransactionQueryRecords> transaction,
            Optional<OffsetDateTime> transactionTime,
            Map<String, Object> additionalProperties) {
        this.accountType = accountType;
        this.caseNumber = caseNumber;
        this.chargebackDate = chargebackDate;
        this.createdAt = createdAt;
        this.customer = customer;
        this.id = id;
        this.lastFour = lastFour;
        this.method = method;
        this.netAmount = netAmount;
        this.orderId = orderId;
        this.parentOrgName = parentOrgName;
        this.paymentData = paymentData;
        this.paymentId = paymentId;
        this.paypointDbaname = paypointDbaname;
        this.paypointEntryname = paypointEntryname;
        this.paypointLegalname = paypointLegalname;
        this.reason = reason;
        this.reasonCode = reasonCode;
        this.referenceNumber = referenceNumber;
        this.responses = responses;
        this.status = status;
        this.transaction = transaction;
        this.transactionTime = transactionTime;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("accountType")
    public Optional<String> getAccountType() {
        return accountType;
    }

    /**
     * @return Number of case assigned to the chargeback.
     */
    @JsonProperty("caseNumber")
    public Optional<String> getCaseNumber() {
        return caseNumber;
    }

    /**
     * @return Date of chargeback in format YYYY-MM-DD or MM/DD/YYYY.
     */
    @JsonProperty("chargebackDate")
    public Optional<OffsetDateTime> getChargebackDate() {
        return chargebackDate;
    }

    /**
     * @return Timestamp when the register was created, in UTC.
     */
    @JsonProperty("createdAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("customer")
    public Optional<QueryTransactionPayorData> getCustomer() {
        return customer;
    }

    /**
     * @return Identifier of chargeback or return.
     */
    @JsonProperty("id")
    public Optional<Long> getId() {
        return id;
    }

    /**
     * @return Last 4 digits of card or bank account involved in chargeback or return.
     */
    @JsonProperty("lastFour")
    public String getLastFour() {
        return lastFour;
    }

    /**
     * @return Type of payment vehicle: <strong>ach</strong> or <strong>card</strong>.
     */
    @JsonProperty("method")
    public String getMethod() {
        return method;
    }

    /**
     * @return Net amount in chargeback or ACH return.
     */
    @JsonProperty("netAmount")
    public Optional<Double> getNetAmount() {
        return netAmount;
    }

    @JsonProperty("orderId")
    public Optional<String> getOrderId() {
        return orderId;
    }

    @JsonProperty("parentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    @JsonProperty("paymentData")
    public Optional<QueryPaymentData> getPaymentData() {
        return paymentData;
    }

    /**
     * @return ReferenceId of the transaction in Payabli.
     */
    @JsonProperty("PaymentId")
    public Optional<String> getPaymentId() {
        return paymentId;
    }

    /**
     * @return The paypoint's DBA name.
     */
    @JsonProperty("paypointDbaname")
    public Optional<String> getPaypointDbaname() {
        return paypointDbaname;
    }

    /**
     * @return The paypoint's entryname.
     */
    @JsonProperty("paypointEntryname")
    public Optional<String> getPaypointEntryname() {
        return paypointEntryname;
    }

    /**
     * @return The paypoint's legal name.
     */
    @JsonProperty("paypointLegalname")
    public Optional<String> getPaypointLegalname() {
        return paypointLegalname;
    }

    /**
     * @return Text describing the chargeback or ACH return reason.
     */
    @JsonProperty("reason")
    public Optional<String> getReason() {
        return reason;
    }

    /**
     * @return R code for returned ACH or custom code identifying the reason.
     */
    @JsonProperty("reasonCode")
    public Optional<String> getReasonCode() {
        return reasonCode;
    }

    /**
     * @return Processor reference number to the chargeback.
     */
    @JsonProperty("referenceNumber")
    public Optional<String> getReferenceNumber() {
        return referenceNumber;
    }

    /**
     * @return Chargeback response records.
     */
    @JsonProperty("responses")
    public Optional<List<ChargeBackResponse>> getResponses() {
        return responses;
    }

    /**
     * @return Status for chargeback or ACH return
     * <ul>
     * <li>0: Open (chargebacks only)</li>
     * <li>1: Pending (chargebacks only)</li>
     * <li>2: Closed-Won (chargebacks only)</li>
     * <li>3: Closed-Lost (chargebacks only)</li>
     * <li>4: ACH Return (ACH only)</li>
     * <li>5: ACH Dispute, Not Authorized (ACH only)</li>
     * </ul>
     */
    @JsonProperty("status")
    public Optional<Integer> getStatus() {
        return status;
    }

    @JsonProperty("transaction")
    public Optional<TransactionQueryRecords> getTransaction() {
        return transaction;
    }

    @JsonProperty("transactionTime")
    public Optional<OffsetDateTime> getTransactionTime() {
        return transactionTime;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ChargebackQueryRecords && equalTo((ChargebackQueryRecords) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ChargebackQueryRecords other) {
        return accountType.equals(other.accountType)
                && caseNumber.equals(other.caseNumber)
                && chargebackDate.equals(other.chargebackDate)
                && createdAt.equals(other.createdAt)
                && customer.equals(other.customer)
                && id.equals(other.id)
                && lastFour.equals(other.lastFour)
                && method.equals(other.method)
                && netAmount.equals(other.netAmount)
                && orderId.equals(other.orderId)
                && parentOrgName.equals(other.parentOrgName)
                && paymentData.equals(other.paymentData)
                && paymentId.equals(other.paymentId)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointEntryname.equals(other.paypointEntryname)
                && paypointLegalname.equals(other.paypointLegalname)
                && reason.equals(other.reason)
                && reasonCode.equals(other.reasonCode)
                && referenceNumber.equals(other.referenceNumber)
                && responses.equals(other.responses)
                && status.equals(other.status)
                && transaction.equals(other.transaction)
                && transactionTime.equals(other.transactionTime);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accountType,
                this.caseNumber,
                this.chargebackDate,
                this.createdAt,
                this.customer,
                this.id,
                this.lastFour,
                this.method,
                this.netAmount,
                this.orderId,
                this.parentOrgName,
                this.paymentData,
                this.paymentId,
                this.paypointDbaname,
                this.paypointEntryname,
                this.paypointLegalname,
                this.reason,
                this.reasonCode,
                this.referenceNumber,
                this.responses,
                this.status,
                this.transaction,
                this.transactionTime);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static LastFourStage builder() {
        return new Builder();
    }

    public interface LastFourStage {
        /**
         * <p>Last 4 digits of card or bank account involved in chargeback or return.</p>
         */
        MethodStage lastFour(@NotNull String lastFour);

        Builder from(ChargebackQueryRecords other);
    }

    public interface MethodStage {
        /**
         * <p>Type of payment vehicle: <strong>ach</strong> or <strong>card</strong>.</p>
         */
        _FinalStage method(@NotNull String method);
    }

    public interface _FinalStage {
        ChargebackQueryRecords build();

        _FinalStage accountType(Optional<String> accountType);

        _FinalStage accountType(String accountType);

        /**
         * <p>Number of case assigned to the chargeback.</p>
         */
        _FinalStage caseNumber(Optional<String> caseNumber);

        _FinalStage caseNumber(String caseNumber);

        /**
         * <p>Date of chargeback in format YYYY-MM-DD or MM/DD/YYYY.</p>
         */
        _FinalStage chargebackDate(Optional<OffsetDateTime> chargebackDate);

        _FinalStage chargebackDate(OffsetDateTime chargebackDate);

        /**
         * <p>Timestamp when the register was created, in UTC.</p>
         */
        _FinalStage createdAt(Optional<OffsetDateTime> createdAt);

        _FinalStage createdAt(OffsetDateTime createdAt);

        _FinalStage customer(Optional<QueryTransactionPayorData> customer);

        _FinalStage customer(QueryTransactionPayorData customer);

        /**
         * <p>Identifier of chargeback or return.</p>
         */
        _FinalStage id(Optional<Long> id);

        _FinalStage id(Long id);

        /**
         * <p>Net amount in chargeback or ACH return.</p>
         */
        _FinalStage netAmount(Optional<Double> netAmount);

        _FinalStage netAmount(Double netAmount);

        _FinalStage orderId(Optional<String> orderId);

        _FinalStage orderId(String orderId);

        _FinalStage parentOrgName(Optional<String> parentOrgName);

        _FinalStage parentOrgName(String parentOrgName);

        _FinalStage paymentData(Optional<QueryPaymentData> paymentData);

        _FinalStage paymentData(QueryPaymentData paymentData);

        /**
         * <p>ReferenceId of the transaction in Payabli.</p>
         */
        _FinalStage paymentId(Optional<String> paymentId);

        _FinalStage paymentId(String paymentId);

        /**
         * <p>The paypoint's DBA name.</p>
         */
        _FinalStage paypointDbaname(Optional<String> paypointDbaname);

        _FinalStage paypointDbaname(String paypointDbaname);

        /**
         * <p>The paypoint's entryname.</p>
         */
        _FinalStage paypointEntryname(Optional<String> paypointEntryname);

        _FinalStage paypointEntryname(String paypointEntryname);

        /**
         * <p>The paypoint's legal name.</p>
         */
        _FinalStage paypointLegalname(Optional<String> paypointLegalname);

        _FinalStage paypointLegalname(String paypointLegalname);

        /**
         * <p>Text describing the chargeback or ACH return reason.</p>
         */
        _FinalStage reason(Optional<String> reason);

        _FinalStage reason(String reason);

        /**
         * <p>R code for returned ACH or custom code identifying the reason.</p>
         */
        _FinalStage reasonCode(Optional<String> reasonCode);

        _FinalStage reasonCode(String reasonCode);

        /**
         * <p>Processor reference number to the chargeback.</p>
         */
        _FinalStage referenceNumber(Optional<String> referenceNumber);

        _FinalStage referenceNumber(String referenceNumber);

        /**
         * <p>Chargeback response records.</p>
         */
        _FinalStage responses(Optional<List<ChargeBackResponse>> responses);

        _FinalStage responses(List<ChargeBackResponse> responses);

        /**
         * <p>Status for chargeback or ACH return</p>
         * <ul>
         * <li>0: Open (chargebacks only)</li>
         * <li>1: Pending (chargebacks only)</li>
         * <li>2: Closed-Won (chargebacks only)</li>
         * <li>3: Closed-Lost (chargebacks only)</li>
         * <li>4: ACH Return (ACH only)</li>
         * <li>5: ACH Dispute, Not Authorized (ACH only)</li>
         * </ul>
         */
        _FinalStage status(Optional<Integer> status);

        _FinalStage status(Integer status);

        _FinalStage transaction(Optional<TransactionQueryRecords> transaction);

        _FinalStage transaction(TransactionQueryRecords transaction);

        _FinalStage transactionTime(Optional<OffsetDateTime> transactionTime);

        _FinalStage transactionTime(OffsetDateTime transactionTime);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements LastFourStage, MethodStage, _FinalStage {
        private String lastFour;

        private String method;

        private Optional<OffsetDateTime> transactionTime = Optional.empty();

        private Optional<TransactionQueryRecords> transaction = Optional.empty();

        private Optional<Integer> status = Optional.empty();

        private Optional<List<ChargeBackResponse>> responses = Optional.empty();

        private Optional<String> referenceNumber = Optional.empty();

        private Optional<String> reasonCode = Optional.empty();

        private Optional<String> reason = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<String> paypointEntryname = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> paymentId = Optional.empty();

        private Optional<QueryPaymentData> paymentData = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<Double> netAmount = Optional.empty();

        private Optional<Long> id = Optional.empty();

        private Optional<QueryTransactionPayorData> customer = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<OffsetDateTime> chargebackDate = Optional.empty();

        private Optional<String> caseNumber = Optional.empty();

        private Optional<String> accountType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ChargebackQueryRecords other) {
            accountType(other.getAccountType());
            caseNumber(other.getCaseNumber());
            chargebackDate(other.getChargebackDate());
            createdAt(other.getCreatedAt());
            customer(other.getCustomer());
            id(other.getId());
            lastFour(other.getLastFour());
            method(other.getMethod());
            netAmount(other.getNetAmount());
            orderId(other.getOrderId());
            parentOrgName(other.getParentOrgName());
            paymentData(other.getPaymentData());
            paymentId(other.getPaymentId());
            paypointDbaname(other.getPaypointDbaname());
            paypointEntryname(other.getPaypointEntryname());
            paypointLegalname(other.getPaypointLegalname());
            reason(other.getReason());
            reasonCode(other.getReasonCode());
            referenceNumber(other.getReferenceNumber());
            responses(other.getResponses());
            status(other.getStatus());
            transaction(other.getTransaction());
            transactionTime(other.getTransactionTime());
            return this;
        }

        /**
         * <p>Last 4 digits of card or bank account involved in chargeback or return.</p>
         * <p>Last 4 digits of card or bank account involved in chargeback or return.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("lastFour")
        public MethodStage lastFour(@NotNull String lastFour) {
            this.lastFour = Objects.requireNonNull(lastFour, "lastFour must not be null");
            return this;
        }

        /**
         * <p>Type of payment vehicle: <strong>ach</strong> or <strong>card</strong>.</p>
         * <p>Type of payment vehicle: <strong>ach</strong> or <strong>card</strong>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("method")
        public _FinalStage method(@NotNull String method) {
            this.method = Objects.requireNonNull(method, "method must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage transactionTime(OffsetDateTime transactionTime) {
            this.transactionTime = Optional.ofNullable(transactionTime);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "transactionTime", nulls = Nulls.SKIP)
        public _FinalStage transactionTime(Optional<OffsetDateTime> transactionTime) {
            this.transactionTime = transactionTime;
            return this;
        }

        @java.lang.Override
        public _FinalStage transaction(TransactionQueryRecords transaction) {
            this.transaction = Optional.ofNullable(transaction);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "transaction", nulls = Nulls.SKIP)
        public _FinalStage transaction(Optional<TransactionQueryRecords> transaction) {
            this.transaction = transaction;
            return this;
        }

        /**
         * <p>Status for chargeback or ACH return</p>
         * <ul>
         * <li>0: Open (chargebacks only)</li>
         * <li>1: Pending (chargebacks only)</li>
         * <li>2: Closed-Won (chargebacks only)</li>
         * <li>3: Closed-Lost (chargebacks only)</li>
         * <li>4: ACH Return (ACH only)</li>
         * <li>5: ACH Dispute, Not Authorized (ACH only)</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage status(Integer status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>Status for chargeback or ACH return</p>
         * <ul>
         * <li>0: Open (chargebacks only)</li>
         * <li>1: Pending (chargebacks only)</li>
         * <li>2: Closed-Won (chargebacks only)</li>
         * <li>3: Closed-Lost (chargebacks only)</li>
         * <li>4: ACH Return (ACH only)</li>
         * <li>5: ACH Dispute, Not Authorized (ACH only)</li>
         * </ul>
         */
        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<Integer> status) {
            this.status = status;
            return this;
        }

        /**
         * <p>Chargeback response records.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage responses(List<ChargeBackResponse> responses) {
            this.responses = Optional.ofNullable(responses);
            return this;
        }

        /**
         * <p>Chargeback response records.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "responses", nulls = Nulls.SKIP)
        public _FinalStage responses(Optional<List<ChargeBackResponse>> responses) {
            this.responses = responses;
            return this;
        }

        /**
         * <p>Processor reference number to the chargeback.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage referenceNumber(String referenceNumber) {
            this.referenceNumber = Optional.ofNullable(referenceNumber);
            return this;
        }

        /**
         * <p>Processor reference number to the chargeback.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "referenceNumber", nulls = Nulls.SKIP)
        public _FinalStage referenceNumber(Optional<String> referenceNumber) {
            this.referenceNumber = referenceNumber;
            return this;
        }

        /**
         * <p>R code for returned ACH or custom code identifying the reason.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage reasonCode(String reasonCode) {
            this.reasonCode = Optional.ofNullable(reasonCode);
            return this;
        }

        /**
         * <p>R code for returned ACH or custom code identifying the reason.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "reasonCode", nulls = Nulls.SKIP)
        public _FinalStage reasonCode(Optional<String> reasonCode) {
            this.reasonCode = reasonCode;
            return this;
        }

        /**
         * <p>Text describing the chargeback or ACH return reason.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage reason(String reason) {
            this.reason = Optional.ofNullable(reason);
            return this;
        }

        /**
         * <p>Text describing the chargeback or ACH return reason.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "reason", nulls = Nulls.SKIP)
        public _FinalStage reason(Optional<String> reason) {
            this.reason = reason;
            return this;
        }

        /**
         * <p>The paypoint's legal name.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        /**
         * <p>The paypoint's legal name.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "paypointLegalname", nulls = Nulls.SKIP)
        public _FinalStage paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        /**
         * <p>The paypoint's entryname.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paypointEntryname(String paypointEntryname) {
            this.paypointEntryname = Optional.ofNullable(paypointEntryname);
            return this;
        }

        /**
         * <p>The paypoint's entryname.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "paypointEntryname", nulls = Nulls.SKIP)
        public _FinalStage paypointEntryname(Optional<String> paypointEntryname) {
            this.paypointEntryname = paypointEntryname;
            return this;
        }

        /**
         * <p>The paypoint's DBA name.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        /**
         * <p>The paypoint's DBA name.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "paypointDbaname", nulls = Nulls.SKIP)
        public _FinalStage paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        /**
         * <p>ReferenceId of the transaction in Payabli.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paymentId(String paymentId) {
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        /**
         * <p>ReferenceId of the transaction in Payabli.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "PaymentId", nulls = Nulls.SKIP)
        public _FinalStage paymentId(Optional<String> paymentId) {
            this.paymentId = paymentId;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentData(QueryPaymentData paymentData) {
            this.paymentData = Optional.ofNullable(paymentData);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentData", nulls = Nulls.SKIP)
        public _FinalStage paymentData(Optional<QueryPaymentData> paymentData) {
            this.paymentData = paymentData;
            return this;
        }

        @java.lang.Override
        public _FinalStage parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "parentOrgName", nulls = Nulls.SKIP)
        public _FinalStage parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        @java.lang.Override
        public _FinalStage orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "orderId", nulls = Nulls.SKIP)
        public _FinalStage orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        /**
         * <p>Net amount in chargeback or ACH return.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage netAmount(Double netAmount) {
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        /**
         * <p>Net amount in chargeback or ACH return.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "netAmount", nulls = Nulls.SKIP)
        public _FinalStage netAmount(Optional<Double> netAmount) {
            this.netAmount = netAmount;
            return this;
        }

        /**
         * <p>Identifier of chargeback or return.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(Long id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>Identifier of chargeback or return.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<Long> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public _FinalStage customer(QueryTransactionPayorData customer) {
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "customer", nulls = Nulls.SKIP)
        public _FinalStage customer(Optional<QueryTransactionPayorData> customer) {
            this.customer = customer;
            return this;
        }

        /**
         * <p>Timestamp when the register was created, in UTC.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>Timestamp when the register was created, in UTC.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>Date of chargeback in format YYYY-MM-DD or MM/DD/YYYY.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage chargebackDate(OffsetDateTime chargebackDate) {
            this.chargebackDate = Optional.ofNullable(chargebackDate);
            return this;
        }

        /**
         * <p>Date of chargeback in format YYYY-MM-DD or MM/DD/YYYY.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "chargebackDate", nulls = Nulls.SKIP)
        public _FinalStage chargebackDate(Optional<OffsetDateTime> chargebackDate) {
            this.chargebackDate = chargebackDate;
            return this;
        }

        /**
         * <p>Number of case assigned to the chargeback.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage caseNumber(String caseNumber) {
            this.caseNumber = Optional.ofNullable(caseNumber);
            return this;
        }

        /**
         * <p>Number of case assigned to the chargeback.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "caseNumber", nulls = Nulls.SKIP)
        public _FinalStage caseNumber(Optional<String> caseNumber) {
            this.caseNumber = caseNumber;
            return this;
        }

        @java.lang.Override
        public _FinalStage accountType(String accountType) {
            this.accountType = Optional.ofNullable(accountType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "accountType", nulls = Nulls.SKIP)
        public _FinalStage accountType(Optional<String> accountType) {
            this.accountType = accountType;
            return this;
        }

        @java.lang.Override
        public ChargebackQueryRecords build() {
            return new ChargebackQueryRecords(
                    accountType,
                    caseNumber,
                    chargebackDate,
                    createdAt,
                    customer,
                    id,
                    lastFour,
                    method,
                    netAmount,
                    orderId,
                    parentOrgName,
                    paymentData,
                    paymentId,
                    paypointDbaname,
                    paypointEntryname,
                    paypointLegalname,
                    reason,
                    reasonCode,
                    referenceNumber,
                    responses,
                    status,
                    transaction,
                    transactionTime,
                    additionalProperties);
        }
    }
}
