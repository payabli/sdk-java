/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransactionQueryRecords.Builder.class)
public final class TransactionQueryRecords {
    private final Optional<AchHolderType> achHolderType;

    private final Optional<String> achSecCode;

    private final Optional<Double> batchAmount;

    private final Optional<String> batchNumber;

    private final Optional<List<QueryCFeeTransaction>> cfeeTransactions;

    private final Optional<String> connectorName;

    private final Optional<QueryTransactionPayorData> customer;

    private final Optional<String> deviceId;

    private final Optional<Long> entrypageId;

    private final Optional<String> externalProcessorInformation;

    private final Optional<Double> feeAmount;

    private final Optional<String> gatewayTransId;

    private final Optional<BillData> invoiceData;

    private final Optional<String> method;

    private final Optional<Double> netAmount;

    private final Optional<String> operation;

    private final Optional<String> orderId;

    private final Optional<Long> orgId;

    private final Optional<String> parentOrgName;

    private final Optional<QueryPaymentData> paymentData;

    private final Optional<String> paymentTransId;

    private final Optional<Long> payorId;

    private final Optional<String> paypointDbaname;

    private final Optional<String> paypointEntryname;

    private final Optional<Long> paypointId;

    private final Optional<String> paypointLegalname;

    private final Optional<Double> pendingFeeAmount;

    private final Optional<Long> refundId;

    private final Optional<QueryResponseData> responseData;

    private final Optional<Long> returnedId;

    private final Optional<Long> scheduleReference;

    private final Optional<Integer> settlementStatus;

    private final Optional<String> source;

    private final Optional<List<SplitFundingContent>> splitFundingInstructions;

    private final Optional<Double> totalAmount;

    private final Optional<List<QueryTransactionEvents>> transactionEvents;

    private final Optional<OffsetDateTime> transactionTime;

    private final Optional<Object> transAdditionalData;

    private final Optional<Integer> transStatus;

    private final Map<String, Object> additionalProperties;

    private TransactionQueryRecords(
            Optional<AchHolderType> achHolderType,
            Optional<String> achSecCode,
            Optional<Double> batchAmount,
            Optional<String> batchNumber,
            Optional<List<QueryCFeeTransaction>> cfeeTransactions,
            Optional<String> connectorName,
            Optional<QueryTransactionPayorData> customer,
            Optional<String> deviceId,
            Optional<Long> entrypageId,
            Optional<String> externalProcessorInformation,
            Optional<Double> feeAmount,
            Optional<String> gatewayTransId,
            Optional<BillData> invoiceData,
            Optional<String> method,
            Optional<Double> netAmount,
            Optional<String> operation,
            Optional<String> orderId,
            Optional<Long> orgId,
            Optional<String> parentOrgName,
            Optional<QueryPaymentData> paymentData,
            Optional<String> paymentTransId,
            Optional<Long> payorId,
            Optional<String> paypointDbaname,
            Optional<String> paypointEntryname,
            Optional<Long> paypointId,
            Optional<String> paypointLegalname,
            Optional<Double> pendingFeeAmount,
            Optional<Long> refundId,
            Optional<QueryResponseData> responseData,
            Optional<Long> returnedId,
            Optional<Long> scheduleReference,
            Optional<Integer> settlementStatus,
            Optional<String> source,
            Optional<List<SplitFundingContent>> splitFundingInstructions,
            Optional<Double> totalAmount,
            Optional<List<QueryTransactionEvents>> transactionEvents,
            Optional<OffsetDateTime> transactionTime,
            Optional<Object> transAdditionalData,
            Optional<Integer> transStatus,
            Map<String, Object> additionalProperties) {
        this.achHolderType = achHolderType;
        this.achSecCode = achSecCode;
        this.batchAmount = batchAmount;
        this.batchNumber = batchNumber;
        this.cfeeTransactions = cfeeTransactions;
        this.connectorName = connectorName;
        this.customer = customer;
        this.deviceId = deviceId;
        this.entrypageId = entrypageId;
        this.externalProcessorInformation = externalProcessorInformation;
        this.feeAmount = feeAmount;
        this.gatewayTransId = gatewayTransId;
        this.invoiceData = invoiceData;
        this.method = method;
        this.netAmount = netAmount;
        this.operation = operation;
        this.orderId = orderId;
        this.orgId = orgId;
        this.parentOrgName = parentOrgName;
        this.paymentData = paymentData;
        this.paymentTransId = paymentTransId;
        this.payorId = payorId;
        this.paypointDbaname = paypointDbaname;
        this.paypointEntryname = paypointEntryname;
        this.paypointId = paypointId;
        this.paypointLegalname = paypointLegalname;
        this.pendingFeeAmount = pendingFeeAmount;
        this.refundId = refundId;
        this.responseData = responseData;
        this.returnedId = returnedId;
        this.scheduleReference = scheduleReference;
        this.settlementStatus = settlementStatus;
        this.source = source;
        this.splitFundingInstructions = splitFundingInstructions;
        this.totalAmount = totalAmount;
        this.transactionEvents = transactionEvents;
        this.transactionTime = transactionTime;
        this.transAdditionalData = transAdditionalData;
        this.transStatus = transStatus;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("AchHolderType")
    public Optional<AchHolderType> getAchHolderType() {
        return achHolderType;
    }

    @JsonProperty("AchSecCode")
    public Optional<String> getAchSecCode() {
        return achSecCode;
    }

    /**
     * @return Batch amount.
     */
    @JsonProperty("BatchAmount")
    public Optional<Double> getBatchAmount() {
        return batchAmount;
    }

    @JsonProperty("BatchNumber")
    public Optional<String> getBatchNumber() {
        return batchNumber;
    }

    /**
     * @return Service Fee or sub-charge transaction associated to the main transaction.
     */
    @JsonProperty("CfeeTransactions")
    public Optional<List<QueryCFeeTransaction>> getCfeeTransactions() {
        return cfeeTransactions;
    }

    /**
     * @return Connector used for transaction.
     */
    @JsonProperty("ConnectorName")
    public Optional<String> getConnectorName() {
        return connectorName;
    }

    @JsonProperty("Customer")
    public Optional<QueryTransactionPayorData> getCustomer() {
        return customer;
    }

    @JsonProperty("DeviceId")
    public Optional<String> getDeviceId() {
        return deviceId;
    }

    /**
     * @return If applicable, the internal reference ID to the payment page capturing the payment.
     */
    @JsonProperty("EntrypageId")
    public Optional<Long> getEntrypageId() {
        return entrypageId;
    }

    @JsonProperty("ExternalProcessorInformation")
    public Optional<String> getExternalProcessorInformation() {
        return externalProcessorInformation;
    }

    /**
     * @return Service fee or sub-charge applied.
     */
    @JsonProperty("FeeAmount")
    public Optional<Double> getFeeAmount() {
        return feeAmount;
    }

    /**
     * @return Internal identifier used for processing.
     */
    @JsonProperty("GatewayTransId")
    public Optional<String> getGatewayTransId() {
        return gatewayTransId;
    }

    @JsonProperty("InvoiceData")
    public Optional<BillData> getInvoiceData() {
        return invoiceData;
    }

    /**
     * @return Payment method used: card, ach, or wallet.
     */
    @JsonProperty("Method")
    public Optional<String> getMethod() {
        return method;
    }

    /**
     * @return Net amount paid.
     */
    @JsonProperty("NetAmount")
    public Optional<Double> getNetAmount() {
        return netAmount;
    }

    @JsonProperty("Operation")
    public Optional<String> getOperation() {
        return operation;
    }

    @JsonProperty("OrderId")
    public Optional<String> getOrderId() {
        return orderId;
    }

    /**
     * @return ID of immediate parent organization.
     */
    @JsonProperty("OrgId")
    public Optional<Long> getOrgId() {
        return orgId;
    }

    @JsonProperty("ParentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    @JsonProperty("PaymentData")
    public Optional<QueryPaymentData> getPaymentData() {
        return paymentData;
    }

    /**
     * @return Unique Transaction ID.
     */
    @JsonProperty("PaymentTransId")
    public Optional<String> getPaymentTransId() {
        return paymentTransId;
    }

    /**
     * @return Unique ID for customer linked to the transaction.
     */
    @JsonProperty("PayorId")
    public Optional<Long> getPayorId() {
        return payorId;
    }

    /**
     * @return Paypoint's DBA name.
     */
    @JsonProperty("PaypointDbaname")
    public Optional<String> getPaypointDbaname() {
        return paypointDbaname;
    }

    /**
     * @return Paypoint's entryname.
     */
    @JsonProperty("PaypointEntryname")
    public Optional<String> getPaypointEntryname() {
        return paypointEntryname;
    }

    /**
     * @return InternalId for paypoint.
     */
    @JsonProperty("PaypointId")
    public Optional<Long> getPaypointId() {
        return paypointId;
    }

    /**
     * @return Paypoint's legal name.
     */
    @JsonProperty("PaypointLegalname")
    public Optional<String> getPaypointLegalname() {
        return paypointLegalname;
    }

    @JsonProperty("PendingFeeAmount")
    public Optional<Double> getPendingFeeAmount() {
        return pendingFeeAmount;
    }

    /**
     * @return Identifier of refund transaction linked to this payment.
     */
    @JsonProperty("RefundId")
    public Optional<Long> getRefundId() {
        return refundId;
    }

    @JsonProperty("ResponseData")
    public Optional<QueryResponseData> getResponseData() {
        return responseData;
    }

    /**
     * @return Identifier of return/chargeback transaction linked to this payment.
     */
    @JsonProperty("ReturnedId")
    public Optional<Long> getReturnedId() {
        return returnedId;
    }

    /**
     * @return Reference to the subscription that originated the transaction.
     */
    @JsonProperty("ScheduleReference")
    public Optional<Long> getScheduleReference() {
        return scheduleReference;
    }

    /**
     * @return Settlement status for transaction. See <a href="/developers/references/money-in-statuses#payment-funding-status">the docs</a> for a full reference.
     */
    @JsonProperty("SettlementStatus")
    public Optional<Integer> getSettlementStatus() {
        return settlementStatus;
    }

    @JsonProperty("Source")
    public Optional<String> getSource() {
        return source;
    }

    @JsonProperty("splitFundingInstructions")
    public Optional<List<SplitFundingContent>> getSplitFundingInstructions() {
        return splitFundingInstructions;
    }

    /**
     * @return Transaction total amount (including service fee or sub-charge)
     */
    @JsonProperty("TotalAmount")
    public Optional<Double> getTotalAmount() {
        return totalAmount;
    }

    /**
     * @return Events associated with this transaction.
     */
    @JsonProperty("TransactionEvents")
    public Optional<List<QueryTransactionEvents>> getTransactionEvents() {
        return transactionEvents;
    }

    /**
     * @return Transaction date and time, in UTC.
     */
    @JsonProperty("TransactionTime")
    public Optional<OffsetDateTime> getTransactionTime() {
        return transactionTime;
    }

    @JsonProperty("TransAdditionalData")
    public Optional<Object> getTransAdditionalData() {
        return transAdditionalData;
    }

    /**
     * @return Status of transaction. See <a href="/developers/references/money-in-statuses#money-in-transaction-status">the docs</a> for a full reference.
     */
    @JsonProperty("TransStatus")
    public Optional<Integer> getTransStatus() {
        return transStatus;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransactionQueryRecords && equalTo((TransactionQueryRecords) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransactionQueryRecords other) {
        return achHolderType.equals(other.achHolderType)
                && achSecCode.equals(other.achSecCode)
                && batchAmount.equals(other.batchAmount)
                && batchNumber.equals(other.batchNumber)
                && cfeeTransactions.equals(other.cfeeTransactions)
                && connectorName.equals(other.connectorName)
                && customer.equals(other.customer)
                && deviceId.equals(other.deviceId)
                && entrypageId.equals(other.entrypageId)
                && externalProcessorInformation.equals(other.externalProcessorInformation)
                && feeAmount.equals(other.feeAmount)
                && gatewayTransId.equals(other.gatewayTransId)
                && invoiceData.equals(other.invoiceData)
                && method.equals(other.method)
                && netAmount.equals(other.netAmount)
                && operation.equals(other.operation)
                && orderId.equals(other.orderId)
                && orgId.equals(other.orgId)
                && parentOrgName.equals(other.parentOrgName)
                && paymentData.equals(other.paymentData)
                && paymentTransId.equals(other.paymentTransId)
                && payorId.equals(other.payorId)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointEntryname.equals(other.paypointEntryname)
                && paypointId.equals(other.paypointId)
                && paypointLegalname.equals(other.paypointLegalname)
                && pendingFeeAmount.equals(other.pendingFeeAmount)
                && refundId.equals(other.refundId)
                && responseData.equals(other.responseData)
                && returnedId.equals(other.returnedId)
                && scheduleReference.equals(other.scheduleReference)
                && settlementStatus.equals(other.settlementStatus)
                && source.equals(other.source)
                && splitFundingInstructions.equals(other.splitFundingInstructions)
                && totalAmount.equals(other.totalAmount)
                && transactionEvents.equals(other.transactionEvents)
                && transactionTime.equals(other.transactionTime)
                && transAdditionalData.equals(other.transAdditionalData)
                && transStatus.equals(other.transStatus);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.achHolderType,
                this.achSecCode,
                this.batchAmount,
                this.batchNumber,
                this.cfeeTransactions,
                this.connectorName,
                this.customer,
                this.deviceId,
                this.entrypageId,
                this.externalProcessorInformation,
                this.feeAmount,
                this.gatewayTransId,
                this.invoiceData,
                this.method,
                this.netAmount,
                this.operation,
                this.orderId,
                this.orgId,
                this.parentOrgName,
                this.paymentData,
                this.paymentTransId,
                this.payorId,
                this.paypointDbaname,
                this.paypointEntryname,
                this.paypointId,
                this.paypointLegalname,
                this.pendingFeeAmount,
                this.refundId,
                this.responseData,
                this.returnedId,
                this.scheduleReference,
                this.settlementStatus,
                this.source,
                this.splitFundingInstructions,
                this.totalAmount,
                this.transactionEvents,
                this.transactionTime,
                this.transAdditionalData,
                this.transStatus);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<AchHolderType> achHolderType = Optional.empty();

        private Optional<String> achSecCode = Optional.empty();

        private Optional<Double> batchAmount = Optional.empty();

        private Optional<String> batchNumber = Optional.empty();

        private Optional<List<QueryCFeeTransaction>> cfeeTransactions = Optional.empty();

        private Optional<String> connectorName = Optional.empty();

        private Optional<QueryTransactionPayorData> customer = Optional.empty();

        private Optional<String> deviceId = Optional.empty();

        private Optional<Long> entrypageId = Optional.empty();

        private Optional<String> externalProcessorInformation = Optional.empty();

        private Optional<Double> feeAmount = Optional.empty();

        private Optional<String> gatewayTransId = Optional.empty();

        private Optional<BillData> invoiceData = Optional.empty();

        private Optional<String> method = Optional.empty();

        private Optional<Double> netAmount = Optional.empty();

        private Optional<String> operation = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<Long> orgId = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<QueryPaymentData> paymentData = Optional.empty();

        private Optional<String> paymentTransId = Optional.empty();

        private Optional<Long> payorId = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> paypointEntryname = Optional.empty();

        private Optional<Long> paypointId = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<Double> pendingFeeAmount = Optional.empty();

        private Optional<Long> refundId = Optional.empty();

        private Optional<QueryResponseData> responseData = Optional.empty();

        private Optional<Long> returnedId = Optional.empty();

        private Optional<Long> scheduleReference = Optional.empty();

        private Optional<Integer> settlementStatus = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<List<SplitFundingContent>> splitFundingInstructions = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<List<QueryTransactionEvents>> transactionEvents = Optional.empty();

        private Optional<OffsetDateTime> transactionTime = Optional.empty();

        private Optional<Object> transAdditionalData = Optional.empty();

        private Optional<Integer> transStatus = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TransactionQueryRecords other) {
            achHolderType(other.getAchHolderType());
            achSecCode(other.getAchSecCode());
            batchAmount(other.getBatchAmount());
            batchNumber(other.getBatchNumber());
            cfeeTransactions(other.getCfeeTransactions());
            connectorName(other.getConnectorName());
            customer(other.getCustomer());
            deviceId(other.getDeviceId());
            entrypageId(other.getEntrypageId());
            externalProcessorInformation(other.getExternalProcessorInformation());
            feeAmount(other.getFeeAmount());
            gatewayTransId(other.getGatewayTransId());
            invoiceData(other.getInvoiceData());
            method(other.getMethod());
            netAmount(other.getNetAmount());
            operation(other.getOperation());
            orderId(other.getOrderId());
            orgId(other.getOrgId());
            parentOrgName(other.getParentOrgName());
            paymentData(other.getPaymentData());
            paymentTransId(other.getPaymentTransId());
            payorId(other.getPayorId());
            paypointDbaname(other.getPaypointDbaname());
            paypointEntryname(other.getPaypointEntryname());
            paypointId(other.getPaypointId());
            paypointLegalname(other.getPaypointLegalname());
            pendingFeeAmount(other.getPendingFeeAmount());
            refundId(other.getRefundId());
            responseData(other.getResponseData());
            returnedId(other.getReturnedId());
            scheduleReference(other.getScheduleReference());
            settlementStatus(other.getSettlementStatus());
            source(other.getSource());
            splitFundingInstructions(other.getSplitFundingInstructions());
            totalAmount(other.getTotalAmount());
            transactionEvents(other.getTransactionEvents());
            transactionTime(other.getTransactionTime());
            transAdditionalData(other.getTransAdditionalData());
            transStatus(other.getTransStatus());
            return this;
        }

        @JsonSetter(value = "AchHolderType", nulls = Nulls.SKIP)
        public Builder achHolderType(Optional<AchHolderType> achHolderType) {
            this.achHolderType = achHolderType;
            return this;
        }

        public Builder achHolderType(AchHolderType achHolderType) {
            this.achHolderType = Optional.ofNullable(achHolderType);
            return this;
        }

        @JsonSetter(value = "AchSecCode", nulls = Nulls.SKIP)
        public Builder achSecCode(Optional<String> achSecCode) {
            this.achSecCode = achSecCode;
            return this;
        }

        public Builder achSecCode(String achSecCode) {
            this.achSecCode = Optional.ofNullable(achSecCode);
            return this;
        }

        /**
         * <p>Batch amount.</p>
         */
        @JsonSetter(value = "BatchAmount", nulls = Nulls.SKIP)
        public Builder batchAmount(Optional<Double> batchAmount) {
            this.batchAmount = batchAmount;
            return this;
        }

        public Builder batchAmount(Double batchAmount) {
            this.batchAmount = Optional.ofNullable(batchAmount);
            return this;
        }

        @JsonSetter(value = "BatchNumber", nulls = Nulls.SKIP)
        public Builder batchNumber(Optional<String> batchNumber) {
            this.batchNumber = batchNumber;
            return this;
        }

        public Builder batchNumber(String batchNumber) {
            this.batchNumber = Optional.ofNullable(batchNumber);
            return this;
        }

        /**
         * <p>Service Fee or sub-charge transaction associated to the main transaction.</p>
         */
        @JsonSetter(value = "CfeeTransactions", nulls = Nulls.SKIP)
        public Builder cfeeTransactions(Optional<List<QueryCFeeTransaction>> cfeeTransactions) {
            this.cfeeTransactions = cfeeTransactions;
            return this;
        }

        public Builder cfeeTransactions(List<QueryCFeeTransaction> cfeeTransactions) {
            this.cfeeTransactions = Optional.ofNullable(cfeeTransactions);
            return this;
        }

        /**
         * <p>Connector used for transaction.</p>
         */
        @JsonSetter(value = "ConnectorName", nulls = Nulls.SKIP)
        public Builder connectorName(Optional<String> connectorName) {
            this.connectorName = connectorName;
            return this;
        }

        public Builder connectorName(String connectorName) {
            this.connectorName = Optional.ofNullable(connectorName);
            return this;
        }

        @JsonSetter(value = "Customer", nulls = Nulls.SKIP)
        public Builder customer(Optional<QueryTransactionPayorData> customer) {
            this.customer = customer;
            return this;
        }

        public Builder customer(QueryTransactionPayorData customer) {
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        @JsonSetter(value = "DeviceId", nulls = Nulls.SKIP)
        public Builder deviceId(Optional<String> deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        public Builder deviceId(String deviceId) {
            this.deviceId = Optional.ofNullable(deviceId);
            return this;
        }

        /**
         * <p>If applicable, the internal reference ID to the payment page capturing the payment.</p>
         */
        @JsonSetter(value = "EntrypageId", nulls = Nulls.SKIP)
        public Builder entrypageId(Optional<Long> entrypageId) {
            this.entrypageId = entrypageId;
            return this;
        }

        public Builder entrypageId(Long entrypageId) {
            this.entrypageId = Optional.ofNullable(entrypageId);
            return this;
        }

        @JsonSetter(value = "ExternalProcessorInformation", nulls = Nulls.SKIP)
        public Builder externalProcessorInformation(Optional<String> externalProcessorInformation) {
            this.externalProcessorInformation = externalProcessorInformation;
            return this;
        }

        public Builder externalProcessorInformation(String externalProcessorInformation) {
            this.externalProcessorInformation = Optional.ofNullable(externalProcessorInformation);
            return this;
        }

        /**
         * <p>Service fee or sub-charge applied.</p>
         */
        @JsonSetter(value = "FeeAmount", nulls = Nulls.SKIP)
        public Builder feeAmount(Optional<Double> feeAmount) {
            this.feeAmount = feeAmount;
            return this;
        }

        public Builder feeAmount(Double feeAmount) {
            this.feeAmount = Optional.ofNullable(feeAmount);
            return this;
        }

        /**
         * <p>Internal identifier used for processing.</p>
         */
        @JsonSetter(value = "GatewayTransId", nulls = Nulls.SKIP)
        public Builder gatewayTransId(Optional<String> gatewayTransId) {
            this.gatewayTransId = gatewayTransId;
            return this;
        }

        public Builder gatewayTransId(String gatewayTransId) {
            this.gatewayTransId = Optional.ofNullable(gatewayTransId);
            return this;
        }

        @JsonSetter(value = "InvoiceData", nulls = Nulls.SKIP)
        public Builder invoiceData(Optional<BillData> invoiceData) {
            this.invoiceData = invoiceData;
            return this;
        }

        public Builder invoiceData(BillData invoiceData) {
            this.invoiceData = Optional.ofNullable(invoiceData);
            return this;
        }

        /**
         * <p>Payment method used: card, ach, or wallet.</p>
         */
        @JsonSetter(value = "Method", nulls = Nulls.SKIP)
        public Builder method(Optional<String> method) {
            this.method = method;
            return this;
        }

        public Builder method(String method) {
            this.method = Optional.ofNullable(method);
            return this;
        }

        /**
         * <p>Net amount paid.</p>
         */
        @JsonSetter(value = "NetAmount", nulls = Nulls.SKIP)
        public Builder netAmount(Optional<Double> netAmount) {
            this.netAmount = netAmount;
            return this;
        }

        public Builder netAmount(Double netAmount) {
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        @JsonSetter(value = "Operation", nulls = Nulls.SKIP)
        public Builder operation(Optional<String> operation) {
            this.operation = operation;
            return this;
        }

        public Builder operation(String operation) {
            this.operation = Optional.ofNullable(operation);
            return this;
        }

        @JsonSetter(value = "OrderId", nulls = Nulls.SKIP)
        public Builder orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        public Builder orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        /**
         * <p>ID of immediate parent organization.</p>
         */
        @JsonSetter(value = "OrgId", nulls = Nulls.SKIP)
        public Builder orgId(Optional<Long> orgId) {
            this.orgId = orgId;
            return this;
        }

        public Builder orgId(Long orgId) {
            this.orgId = Optional.ofNullable(orgId);
            return this;
        }

        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        @JsonSetter(value = "PaymentData", nulls = Nulls.SKIP)
        public Builder paymentData(Optional<QueryPaymentData> paymentData) {
            this.paymentData = paymentData;
            return this;
        }

        public Builder paymentData(QueryPaymentData paymentData) {
            this.paymentData = Optional.ofNullable(paymentData);
            return this;
        }

        /**
         * <p>Unique Transaction ID.</p>
         */
        @JsonSetter(value = "PaymentTransId", nulls = Nulls.SKIP)
        public Builder paymentTransId(Optional<String> paymentTransId) {
            this.paymentTransId = paymentTransId;
            return this;
        }

        public Builder paymentTransId(String paymentTransId) {
            this.paymentTransId = Optional.ofNullable(paymentTransId);
            return this;
        }

        /**
         * <p>Unique ID for customer linked to the transaction.</p>
         */
        @JsonSetter(value = "PayorId", nulls = Nulls.SKIP)
        public Builder payorId(Optional<Long> payorId) {
            this.payorId = payorId;
            return this;
        }

        public Builder payorId(Long payorId) {
            this.payorId = Optional.ofNullable(payorId);
            return this;
        }

        /**
         * <p>Paypoint's DBA name.</p>
         */
        @JsonSetter(value = "PaypointDbaname", nulls = Nulls.SKIP)
        public Builder paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        public Builder paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        /**
         * <p>Paypoint's entryname.</p>
         */
        @JsonSetter(value = "PaypointEntryname", nulls = Nulls.SKIP)
        public Builder paypointEntryname(Optional<String> paypointEntryname) {
            this.paypointEntryname = paypointEntryname;
            return this;
        }

        public Builder paypointEntryname(String paypointEntryname) {
            this.paypointEntryname = Optional.ofNullable(paypointEntryname);
            return this;
        }

        /**
         * <p>InternalId for paypoint.</p>
         */
        @JsonSetter(value = "PaypointId", nulls = Nulls.SKIP)
        public Builder paypointId(Optional<Long> paypointId) {
            this.paypointId = paypointId;
            return this;
        }

        public Builder paypointId(Long paypointId) {
            this.paypointId = Optional.ofNullable(paypointId);
            return this;
        }

        /**
         * <p>Paypoint's legal name.</p>
         */
        @JsonSetter(value = "PaypointLegalname", nulls = Nulls.SKIP)
        public Builder paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        public Builder paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        @JsonSetter(value = "PendingFeeAmount", nulls = Nulls.SKIP)
        public Builder pendingFeeAmount(Optional<Double> pendingFeeAmount) {
            this.pendingFeeAmount = pendingFeeAmount;
            return this;
        }

        public Builder pendingFeeAmount(Double pendingFeeAmount) {
            this.pendingFeeAmount = Optional.ofNullable(pendingFeeAmount);
            return this;
        }

        /**
         * <p>Identifier of refund transaction linked to this payment.</p>
         */
        @JsonSetter(value = "RefundId", nulls = Nulls.SKIP)
        public Builder refundId(Optional<Long> refundId) {
            this.refundId = refundId;
            return this;
        }

        public Builder refundId(Long refundId) {
            this.refundId = Optional.ofNullable(refundId);
            return this;
        }

        @JsonSetter(value = "ResponseData", nulls = Nulls.SKIP)
        public Builder responseData(Optional<QueryResponseData> responseData) {
            this.responseData = responseData;
            return this;
        }

        public Builder responseData(QueryResponseData responseData) {
            this.responseData = Optional.ofNullable(responseData);
            return this;
        }

        /**
         * <p>Identifier of return/chargeback transaction linked to this payment.</p>
         */
        @JsonSetter(value = "ReturnedId", nulls = Nulls.SKIP)
        public Builder returnedId(Optional<Long> returnedId) {
            this.returnedId = returnedId;
            return this;
        }

        public Builder returnedId(Long returnedId) {
            this.returnedId = Optional.ofNullable(returnedId);
            return this;
        }

        /**
         * <p>Reference to the subscription that originated the transaction.</p>
         */
        @JsonSetter(value = "ScheduleReference", nulls = Nulls.SKIP)
        public Builder scheduleReference(Optional<Long> scheduleReference) {
            this.scheduleReference = scheduleReference;
            return this;
        }

        public Builder scheduleReference(Long scheduleReference) {
            this.scheduleReference = Optional.ofNullable(scheduleReference);
            return this;
        }

        /**
         * <p>Settlement status for transaction. See <a href="/developers/references/money-in-statuses#payment-funding-status">the docs</a> for a full reference.</p>
         */
        @JsonSetter(value = "SettlementStatus", nulls = Nulls.SKIP)
        public Builder settlementStatus(Optional<Integer> settlementStatus) {
            this.settlementStatus = settlementStatus;
            return this;
        }

        public Builder settlementStatus(Integer settlementStatus) {
            this.settlementStatus = Optional.ofNullable(settlementStatus);
            return this;
        }

        @JsonSetter(value = "Source", nulls = Nulls.SKIP)
        public Builder source(Optional<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        @JsonSetter(value = "splitFundingInstructions", nulls = Nulls.SKIP)
        public Builder splitFundingInstructions(Optional<List<SplitFundingContent>> splitFundingInstructions) {
            this.splitFundingInstructions = splitFundingInstructions;
            return this;
        }

        public Builder splitFundingInstructions(List<SplitFundingContent> splitFundingInstructions) {
            this.splitFundingInstructions = Optional.ofNullable(splitFundingInstructions);
            return this;
        }

        /**
         * <p>Transaction total amount (including service fee or sub-charge)</p>
         */
        @JsonSetter(value = "TotalAmount", nulls = Nulls.SKIP)
        public Builder totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * <p>Events associated with this transaction.</p>
         */
        @JsonSetter(value = "TransactionEvents", nulls = Nulls.SKIP)
        public Builder transactionEvents(Optional<List<QueryTransactionEvents>> transactionEvents) {
            this.transactionEvents = transactionEvents;
            return this;
        }

        public Builder transactionEvents(List<QueryTransactionEvents> transactionEvents) {
            this.transactionEvents = Optional.ofNullable(transactionEvents);
            return this;
        }

        /**
         * <p>Transaction date and time, in UTC.</p>
         */
        @JsonSetter(value = "TransactionTime", nulls = Nulls.SKIP)
        public Builder transactionTime(Optional<OffsetDateTime> transactionTime) {
            this.transactionTime = transactionTime;
            return this;
        }

        public Builder transactionTime(OffsetDateTime transactionTime) {
            this.transactionTime = Optional.ofNullable(transactionTime);
            return this;
        }

        @JsonSetter(value = "TransAdditionalData", nulls = Nulls.SKIP)
        public Builder transAdditionalData(Optional<Object> transAdditionalData) {
            this.transAdditionalData = transAdditionalData;
            return this;
        }

        public Builder transAdditionalData(Object transAdditionalData) {
            this.transAdditionalData = Optional.ofNullable(transAdditionalData);
            return this;
        }

        /**
         * <p>Status of transaction. See <a href="/developers/references/money-in-statuses#money-in-transaction-status">the docs</a> for a full reference.</p>
         */
        @JsonSetter(value = "TransStatus", nulls = Nulls.SKIP)
        public Builder transStatus(Optional<Integer> transStatus) {
            this.transStatus = transStatus;
            return this;
        }

        public Builder transStatus(Integer transStatus) {
            this.transStatus = Optional.ofNullable(transStatus);
            return this;
        }

        public TransactionQueryRecords build() {
            return new TransactionQueryRecords(
                    achHolderType,
                    achSecCode,
                    batchAmount,
                    batchNumber,
                    cfeeTransactions,
                    connectorName,
                    customer,
                    deviceId,
                    entrypageId,
                    externalProcessorInformation,
                    feeAmount,
                    gatewayTransId,
                    invoiceData,
                    method,
                    netAmount,
                    operation,
                    orderId,
                    orgId,
                    parentOrgName,
                    paymentData,
                    paymentTransId,
                    payorId,
                    paypointDbaname,
                    paypointEntryname,
                    paypointId,
                    paypointLegalname,
                    pendingFeeAmount,
                    refundId,
                    responseData,
                    returnedId,
                    scheduleReference,
                    settlementStatus,
                    source,
                    splitFundingInstructions,
                    totalAmount,
                    transactionEvents,
                    transactionTime,
                    transAdditionalData,
                    transStatus,
                    additionalProperties);
        }
    }
}
