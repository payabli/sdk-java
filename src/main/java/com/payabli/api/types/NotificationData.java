/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NotificationData.Builder.class)
public final class NotificationData {
    private final Optional<NotificationContent> content;

    private final Optional<Frequencynotification> frequency;

    private final Methodnotification method;

    private final Optional<String> ownerId;

    private final int ownerType;

    private final Optional<String> source;

    private final Optional<Integer> status;

    private final Optional<String> target;

    private final Map<String, Object> additionalProperties;

    private NotificationData(
            Optional<NotificationContent> content,
            Optional<Frequencynotification> frequency,
            Methodnotification method,
            Optional<String> ownerId,
            int ownerType,
            Optional<String> source,
            Optional<Integer> status,
            Optional<String> target,
            Map<String, Object> additionalProperties) {
        this.content = content;
        this.frequency = frequency;
        this.method = method;
        this.ownerId = ownerId;
        this.ownerType = ownerType;
        this.source = source;
        this.status = status;
        this.target = target;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("content")
    public Optional<NotificationContent> getContent() {
        return content;
    }

    @JsonProperty("frequency")
    public Optional<Frequencynotification> getFrequency() {
        return frequency;
    }

    @JsonProperty("method")
    public Methodnotification getMethod() {
        return method;
    }

    @JsonProperty("ownerId")
    public Optional<String> getOwnerId() {
        return ownerId;
    }

    @JsonProperty("ownerType")
    public int getOwnerType() {
        return ownerType;
    }

    @JsonProperty("source")
    public Optional<String> getSource() {
        return source;
    }

    @JsonProperty("status")
    public Optional<Integer> getStatus() {
        return status;
    }

    @JsonProperty("target")
    public Optional<String> getTarget() {
        return target;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NotificationData && equalTo((NotificationData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NotificationData other) {
        return content.equals(other.content)
                && frequency.equals(other.frequency)
                && method.equals(other.method)
                && ownerId.equals(other.ownerId)
                && ownerType == other.ownerType
                && source.equals(other.source)
                && status.equals(other.status)
                && target.equals(other.target);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.content,
                this.frequency,
                this.method,
                this.ownerId,
                this.ownerType,
                this.source,
                this.status,
                this.target);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MethodStage builder() {
        return new Builder();
    }

    public interface MethodStage {
        OwnerTypeStage method(@NotNull Methodnotification method);

        Builder from(NotificationData other);
    }

    public interface OwnerTypeStage {
        _FinalStage ownerType(int ownerType);
    }

    public interface _FinalStage {
        NotificationData build();

        _FinalStage content(Optional<NotificationContent> content);

        _FinalStage content(NotificationContent content);

        _FinalStage frequency(Optional<Frequencynotification> frequency);

        _FinalStage frequency(Frequencynotification frequency);

        _FinalStage ownerId(Optional<String> ownerId);

        _FinalStage ownerId(String ownerId);

        _FinalStage source(Optional<String> source);

        _FinalStage source(String source);

        _FinalStage status(Optional<Integer> status);

        _FinalStage status(Integer status);

        _FinalStage target(Optional<String> target);

        _FinalStage target(String target);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MethodStage, OwnerTypeStage, _FinalStage {
        private Methodnotification method;

        private int ownerType;

        private Optional<String> target = Optional.empty();

        private Optional<Integer> status = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<String> ownerId = Optional.empty();

        private Optional<Frequencynotification> frequency = Optional.empty();

        private Optional<NotificationContent> content = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(NotificationData other) {
            content(other.getContent());
            frequency(other.getFrequency());
            method(other.getMethod());
            ownerId(other.getOwnerId());
            ownerType(other.getOwnerType());
            source(other.getSource());
            status(other.getStatus());
            target(other.getTarget());
            return this;
        }

        @java.lang.Override
        @JsonSetter("method")
        public OwnerTypeStage method(@NotNull Methodnotification method) {
            this.method = Objects.requireNonNull(method, "method must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("ownerType")
        public _FinalStage ownerType(int ownerType) {
            this.ownerType = ownerType;
            return this;
        }

        @java.lang.Override
        public _FinalStage target(String target) {
            this.target = Optional.ofNullable(target);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "target", nulls = Nulls.SKIP)
        public _FinalStage target(Optional<String> target) {
            this.target = target;
            return this;
        }

        @java.lang.Override
        public _FinalStage status(Integer status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<Integer> status) {
            this.status = status;
            return this;
        }

        @java.lang.Override
        public _FinalStage source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public _FinalStage source(Optional<String> source) {
            this.source = source;
            return this;
        }

        @java.lang.Override
        public _FinalStage ownerId(String ownerId) {
            this.ownerId = Optional.ofNullable(ownerId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ownerId", nulls = Nulls.SKIP)
        public _FinalStage ownerId(Optional<String> ownerId) {
            this.ownerId = ownerId;
            return this;
        }

        @java.lang.Override
        public _FinalStage frequency(Frequencynotification frequency) {
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "frequency", nulls = Nulls.SKIP)
        public _FinalStage frequency(Optional<Frequencynotification> frequency) {
            this.frequency = frequency;
            return this;
        }

        @java.lang.Override
        public _FinalStage content(NotificationContent content) {
            this.content = Optional.ofNullable(content);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "content", nulls = Nulls.SKIP)
        public _FinalStage content(Optional<NotificationContent> content) {
            this.content = content;
            return this;
        }

        @java.lang.Override
        public NotificationData build() {
            return new NotificationData(
                    content, frequency, method, ownerId, ownerType, source, status, target, additionalProperties);
        }
    }
}
