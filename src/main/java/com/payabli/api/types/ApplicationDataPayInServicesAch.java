/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApplicationDataPayInServicesAch.Builder.class)
public final class ApplicationDataPayInServicesAch implements IAchSetup {
    private final Optional<Boolean> acceptCcd;

    private final Optional<Boolean> acceptPpd;

    private final Optional<Boolean> acceptWeb;

    private final Map<String, Object> additionalProperties;

    private ApplicationDataPayInServicesAch(
            Optional<Boolean> acceptCcd,
            Optional<Boolean> acceptPpd,
            Optional<Boolean> acceptWeb,
            Map<String, Object> additionalProperties) {
        this.acceptCcd = acceptCcd;
        this.acceptPpd = acceptPpd;
        this.acceptWeb = acceptWeb;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return CCD is an ACH SEC Code that can be used in ACH transactions by the user that indicates the transaction is a Corporate Credit or Debit Entry. Options are: <code>true</code> and <code>false</code>
     */
    @JsonProperty("acceptCCD")
    @java.lang.Override
    public Optional<Boolean> getAcceptCcd() {
        return acceptCcd;
    }

    /**
     * @return PPD is an ACH SEC Code that can be used in ACH transactions by the user that indicates the transaction is a Prearranged Payment and Deposit.
     */
    @JsonProperty("acceptPPD")
    @java.lang.Override
    public Optional<Boolean> getAcceptPpd() {
        return acceptPpd;
    }

    /**
     * @return Web is an ACH SEC Code that can be used in ACH transactions by the user that indicates the transaction is a Internet Initiated/Mobile Entry Options are <code>true</code> and <code>false</code>.
     */
    @JsonProperty("acceptWeb")
    @java.lang.Override
    public Optional<Boolean> getAcceptWeb() {
        return acceptWeb;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApplicationDataPayInServicesAch && equalTo((ApplicationDataPayInServicesAch) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApplicationDataPayInServicesAch other) {
        return acceptCcd.equals(other.acceptCcd)
                && acceptPpd.equals(other.acceptPpd)
                && acceptWeb.equals(other.acceptWeb);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.acceptCcd, this.acceptPpd, this.acceptWeb);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> acceptCcd = Optional.empty();

        private Optional<Boolean> acceptPpd = Optional.empty();

        private Optional<Boolean> acceptWeb = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ApplicationDataPayInServicesAch other) {
            acceptCcd(other.getAcceptCcd());
            acceptPpd(other.getAcceptPpd());
            acceptWeb(other.getAcceptWeb());
            return this;
        }

        /**
         * <p>CCD is an ACH SEC Code that can be used in ACH transactions by the user that indicates the transaction is a Corporate Credit or Debit Entry. Options are: <code>true</code> and <code>false</code></p>
         */
        @JsonSetter(value = "acceptCCD", nulls = Nulls.SKIP)
        public Builder acceptCcd(Optional<Boolean> acceptCcd) {
            this.acceptCcd = acceptCcd;
            return this;
        }

        public Builder acceptCcd(Boolean acceptCcd) {
            this.acceptCcd = Optional.ofNullable(acceptCcd);
            return this;
        }

        /**
         * <p>PPD is an ACH SEC Code that can be used in ACH transactions by the user that indicates the transaction is a Prearranged Payment and Deposit.</p>
         */
        @JsonSetter(value = "acceptPPD", nulls = Nulls.SKIP)
        public Builder acceptPpd(Optional<Boolean> acceptPpd) {
            this.acceptPpd = acceptPpd;
            return this;
        }

        public Builder acceptPpd(Boolean acceptPpd) {
            this.acceptPpd = Optional.ofNullable(acceptPpd);
            return this;
        }

        /**
         * <p>Web is an ACH SEC Code that can be used in ACH transactions by the user that indicates the transaction is a Internet Initiated/Mobile Entry Options are <code>true</code> and <code>false</code>.</p>
         */
        @JsonSetter(value = "acceptWeb", nulls = Nulls.SKIP)
        public Builder acceptWeb(Optional<Boolean> acceptWeb) {
            this.acceptWeb = acceptWeb;
            return this;
        }

        public Builder acceptWeb(Boolean acceptWeb) {
            this.acceptWeb = Optional.ofNullable(acceptWeb);
            return this;
        }

        public ApplicationDataPayInServicesAch build() {
            return new ApplicationDataPayInServicesAch(acceptCcd, acceptPpd, acceptWeb, additionalProperties);
        }
    }
}
