/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NoteElement.Builder.class)
public final class NoteElement {
    private final Optional<Boolean> enabled;

    private final Optional<String> header;

    private final Optional<Integer> order;

    private final Optional<String> placeholder;

    private final Optional<String> value;

    private final Map<String, Object> additionalProperties;

    private NoteElement(
            Optional<Boolean> enabled,
            Optional<String> header,
            Optional<Integer> order,
            Optional<String> placeholder,
            Optional<String> value,
            Map<String, Object> additionalProperties) {
        this.enabled = enabled;
        this.header = header;
        this.order = order;
        this.placeholder = placeholder;
        this.value = value;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("enabled")
    public Optional<Boolean> getEnabled() {
        return enabled;
    }

    /**
     * @return Header text for section
     */
    @JsonProperty("header")
    public Optional<String> getHeader() {
        return header;
    }

    @JsonProperty("order")
    public Optional<Integer> getOrder() {
        return order;
    }

    /**
     * @return Placeholder text for input field
     */
    @JsonProperty("placeholder")
    public Optional<String> getPlaceholder() {
        return placeholder;
    }

    /**
     * @return Pre-populated value for input field
     */
    @JsonProperty("value")
    public Optional<String> getValue() {
        return value;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NoteElement && equalTo((NoteElement) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NoteElement other) {
        return enabled.equals(other.enabled)
                && header.equals(other.header)
                && order.equals(other.order)
                && placeholder.equals(other.placeholder)
                && value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.enabled, this.header, this.order, this.placeholder, this.value);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> enabled = Optional.empty();

        private Optional<String> header = Optional.empty();

        private Optional<Integer> order = Optional.empty();

        private Optional<String> placeholder = Optional.empty();

        private Optional<String> value = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(NoteElement other) {
            enabled(other.getEnabled());
            header(other.getHeader());
            order(other.getOrder());
            placeholder(other.getPlaceholder());
            value(other.getValue());
            return this;
        }

        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * <p>Header text for section</p>
         */
        @JsonSetter(value = "header", nulls = Nulls.SKIP)
        public Builder header(Optional<String> header) {
            this.header = header;
            return this;
        }

        public Builder header(String header) {
            this.header = Optional.ofNullable(header);
            return this;
        }

        @JsonSetter(value = "order", nulls = Nulls.SKIP)
        public Builder order(Optional<Integer> order) {
            this.order = order;
            return this;
        }

        public Builder order(Integer order) {
            this.order = Optional.ofNullable(order);
            return this;
        }

        /**
         * <p>Placeholder text for input field</p>
         */
        @JsonSetter(value = "placeholder", nulls = Nulls.SKIP)
        public Builder placeholder(Optional<String> placeholder) {
            this.placeholder = placeholder;
            return this;
        }

        public Builder placeholder(String placeholder) {
            this.placeholder = Optional.ofNullable(placeholder);
            return this;
        }

        /**
         * <p>Pre-populated value for input field</p>
         */
        @JsonSetter(value = "value", nulls = Nulls.SKIP)
        public Builder value(Optional<String> value) {
            this.value = value;
            return this;
        }

        public Builder value(String value) {
            this.value = Optional.ofNullable(value);
            return this;
        }

        public NoteElement build() {
            return new NoteElement(enabled, header, order, placeholder, value, additionalProperties);
        }
    }
}
