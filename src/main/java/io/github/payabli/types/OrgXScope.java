/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrgXScope.Builder.class)
public final class OrgXScope {
    private final Optional<String> orgEntry;

    private final Optional<Long> orgId;

    private final Optional<Integer> orgType;

    private final Map<String, Object> additionalProperties;

    private OrgXScope(
            Optional<String> orgEntry,
            Optional<Long> orgId,
            Optional<Integer> orgType,
            Map<String, Object> additionalProperties) {
        this.orgEntry = orgEntry;
        this.orgId = orgId;
        this.orgType = orgType;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("orgEntry")
    public Optional<String> getOrgEntry() {
        return orgEntry;
    }

    @JsonProperty("orgId")
    public Optional<Long> getOrgId() {
        return orgId;
    }

    @JsonProperty("orgType")
    public Optional<Integer> getOrgType() {
        return orgType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrgXScope && equalTo((OrgXScope) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrgXScope other) {
        return orgEntry.equals(other.orgEntry) && orgId.equals(other.orgId) && orgType.equals(other.orgType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.orgEntry, this.orgId, this.orgType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> orgEntry = Optional.empty();

        private Optional<Long> orgId = Optional.empty();

        private Optional<Integer> orgType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrgXScope other) {
            orgEntry(other.getOrgEntry());
            orgId(other.getOrgId());
            orgType(other.getOrgType());
            return this;
        }

        @JsonSetter(value = "orgEntry", nulls = Nulls.SKIP)
        public Builder orgEntry(Optional<String> orgEntry) {
            this.orgEntry = orgEntry;
            return this;
        }

        public Builder orgEntry(String orgEntry) {
            this.orgEntry = Optional.ofNullable(orgEntry);
            return this;
        }

        @JsonSetter(value = "orgId", nulls = Nulls.SKIP)
        public Builder orgId(Optional<Long> orgId) {
            this.orgId = orgId;
            return this;
        }

        public Builder orgId(Long orgId) {
            this.orgId = Optional.ofNullable(orgId);
            return this;
        }

        @JsonSetter(value = "orgType", nulls = Nulls.SKIP)
        public Builder orgType(Optional<Integer> orgType) {
            this.orgType = orgType;
            return this;
        }

        public Builder orgType(Integer orgType) {
            this.orgType = Optional.ofNullable(orgType);
            return this;
        }

        public OrgXScope build() {
            return new OrgXScope(orgEntry, orgId, orgType, additionalProperties);
        }
    }
}
