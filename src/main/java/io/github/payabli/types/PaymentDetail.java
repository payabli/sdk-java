/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentDetail.Builder.class)
public final class PaymentDetail {
    private final Optional<List<PaymentCategories>> categories;

    private final Optional<Map<String, Object>> checkImage;

    private final Optional<String> checkNumber;

    private final Optional<String> currency;

    private final Optional<Double> serviceFee;

    private final Optional<List<SplitFundingContent>> splitFunding;

    private final double totalAmount;

    private final Map<String, Object> additionalProperties;

    private PaymentDetail(
            Optional<List<PaymentCategories>> categories,
            Optional<Map<String, Object>> checkImage,
            Optional<String> checkNumber,
            Optional<String> currency,
            Optional<Double> serviceFee,
            Optional<List<SplitFundingContent>> splitFunding,
            double totalAmount,
            Map<String, Object> additionalProperties) {
        this.categories = categories;
        this.checkImage = checkImage;
        this.checkNumber = checkNumber;
        this.currency = currency;
        this.serviceFee = serviceFee;
        this.splitFunding = splitFunding;
        this.totalAmount = totalAmount;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Array of payment categories/line items describing the amount to be paid.
     * <strong>Note</strong>: These categories are for information only and aren't validated against the total amount provided.
     */
    @JsonProperty("categories")
    public Optional<List<PaymentCategories>> getCategories() {
        return categories;
    }

    /**
     * @return Object containing image of paper check.
     */
    @JsonProperty("checkImage")
    public Optional<Map<String, Object>> getCheckImage() {
        return checkImage;
    }

    /**
     * @return A check number to be used in the ach transaction. <strong>Required</strong> for payment method = 'check'.
     */
    @JsonProperty("checkNumber")
    public Optional<String> getCheckNumber() {
        return checkNumber;
    }

    /**
     * @return The currency for the transaction, <code>USD</code> or <code>CAD</code>. If your paypoint is configured for CAD, you must send the <code>CAD</code> value in this field, otherwise it defaults to USD, which will cause the transaction to fail.
     */
    @JsonProperty("currency")
    public Optional<String> getCurrency() {
        return currency;
    }

    /**
     * @return Service fee to be deducted from the total amount. This amount must be a number, percentages aren't accepted. If you are using a percentage-based fee schedule, you must calculate the value manually.
     */
    @JsonProperty("serviceFee")
    public Optional<Double> getServiceFee() {
        return serviceFee;
    }

    /**
     * @return Split funding instructions for the transaction. See <a href="/developers/developer-guides/money-in-split-funding">Split a Transaction</a> for more.
     */
    @JsonProperty("splitFunding")
    public Optional<List<SplitFundingContent>> getSplitFunding() {
        return splitFunding;
    }

    /**
     * @return Total amount to be charged. If a service fee is sent, then this amount should include the service fee.&quot;
     */
    @JsonProperty("totalAmount")
    public double getTotalAmount() {
        return totalAmount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentDetail && equalTo((PaymentDetail) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentDetail other) {
        return categories.equals(other.categories)
                && checkImage.equals(other.checkImage)
                && checkNumber.equals(other.checkNumber)
                && currency.equals(other.currency)
                && serviceFee.equals(other.serviceFee)
                && splitFunding.equals(other.splitFunding)
                && totalAmount == other.totalAmount;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.categories,
                this.checkImage,
                this.checkNumber,
                this.currency,
                this.serviceFee,
                this.splitFunding,
                this.totalAmount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TotalAmountStage builder() {
        return new Builder();
    }

    public interface TotalAmountStage {
        /**
         * <p>Total amount to be charged. If a service fee is sent, then this amount should include the service fee.&quot;</p>
         */
        _FinalStage totalAmount(double totalAmount);

        Builder from(PaymentDetail other);
    }

    public interface _FinalStage {
        PaymentDetail build();

        /**
         * <p>Array of payment categories/line items describing the amount to be paid.
         * <strong>Note</strong>: These categories are for information only and aren't validated against the total amount provided.</p>
         */
        _FinalStage categories(Optional<List<PaymentCategories>> categories);

        _FinalStage categories(List<PaymentCategories> categories);

        /**
         * <p>Object containing image of paper check.</p>
         */
        _FinalStage checkImage(Optional<Map<String, Object>> checkImage);

        _FinalStage checkImage(Map<String, Object> checkImage);

        /**
         * <p>A check number to be used in the ach transaction. <strong>Required</strong> for payment method = 'check'.</p>
         */
        _FinalStage checkNumber(Optional<String> checkNumber);

        _FinalStage checkNumber(String checkNumber);

        /**
         * <p>The currency for the transaction, <code>USD</code> or <code>CAD</code>. If your paypoint is configured for CAD, you must send the <code>CAD</code> value in this field, otherwise it defaults to USD, which will cause the transaction to fail.</p>
         */
        _FinalStage currency(Optional<String> currency);

        _FinalStage currency(String currency);

        /**
         * <p>Service fee to be deducted from the total amount. This amount must be a number, percentages aren't accepted. If you are using a percentage-based fee schedule, you must calculate the value manually.</p>
         */
        _FinalStage serviceFee(Optional<Double> serviceFee);

        _FinalStage serviceFee(Double serviceFee);

        /**
         * <p>Split funding instructions for the transaction. See <a href="/developers/developer-guides/money-in-split-funding">Split a Transaction</a> for more.</p>
         */
        _FinalStage splitFunding(Optional<List<SplitFundingContent>> splitFunding);

        _FinalStage splitFunding(List<SplitFundingContent> splitFunding);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TotalAmountStage, _FinalStage {
        private double totalAmount;

        private Optional<List<SplitFundingContent>> splitFunding = Optional.empty();

        private Optional<Double> serviceFee = Optional.empty();

        private Optional<String> currency = Optional.empty();

        private Optional<String> checkNumber = Optional.empty();

        private Optional<Map<String, Object>> checkImage = Optional.empty();

        private Optional<List<PaymentCategories>> categories = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaymentDetail other) {
            categories(other.getCategories());
            checkImage(other.getCheckImage());
            checkNumber(other.getCheckNumber());
            currency(other.getCurrency());
            serviceFee(other.getServiceFee());
            splitFunding(other.getSplitFunding());
            totalAmount(other.getTotalAmount());
            return this;
        }

        /**
         * <p>Total amount to be charged. If a service fee is sent, then this amount should include the service fee.&quot;</p>
         * <p>Total amount to be charged. If a service fee is sent, then this amount should include the service fee.&quot;</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("totalAmount")
        public _FinalStage totalAmount(double totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * <p>Split funding instructions for the transaction. See <a href="/developers/developer-guides/money-in-split-funding">Split a Transaction</a> for more.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage splitFunding(List<SplitFundingContent> splitFunding) {
            this.splitFunding = Optional.ofNullable(splitFunding);
            return this;
        }

        /**
         * <p>Split funding instructions for the transaction. See <a href="/developers/developer-guides/money-in-split-funding">Split a Transaction</a> for more.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "splitFunding", nulls = Nulls.SKIP)
        public _FinalStage splitFunding(Optional<List<SplitFundingContent>> splitFunding) {
            this.splitFunding = splitFunding;
            return this;
        }

        /**
         * <p>Service fee to be deducted from the total amount. This amount must be a number, percentages aren't accepted. If you are using a percentage-based fee schedule, you must calculate the value manually.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serviceFee(Double serviceFee) {
            this.serviceFee = Optional.ofNullable(serviceFee);
            return this;
        }

        /**
         * <p>Service fee to be deducted from the total amount. This amount must be a number, percentages aren't accepted. If you are using a percentage-based fee schedule, you must calculate the value manually.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "serviceFee", nulls = Nulls.SKIP)
        public _FinalStage serviceFee(Optional<Double> serviceFee) {
            this.serviceFee = serviceFee;
            return this;
        }

        /**
         * <p>The currency for the transaction, <code>USD</code> or <code>CAD</code>. If your paypoint is configured for CAD, you must send the <code>CAD</code> value in this field, otherwise it defaults to USD, which will cause the transaction to fail.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage currency(String currency) {
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * <p>The currency for the transaction, <code>USD</code> or <code>CAD</code>. If your paypoint is configured for CAD, you must send the <code>CAD</code> value in this field, otherwise it defaults to USD, which will cause the transaction to fail.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public _FinalStage currency(Optional<String> currency) {
            this.currency = currency;
            return this;
        }

        /**
         * <p>A check number to be used in the ach transaction. <strong>Required</strong> for payment method = 'check'.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage checkNumber(String checkNumber) {
            this.checkNumber = Optional.ofNullable(checkNumber);
            return this;
        }

        /**
         * <p>A check number to be used in the ach transaction. <strong>Required</strong> for payment method = 'check'.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "checkNumber", nulls = Nulls.SKIP)
        public _FinalStage checkNumber(Optional<String> checkNumber) {
            this.checkNumber = checkNumber;
            return this;
        }

        /**
         * <p>Object containing image of paper check.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage checkImage(Map<String, Object> checkImage) {
            this.checkImage = Optional.ofNullable(checkImage);
            return this;
        }

        /**
         * <p>Object containing image of paper check.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "checkImage", nulls = Nulls.SKIP)
        public _FinalStage checkImage(Optional<Map<String, Object>> checkImage) {
            this.checkImage = checkImage;
            return this;
        }

        /**
         * <p>Array of payment categories/line items describing the amount to be paid.
         * <strong>Note</strong>: These categories are for information only and aren't validated against the total amount provided.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage categories(List<PaymentCategories> categories) {
            this.categories = Optional.ofNullable(categories);
            return this;
        }

        /**
         * <p>Array of payment categories/line items describing the amount to be paid.
         * <strong>Note</strong>: These categories are for information only and aren't validated against the total amount provided.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "categories", nulls = Nulls.SKIP)
        public _FinalStage categories(Optional<List<PaymentCategories>> categories) {
            this.categories = categories;
            return this;
        }

        @java.lang.Override
        public PaymentDetail build() {
            return new PaymentDetail(
                    categories,
                    checkImage,
                    checkNumber,
                    currency,
                    serviceFee,
                    splitFunding,
                    totalAmount,
                    additionalProperties);
        }
    }
}
