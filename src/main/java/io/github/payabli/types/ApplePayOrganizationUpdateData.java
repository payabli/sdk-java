/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApplePayOrganizationUpdateData.Builder.class)
public final class ApplePayOrganizationUpdateData {
    private final Optional<OffsetDateTime> createdAt;

    private final Optional<String> id;

    private final Optional<String> jobId;

    private final Optional<String> jobStatus;

    private final Optional<Long> organizationId;

    private final Optional<String> type;

    private final Optional<OffsetDateTime> updatedAt;

    private final Optional<OrganizationUpdates> updates;

    private final Map<String, Object> additionalProperties;

    private ApplePayOrganizationUpdateData(
            Optional<OffsetDateTime> createdAt,
            Optional<String> id,
            Optional<String> jobId,
            Optional<String> jobStatus,
            Optional<Long> organizationId,
            Optional<String> type,
            Optional<OffsetDateTime> updatedAt,
            Optional<OrganizationUpdates> updates,
            Map<String, Object> additionalProperties) {
        this.createdAt = createdAt;
        this.id = id;
        this.jobId = jobId;
        this.jobStatus = jobStatus;
        this.organizationId = organizationId;
        this.type = type;
        this.updatedAt = updatedAt;
        this.updates = updates;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("createdAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return Internal ID for the Apple Pay organization update.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    @JsonProperty("jobId")
    public Optional<String> getJobId() {
        return jobId;
    }

    @JsonProperty("jobStatus")
    public Optional<String> getJobStatus() {
        return jobStatus;
    }

    @JsonProperty("organizationId")
    public Optional<Long> getOrganizationId() {
        return organizationId;
    }

    /**
     * @return The record type, in this context it will always be <code>ApplePayOrganizationUpdate</code>.
     */
    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    @JsonProperty("updatedAt")
    public Optional<OffsetDateTime> getUpdatedAt() {
        return updatedAt;
    }

    @JsonProperty("updates")
    public Optional<OrganizationUpdates> getUpdates() {
        return updates;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApplePayOrganizationUpdateData && equalTo((ApplePayOrganizationUpdateData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApplePayOrganizationUpdateData other) {
        return createdAt.equals(other.createdAt)
                && id.equals(other.id)
                && jobId.equals(other.jobId)
                && jobStatus.equals(other.jobStatus)
                && organizationId.equals(other.organizationId)
                && type.equals(other.type)
                && updatedAt.equals(other.updatedAt)
                && updates.equals(other.updates);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.createdAt,
                this.id,
                this.jobId,
                this.jobStatus,
                this.organizationId,
                this.type,
                this.updatedAt,
                this.updates);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<String> jobId = Optional.empty();

        private Optional<String> jobStatus = Optional.empty();

        private Optional<Long> organizationId = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Optional<OrganizationUpdates> updates = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ApplePayOrganizationUpdateData other) {
            createdAt(other.getCreatedAt());
            id(other.getId());
            jobId(other.getJobId());
            jobStatus(other.getJobStatus());
            organizationId(other.getOrganizationId());
            type(other.getType());
            updatedAt(other.getUpdatedAt());
            updates(other.getUpdates());
            return this;
        }

        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>Internal ID for the Apple Pay organization update.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "jobId", nulls = Nulls.SKIP)
        public Builder jobId(Optional<String> jobId) {
            this.jobId = jobId;
            return this;
        }

        public Builder jobId(String jobId) {
            this.jobId = Optional.ofNullable(jobId);
            return this;
        }

        @JsonSetter(value = "jobStatus", nulls = Nulls.SKIP)
        public Builder jobStatus(Optional<String> jobStatus) {
            this.jobStatus = jobStatus;
            return this;
        }

        public Builder jobStatus(String jobStatus) {
            this.jobStatus = Optional.ofNullable(jobStatus);
            return this;
        }

        @JsonSetter(value = "organizationId", nulls = Nulls.SKIP)
        public Builder organizationId(Optional<Long> organizationId) {
            this.organizationId = organizationId;
            return this;
        }

        public Builder organizationId(Long organizationId) {
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        /**
         * <p>The record type, in this context it will always be <code>ApplePayOrganizationUpdate</code>.</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        @JsonSetter(value = "updatedAt", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        @JsonSetter(value = "updates", nulls = Nulls.SKIP)
        public Builder updates(Optional<OrganizationUpdates> updates) {
            this.updates = updates;
            return this;
        }

        public Builder updates(OrganizationUpdates updates) {
            this.updates = Optional.ofNullable(updates);
            return this;
        }

        public ApplePayOrganizationUpdateData build() {
            return new ApplePayOrganizationUpdateData(
                    createdAt, id, jobId, jobStatus, organizationId, type, updatedAt, updates, additionalProperties);
        }
    }
}
