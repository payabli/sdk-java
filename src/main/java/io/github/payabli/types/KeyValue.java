/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = KeyValue.Builder.class)
public final class KeyValue {
    private final Optional<String> key;

    private final Optional<Boolean> readOnly;

    private final Optional<String> value;

    private final Map<String, Object> additionalProperties;

    private KeyValue(
            Optional<String> key,
            Optional<Boolean> readOnly,
            Optional<String> value,
            Map<String, Object> additionalProperties) {
        this.key = key;
        this.readOnly = readOnly;
        this.value = value;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Key name.
     */
    @JsonProperty("key")
    public Optional<String> getKey() {
        return key;
    }

    @JsonProperty("readOnly")
    public Optional<Boolean> getReadOnly() {
        return readOnly;
    }

    /**
     * @return Key value.
     */
    @JsonProperty("value")
    public Optional<String> getValue() {
        return value;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof KeyValue && equalTo((KeyValue) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(KeyValue other) {
        return key.equals(other.key) && readOnly.equals(other.readOnly) && value.equals(other.value);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.key, this.readOnly, this.value);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> key = Optional.empty();

        private Optional<Boolean> readOnly = Optional.empty();

        private Optional<String> value = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(KeyValue other) {
            key(other.getKey());
            readOnly(other.getReadOnly());
            value(other.getValue());
            return this;
        }

        /**
         * <p>Key name.</p>
         */
        @JsonSetter(value = "key", nulls = Nulls.SKIP)
        public Builder key(Optional<String> key) {
            this.key = key;
            return this;
        }

        public Builder key(String key) {
            this.key = Optional.ofNullable(key);
            return this;
        }

        @JsonSetter(value = "readOnly", nulls = Nulls.SKIP)
        public Builder readOnly(Optional<Boolean> readOnly) {
            this.readOnly = readOnly;
            return this;
        }

        public Builder readOnly(Boolean readOnly) {
            this.readOnly = Optional.ofNullable(readOnly);
            return this;
        }

        /**
         * <p>Key value.</p>
         */
        @JsonSetter(value = "value", nulls = Nulls.SKIP)
        public Builder value(Optional<String> value) {
            this.value = value;
            return this;
        }

        public Builder value(String value) {
            this.value = Optional.ofNullable(value);
            return this;
        }

        public KeyValue build() {
            return new KeyValue(key, readOnly, value, additionalProperties);
        }
    }
}
