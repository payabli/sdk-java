/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UserQueryRecord.Builder.class)
public final class UserQueryRecord {
    private final Optional<List<UsrAccess>> access;

    private final Optional<String> additionalData;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<String> email;

    private final Optional<String> language;

    private final Optional<OffsetDateTime> lastAccess;

    private final Optional<String> name;

    private final Optional<String> phone;

    private final Optional<List<OrgXScope>> scope;

    private final Optional<String> snData;

    private final Optional<String> snIdentifier;

    private final Optional<String> snProvider;

    private final Optional<Integer> timeZone;

    private final Optional<Long> userId;

    private final Optional<Boolean> usrMfa;

    private final Optional<Integer> usrMfaMode;

    private final Optional<Integer> usrStatus;

    private final Map<String, Object> additionalProperties;

    private UserQueryRecord(
            Optional<List<UsrAccess>> access,
            Optional<String> additionalData,
            Optional<OffsetDateTime> createdAt,
            Optional<String> email,
            Optional<String> language,
            Optional<OffsetDateTime> lastAccess,
            Optional<String> name,
            Optional<String> phone,
            Optional<List<OrgXScope>> scope,
            Optional<String> snData,
            Optional<String> snIdentifier,
            Optional<String> snProvider,
            Optional<Integer> timeZone,
            Optional<Long> userId,
            Optional<Boolean> usrMfa,
            Optional<Integer> usrMfaMode,
            Optional<Integer> usrStatus,
            Map<String, Object> additionalProperties) {
        this.access = access;
        this.additionalData = additionalData;
        this.createdAt = createdAt;
        this.email = email;
        this.language = language;
        this.lastAccess = lastAccess;
        this.name = name;
        this.phone = phone;
        this.scope = scope;
        this.snData = snData;
        this.snIdentifier = snIdentifier;
        this.snProvider = snProvider;
        this.timeZone = timeZone;
        this.userId = userId;
        this.usrMfa = usrMfa;
        this.usrMfaMode = usrMfaMode;
        this.usrStatus = usrStatus;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("Access")
    public Optional<List<UsrAccess>> getAccess() {
        return access;
    }

    @JsonProperty("AdditionalData")
    public Optional<String> getAdditionalData() {
        return additionalData;
    }

    /**
     * @return The timestamp for the user's creation, in UTC.
     */
    @JsonProperty("createdAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The user's email address.
     */
    @JsonProperty("Email")
    public Optional<String> getEmail() {
        return email;
    }

    @JsonProperty("language")
    public Optional<String> getLanguage() {
        return language;
    }

    /**
     * @return The timestamp for the user's last activity, in UTC.
     */
    @JsonProperty("lastAccess")
    public Optional<OffsetDateTime> getLastAccess() {
        return lastAccess;
    }

    @JsonProperty("Name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The user's phone number.
     */
    @JsonProperty("Phone")
    public Optional<String> getPhone() {
        return phone;
    }

    @JsonProperty("Scope")
    public Optional<List<OrgXScope>> getScope() {
        return scope;
    }

    /**
     * @return Additional data provided by the social network related to the customer.
     */
    @JsonProperty("snData")
    public Optional<String> getSnData() {
        return snData;
    }

    /**
     * @return Identifier or token for customer in linked social network.
     */
    @JsonProperty("snIdentifier")
    public Optional<String> getSnIdentifier() {
        return snIdentifier;
    }

    /**
     * @return Social network linked to customer. Possible values: facebook, google, twitter, microsoft.
     */
    @JsonProperty("snProvider")
    public Optional<String> getSnProvider() {
        return snProvider;
    }

    @JsonProperty("timeZone")
    public Optional<Integer> getTimeZone() {
        return timeZone;
    }

    /**
     * @return The user's ID in Payabli.
     */
    @JsonProperty("userId")
    public Optional<Long> getUserId() {
        return userId;
    }

    @JsonProperty("UsrMFA")
    public Optional<Boolean> getUsrMfa() {
        return usrMfa;
    }

    @JsonProperty("UsrMFAMode")
    public Optional<Integer> getUsrMfaMode() {
        return usrMfaMode;
    }

    @JsonProperty("UsrStatus")
    public Optional<Integer> getUsrStatus() {
        return usrStatus;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserQueryRecord && equalTo((UserQueryRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserQueryRecord other) {
        return access.equals(other.access)
                && additionalData.equals(other.additionalData)
                && createdAt.equals(other.createdAt)
                && email.equals(other.email)
                && language.equals(other.language)
                && lastAccess.equals(other.lastAccess)
                && name.equals(other.name)
                && phone.equals(other.phone)
                && scope.equals(other.scope)
                && snData.equals(other.snData)
                && snIdentifier.equals(other.snIdentifier)
                && snProvider.equals(other.snProvider)
                && timeZone.equals(other.timeZone)
                && userId.equals(other.userId)
                && usrMfa.equals(other.usrMfa)
                && usrMfaMode.equals(other.usrMfaMode)
                && usrStatus.equals(other.usrStatus);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.access,
                this.additionalData,
                this.createdAt,
                this.email,
                this.language,
                this.lastAccess,
                this.name,
                this.phone,
                this.scope,
                this.snData,
                this.snIdentifier,
                this.snProvider,
                this.timeZone,
                this.userId,
                this.usrMfa,
                this.usrMfaMode,
                this.usrStatus);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<UsrAccess>> access = Optional.empty();

        private Optional<String> additionalData = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> language = Optional.empty();

        private Optional<OffsetDateTime> lastAccess = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> phone = Optional.empty();

        private Optional<List<OrgXScope>> scope = Optional.empty();

        private Optional<String> snData = Optional.empty();

        private Optional<String> snIdentifier = Optional.empty();

        private Optional<String> snProvider = Optional.empty();

        private Optional<Integer> timeZone = Optional.empty();

        private Optional<Long> userId = Optional.empty();

        private Optional<Boolean> usrMfa = Optional.empty();

        private Optional<Integer> usrMfaMode = Optional.empty();

        private Optional<Integer> usrStatus = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UserQueryRecord other) {
            access(other.getAccess());
            additionalData(other.getAdditionalData());
            createdAt(other.getCreatedAt());
            email(other.getEmail());
            language(other.getLanguage());
            lastAccess(other.getLastAccess());
            name(other.getName());
            phone(other.getPhone());
            scope(other.getScope());
            snData(other.getSnData());
            snIdentifier(other.getSnIdentifier());
            snProvider(other.getSnProvider());
            timeZone(other.getTimeZone());
            userId(other.getUserId());
            usrMfa(other.getUsrMfa());
            usrMfaMode(other.getUsrMfaMode());
            usrStatus(other.getUsrStatus());
            return this;
        }

        @JsonSetter(value = "Access", nulls = Nulls.SKIP)
        public Builder access(Optional<List<UsrAccess>> access) {
            this.access = access;
            return this;
        }

        public Builder access(List<UsrAccess> access) {
            this.access = Optional.ofNullable(access);
            return this;
        }

        @JsonSetter(value = "AdditionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<String> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(String additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        /**
         * <p>The timestamp for the user's creation, in UTC.</p>
         */
        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The user's email address.</p>
         */
        @JsonSetter(value = "Email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        @JsonSetter(value = "language", nulls = Nulls.SKIP)
        public Builder language(Optional<String> language) {
            this.language = language;
            return this;
        }

        public Builder language(String language) {
            this.language = Optional.ofNullable(language);
            return this;
        }

        /**
         * <p>The timestamp for the user's last activity, in UTC.</p>
         */
        @JsonSetter(value = "lastAccess", nulls = Nulls.SKIP)
        public Builder lastAccess(Optional<OffsetDateTime> lastAccess) {
            this.lastAccess = lastAccess;
            return this;
        }

        public Builder lastAccess(OffsetDateTime lastAccess) {
            this.lastAccess = Optional.ofNullable(lastAccess);
            return this;
        }

        @JsonSetter(value = "Name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>The user's phone number.</p>
         */
        @JsonSetter(value = "Phone", nulls = Nulls.SKIP)
        public Builder phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        @JsonSetter(value = "Scope", nulls = Nulls.SKIP)
        public Builder scope(Optional<List<OrgXScope>> scope) {
            this.scope = scope;
            return this;
        }

        public Builder scope(List<OrgXScope> scope) {
            this.scope = Optional.ofNullable(scope);
            return this;
        }

        /**
         * <p>Additional data provided by the social network related to the customer.</p>
         */
        @JsonSetter(value = "snData", nulls = Nulls.SKIP)
        public Builder snData(Optional<String> snData) {
            this.snData = snData;
            return this;
        }

        public Builder snData(String snData) {
            this.snData = Optional.ofNullable(snData);
            return this;
        }

        /**
         * <p>Identifier or token for customer in linked social network.</p>
         */
        @JsonSetter(value = "snIdentifier", nulls = Nulls.SKIP)
        public Builder snIdentifier(Optional<String> snIdentifier) {
            this.snIdentifier = snIdentifier;
            return this;
        }

        public Builder snIdentifier(String snIdentifier) {
            this.snIdentifier = Optional.ofNullable(snIdentifier);
            return this;
        }

        /**
         * <p>Social network linked to customer. Possible values: facebook, google, twitter, microsoft.</p>
         */
        @JsonSetter(value = "snProvider", nulls = Nulls.SKIP)
        public Builder snProvider(Optional<String> snProvider) {
            this.snProvider = snProvider;
            return this;
        }

        public Builder snProvider(String snProvider) {
            this.snProvider = Optional.ofNullable(snProvider);
            return this;
        }

        @JsonSetter(value = "timeZone", nulls = Nulls.SKIP)
        public Builder timeZone(Optional<Integer> timeZone) {
            this.timeZone = timeZone;
            return this;
        }

        public Builder timeZone(Integer timeZone) {
            this.timeZone = Optional.ofNullable(timeZone);
            return this;
        }

        /**
         * <p>The user's ID in Payabli.</p>
         */
        @JsonSetter(value = "userId", nulls = Nulls.SKIP)
        public Builder userId(Optional<Long> userId) {
            this.userId = userId;
            return this;
        }

        public Builder userId(Long userId) {
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        @JsonSetter(value = "UsrMFA", nulls = Nulls.SKIP)
        public Builder usrMfa(Optional<Boolean> usrMfa) {
            this.usrMfa = usrMfa;
            return this;
        }

        public Builder usrMfa(Boolean usrMfa) {
            this.usrMfa = Optional.ofNullable(usrMfa);
            return this;
        }

        @JsonSetter(value = "UsrMFAMode", nulls = Nulls.SKIP)
        public Builder usrMfaMode(Optional<Integer> usrMfaMode) {
            this.usrMfaMode = usrMfaMode;
            return this;
        }

        public Builder usrMfaMode(Integer usrMfaMode) {
            this.usrMfaMode = Optional.ofNullable(usrMfaMode);
            return this;
        }

        @JsonSetter(value = "UsrStatus", nulls = Nulls.SKIP)
        public Builder usrStatus(Optional<Integer> usrStatus) {
            this.usrStatus = usrStatus;
            return this;
        }

        public Builder usrStatus(Integer usrStatus) {
            this.usrStatus = Optional.ofNullable(usrStatus);
            return this;
        }

        public UserQueryRecord build() {
            return new UserQueryRecord(
                    access,
                    additionalData,
                    createdAt,
                    email,
                    language,
                    lastAccess,
                    name,
                    phone,
                    scope,
                    snData,
                    snIdentifier,
                    snProvider,
                    timeZone,
                    userId,
                    usrMfa,
                    usrMfaMode,
                    usrStatus,
                    additionalProperties);
        }
    }
}
