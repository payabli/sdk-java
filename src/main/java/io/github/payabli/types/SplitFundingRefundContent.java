/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SplitFundingRefundContent.Builder.class)
public final class SplitFundingRefundContent {
    private final Optional<String> accountId;

    private final Optional<Double> amount;

    private final Optional<String> description;

    private final Optional<String> originationEntryPoint;

    private final Map<String, Object> additionalProperties;

    private SplitFundingRefundContent(
            Optional<String> accountId,
            Optional<Double> amount,
            Optional<String> description,
            Optional<String> originationEntryPoint,
            Map<String, Object> additionalProperties) {
        this.accountId = accountId;
        this.amount = amount;
        this.description = description;
        this.originationEntryPoint = originationEntryPoint;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The accountId for the account the transaction was routed to.
     */
    @JsonProperty("accountId")
    public Optional<String> getAccountId() {
        return accountId;
    }

    /**
     * @return The amount to refund to this account.
     */
    @JsonProperty("amount")
    public Optional<Double> getAmount() {
        return amount;
    }

    /**
     * @return Refund description.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return The entrypoint the transaction belongs to.
     */
    @JsonProperty("originationEntryPoint")
    public Optional<String> getOriginationEntryPoint() {
        return originationEntryPoint;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SplitFundingRefundContent && equalTo((SplitFundingRefundContent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SplitFundingRefundContent other) {
        return accountId.equals(other.accountId)
                && amount.equals(other.amount)
                && description.equals(other.description)
                && originationEntryPoint.equals(other.originationEntryPoint);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.accountId, this.amount, this.description, this.originationEntryPoint);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> accountId = Optional.empty();

        private Optional<Double> amount = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> originationEntryPoint = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SplitFundingRefundContent other) {
            accountId(other.getAccountId());
            amount(other.getAmount());
            description(other.getDescription());
            originationEntryPoint(other.getOriginationEntryPoint());
            return this;
        }

        /**
         * <p>The accountId for the account the transaction was routed to.</p>
         */
        @JsonSetter(value = "accountId", nulls = Nulls.SKIP)
        public Builder accountId(Optional<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            this.accountId = Optional.ofNullable(accountId);
            return this;
        }

        /**
         * <p>The amount to refund to this account.</p>
         */
        @JsonSetter(value = "amount", nulls = Nulls.SKIP)
        public Builder amount(Optional<Double> amount) {
            this.amount = amount;
            return this;
        }

        public Builder amount(Double amount) {
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * <p>Refund description.</p>
         */
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>The entrypoint the transaction belongs to.</p>
         */
        @JsonSetter(value = "originationEntryPoint", nulls = Nulls.SKIP)
        public Builder originationEntryPoint(Optional<String> originationEntryPoint) {
            this.originationEntryPoint = originationEntryPoint;
            return this;
        }

        public Builder originationEntryPoint(String originationEntryPoint) {
            this.originationEntryPoint = Optional.ofNullable(originationEntryPoint);
            return this;
        }

        public SplitFundingRefundContent build() {
            return new SplitFundingRefundContent(
                    accountId, amount, description, originationEntryPoint, additionalProperties);
        }
    }
}
