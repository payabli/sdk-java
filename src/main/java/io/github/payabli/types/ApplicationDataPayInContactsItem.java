/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApplicationDataPayInContactsItem.Builder.class)
public final class ApplicationDataPayInContactsItem implements IContacts {
    private final Optional<String> contactEmail;

    private final Optional<String> contactName;

    private final Optional<String> contactPhone;

    private final Optional<String> contactTitle;

    private final Optional<String> additionalData;

    private final Map<String, Object> additionalProperties;

    private ApplicationDataPayInContactsItem(
            Optional<String> contactEmail,
            Optional<String> contactName,
            Optional<String> contactPhone,
            Optional<String> contactTitle,
            Optional<String> additionalData,
            Map<String, Object> additionalProperties) {
        this.contactEmail = contactEmail;
        this.contactName = contactName;
        this.contactPhone = contactPhone;
        this.contactTitle = contactTitle;
        this.additionalData = additionalData;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Contact email address.
     */
    @JsonProperty("contactEmail")
    @java.lang.Override
    public Optional<String> getContactEmail() {
        return contactEmail;
    }

    /**
     * @return Contact name.
     */
    @JsonProperty("contactName")
    @java.lang.Override
    public Optional<String> getContactName() {
        return contactName;
    }

    /**
     * @return Contact phone number.
     */
    @JsonProperty("contactPhone")
    @java.lang.Override
    public Optional<String> getContactPhone() {
        return contactPhone;
    }

    /**
     * @return Contact title.
     */
    @JsonProperty("contactTitle")
    @java.lang.Override
    public Optional<String> getContactTitle() {
        return contactTitle;
    }

    @JsonProperty("additionalData")
    @java.lang.Override
    public Optional<String> getAdditionalData() {
        return additionalData;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApplicationDataPayInContactsItem && equalTo((ApplicationDataPayInContactsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApplicationDataPayInContactsItem other) {
        return contactEmail.equals(other.contactEmail)
                && contactName.equals(other.contactName)
                && contactPhone.equals(other.contactPhone)
                && contactTitle.equals(other.contactTitle)
                && additionalData.equals(other.additionalData);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.contactEmail, this.contactName, this.contactPhone, this.contactTitle, this.additionalData);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> contactEmail = Optional.empty();

        private Optional<String> contactName = Optional.empty();

        private Optional<String> contactPhone = Optional.empty();

        private Optional<String> contactTitle = Optional.empty();

        private Optional<String> additionalData = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ApplicationDataPayInContactsItem other) {
            contactEmail(other.getContactEmail());
            contactName(other.getContactName());
            contactPhone(other.getContactPhone());
            contactTitle(other.getContactTitle());
            additionalData(other.getAdditionalData());
            return this;
        }

        /**
         * <p>Contact email address.</p>
         */
        @JsonSetter(value = "contactEmail", nulls = Nulls.SKIP)
        public Builder contactEmail(Optional<String> contactEmail) {
            this.contactEmail = contactEmail;
            return this;
        }

        public Builder contactEmail(String contactEmail) {
            this.contactEmail = Optional.ofNullable(contactEmail);
            return this;
        }

        /**
         * <p>Contact name.</p>
         */
        @JsonSetter(value = "contactName", nulls = Nulls.SKIP)
        public Builder contactName(Optional<String> contactName) {
            this.contactName = contactName;
            return this;
        }

        public Builder contactName(String contactName) {
            this.contactName = Optional.ofNullable(contactName);
            return this;
        }

        /**
         * <p>Contact phone number.</p>
         */
        @JsonSetter(value = "contactPhone", nulls = Nulls.SKIP)
        public Builder contactPhone(Optional<String> contactPhone) {
            this.contactPhone = contactPhone;
            return this;
        }

        public Builder contactPhone(String contactPhone) {
            this.contactPhone = Optional.ofNullable(contactPhone);
            return this;
        }

        /**
         * <p>Contact title.</p>
         */
        @JsonSetter(value = "contactTitle", nulls = Nulls.SKIP)
        public Builder contactTitle(Optional<String> contactTitle) {
            this.contactTitle = contactTitle;
            return this;
        }

        public Builder contactTitle(String contactTitle) {
            this.contactTitle = Optional.ofNullable(contactTitle);
            return this;
        }

        @JsonSetter(value = "additionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<String> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(String additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        public ApplicationDataPayInContactsItem build() {
            return new ApplicationDataPayInContactsItem(
                    contactEmail, contactName, contactPhone, contactTitle, additionalData, additionalProperties);
        }
    }
}
