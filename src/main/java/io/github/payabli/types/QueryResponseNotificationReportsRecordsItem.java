/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryResponseNotificationReportsRecordsItem.Builder.class)
public final class QueryResponseNotificationReportsRecordsItem {
    private final Optional<OffsetDateTime> createdAt;

    private final Optional<Integer> id;

    private final Optional<Boolean> isDownloadable;

    private final Optional<String> reportName;

    private final Map<String, Object> additionalProperties;

    private QueryResponseNotificationReportsRecordsItem(
            Optional<OffsetDateTime> createdAt,
            Optional<Integer> id,
            Optional<Boolean> isDownloadable,
            Optional<String> reportName,
            Map<String, Object> additionalProperties) {
        this.createdAt = createdAt;
        this.id = id;
        this.isDownloadable = isDownloadable;
        this.reportName = reportName;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("createdAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return Unique identifier for the report.
     */
    @JsonProperty("id")
    public Optional<Integer> getId() {
        return id;
    }

    /**
     * @return Indicator of whether the report can be downloaded.
     */
    @JsonProperty("isDownloadable")
    public Optional<Boolean> getIsDownloadable() {
        return isDownloadable;
    }

    /**
     * @return Name of the report.
     */
    @JsonProperty("reportName")
    public Optional<String> getReportName() {
        return reportName;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryResponseNotificationReportsRecordsItem
                && equalTo((QueryResponseNotificationReportsRecordsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryResponseNotificationReportsRecordsItem other) {
        return createdAt.equals(other.createdAt)
                && id.equals(other.id)
                && isDownloadable.equals(other.isDownloadable)
                && reportName.equals(other.reportName);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.createdAt, this.id, this.isDownloadable, this.reportName);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<Integer> id = Optional.empty();

        private Optional<Boolean> isDownloadable = Optional.empty();

        private Optional<String> reportName = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryResponseNotificationReportsRecordsItem other) {
            createdAt(other.getCreatedAt());
            id(other.getId());
            isDownloadable(other.getIsDownloadable());
            reportName(other.getReportName());
            return this;
        }

        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>Unique identifier for the report.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<Integer> id) {
            this.id = id;
            return this;
        }

        public Builder id(Integer id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>Indicator of whether the report can be downloaded.</p>
         */
        @JsonSetter(value = "isDownloadable", nulls = Nulls.SKIP)
        public Builder isDownloadable(Optional<Boolean> isDownloadable) {
            this.isDownloadable = isDownloadable;
            return this;
        }

        public Builder isDownloadable(Boolean isDownloadable) {
            this.isDownloadable = Optional.ofNullable(isDownloadable);
            return this;
        }

        /**
         * <p>Name of the report.</p>
         */
        @JsonSetter(value = "reportName", nulls = Nulls.SKIP)
        public Builder reportName(Optional<String> reportName) {
            this.reportName = reportName;
            return this;
        }

        public Builder reportName(String reportName) {
            this.reportName = Optional.ofNullable(reportName);
            return this;
        }

        public QueryResponseNotificationReportsRecordsItem build() {
            return new QueryResponseNotificationReportsRecordsItem(
                    createdAt, id, isDownloadable, reportName, additionalProperties);
        }
    }
}
