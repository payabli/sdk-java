/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApplicationQueryRecord.Builder.class)
public final class ApplicationQueryRecord {
    private final Optional<Double> annualRevenue;

    private final Optional<Double> averageMonthlyVolume;

    private final Optional<Double> averageTicketAmount;

    private final Optional<String> bAddress1;

    private final Optional<String> bAddress2;

    private final Optional<List<Bank>> bankData;

    private final Optional<String> bCity;

    private final Optional<String> bCountry;

    private final Optional<String> bFax;

    private final Optional<Integer> binPerson;

    private final Optional<Integer> binPhone;

    private final Optional<Integer> binWeb;

    private final Optional<Integer> boardingLinkId;

    private final Optional<Integer> boardingStatus;

    private final Optional<Integer> boardingSubStatus;

    private final Optional<String> bPhone;

    private final Optional<String> bStartdate;

    private final Optional<String> bState;

    private final Optional<String> bSummary;

    private final Optional<BuilderData> builderData;

    private final Optional<String> bZip;

    private final Optional<List<Contacts>> contactData;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<String> dbaName;

    private final Optional<BoardingApplicationAttachments> documentsRef;

    private final Optional<String> ein;

    private final Optional<String> externalPaypointId;

    private final Optional<List<GeneralEvents>> generalEvents;

    private final Optional<Double> highTicketAmount;

    private final Optional<Integer> idApplication;

    private final Optional<OffsetDateTime> lastModified;

    private final Optional<String> legalName;

    private final Optional<String> license;

    private final Optional<String> licenseState;

    private final Optional<FileContent> logo;

    private final Optional<String> mAddress1;

    private final Optional<String> mAddress2;

    private final Optional<String> mccid;

    private final Optional<String> mCity;

    private final Optional<String> mCountry;

    private final Optional<String> mState;

    private final Optional<String> mZip;

    private final Optional<Long> orgId;

    private final Optional<String> orgParentName;

    private final Optional<List<Owners>> ownerData;

    private final Optional<OwnType> ownType;

    private final Optional<String> pageidentifier;

    private final Optional<Boolean> recipientEmailNotification;

    private final Optional<Boolean> resumable;

    private final Optional<String> salesCode;

    private final Optional<Services> serviceData;

    private final Optional<SignerData> signer;

    private final Optional<String> taxfillname;

    private final Optional<Long> templateId;

    private final Optional<String> websiteAddress;

    private final Optional<Whencharged> whencharged;

    private final Optional<Whendelivered> whendelivered;

    private final Optional<Whenprovided> whenProvided;

    private final Optional<Whenrefunded> whenrefund;

    private final Optional<String> additionalData;

    private final Optional<String> repCode;

    private final Optional<String> repName;

    private final Optional<String> repOffice;

    private final Map<String, Object> additionalProperties;

    private ApplicationQueryRecord(
            Optional<Double> annualRevenue,
            Optional<Double> averageMonthlyVolume,
            Optional<Double> averageTicketAmount,
            Optional<String> bAddress1,
            Optional<String> bAddress2,
            Optional<List<Bank>> bankData,
            Optional<String> bCity,
            Optional<String> bCountry,
            Optional<String> bFax,
            Optional<Integer> binPerson,
            Optional<Integer> binPhone,
            Optional<Integer> binWeb,
            Optional<Integer> boardingLinkId,
            Optional<Integer> boardingStatus,
            Optional<Integer> boardingSubStatus,
            Optional<String> bPhone,
            Optional<String> bStartdate,
            Optional<String> bState,
            Optional<String> bSummary,
            Optional<BuilderData> builderData,
            Optional<String> bZip,
            Optional<List<Contacts>> contactData,
            Optional<OffsetDateTime> createdAt,
            Optional<String> dbaName,
            Optional<BoardingApplicationAttachments> documentsRef,
            Optional<String> ein,
            Optional<String> externalPaypointId,
            Optional<List<GeneralEvents>> generalEvents,
            Optional<Double> highTicketAmount,
            Optional<Integer> idApplication,
            Optional<OffsetDateTime> lastModified,
            Optional<String> legalName,
            Optional<String> license,
            Optional<String> licenseState,
            Optional<FileContent> logo,
            Optional<String> mAddress1,
            Optional<String> mAddress2,
            Optional<String> mccid,
            Optional<String> mCity,
            Optional<String> mCountry,
            Optional<String> mState,
            Optional<String> mZip,
            Optional<Long> orgId,
            Optional<String> orgParentName,
            Optional<List<Owners>> ownerData,
            Optional<OwnType> ownType,
            Optional<String> pageidentifier,
            Optional<Boolean> recipientEmailNotification,
            Optional<Boolean> resumable,
            Optional<String> salesCode,
            Optional<Services> serviceData,
            Optional<SignerData> signer,
            Optional<String> taxfillname,
            Optional<Long> templateId,
            Optional<String> websiteAddress,
            Optional<Whencharged> whencharged,
            Optional<Whendelivered> whendelivered,
            Optional<Whenprovided> whenProvided,
            Optional<Whenrefunded> whenrefund,
            Optional<String> additionalData,
            Optional<String> repCode,
            Optional<String> repName,
            Optional<String> repOffice,
            Map<String, Object> additionalProperties) {
        this.annualRevenue = annualRevenue;
        this.averageMonthlyVolume = averageMonthlyVolume;
        this.averageTicketAmount = averageTicketAmount;
        this.bAddress1 = bAddress1;
        this.bAddress2 = bAddress2;
        this.bankData = bankData;
        this.bCity = bCity;
        this.bCountry = bCountry;
        this.bFax = bFax;
        this.binPerson = binPerson;
        this.binPhone = binPhone;
        this.binWeb = binWeb;
        this.boardingLinkId = boardingLinkId;
        this.boardingStatus = boardingStatus;
        this.boardingSubStatus = boardingSubStatus;
        this.bPhone = bPhone;
        this.bStartdate = bStartdate;
        this.bState = bState;
        this.bSummary = bSummary;
        this.builderData = builderData;
        this.bZip = bZip;
        this.contactData = contactData;
        this.createdAt = createdAt;
        this.dbaName = dbaName;
        this.documentsRef = documentsRef;
        this.ein = ein;
        this.externalPaypointId = externalPaypointId;
        this.generalEvents = generalEvents;
        this.highTicketAmount = highTicketAmount;
        this.idApplication = idApplication;
        this.lastModified = lastModified;
        this.legalName = legalName;
        this.license = license;
        this.licenseState = licenseState;
        this.logo = logo;
        this.mAddress1 = mAddress1;
        this.mAddress2 = mAddress2;
        this.mccid = mccid;
        this.mCity = mCity;
        this.mCountry = mCountry;
        this.mState = mState;
        this.mZip = mZip;
        this.orgId = orgId;
        this.orgParentName = orgParentName;
        this.ownerData = ownerData;
        this.ownType = ownType;
        this.pageidentifier = pageidentifier;
        this.recipientEmailNotification = recipientEmailNotification;
        this.resumable = resumable;
        this.salesCode = salesCode;
        this.serviceData = serviceData;
        this.signer = signer;
        this.taxfillname = taxfillname;
        this.templateId = templateId;
        this.websiteAddress = websiteAddress;
        this.whencharged = whencharged;
        this.whendelivered = whendelivered;
        this.whenProvided = whenProvided;
        this.whenrefund = whenrefund;
        this.additionalData = additionalData;
        this.repCode = repCode;
        this.repName = repName;
        this.repOffice = repOffice;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("annualRevenue")
    public Optional<Double> getAnnualRevenue() {
        return annualRevenue;
    }

    @JsonProperty("averageMonthlyVolume")
    public Optional<Double> getAverageMonthlyVolume() {
        return averageMonthlyVolume;
    }

    @JsonProperty("averageTicketAmount")
    public Optional<Double> getAverageTicketAmount() {
        return averageTicketAmount;
    }

    @JsonProperty("bAddress1")
    public Optional<String> getBAddress1() {
        return bAddress1;
    }

    @JsonProperty("bAddress2")
    public Optional<String> getBAddress2() {
        return bAddress2;
    }

    @JsonProperty("bankData")
    public Optional<List<Bank>> getBankData() {
        return bankData;
    }

    @JsonProperty("bCity")
    public Optional<String> getBCity() {
        return bCity;
    }

    @JsonProperty("bCountry")
    public Optional<String> getBCountry() {
        return bCountry;
    }

    /**
     * @return The business's fax number.
     */
    @JsonProperty("bFax")
    public Optional<String> getBFax() {
        return bFax;
    }

    @JsonProperty("binPerson")
    public Optional<Integer> getBinPerson() {
        return binPerson;
    }

    @JsonProperty("binPhone")
    public Optional<Integer> getBinPhone() {
        return binPhone;
    }

    @JsonProperty("binWeb")
    public Optional<Integer> getBinWeb() {
        return binWeb;
    }

    @JsonProperty("boardingLinkId")
    public Optional<Integer> getBoardingLinkId() {
        return boardingLinkId;
    }

    @JsonProperty("boardingStatus")
    public Optional<Integer> getBoardingStatus() {
        return boardingStatus;
    }

    @JsonProperty("boardingSubStatus")
    public Optional<Integer> getBoardingSubStatus() {
        return boardingSubStatus;
    }

    @JsonProperty("bPhone")
    public Optional<String> getBPhone() {
        return bPhone;
    }

    @JsonProperty("bStartdate")
    public Optional<String> getBStartdate() {
        return bStartdate;
    }

    @JsonProperty("bState")
    public Optional<String> getBState() {
        return bState;
    }

    @JsonProperty("bSummary")
    public Optional<String> getBSummary() {
        return bSummary;
    }

    @JsonProperty("builderData")
    public Optional<BuilderData> getBuilderData() {
        return builderData;
    }

    @JsonProperty("bZip")
    public Optional<String> getBZip() {
        return bZip;
    }

    @JsonProperty("contactData")
    public Optional<List<Contacts>> getContactData() {
        return contactData;
    }

    @JsonProperty("createdAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("dbaName")
    public Optional<String> getDbaName() {
        return dbaName;
    }

    @JsonProperty("documentsRef")
    public Optional<BoardingApplicationAttachments> getDocumentsRef() {
        return documentsRef;
    }

    @JsonProperty("ein")
    public Optional<String> getEin() {
        return ein;
    }

    @JsonProperty("externalPaypointId")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    /**
     * @return Events associated with the application.
     */
    @JsonProperty("generalEvents")
    public Optional<List<GeneralEvents>> getGeneralEvents() {
        return generalEvents;
    }

    @JsonProperty("highTicketAmount")
    public Optional<Double> getHighTicketAmount() {
        return highTicketAmount;
    }

    @JsonProperty("idApplication")
    public Optional<Integer> getIdApplication() {
        return idApplication;
    }

    @JsonProperty("lastModified")
    public Optional<OffsetDateTime> getLastModified() {
        return lastModified;
    }

    @JsonProperty("legalName")
    public Optional<String> getLegalName() {
        return legalName;
    }

    @JsonProperty("license")
    public Optional<String> getLicense() {
        return license;
    }

    @JsonProperty("licenseState")
    public Optional<String> getLicenseState() {
        return licenseState;
    }

    /**
     * @return Object containing logo file.
     */
    @JsonProperty("logo")
    public Optional<FileContent> getLogo() {
        return logo;
    }

    @JsonProperty("mAddress1")
    public Optional<String> getMAddress1() {
        return mAddress1;
    }

    @JsonProperty("mAddress2")
    public Optional<String> getMAddress2() {
        return mAddress2;
    }

    @JsonProperty("mccid")
    public Optional<String> getMccid() {
        return mccid;
    }

    @JsonProperty("mCity")
    public Optional<String> getMCity() {
        return mCity;
    }

    @JsonProperty("mCountry")
    public Optional<String> getMCountry() {
        return mCountry;
    }

    @JsonProperty("mState")
    public Optional<String> getMState() {
        return mState;
    }

    @JsonProperty("mZip")
    public Optional<String> getMZip() {
        return mZip;
    }

    @JsonProperty("orgId")
    public Optional<Long> getOrgId() {
        return orgId;
    }

    @JsonProperty("orgParentName")
    public Optional<String> getOrgParentName() {
        return orgParentName;
    }

    @JsonProperty("ownerData")
    public Optional<List<Owners>> getOwnerData() {
        return ownerData;
    }

    @JsonProperty("ownType")
    public Optional<OwnType> getOwnType() {
        return ownType;
    }

    @JsonProperty("pageidentifier")
    public Optional<String> getPageidentifier() {
        return pageidentifier;
    }

    @JsonProperty("recipientEmailNotification")
    public Optional<Boolean> getRecipientEmailNotification() {
        return recipientEmailNotification;
    }

    @JsonProperty("resumable")
    public Optional<Boolean> getResumable() {
        return resumable;
    }

    @JsonProperty("salesCode")
    public Optional<String> getSalesCode() {
        return salesCode;
    }

    @JsonProperty("serviceData")
    public Optional<Services> getServiceData() {
        return serviceData;
    }

    @JsonProperty("signer")
    public Optional<SignerData> getSigner() {
        return signer;
    }

    @JsonProperty("taxfillname")
    public Optional<String> getTaxfillname() {
        return taxfillname;
    }

    @JsonProperty("templateId")
    public Optional<Long> getTemplateId() {
        return templateId;
    }

    @JsonProperty("websiteAddress")
    public Optional<String> getWebsiteAddress() {
        return websiteAddress;
    }

    @JsonProperty("whencharged")
    public Optional<Whencharged> getWhencharged() {
        return whencharged;
    }

    @JsonProperty("whendelivered")
    public Optional<Whendelivered> getWhendelivered() {
        return whendelivered;
    }

    @JsonProperty("whenProvided")
    public Optional<Whenprovided> getWhenProvided() {
        return whenProvided;
    }

    @JsonProperty("whenrefund")
    public Optional<Whenrefunded> getWhenrefund() {
        return whenrefund;
    }

    @JsonProperty("additionalData")
    public Optional<String> getAdditionalData() {
        return additionalData;
    }

    @JsonProperty("RepCode")
    public Optional<String> getRepCode() {
        return repCode;
    }

    @JsonProperty("RepName")
    public Optional<String> getRepName() {
        return repName;
    }

    @JsonProperty("RepOffice")
    public Optional<String> getRepOffice() {
        return repOffice;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApplicationQueryRecord && equalTo((ApplicationQueryRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApplicationQueryRecord other) {
        return annualRevenue.equals(other.annualRevenue)
                && averageMonthlyVolume.equals(other.averageMonthlyVolume)
                && averageTicketAmount.equals(other.averageTicketAmount)
                && bAddress1.equals(other.bAddress1)
                && bAddress2.equals(other.bAddress2)
                && bankData.equals(other.bankData)
                && bCity.equals(other.bCity)
                && bCountry.equals(other.bCountry)
                && bFax.equals(other.bFax)
                && binPerson.equals(other.binPerson)
                && binPhone.equals(other.binPhone)
                && binWeb.equals(other.binWeb)
                && boardingLinkId.equals(other.boardingLinkId)
                && boardingStatus.equals(other.boardingStatus)
                && boardingSubStatus.equals(other.boardingSubStatus)
                && bPhone.equals(other.bPhone)
                && bStartdate.equals(other.bStartdate)
                && bState.equals(other.bState)
                && bSummary.equals(other.bSummary)
                && builderData.equals(other.builderData)
                && bZip.equals(other.bZip)
                && contactData.equals(other.contactData)
                && createdAt.equals(other.createdAt)
                && dbaName.equals(other.dbaName)
                && documentsRef.equals(other.documentsRef)
                && ein.equals(other.ein)
                && externalPaypointId.equals(other.externalPaypointId)
                && generalEvents.equals(other.generalEvents)
                && highTicketAmount.equals(other.highTicketAmount)
                && idApplication.equals(other.idApplication)
                && lastModified.equals(other.lastModified)
                && legalName.equals(other.legalName)
                && license.equals(other.license)
                && licenseState.equals(other.licenseState)
                && logo.equals(other.logo)
                && mAddress1.equals(other.mAddress1)
                && mAddress2.equals(other.mAddress2)
                && mccid.equals(other.mccid)
                && mCity.equals(other.mCity)
                && mCountry.equals(other.mCountry)
                && mState.equals(other.mState)
                && mZip.equals(other.mZip)
                && orgId.equals(other.orgId)
                && orgParentName.equals(other.orgParentName)
                && ownerData.equals(other.ownerData)
                && ownType.equals(other.ownType)
                && pageidentifier.equals(other.pageidentifier)
                && recipientEmailNotification.equals(other.recipientEmailNotification)
                && resumable.equals(other.resumable)
                && salesCode.equals(other.salesCode)
                && serviceData.equals(other.serviceData)
                && signer.equals(other.signer)
                && taxfillname.equals(other.taxfillname)
                && templateId.equals(other.templateId)
                && websiteAddress.equals(other.websiteAddress)
                && whencharged.equals(other.whencharged)
                && whendelivered.equals(other.whendelivered)
                && whenProvided.equals(other.whenProvided)
                && whenrefund.equals(other.whenrefund)
                && additionalData.equals(other.additionalData)
                && repCode.equals(other.repCode)
                && repName.equals(other.repName)
                && repOffice.equals(other.repOffice);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.annualRevenue,
                this.averageMonthlyVolume,
                this.averageTicketAmount,
                this.bAddress1,
                this.bAddress2,
                this.bankData,
                this.bCity,
                this.bCountry,
                this.bFax,
                this.binPerson,
                this.binPhone,
                this.binWeb,
                this.boardingLinkId,
                this.boardingStatus,
                this.boardingSubStatus,
                this.bPhone,
                this.bStartdate,
                this.bState,
                this.bSummary,
                this.builderData,
                this.bZip,
                this.contactData,
                this.createdAt,
                this.dbaName,
                this.documentsRef,
                this.ein,
                this.externalPaypointId,
                this.generalEvents,
                this.highTicketAmount,
                this.idApplication,
                this.lastModified,
                this.legalName,
                this.license,
                this.licenseState,
                this.logo,
                this.mAddress1,
                this.mAddress2,
                this.mccid,
                this.mCity,
                this.mCountry,
                this.mState,
                this.mZip,
                this.orgId,
                this.orgParentName,
                this.ownerData,
                this.ownType,
                this.pageidentifier,
                this.recipientEmailNotification,
                this.resumable,
                this.salesCode,
                this.serviceData,
                this.signer,
                this.taxfillname,
                this.templateId,
                this.websiteAddress,
                this.whencharged,
                this.whendelivered,
                this.whenProvided,
                this.whenrefund,
                this.additionalData,
                this.repCode,
                this.repName,
                this.repOffice);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> annualRevenue = Optional.empty();

        private Optional<Double> averageMonthlyVolume = Optional.empty();

        private Optional<Double> averageTicketAmount = Optional.empty();

        private Optional<String> bAddress1 = Optional.empty();

        private Optional<String> bAddress2 = Optional.empty();

        private Optional<List<Bank>> bankData = Optional.empty();

        private Optional<String> bCity = Optional.empty();

        private Optional<String> bCountry = Optional.empty();

        private Optional<String> bFax = Optional.empty();

        private Optional<Integer> binPerson = Optional.empty();

        private Optional<Integer> binPhone = Optional.empty();

        private Optional<Integer> binWeb = Optional.empty();

        private Optional<Integer> boardingLinkId = Optional.empty();

        private Optional<Integer> boardingStatus = Optional.empty();

        private Optional<Integer> boardingSubStatus = Optional.empty();

        private Optional<String> bPhone = Optional.empty();

        private Optional<String> bStartdate = Optional.empty();

        private Optional<String> bState = Optional.empty();

        private Optional<String> bSummary = Optional.empty();

        private Optional<BuilderData> builderData = Optional.empty();

        private Optional<String> bZip = Optional.empty();

        private Optional<List<Contacts>> contactData = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> dbaName = Optional.empty();

        private Optional<BoardingApplicationAttachments> documentsRef = Optional.empty();

        private Optional<String> ein = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<List<GeneralEvents>> generalEvents = Optional.empty();

        private Optional<Double> highTicketAmount = Optional.empty();

        private Optional<Integer> idApplication = Optional.empty();

        private Optional<OffsetDateTime> lastModified = Optional.empty();

        private Optional<String> legalName = Optional.empty();

        private Optional<String> license = Optional.empty();

        private Optional<String> licenseState = Optional.empty();

        private Optional<FileContent> logo = Optional.empty();

        private Optional<String> mAddress1 = Optional.empty();

        private Optional<String> mAddress2 = Optional.empty();

        private Optional<String> mccid = Optional.empty();

        private Optional<String> mCity = Optional.empty();

        private Optional<String> mCountry = Optional.empty();

        private Optional<String> mState = Optional.empty();

        private Optional<String> mZip = Optional.empty();

        private Optional<Long> orgId = Optional.empty();

        private Optional<String> orgParentName = Optional.empty();

        private Optional<List<Owners>> ownerData = Optional.empty();

        private Optional<OwnType> ownType = Optional.empty();

        private Optional<String> pageidentifier = Optional.empty();

        private Optional<Boolean> recipientEmailNotification = Optional.empty();

        private Optional<Boolean> resumable = Optional.empty();

        private Optional<String> salesCode = Optional.empty();

        private Optional<Services> serviceData = Optional.empty();

        private Optional<SignerData> signer = Optional.empty();

        private Optional<String> taxfillname = Optional.empty();

        private Optional<Long> templateId = Optional.empty();

        private Optional<String> websiteAddress = Optional.empty();

        private Optional<Whencharged> whencharged = Optional.empty();

        private Optional<Whendelivered> whendelivered = Optional.empty();

        private Optional<Whenprovided> whenProvided = Optional.empty();

        private Optional<Whenrefunded> whenrefund = Optional.empty();

        private Optional<String> additionalData = Optional.empty();

        private Optional<String> repCode = Optional.empty();

        private Optional<String> repName = Optional.empty();

        private Optional<String> repOffice = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ApplicationQueryRecord other) {
            annualRevenue(other.getAnnualRevenue());
            averageMonthlyVolume(other.getAverageMonthlyVolume());
            averageTicketAmount(other.getAverageTicketAmount());
            bAddress1(other.getBAddress1());
            bAddress2(other.getBAddress2());
            bankData(other.getBankData());
            bCity(other.getBCity());
            bCountry(other.getBCountry());
            bFax(other.getBFax());
            binPerson(other.getBinPerson());
            binPhone(other.getBinPhone());
            binWeb(other.getBinWeb());
            boardingLinkId(other.getBoardingLinkId());
            boardingStatus(other.getBoardingStatus());
            boardingSubStatus(other.getBoardingSubStatus());
            bPhone(other.getBPhone());
            bStartdate(other.getBStartdate());
            bState(other.getBState());
            bSummary(other.getBSummary());
            builderData(other.getBuilderData());
            bZip(other.getBZip());
            contactData(other.getContactData());
            createdAt(other.getCreatedAt());
            dbaName(other.getDbaName());
            documentsRef(other.getDocumentsRef());
            ein(other.getEin());
            externalPaypointId(other.getExternalPaypointId());
            generalEvents(other.getGeneralEvents());
            highTicketAmount(other.getHighTicketAmount());
            idApplication(other.getIdApplication());
            lastModified(other.getLastModified());
            legalName(other.getLegalName());
            license(other.getLicense());
            licenseState(other.getLicenseState());
            logo(other.getLogo());
            mAddress1(other.getMAddress1());
            mAddress2(other.getMAddress2());
            mccid(other.getMccid());
            mCity(other.getMCity());
            mCountry(other.getMCountry());
            mState(other.getMState());
            mZip(other.getMZip());
            orgId(other.getOrgId());
            orgParentName(other.getOrgParentName());
            ownerData(other.getOwnerData());
            ownType(other.getOwnType());
            pageidentifier(other.getPageidentifier());
            recipientEmailNotification(other.getRecipientEmailNotification());
            resumable(other.getResumable());
            salesCode(other.getSalesCode());
            serviceData(other.getServiceData());
            signer(other.getSigner());
            taxfillname(other.getTaxfillname());
            templateId(other.getTemplateId());
            websiteAddress(other.getWebsiteAddress());
            whencharged(other.getWhencharged());
            whendelivered(other.getWhendelivered());
            whenProvided(other.getWhenProvided());
            whenrefund(other.getWhenrefund());
            additionalData(other.getAdditionalData());
            repCode(other.getRepCode());
            repName(other.getRepName());
            repOffice(other.getRepOffice());
            return this;
        }

        @JsonSetter(value = "annualRevenue", nulls = Nulls.SKIP)
        public Builder annualRevenue(Optional<Double> annualRevenue) {
            this.annualRevenue = annualRevenue;
            return this;
        }

        public Builder annualRevenue(Double annualRevenue) {
            this.annualRevenue = Optional.ofNullable(annualRevenue);
            return this;
        }

        @JsonSetter(value = "averageMonthlyVolume", nulls = Nulls.SKIP)
        public Builder averageMonthlyVolume(Optional<Double> averageMonthlyVolume) {
            this.averageMonthlyVolume = averageMonthlyVolume;
            return this;
        }

        public Builder averageMonthlyVolume(Double averageMonthlyVolume) {
            this.averageMonthlyVolume = Optional.ofNullable(averageMonthlyVolume);
            return this;
        }

        @JsonSetter(value = "averageTicketAmount", nulls = Nulls.SKIP)
        public Builder averageTicketAmount(Optional<Double> averageTicketAmount) {
            this.averageTicketAmount = averageTicketAmount;
            return this;
        }

        public Builder averageTicketAmount(Double averageTicketAmount) {
            this.averageTicketAmount = Optional.ofNullable(averageTicketAmount);
            return this;
        }

        @JsonSetter(value = "bAddress1", nulls = Nulls.SKIP)
        public Builder bAddress1(Optional<String> bAddress1) {
            this.bAddress1 = bAddress1;
            return this;
        }

        public Builder bAddress1(String bAddress1) {
            this.bAddress1 = Optional.ofNullable(bAddress1);
            return this;
        }

        @JsonSetter(value = "bAddress2", nulls = Nulls.SKIP)
        public Builder bAddress2(Optional<String> bAddress2) {
            this.bAddress2 = bAddress2;
            return this;
        }

        public Builder bAddress2(String bAddress2) {
            this.bAddress2 = Optional.ofNullable(bAddress2);
            return this;
        }

        @JsonSetter(value = "bankData", nulls = Nulls.SKIP)
        public Builder bankData(Optional<List<Bank>> bankData) {
            this.bankData = bankData;
            return this;
        }

        public Builder bankData(List<Bank> bankData) {
            this.bankData = Optional.ofNullable(bankData);
            return this;
        }

        @JsonSetter(value = "bCity", nulls = Nulls.SKIP)
        public Builder bCity(Optional<String> bCity) {
            this.bCity = bCity;
            return this;
        }

        public Builder bCity(String bCity) {
            this.bCity = Optional.ofNullable(bCity);
            return this;
        }

        @JsonSetter(value = "bCountry", nulls = Nulls.SKIP)
        public Builder bCountry(Optional<String> bCountry) {
            this.bCountry = bCountry;
            return this;
        }

        public Builder bCountry(String bCountry) {
            this.bCountry = Optional.ofNullable(bCountry);
            return this;
        }

        /**
         * <p>The business's fax number.</p>
         */
        @JsonSetter(value = "bFax", nulls = Nulls.SKIP)
        public Builder bFax(Optional<String> bFax) {
            this.bFax = bFax;
            return this;
        }

        public Builder bFax(String bFax) {
            this.bFax = Optional.ofNullable(bFax);
            return this;
        }

        @JsonSetter(value = "binPerson", nulls = Nulls.SKIP)
        public Builder binPerson(Optional<Integer> binPerson) {
            this.binPerson = binPerson;
            return this;
        }

        public Builder binPerson(Integer binPerson) {
            this.binPerson = Optional.ofNullable(binPerson);
            return this;
        }

        @JsonSetter(value = "binPhone", nulls = Nulls.SKIP)
        public Builder binPhone(Optional<Integer> binPhone) {
            this.binPhone = binPhone;
            return this;
        }

        public Builder binPhone(Integer binPhone) {
            this.binPhone = Optional.ofNullable(binPhone);
            return this;
        }

        @JsonSetter(value = "binWeb", nulls = Nulls.SKIP)
        public Builder binWeb(Optional<Integer> binWeb) {
            this.binWeb = binWeb;
            return this;
        }

        public Builder binWeb(Integer binWeb) {
            this.binWeb = Optional.ofNullable(binWeb);
            return this;
        }

        @JsonSetter(value = "boardingLinkId", nulls = Nulls.SKIP)
        public Builder boardingLinkId(Optional<Integer> boardingLinkId) {
            this.boardingLinkId = boardingLinkId;
            return this;
        }

        public Builder boardingLinkId(Integer boardingLinkId) {
            this.boardingLinkId = Optional.ofNullable(boardingLinkId);
            return this;
        }

        @JsonSetter(value = "boardingStatus", nulls = Nulls.SKIP)
        public Builder boardingStatus(Optional<Integer> boardingStatus) {
            this.boardingStatus = boardingStatus;
            return this;
        }

        public Builder boardingStatus(Integer boardingStatus) {
            this.boardingStatus = Optional.ofNullable(boardingStatus);
            return this;
        }

        @JsonSetter(value = "boardingSubStatus", nulls = Nulls.SKIP)
        public Builder boardingSubStatus(Optional<Integer> boardingSubStatus) {
            this.boardingSubStatus = boardingSubStatus;
            return this;
        }

        public Builder boardingSubStatus(Integer boardingSubStatus) {
            this.boardingSubStatus = Optional.ofNullable(boardingSubStatus);
            return this;
        }

        @JsonSetter(value = "bPhone", nulls = Nulls.SKIP)
        public Builder bPhone(Optional<String> bPhone) {
            this.bPhone = bPhone;
            return this;
        }

        public Builder bPhone(String bPhone) {
            this.bPhone = Optional.ofNullable(bPhone);
            return this;
        }

        @JsonSetter(value = "bStartdate", nulls = Nulls.SKIP)
        public Builder bStartdate(Optional<String> bStartdate) {
            this.bStartdate = bStartdate;
            return this;
        }

        public Builder bStartdate(String bStartdate) {
            this.bStartdate = Optional.ofNullable(bStartdate);
            return this;
        }

        @JsonSetter(value = "bState", nulls = Nulls.SKIP)
        public Builder bState(Optional<String> bState) {
            this.bState = bState;
            return this;
        }

        public Builder bState(String bState) {
            this.bState = Optional.ofNullable(bState);
            return this;
        }

        @JsonSetter(value = "bSummary", nulls = Nulls.SKIP)
        public Builder bSummary(Optional<String> bSummary) {
            this.bSummary = bSummary;
            return this;
        }

        public Builder bSummary(String bSummary) {
            this.bSummary = Optional.ofNullable(bSummary);
            return this;
        }

        @JsonSetter(value = "builderData", nulls = Nulls.SKIP)
        public Builder builderData(Optional<BuilderData> builderData) {
            this.builderData = builderData;
            return this;
        }

        public Builder builderData(BuilderData builderData) {
            this.builderData = Optional.ofNullable(builderData);
            return this;
        }

        @JsonSetter(value = "bZip", nulls = Nulls.SKIP)
        public Builder bZip(Optional<String> bZip) {
            this.bZip = bZip;
            return this;
        }

        public Builder bZip(String bZip) {
            this.bZip = Optional.ofNullable(bZip);
            return this;
        }

        @JsonSetter(value = "contactData", nulls = Nulls.SKIP)
        public Builder contactData(Optional<List<Contacts>> contactData) {
            this.contactData = contactData;
            return this;
        }

        public Builder contactData(List<Contacts> contactData) {
            this.contactData = Optional.ofNullable(contactData);
            return this;
        }

        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "dbaName", nulls = Nulls.SKIP)
        public Builder dbaName(Optional<String> dbaName) {
            this.dbaName = dbaName;
            return this;
        }

        public Builder dbaName(String dbaName) {
            this.dbaName = Optional.ofNullable(dbaName);
            return this;
        }

        @JsonSetter(value = "documentsRef", nulls = Nulls.SKIP)
        public Builder documentsRef(Optional<BoardingApplicationAttachments> documentsRef) {
            this.documentsRef = documentsRef;
            return this;
        }

        public Builder documentsRef(BoardingApplicationAttachments documentsRef) {
            this.documentsRef = Optional.ofNullable(documentsRef);
            return this;
        }

        @JsonSetter(value = "ein", nulls = Nulls.SKIP)
        public Builder ein(Optional<String> ein) {
            this.ein = ein;
            return this;
        }

        public Builder ein(String ein) {
            this.ein = Optional.ofNullable(ein);
            return this;
        }

        @JsonSetter(value = "externalPaypointId", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        /**
         * <p>Events associated with the application.</p>
         */
        @JsonSetter(value = "generalEvents", nulls = Nulls.SKIP)
        public Builder generalEvents(Optional<List<GeneralEvents>> generalEvents) {
            this.generalEvents = generalEvents;
            return this;
        }

        public Builder generalEvents(List<GeneralEvents> generalEvents) {
            this.generalEvents = Optional.ofNullable(generalEvents);
            return this;
        }

        @JsonSetter(value = "highTicketAmount", nulls = Nulls.SKIP)
        public Builder highTicketAmount(Optional<Double> highTicketAmount) {
            this.highTicketAmount = highTicketAmount;
            return this;
        }

        public Builder highTicketAmount(Double highTicketAmount) {
            this.highTicketAmount = Optional.ofNullable(highTicketAmount);
            return this;
        }

        @JsonSetter(value = "idApplication", nulls = Nulls.SKIP)
        public Builder idApplication(Optional<Integer> idApplication) {
            this.idApplication = idApplication;
            return this;
        }

        public Builder idApplication(Integer idApplication) {
            this.idApplication = Optional.ofNullable(idApplication);
            return this;
        }

        @JsonSetter(value = "lastModified", nulls = Nulls.SKIP)
        public Builder lastModified(Optional<OffsetDateTime> lastModified) {
            this.lastModified = lastModified;
            return this;
        }

        public Builder lastModified(OffsetDateTime lastModified) {
            this.lastModified = Optional.ofNullable(lastModified);
            return this;
        }

        @JsonSetter(value = "legalName", nulls = Nulls.SKIP)
        public Builder legalName(Optional<String> legalName) {
            this.legalName = legalName;
            return this;
        }

        public Builder legalName(String legalName) {
            this.legalName = Optional.ofNullable(legalName);
            return this;
        }

        @JsonSetter(value = "license", nulls = Nulls.SKIP)
        public Builder license(Optional<String> license) {
            this.license = license;
            return this;
        }

        public Builder license(String license) {
            this.license = Optional.ofNullable(license);
            return this;
        }

        @JsonSetter(value = "licenseState", nulls = Nulls.SKIP)
        public Builder licenseState(Optional<String> licenseState) {
            this.licenseState = licenseState;
            return this;
        }

        public Builder licenseState(String licenseState) {
            this.licenseState = Optional.ofNullable(licenseState);
            return this;
        }

        /**
         * <p>Object containing logo file.</p>
         */
        @JsonSetter(value = "logo", nulls = Nulls.SKIP)
        public Builder logo(Optional<FileContent> logo) {
            this.logo = logo;
            return this;
        }

        public Builder logo(FileContent logo) {
            this.logo = Optional.ofNullable(logo);
            return this;
        }

        @JsonSetter(value = "mAddress1", nulls = Nulls.SKIP)
        public Builder mAddress1(Optional<String> mAddress1) {
            this.mAddress1 = mAddress1;
            return this;
        }

        public Builder mAddress1(String mAddress1) {
            this.mAddress1 = Optional.ofNullable(mAddress1);
            return this;
        }

        @JsonSetter(value = "mAddress2", nulls = Nulls.SKIP)
        public Builder mAddress2(Optional<String> mAddress2) {
            this.mAddress2 = mAddress2;
            return this;
        }

        public Builder mAddress2(String mAddress2) {
            this.mAddress2 = Optional.ofNullable(mAddress2);
            return this;
        }

        @JsonSetter(value = "mccid", nulls = Nulls.SKIP)
        public Builder mccid(Optional<String> mccid) {
            this.mccid = mccid;
            return this;
        }

        public Builder mccid(String mccid) {
            this.mccid = Optional.ofNullable(mccid);
            return this;
        }

        @JsonSetter(value = "mCity", nulls = Nulls.SKIP)
        public Builder mCity(Optional<String> mCity) {
            this.mCity = mCity;
            return this;
        }

        public Builder mCity(String mCity) {
            this.mCity = Optional.ofNullable(mCity);
            return this;
        }

        @JsonSetter(value = "mCountry", nulls = Nulls.SKIP)
        public Builder mCountry(Optional<String> mCountry) {
            this.mCountry = mCountry;
            return this;
        }

        public Builder mCountry(String mCountry) {
            this.mCountry = Optional.ofNullable(mCountry);
            return this;
        }

        @JsonSetter(value = "mState", nulls = Nulls.SKIP)
        public Builder mState(Optional<String> mState) {
            this.mState = mState;
            return this;
        }

        public Builder mState(String mState) {
            this.mState = Optional.ofNullable(mState);
            return this;
        }

        @JsonSetter(value = "mZip", nulls = Nulls.SKIP)
        public Builder mZip(Optional<String> mZip) {
            this.mZip = mZip;
            return this;
        }

        public Builder mZip(String mZip) {
            this.mZip = Optional.ofNullable(mZip);
            return this;
        }

        @JsonSetter(value = "orgId", nulls = Nulls.SKIP)
        public Builder orgId(Optional<Long> orgId) {
            this.orgId = orgId;
            return this;
        }

        public Builder orgId(Long orgId) {
            this.orgId = Optional.ofNullable(orgId);
            return this;
        }

        @JsonSetter(value = "orgParentName", nulls = Nulls.SKIP)
        public Builder orgParentName(Optional<String> orgParentName) {
            this.orgParentName = orgParentName;
            return this;
        }

        public Builder orgParentName(String orgParentName) {
            this.orgParentName = Optional.ofNullable(orgParentName);
            return this;
        }

        @JsonSetter(value = "ownerData", nulls = Nulls.SKIP)
        public Builder ownerData(Optional<List<Owners>> ownerData) {
            this.ownerData = ownerData;
            return this;
        }

        public Builder ownerData(List<Owners> ownerData) {
            this.ownerData = Optional.ofNullable(ownerData);
            return this;
        }

        @JsonSetter(value = "ownType", nulls = Nulls.SKIP)
        public Builder ownType(Optional<OwnType> ownType) {
            this.ownType = ownType;
            return this;
        }

        public Builder ownType(OwnType ownType) {
            this.ownType = Optional.ofNullable(ownType);
            return this;
        }

        @JsonSetter(value = "pageidentifier", nulls = Nulls.SKIP)
        public Builder pageidentifier(Optional<String> pageidentifier) {
            this.pageidentifier = pageidentifier;
            return this;
        }

        public Builder pageidentifier(String pageidentifier) {
            this.pageidentifier = Optional.ofNullable(pageidentifier);
            return this;
        }

        @JsonSetter(value = "recipientEmailNotification", nulls = Nulls.SKIP)
        public Builder recipientEmailNotification(Optional<Boolean> recipientEmailNotification) {
            this.recipientEmailNotification = recipientEmailNotification;
            return this;
        }

        public Builder recipientEmailNotification(Boolean recipientEmailNotification) {
            this.recipientEmailNotification = Optional.ofNullable(recipientEmailNotification);
            return this;
        }

        @JsonSetter(value = "resumable", nulls = Nulls.SKIP)
        public Builder resumable(Optional<Boolean> resumable) {
            this.resumable = resumable;
            return this;
        }

        public Builder resumable(Boolean resumable) {
            this.resumable = Optional.ofNullable(resumable);
            return this;
        }

        @JsonSetter(value = "salesCode", nulls = Nulls.SKIP)
        public Builder salesCode(Optional<String> salesCode) {
            this.salesCode = salesCode;
            return this;
        }

        public Builder salesCode(String salesCode) {
            this.salesCode = Optional.ofNullable(salesCode);
            return this;
        }

        @JsonSetter(value = "serviceData", nulls = Nulls.SKIP)
        public Builder serviceData(Optional<Services> serviceData) {
            this.serviceData = serviceData;
            return this;
        }

        public Builder serviceData(Services serviceData) {
            this.serviceData = Optional.ofNullable(serviceData);
            return this;
        }

        @JsonSetter(value = "signer", nulls = Nulls.SKIP)
        public Builder signer(Optional<SignerData> signer) {
            this.signer = signer;
            return this;
        }

        public Builder signer(SignerData signer) {
            this.signer = Optional.ofNullable(signer);
            return this;
        }

        @JsonSetter(value = "taxfillname", nulls = Nulls.SKIP)
        public Builder taxfillname(Optional<String> taxfillname) {
            this.taxfillname = taxfillname;
            return this;
        }

        public Builder taxfillname(String taxfillname) {
            this.taxfillname = Optional.ofNullable(taxfillname);
            return this;
        }

        @JsonSetter(value = "templateId", nulls = Nulls.SKIP)
        public Builder templateId(Optional<Long> templateId) {
            this.templateId = templateId;
            return this;
        }

        public Builder templateId(Long templateId) {
            this.templateId = Optional.ofNullable(templateId);
            return this;
        }

        @JsonSetter(value = "websiteAddress", nulls = Nulls.SKIP)
        public Builder websiteAddress(Optional<String> websiteAddress) {
            this.websiteAddress = websiteAddress;
            return this;
        }

        public Builder websiteAddress(String websiteAddress) {
            this.websiteAddress = Optional.ofNullable(websiteAddress);
            return this;
        }

        @JsonSetter(value = "whencharged", nulls = Nulls.SKIP)
        public Builder whencharged(Optional<Whencharged> whencharged) {
            this.whencharged = whencharged;
            return this;
        }

        public Builder whencharged(Whencharged whencharged) {
            this.whencharged = Optional.ofNullable(whencharged);
            return this;
        }

        @JsonSetter(value = "whendelivered", nulls = Nulls.SKIP)
        public Builder whendelivered(Optional<Whendelivered> whendelivered) {
            this.whendelivered = whendelivered;
            return this;
        }

        public Builder whendelivered(Whendelivered whendelivered) {
            this.whendelivered = Optional.ofNullable(whendelivered);
            return this;
        }

        @JsonSetter(value = "whenProvided", nulls = Nulls.SKIP)
        public Builder whenProvided(Optional<Whenprovided> whenProvided) {
            this.whenProvided = whenProvided;
            return this;
        }

        public Builder whenProvided(Whenprovided whenProvided) {
            this.whenProvided = Optional.ofNullable(whenProvided);
            return this;
        }

        @JsonSetter(value = "whenrefund", nulls = Nulls.SKIP)
        public Builder whenrefund(Optional<Whenrefunded> whenrefund) {
            this.whenrefund = whenrefund;
            return this;
        }

        public Builder whenrefund(Whenrefunded whenrefund) {
            this.whenrefund = Optional.ofNullable(whenrefund);
            return this;
        }

        @JsonSetter(value = "additionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<String> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(String additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        @JsonSetter(value = "RepCode", nulls = Nulls.SKIP)
        public Builder repCode(Optional<String> repCode) {
            this.repCode = repCode;
            return this;
        }

        public Builder repCode(String repCode) {
            this.repCode = Optional.ofNullable(repCode);
            return this;
        }

        @JsonSetter(value = "RepName", nulls = Nulls.SKIP)
        public Builder repName(Optional<String> repName) {
            this.repName = repName;
            return this;
        }

        public Builder repName(String repName) {
            this.repName = Optional.ofNullable(repName);
            return this;
        }

        @JsonSetter(value = "RepOffice", nulls = Nulls.SKIP)
        public Builder repOffice(Optional<String> repOffice) {
            this.repOffice = repOffice;
            return this;
        }

        public Builder repOffice(String repOffice) {
            this.repOffice = Optional.ofNullable(repOffice);
            return this;
        }

        public ApplicationQueryRecord build() {
            return new ApplicationQueryRecord(
                    annualRevenue,
                    averageMonthlyVolume,
                    averageTicketAmount,
                    bAddress1,
                    bAddress2,
                    bankData,
                    bCity,
                    bCountry,
                    bFax,
                    binPerson,
                    binPhone,
                    binWeb,
                    boardingLinkId,
                    boardingStatus,
                    boardingSubStatus,
                    bPhone,
                    bStartdate,
                    bState,
                    bSummary,
                    builderData,
                    bZip,
                    contactData,
                    createdAt,
                    dbaName,
                    documentsRef,
                    ein,
                    externalPaypointId,
                    generalEvents,
                    highTicketAmount,
                    idApplication,
                    lastModified,
                    legalName,
                    license,
                    licenseState,
                    logo,
                    mAddress1,
                    mAddress2,
                    mccid,
                    mCity,
                    mCountry,
                    mState,
                    mZip,
                    orgId,
                    orgParentName,
                    ownerData,
                    ownType,
                    pageidentifier,
                    recipientEmailNotification,
                    resumable,
                    salesCode,
                    serviceData,
                    signer,
                    taxfillname,
                    templateId,
                    websiteAddress,
                    whencharged,
                    whendelivered,
                    whenProvided,
                    whenrefund,
                    additionalData,
                    repCode,
                    repName,
                    repOffice,
                    additionalProperties);
        }
    }
}
