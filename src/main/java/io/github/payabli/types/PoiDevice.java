/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PoiDevice.Builder.class)
public final class PoiDevice {
    private final Optional<Boolean> connected;

    private final Optional<OffsetDateTime> dateDeRegistered;

    private final Optional<OffsetDateTime> dateRegistered;

    private final Optional<String> deviceId;

    private final Optional<String> deviceLicense;

    private final Optional<String> deviceNickName;

    private final Optional<OffsetDateTime> lastConnectedDate;

    private final Optional<OffsetDateTime> lastDisconnectedDate;

    private final Optional<OffsetDateTime> lastTransactionDate;

    private final Optional<String> make;

    private final Optional<String> model;

    private final Optional<Boolean> registered;

    private final Optional<String> serialNumber;

    private final Map<String, Object> additionalProperties;

    private PoiDevice(
            Optional<Boolean> connected,
            Optional<OffsetDateTime> dateDeRegistered,
            Optional<OffsetDateTime> dateRegistered,
            Optional<String> deviceId,
            Optional<String> deviceLicense,
            Optional<String> deviceNickName,
            Optional<OffsetDateTime> lastConnectedDate,
            Optional<OffsetDateTime> lastDisconnectedDate,
            Optional<OffsetDateTime> lastTransactionDate,
            Optional<String> make,
            Optional<String> model,
            Optional<Boolean> registered,
            Optional<String> serialNumber,
            Map<String, Object> additionalProperties) {
        this.connected = connected;
        this.dateDeRegistered = dateDeRegistered;
        this.dateRegistered = dateRegistered;
        this.deviceId = deviceId;
        this.deviceLicense = deviceLicense;
        this.deviceNickName = deviceNickName;
        this.lastConnectedDate = lastConnectedDate;
        this.lastDisconnectedDate = lastDisconnectedDate;
        this.lastTransactionDate = lastTransactionDate;
        this.make = make;
        this.model = model;
        this.registered = registered;
        this.serialNumber = serialNumber;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The device connection status.
     */
    @JsonProperty("connected")
    public Optional<Boolean> getConnected() {
        return connected;
    }

    /**
     * @return The date the device was unregistered.
     */
    @JsonProperty("dateDeRegistered")
    public Optional<OffsetDateTime> getDateDeRegistered() {
        return dateDeRegistered;
    }

    /**
     * @return The date the device was registered.
     */
    @JsonProperty("dateRegistered")
    public Optional<OffsetDateTime> getDateRegistered() {
        return dateRegistered;
    }

    /**
     * @return The device identifier.
     */
    @JsonProperty("deviceId")
    public Optional<String> getDeviceId() {
        return deviceId;
    }

    /**
     * @return Device license. This is typically the same as <code>deviceId</code>.
     */
    @JsonProperty("deviceLicense")
    public Optional<String> getDeviceLicense() {
        return deviceLicense;
    }

    /**
     * @return Device description provided during registration.
     */
    @JsonProperty("deviceNickName")
    public Optional<String> getDeviceNickName() {
        return deviceNickName;
    }

    /**
     * @return Last connected date.
     */
    @JsonProperty("lastConnectedDate")
    public Optional<OffsetDateTime> getLastConnectedDate() {
        return lastConnectedDate;
    }

    /**
     * @return Last disconnected date.
     */
    @JsonProperty("lastDisconnectedDate")
    public Optional<OffsetDateTime> getLastDisconnectedDate() {
        return lastDisconnectedDate;
    }

    /**
     * @return Last transaction date.
     */
    @JsonProperty("lastTransactionDate")
    public Optional<OffsetDateTime> getLastTransactionDate() {
        return lastTransactionDate;
    }

    /**
     * @return The device manufacturer.
     */
    @JsonProperty("make")
    public Optional<String> getMake() {
        return make;
    }

    /**
     * @return The device model.
     */
    @JsonProperty("model")
    public Optional<String> getModel() {
        return model;
    }

    /**
     * @return The device registration status.
     */
    @JsonProperty("registered")
    public Optional<Boolean> getRegistered() {
        return registered;
    }

    /**
     * @return The device serial number.
     */
    @JsonProperty("serialNumber")
    public Optional<String> getSerialNumber() {
        return serialNumber;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PoiDevice && equalTo((PoiDevice) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PoiDevice other) {
        return connected.equals(other.connected)
                && dateDeRegistered.equals(other.dateDeRegistered)
                && dateRegistered.equals(other.dateRegistered)
                && deviceId.equals(other.deviceId)
                && deviceLicense.equals(other.deviceLicense)
                && deviceNickName.equals(other.deviceNickName)
                && lastConnectedDate.equals(other.lastConnectedDate)
                && lastDisconnectedDate.equals(other.lastDisconnectedDate)
                && lastTransactionDate.equals(other.lastTransactionDate)
                && make.equals(other.make)
                && model.equals(other.model)
                && registered.equals(other.registered)
                && serialNumber.equals(other.serialNumber);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.connected,
                this.dateDeRegistered,
                this.dateRegistered,
                this.deviceId,
                this.deviceLicense,
                this.deviceNickName,
                this.lastConnectedDate,
                this.lastDisconnectedDate,
                this.lastTransactionDate,
                this.make,
                this.model,
                this.registered,
                this.serialNumber);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> connected = Optional.empty();

        private Optional<OffsetDateTime> dateDeRegistered = Optional.empty();

        private Optional<OffsetDateTime> dateRegistered = Optional.empty();

        private Optional<String> deviceId = Optional.empty();

        private Optional<String> deviceLicense = Optional.empty();

        private Optional<String> deviceNickName = Optional.empty();

        private Optional<OffsetDateTime> lastConnectedDate = Optional.empty();

        private Optional<OffsetDateTime> lastDisconnectedDate = Optional.empty();

        private Optional<OffsetDateTime> lastTransactionDate = Optional.empty();

        private Optional<String> make = Optional.empty();

        private Optional<String> model = Optional.empty();

        private Optional<Boolean> registered = Optional.empty();

        private Optional<String> serialNumber = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PoiDevice other) {
            connected(other.getConnected());
            dateDeRegistered(other.getDateDeRegistered());
            dateRegistered(other.getDateRegistered());
            deviceId(other.getDeviceId());
            deviceLicense(other.getDeviceLicense());
            deviceNickName(other.getDeviceNickName());
            lastConnectedDate(other.getLastConnectedDate());
            lastDisconnectedDate(other.getLastDisconnectedDate());
            lastTransactionDate(other.getLastTransactionDate());
            make(other.getMake());
            model(other.getModel());
            registered(other.getRegistered());
            serialNumber(other.getSerialNumber());
            return this;
        }

        /**
         * <p>The device connection status.</p>
         */
        @JsonSetter(value = "connected", nulls = Nulls.SKIP)
        public Builder connected(Optional<Boolean> connected) {
            this.connected = connected;
            return this;
        }

        public Builder connected(Boolean connected) {
            this.connected = Optional.ofNullable(connected);
            return this;
        }

        /**
         * <p>The date the device was unregistered.</p>
         */
        @JsonSetter(value = "dateDeRegistered", nulls = Nulls.SKIP)
        public Builder dateDeRegistered(Optional<OffsetDateTime> dateDeRegistered) {
            this.dateDeRegistered = dateDeRegistered;
            return this;
        }

        public Builder dateDeRegistered(OffsetDateTime dateDeRegistered) {
            this.dateDeRegistered = Optional.ofNullable(dateDeRegistered);
            return this;
        }

        /**
         * <p>The date the device was registered.</p>
         */
        @JsonSetter(value = "dateRegistered", nulls = Nulls.SKIP)
        public Builder dateRegistered(Optional<OffsetDateTime> dateRegistered) {
            this.dateRegistered = dateRegistered;
            return this;
        }

        public Builder dateRegistered(OffsetDateTime dateRegistered) {
            this.dateRegistered = Optional.ofNullable(dateRegistered);
            return this;
        }

        /**
         * <p>The device identifier.</p>
         */
        @JsonSetter(value = "deviceId", nulls = Nulls.SKIP)
        public Builder deviceId(Optional<String> deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        public Builder deviceId(String deviceId) {
            this.deviceId = Optional.ofNullable(deviceId);
            return this;
        }

        /**
         * <p>Device license. This is typically the same as <code>deviceId</code>.</p>
         */
        @JsonSetter(value = "deviceLicense", nulls = Nulls.SKIP)
        public Builder deviceLicense(Optional<String> deviceLicense) {
            this.deviceLicense = deviceLicense;
            return this;
        }

        public Builder deviceLicense(String deviceLicense) {
            this.deviceLicense = Optional.ofNullable(deviceLicense);
            return this;
        }

        /**
         * <p>Device description provided during registration.</p>
         */
        @JsonSetter(value = "deviceNickName", nulls = Nulls.SKIP)
        public Builder deviceNickName(Optional<String> deviceNickName) {
            this.deviceNickName = deviceNickName;
            return this;
        }

        public Builder deviceNickName(String deviceNickName) {
            this.deviceNickName = Optional.ofNullable(deviceNickName);
            return this;
        }

        /**
         * <p>Last connected date.</p>
         */
        @JsonSetter(value = "lastConnectedDate", nulls = Nulls.SKIP)
        public Builder lastConnectedDate(Optional<OffsetDateTime> lastConnectedDate) {
            this.lastConnectedDate = lastConnectedDate;
            return this;
        }

        public Builder lastConnectedDate(OffsetDateTime lastConnectedDate) {
            this.lastConnectedDate = Optional.ofNullable(lastConnectedDate);
            return this;
        }

        /**
         * <p>Last disconnected date.</p>
         */
        @JsonSetter(value = "lastDisconnectedDate", nulls = Nulls.SKIP)
        public Builder lastDisconnectedDate(Optional<OffsetDateTime> lastDisconnectedDate) {
            this.lastDisconnectedDate = lastDisconnectedDate;
            return this;
        }

        public Builder lastDisconnectedDate(OffsetDateTime lastDisconnectedDate) {
            this.lastDisconnectedDate = Optional.ofNullable(lastDisconnectedDate);
            return this;
        }

        /**
         * <p>Last transaction date.</p>
         */
        @JsonSetter(value = "lastTransactionDate", nulls = Nulls.SKIP)
        public Builder lastTransactionDate(Optional<OffsetDateTime> lastTransactionDate) {
            this.lastTransactionDate = lastTransactionDate;
            return this;
        }

        public Builder lastTransactionDate(OffsetDateTime lastTransactionDate) {
            this.lastTransactionDate = Optional.ofNullable(lastTransactionDate);
            return this;
        }

        /**
         * <p>The device manufacturer.</p>
         */
        @JsonSetter(value = "make", nulls = Nulls.SKIP)
        public Builder make(Optional<String> make) {
            this.make = make;
            return this;
        }

        public Builder make(String make) {
            this.make = Optional.ofNullable(make);
            return this;
        }

        /**
         * <p>The device model.</p>
         */
        @JsonSetter(value = "model", nulls = Nulls.SKIP)
        public Builder model(Optional<String> model) {
            this.model = model;
            return this;
        }

        public Builder model(String model) {
            this.model = Optional.ofNullable(model);
            return this;
        }

        /**
         * <p>The device registration status.</p>
         */
        @JsonSetter(value = "registered", nulls = Nulls.SKIP)
        public Builder registered(Optional<Boolean> registered) {
            this.registered = registered;
            return this;
        }

        public Builder registered(Boolean registered) {
            this.registered = Optional.ofNullable(registered);
            return this;
        }

        /**
         * <p>The device serial number.</p>
         */
        @JsonSetter(value = "serialNumber", nulls = Nulls.SKIP)
        public Builder serialNumber(Optional<String> serialNumber) {
            this.serialNumber = serialNumber;
            return this;
        }

        public Builder serialNumber(String serialNumber) {
            this.serialNumber = Optional.ofNullable(serialNumber);
            return this;
        }

        public PoiDevice build() {
            return new PoiDevice(
                    connected,
                    dateDeRegistered,
                    dateRegistered,
                    deviceId,
                    deviceLicense,
                    deviceNickName,
                    lastConnectedDate,
                    lastDisconnectedDate,
                    lastTransactionDate,
                    make,
                    model,
                    registered,
                    serialNumber,
                    additionalProperties);
        }
    }
}
