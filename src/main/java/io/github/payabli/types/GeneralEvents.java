/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GeneralEvents.Builder.class)
public final class GeneralEvents {
    private final Optional<String> description;

    private final Optional<OffsetDateTime> eventTime;

    private final Optional<Map<String, Object>> extraData;

    private final Optional<String> refData;

    private final Optional<String> source;

    private final Map<String, Object> additionalProperties;

    private GeneralEvents(
            Optional<String> description,
            Optional<OffsetDateTime> eventTime,
            Optional<Map<String, Object>> extraData,
            Optional<String> refData,
            Optional<String> source,
            Map<String, Object> additionalProperties) {
        this.description = description;
        this.eventTime = eventTime;
        this.extraData = extraData;
        this.refData = refData;
        this.source = source;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Event description.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return Event timestamp, in UTC.
     */
    @JsonProperty("eventTime")
    public Optional<OffsetDateTime> getEventTime() {
        return eventTime;
    }

    /**
     * @return Extra data.
     */
    @JsonProperty("extraData")
    public Optional<Map<String, Object>> getExtraData() {
        return extraData;
    }

    /**
     * @return Reference data.
     */
    @JsonProperty("refData")
    public Optional<String> getRefData() {
        return refData;
    }

    /**
     * @return The event source.
     */
    @JsonProperty("source")
    public Optional<String> getSource() {
        return source;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GeneralEvents && equalTo((GeneralEvents) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GeneralEvents other) {
        return description.equals(other.description)
                && eventTime.equals(other.eventTime)
                && extraData.equals(other.extraData)
                && refData.equals(other.refData)
                && source.equals(other.source);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.description, this.eventTime, this.extraData, this.refData, this.source);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> description = Optional.empty();

        private Optional<OffsetDateTime> eventTime = Optional.empty();

        private Optional<Map<String, Object>> extraData = Optional.empty();

        private Optional<String> refData = Optional.empty();

        private Optional<String> source = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GeneralEvents other) {
            description(other.getDescription());
            eventTime(other.getEventTime());
            extraData(other.getExtraData());
            refData(other.getRefData());
            source(other.getSource());
            return this;
        }

        /**
         * <p>Event description.</p>
         */
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>Event timestamp, in UTC.</p>
         */
        @JsonSetter(value = "eventTime", nulls = Nulls.SKIP)
        public Builder eventTime(Optional<OffsetDateTime> eventTime) {
            this.eventTime = eventTime;
            return this;
        }

        public Builder eventTime(OffsetDateTime eventTime) {
            this.eventTime = Optional.ofNullable(eventTime);
            return this;
        }

        /**
         * <p>Extra data.</p>
         */
        @JsonSetter(value = "extraData", nulls = Nulls.SKIP)
        public Builder extraData(Optional<Map<String, Object>> extraData) {
            this.extraData = extraData;
            return this;
        }

        public Builder extraData(Map<String, Object> extraData) {
            this.extraData = Optional.ofNullable(extraData);
            return this;
        }

        /**
         * <p>Reference data.</p>
         */
        @JsonSetter(value = "refData", nulls = Nulls.SKIP)
        public Builder refData(Optional<String> refData) {
            this.refData = refData;
            return this;
        }

        public Builder refData(String refData) {
            this.refData = Optional.ofNullable(refData);
            return this;
        }

        /**
         * <p>The event source.</p>
         */
        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public Builder source(Optional<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        public GeneralEvents build() {
            return new GeneralEvents(description, eventTime, extraData, refData, source, additionalProperties);
        }
    }
}
