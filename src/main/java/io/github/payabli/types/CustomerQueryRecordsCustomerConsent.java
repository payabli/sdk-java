/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomerQueryRecordsCustomerConsent.Builder.class)
public final class CustomerQueryRecordsCustomerConsent {
    private final Optional<CustomerQueryRecordsCustomerConsentECommunication> eCommunication;

    private final Optional<CustomerQueryRecordsCustomerConsentSms> sms;

    private final Map<String, Object> additionalProperties;

    private CustomerQueryRecordsCustomerConsent(
            Optional<CustomerQueryRecordsCustomerConsentECommunication> eCommunication,
            Optional<CustomerQueryRecordsCustomerConsentSms> sms,
            Map<String, Object> additionalProperties) {
        this.eCommunication = eCommunication;
        this.sms = sms;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Describes the customer's email communications consent status.
     */
    @JsonProperty("eCommunication")
    public Optional<CustomerQueryRecordsCustomerConsentECommunication> getECommunication() {
        return eCommunication;
    }

    /**
     * @return Describes the customer's SMS communications consent status.
     */
    @JsonProperty("sms")
    public Optional<CustomerQueryRecordsCustomerConsentSms> getSms() {
        return sms;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomerQueryRecordsCustomerConsent
                && equalTo((CustomerQueryRecordsCustomerConsent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomerQueryRecordsCustomerConsent other) {
        return eCommunication.equals(other.eCommunication) && sms.equals(other.sms);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.eCommunication, this.sms);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<CustomerQueryRecordsCustomerConsentECommunication> eCommunication = Optional.empty();

        private Optional<CustomerQueryRecordsCustomerConsentSms> sms = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CustomerQueryRecordsCustomerConsent other) {
            eCommunication(other.getECommunication());
            sms(other.getSms());
            return this;
        }

        /**
         * <p>Describes the customer's email communications consent status.</p>
         */
        @JsonSetter(value = "eCommunication", nulls = Nulls.SKIP)
        public Builder eCommunication(Optional<CustomerQueryRecordsCustomerConsentECommunication> eCommunication) {
            this.eCommunication = eCommunication;
            return this;
        }

        public Builder eCommunication(CustomerQueryRecordsCustomerConsentECommunication eCommunication) {
            this.eCommunication = Optional.ofNullable(eCommunication);
            return this;
        }

        /**
         * <p>Describes the customer's SMS communications consent status.</p>
         */
        @JsonSetter(value = "sms", nulls = Nulls.SKIP)
        public Builder sms(Optional<CustomerQueryRecordsCustomerConsentSms> sms) {
            this.sms = sms;
            return this;
        }

        public Builder sms(CustomerQueryRecordsCustomerConsentSms sms) {
            this.sms = Optional.ofNullable(sms);
            return this;
        }

        public CustomerQueryRecordsCustomerConsent build() {
            return new CustomerQueryRecordsCustomerConsent(eCommunication, sms, additionalProperties);
        }
    }
}
