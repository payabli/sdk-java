/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SignerSection.Builder.class)
public final class SignerSection {
    private final Optional<Boolean> visible;

    private final Optional<TemplateElement> name;

    private final Optional<TemplateElement> ssn;

    private final Optional<TemplateElement> dob;

    private final Optional<TemplateElement> phone;

    private final Optional<TemplateElement> email;

    private final Optional<TemplateElement> address;

    private final Optional<TemplateElement> address1;

    private final Optional<TemplateElement> city;

    private final Optional<TemplateElement> country;

    private final Optional<TemplateElement> state;

    private final Optional<TemplateElement> zip;

    private final Optional<TemplateElement> acceptance;

    private final Optional<TemplateElement> signedDocumentReference;

    private final Optional<TemplateAdditionalDataSection> additionalData;

    private final Map<String, Object> additionalProperties;

    private SignerSection(
            Optional<Boolean> visible,
            Optional<TemplateElement> name,
            Optional<TemplateElement> ssn,
            Optional<TemplateElement> dob,
            Optional<TemplateElement> phone,
            Optional<TemplateElement> email,
            Optional<TemplateElement> address,
            Optional<TemplateElement> address1,
            Optional<TemplateElement> city,
            Optional<TemplateElement> country,
            Optional<TemplateElement> state,
            Optional<TemplateElement> zip,
            Optional<TemplateElement> acceptance,
            Optional<TemplateElement> signedDocumentReference,
            Optional<TemplateAdditionalDataSection> additionalData,
            Map<String, Object> additionalProperties) {
        this.visible = visible;
        this.name = name;
        this.ssn = ssn;
        this.dob = dob;
        this.phone = phone;
        this.email = email;
        this.address = address;
        this.address1 = address1;
        this.city = city;
        this.country = country;
        this.state = state;
        this.zip = zip;
        this.acceptance = acceptance;
        this.signedDocumentReference = signedDocumentReference;
        this.additionalData = additionalData;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("visible")
    public Optional<Boolean> getVisible() {
        return visible;
    }

    @JsonProperty("name")
    public Optional<TemplateElement> getName() {
        return name;
    }

    @JsonProperty("ssn")
    public Optional<TemplateElement> getSsn() {
        return ssn;
    }

    @JsonProperty("dob")
    public Optional<TemplateElement> getDob() {
        return dob;
    }

    @JsonProperty("phone")
    public Optional<TemplateElement> getPhone() {
        return phone;
    }

    @JsonProperty("email")
    public Optional<TemplateElement> getEmail() {
        return email;
    }

    @JsonProperty("address")
    public Optional<TemplateElement> getAddress() {
        return address;
    }

    @JsonProperty("address1")
    public Optional<TemplateElement> getAddress1() {
        return address1;
    }

    @JsonProperty("city")
    public Optional<TemplateElement> getCity() {
        return city;
    }

    @JsonProperty("country")
    public Optional<TemplateElement> getCountry() {
        return country;
    }

    @JsonProperty("state")
    public Optional<TemplateElement> getState() {
        return state;
    }

    @JsonProperty("zip")
    public Optional<TemplateElement> getZip() {
        return zip;
    }

    @JsonProperty("acceptance")
    public Optional<TemplateElement> getAcceptance() {
        return acceptance;
    }

    @JsonProperty("signedDocumentReference")
    public Optional<TemplateElement> getSignedDocumentReference() {
        return signedDocumentReference;
    }

    @JsonProperty("additionalData")
    public Optional<TemplateAdditionalDataSection> getAdditionalData() {
        return additionalData;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SignerSection && equalTo((SignerSection) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SignerSection other) {
        return visible.equals(other.visible)
                && name.equals(other.name)
                && ssn.equals(other.ssn)
                && dob.equals(other.dob)
                && phone.equals(other.phone)
                && email.equals(other.email)
                && address.equals(other.address)
                && address1.equals(other.address1)
                && city.equals(other.city)
                && country.equals(other.country)
                && state.equals(other.state)
                && zip.equals(other.zip)
                && acceptance.equals(other.acceptance)
                && signedDocumentReference.equals(other.signedDocumentReference)
                && additionalData.equals(other.additionalData);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.visible,
                this.name,
                this.ssn,
                this.dob,
                this.phone,
                this.email,
                this.address,
                this.address1,
                this.city,
                this.country,
                this.state,
                this.zip,
                this.acceptance,
                this.signedDocumentReference,
                this.additionalData);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> visible = Optional.empty();

        private Optional<TemplateElement> name = Optional.empty();

        private Optional<TemplateElement> ssn = Optional.empty();

        private Optional<TemplateElement> dob = Optional.empty();

        private Optional<TemplateElement> phone = Optional.empty();

        private Optional<TemplateElement> email = Optional.empty();

        private Optional<TemplateElement> address = Optional.empty();

        private Optional<TemplateElement> address1 = Optional.empty();

        private Optional<TemplateElement> city = Optional.empty();

        private Optional<TemplateElement> country = Optional.empty();

        private Optional<TemplateElement> state = Optional.empty();

        private Optional<TemplateElement> zip = Optional.empty();

        private Optional<TemplateElement> acceptance = Optional.empty();

        private Optional<TemplateElement> signedDocumentReference = Optional.empty();

        private Optional<TemplateAdditionalDataSection> additionalData = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SignerSection other) {
            visible(other.getVisible());
            name(other.getName());
            ssn(other.getSsn());
            dob(other.getDob());
            phone(other.getPhone());
            email(other.getEmail());
            address(other.getAddress());
            address1(other.getAddress1());
            city(other.getCity());
            country(other.getCountry());
            state(other.getState());
            zip(other.getZip());
            acceptance(other.getAcceptance());
            signedDocumentReference(other.getSignedDocumentReference());
            additionalData(other.getAdditionalData());
            return this;
        }

        @JsonSetter(value = "visible", nulls = Nulls.SKIP)
        public Builder visible(Optional<Boolean> visible) {
            this.visible = visible;
            return this;
        }

        public Builder visible(Boolean visible) {
            this.visible = Optional.ofNullable(visible);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<TemplateElement> name) {
            this.name = name;
            return this;
        }

        public Builder name(TemplateElement name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "ssn", nulls = Nulls.SKIP)
        public Builder ssn(Optional<TemplateElement> ssn) {
            this.ssn = ssn;
            return this;
        }

        public Builder ssn(TemplateElement ssn) {
            this.ssn = Optional.ofNullable(ssn);
            return this;
        }

        @JsonSetter(value = "dob", nulls = Nulls.SKIP)
        public Builder dob(Optional<TemplateElement> dob) {
            this.dob = dob;
            return this;
        }

        public Builder dob(TemplateElement dob) {
            this.dob = Optional.ofNullable(dob);
            return this;
        }

        @JsonSetter(value = "phone", nulls = Nulls.SKIP)
        public Builder phone(Optional<TemplateElement> phone) {
            this.phone = phone;
            return this;
        }

        public Builder phone(TemplateElement phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<TemplateElement> email) {
            this.email = email;
            return this;
        }

        public Builder email(TemplateElement email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<TemplateElement> address) {
            this.address = address;
            return this;
        }

        public Builder address(TemplateElement address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        @JsonSetter(value = "address1", nulls = Nulls.SKIP)
        public Builder address1(Optional<TemplateElement> address1) {
            this.address1 = address1;
            return this;
        }

        public Builder address1(TemplateElement address1) {
            this.address1 = Optional.ofNullable(address1);
            return this;
        }

        @JsonSetter(value = "city", nulls = Nulls.SKIP)
        public Builder city(Optional<TemplateElement> city) {
            this.city = city;
            return this;
        }

        public Builder city(TemplateElement city) {
            this.city = Optional.ofNullable(city);
            return this;
        }

        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public Builder country(Optional<TemplateElement> country) {
            this.country = country;
            return this;
        }

        public Builder country(TemplateElement country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<TemplateElement> state) {
            this.state = state;
            return this;
        }

        public Builder state(TemplateElement state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        @JsonSetter(value = "zip", nulls = Nulls.SKIP)
        public Builder zip(Optional<TemplateElement> zip) {
            this.zip = zip;
            return this;
        }

        public Builder zip(TemplateElement zip) {
            this.zip = Optional.ofNullable(zip);
            return this;
        }

        @JsonSetter(value = "acceptance", nulls = Nulls.SKIP)
        public Builder acceptance(Optional<TemplateElement> acceptance) {
            this.acceptance = acceptance;
            return this;
        }

        public Builder acceptance(TemplateElement acceptance) {
            this.acceptance = Optional.ofNullable(acceptance);
            return this;
        }

        @JsonSetter(value = "signedDocumentReference", nulls = Nulls.SKIP)
        public Builder signedDocumentReference(Optional<TemplateElement> signedDocumentReference) {
            this.signedDocumentReference = signedDocumentReference;
            return this;
        }

        public Builder signedDocumentReference(TemplateElement signedDocumentReference) {
            this.signedDocumentReference = Optional.ofNullable(signedDocumentReference);
            return this;
        }

        @JsonSetter(value = "additionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<TemplateAdditionalDataSection> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(TemplateAdditionalDataSection additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        public SignerSection build() {
            return new SignerSection(
                    visible,
                    name,
                    ssn,
                    dob,
                    phone,
                    email,
                    address,
                    address1,
                    city,
                    country,
                    state,
                    zip,
                    acceptance,
                    signedDocumentReference,
                    additionalData,
                    additionalProperties);
        }
    }
}
