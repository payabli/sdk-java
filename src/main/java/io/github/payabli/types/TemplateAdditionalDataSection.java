/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TemplateAdditionalDataSection.Builder.class)
public final class TemplateAdditionalDataSection {
    private final Optional<Boolean> visible;

    private final Map<String, TemplateAdditionalDataField> fields;

    private final Map<String, Object> additionalProperties;

    private TemplateAdditionalDataSection(
            Optional<Boolean> visible,
            Map<String, TemplateAdditionalDataField> fields,
            Map<String, Object> additionalProperties) {
        this.visible = visible;
        this.fields = fields;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("visible")
    public Optional<Boolean> getVisible() {
        return visible;
    }

    @JsonProperty("fields")
    public Map<String, TemplateAdditionalDataField> getFields() {
        return fields;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TemplateAdditionalDataSection && equalTo((TemplateAdditionalDataSection) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TemplateAdditionalDataSection other) {
        return visible.equals(other.visible) && fields.equals(other.fields);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.visible, this.fields);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> visible = Optional.empty();

        private Map<String, TemplateAdditionalDataField> fields = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TemplateAdditionalDataSection other) {
            visible(other.getVisible());
            fields(other.getFields());
            return this;
        }

        @JsonSetter(value = "visible", nulls = Nulls.SKIP)
        public Builder visible(Optional<Boolean> visible) {
            this.visible = visible;
            return this;
        }

        public Builder visible(Boolean visible) {
            this.visible = Optional.ofNullable(visible);
            return this;
        }

        @JsonSetter(value = "fields", nulls = Nulls.SKIP)
        public Builder fields(Map<String, TemplateAdditionalDataField> fields) {
            this.fields.clear();
            this.fields.putAll(fields);
            return this;
        }

        public Builder putAllFields(Map<String, TemplateAdditionalDataField> fields) {
            if (fields != null) {
                this.fields.putAll(fields);
            }
            return this;
        }

        public Builder fields(String key, TemplateAdditionalDataField value) {
            this.fields.put(key, value);
            return this;
        }

        public TemplateAdditionalDataSection build() {
            return new TemplateAdditionalDataSection(visible, fields, additionalProperties);
        }
    }
}
