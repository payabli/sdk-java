/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QuerySummary.Builder.class)
public final class QuerySummary {
    private final Optional<String> pageIdentifier;

    private final Optional<Integer> pageSize;

    private final Optional<Double> totalAmount;

    private final Optional<Double> totalNetAmount;

    private final Optional<Integer> totalPages;

    private final Optional<Integer> totalRecords;

    private final Map<String, Object> additionalProperties;

    private QuerySummary(
            Optional<String> pageIdentifier,
            Optional<Integer> pageSize,
            Optional<Double> totalAmount,
            Optional<Double> totalNetAmount,
            Optional<Integer> totalPages,
            Optional<Integer> totalRecords,
            Map<String, Object> additionalProperties) {
        this.pageIdentifier = pageIdentifier;
        this.pageSize = pageSize;
        this.totalAmount = totalAmount;
        this.totalNetAmount = totalNetAmount;
        this.totalPages = totalPages;
        this.totalRecords = totalRecords;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("pageIdentifier")
    public Optional<String> getPageIdentifier() {
        return pageIdentifier;
    }

    @JsonProperty("pageSize")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    /**
     * @return Total amount for the records.
     */
    @JsonProperty("totalAmount")
    public Optional<Double> getTotalAmount() {
        return totalAmount;
    }

    /**
     * @return Total net amount for the records.
     */
    @JsonProperty("totalNetAmount")
    public Optional<Double> getTotalNetAmount() {
        return totalNetAmount;
    }

    @JsonProperty("totalPages")
    public Optional<Integer> getTotalPages() {
        return totalPages;
    }

    @JsonProperty("totalRecords")
    public Optional<Integer> getTotalRecords() {
        return totalRecords;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QuerySummary && equalTo((QuerySummary) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QuerySummary other) {
        return pageIdentifier.equals(other.pageIdentifier)
                && pageSize.equals(other.pageSize)
                && totalAmount.equals(other.totalAmount)
                && totalNetAmount.equals(other.totalNetAmount)
                && totalPages.equals(other.totalPages)
                && totalRecords.equals(other.totalRecords);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.pageIdentifier,
                this.pageSize,
                this.totalAmount,
                this.totalNetAmount,
                this.totalPages,
                this.totalRecords);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> pageIdentifier = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<Double> totalNetAmount = Optional.empty();

        private Optional<Integer> totalPages = Optional.empty();

        private Optional<Integer> totalRecords = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QuerySummary other) {
            pageIdentifier(other.getPageIdentifier());
            pageSize(other.getPageSize());
            totalAmount(other.getTotalAmount());
            totalNetAmount(other.getTotalNetAmount());
            totalPages(other.getTotalPages());
            totalRecords(other.getTotalRecords());
            return this;
        }

        @JsonSetter(value = "pageIdentifier", nulls = Nulls.SKIP)
        public Builder pageIdentifier(Optional<String> pageIdentifier) {
            this.pageIdentifier = pageIdentifier;
            return this;
        }

        public Builder pageIdentifier(String pageIdentifier) {
            this.pageIdentifier = Optional.ofNullable(pageIdentifier);
            return this;
        }

        @JsonSetter(value = "pageSize", nulls = Nulls.SKIP)
        public Builder pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * <p>Total amount for the records.</p>
         */
        @JsonSetter(value = "totalAmount", nulls = Nulls.SKIP)
        public Builder totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * <p>Total net amount for the records.</p>
         */
        @JsonSetter(value = "totalNetAmount", nulls = Nulls.SKIP)
        public Builder totalNetAmount(Optional<Double> totalNetAmount) {
            this.totalNetAmount = totalNetAmount;
            return this;
        }

        public Builder totalNetAmount(Double totalNetAmount) {
            this.totalNetAmount = Optional.ofNullable(totalNetAmount);
            return this;
        }

        @JsonSetter(value = "totalPages", nulls = Nulls.SKIP)
        public Builder totalPages(Optional<Integer> totalPages) {
            this.totalPages = totalPages;
            return this;
        }

        public Builder totalPages(Integer totalPages) {
            this.totalPages = Optional.ofNullable(totalPages);
            return this;
        }

        @JsonSetter(value = "totalRecords", nulls = Nulls.SKIP)
        public Builder totalRecords(Optional<Integer> totalRecords) {
            this.totalRecords = totalRecords;
            return this;
        }

        public Builder totalRecords(Integer totalRecords) {
            this.totalRecords = Optional.ofNullable(totalRecords);
            return this;
        }

        public QuerySummary build() {
            return new QuerySummary(
                    pageIdentifier,
                    pageSize,
                    totalAmount,
                    totalNetAmount,
                    totalPages,
                    totalRecords,
                    additionalProperties);
        }
    }
}
