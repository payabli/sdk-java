/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GooglePayMetadata.Builder.class)
public final class GooglePayMetadata {
    private final Optional<Integer> statusCode;

    private final Optional<String> redirectUrl;

    private final Optional<String> redirectDomainName;

    private final Map<String, Object> additionalProperties;

    private GooglePayMetadata(
            Optional<Integer> statusCode,
            Optional<String> redirectUrl,
            Optional<String> redirectDomainName,
            Map<String, Object> additionalProperties) {
        this.statusCode = statusCode;
        this.redirectUrl = redirectUrl;
        this.redirectDomainName = redirectDomainName;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The status code return by the domain verification URL.
     */
    @JsonProperty("statusCode")
    public Optional<Integer> getStatusCode() {
        return statusCode;
    }

    /**
     * @return If the domain verification URL is redirected, this is the URL it's redirected to.  For example, www.partner.com could redirect to www.partners-new-home-page.com. In this case, you should add www.partners-new-home-page.com as a domain instead of www.partner.com.
     */
    @JsonProperty("redirectUrl")
    public Optional<String> getRedirectUrl() {
        return redirectUrl;
    }

    /**
     * @return The domain name if the domain verification URL returns a redirect.
     */
    @JsonProperty("redirectDomainName")
    public Optional<String> getRedirectDomainName() {
        return redirectDomainName;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GooglePayMetadata && equalTo((GooglePayMetadata) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GooglePayMetadata other) {
        return statusCode.equals(other.statusCode)
                && redirectUrl.equals(other.redirectUrl)
                && redirectDomainName.equals(other.redirectDomainName);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.statusCode, this.redirectUrl, this.redirectDomainName);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> statusCode = Optional.empty();

        private Optional<String> redirectUrl = Optional.empty();

        private Optional<String> redirectDomainName = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GooglePayMetadata other) {
            statusCode(other.getStatusCode());
            redirectUrl(other.getRedirectUrl());
            redirectDomainName(other.getRedirectDomainName());
            return this;
        }

        /**
         * <p>The status code return by the domain verification URL.</p>
         */
        @JsonSetter(value = "statusCode", nulls = Nulls.SKIP)
        public Builder statusCode(Optional<Integer> statusCode) {
            this.statusCode = statusCode;
            return this;
        }

        public Builder statusCode(Integer statusCode) {
            this.statusCode = Optional.ofNullable(statusCode);
            return this;
        }

        /**
         * <p>If the domain verification URL is redirected, this is the URL it's redirected to.  For example, www.partner.com could redirect to www.partners-new-home-page.com. In this case, you should add www.partners-new-home-page.com as a domain instead of www.partner.com.</p>
         */
        @JsonSetter(value = "redirectUrl", nulls = Nulls.SKIP)
        public Builder redirectUrl(Optional<String> redirectUrl) {
            this.redirectUrl = redirectUrl;
            return this;
        }

        public Builder redirectUrl(String redirectUrl) {
            this.redirectUrl = Optional.ofNullable(redirectUrl);
            return this;
        }

        /**
         * <p>The domain name if the domain verification URL returns a redirect.</p>
         */
        @JsonSetter(value = "redirectDomainName", nulls = Nulls.SKIP)
        public Builder redirectDomainName(Optional<String> redirectDomainName) {
            this.redirectDomainName = redirectDomainName;
            return this;
        }

        public Builder redirectDomainName(String redirectDomainName) {
            this.redirectDomainName = Optional.ofNullable(redirectDomainName);
            return this;
        }

        public GooglePayMetadata build() {
            return new GooglePayMetadata(statusCode, redirectUrl, redirectDomainName, additionalProperties);
        }
    }
}
