/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryBatchesOutResponseRecordsItem.Builder.class)
public final class QueryBatchesOutResponseRecordsItem {
    private final Optional<Double> achAmount;

    private final Optional<Integer> achRecords;

    private final Optional<Integer> achStatus;

    private final Optional<String> achStatusText;

    private final Optional<Double> batchAmount;

    private final Optional<Double> batchCancelledAmount;

    private final Optional<Integer> batchCancelledRecords;

    private final Optional<OffsetDateTime> batchDate;

    private final Optional<String> batchNumber;

    private final Optional<Double> batchPaidAmount;

    private final Optional<Integer> batchPaidRecords;

    private final Optional<Double> batchProcessedAmount;

    private final Optional<Integer> batchProcessedRecords;

    private final Optional<Double> batchProcessingAmount;

    private final Optional<Integer> batchProcessingRecords;

    private final Optional<Integer> batchRecords;

    private final Optional<Integer> batchStatus;

    private final Optional<String> batchStatusText;

    private final Optional<Double> cardAmount;

    private final Optional<Integer> cardRecords;

    private final Optional<Integer> cardStatus;

    private final Optional<String> cardStatusText;

    private final Optional<Double> checkAmount;

    private final Optional<Integer> checkRecords;

    private final Optional<Integer> checkStatus;

    private final Optional<String> checkStatusText;

    private final Optional<String> entryName;

    private final Optional<String> externalPaypointId;

    private final Optional<Integer> idBatch;

    private final Optional<String> parentOrgName;

    private final Optional<String> paypointDba;

    private final Optional<Integer> paypointId;

    private final Optional<String> paypointName;

    private final Optional<Double> vcardAmount;

    private final Optional<Integer> vcardRecords;

    private final Optional<Integer> vcardStatus;

    private final Optional<String> vcardStatusText;

    private final Optional<Double> wireAmount;

    private final Optional<Integer> wireRecords;

    private final Optional<Integer> wireStatus;

    private final Optional<String> wireStatusText;

    private final Map<String, Object> additionalProperties;

    private QueryBatchesOutResponseRecordsItem(
            Optional<Double> achAmount,
            Optional<Integer> achRecords,
            Optional<Integer> achStatus,
            Optional<String> achStatusText,
            Optional<Double> batchAmount,
            Optional<Double> batchCancelledAmount,
            Optional<Integer> batchCancelledRecords,
            Optional<OffsetDateTime> batchDate,
            Optional<String> batchNumber,
            Optional<Double> batchPaidAmount,
            Optional<Integer> batchPaidRecords,
            Optional<Double> batchProcessedAmount,
            Optional<Integer> batchProcessedRecords,
            Optional<Double> batchProcessingAmount,
            Optional<Integer> batchProcessingRecords,
            Optional<Integer> batchRecords,
            Optional<Integer> batchStatus,
            Optional<String> batchStatusText,
            Optional<Double> cardAmount,
            Optional<Integer> cardRecords,
            Optional<Integer> cardStatus,
            Optional<String> cardStatusText,
            Optional<Double> checkAmount,
            Optional<Integer> checkRecords,
            Optional<Integer> checkStatus,
            Optional<String> checkStatusText,
            Optional<String> entryName,
            Optional<String> externalPaypointId,
            Optional<Integer> idBatch,
            Optional<String> parentOrgName,
            Optional<String> paypointDba,
            Optional<Integer> paypointId,
            Optional<String> paypointName,
            Optional<Double> vcardAmount,
            Optional<Integer> vcardRecords,
            Optional<Integer> vcardStatus,
            Optional<String> vcardStatusText,
            Optional<Double> wireAmount,
            Optional<Integer> wireRecords,
            Optional<Integer> wireStatus,
            Optional<String> wireStatusText,
            Map<String, Object> additionalProperties) {
        this.achAmount = achAmount;
        this.achRecords = achRecords;
        this.achStatus = achStatus;
        this.achStatusText = achStatusText;
        this.batchAmount = batchAmount;
        this.batchCancelledAmount = batchCancelledAmount;
        this.batchCancelledRecords = batchCancelledRecords;
        this.batchDate = batchDate;
        this.batchNumber = batchNumber;
        this.batchPaidAmount = batchPaidAmount;
        this.batchPaidRecords = batchPaidRecords;
        this.batchProcessedAmount = batchProcessedAmount;
        this.batchProcessedRecords = batchProcessedRecords;
        this.batchProcessingAmount = batchProcessingAmount;
        this.batchProcessingRecords = batchProcessingRecords;
        this.batchRecords = batchRecords;
        this.batchStatus = batchStatus;
        this.batchStatusText = batchStatusText;
        this.cardAmount = cardAmount;
        this.cardRecords = cardRecords;
        this.cardStatus = cardStatus;
        this.cardStatusText = cardStatusText;
        this.checkAmount = checkAmount;
        this.checkRecords = checkRecords;
        this.checkStatus = checkStatus;
        this.checkStatusText = checkStatusText;
        this.entryName = entryName;
        this.externalPaypointId = externalPaypointId;
        this.idBatch = idBatch;
        this.parentOrgName = parentOrgName;
        this.paypointDba = paypointDba;
        this.paypointId = paypointId;
        this.paypointName = paypointName;
        this.vcardAmount = vcardAmount;
        this.vcardRecords = vcardRecords;
        this.vcardStatus = vcardStatus;
        this.vcardStatusText = vcardStatusText;
        this.wireAmount = wireAmount;
        this.wireRecords = wireRecords;
        this.wireStatus = wireStatus;
        this.wireStatusText = wireStatusText;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return
     */
    @JsonProperty("AchAmount")
    public Optional<Double> getAchAmount() {
        return achAmount;
    }

    /**
     * @return
     */
    @JsonProperty("AchRecords")
    public Optional<Integer> getAchRecords() {
        return achRecords;
    }

    /**
     * @return
     */
    @JsonProperty("AchStatus")
    public Optional<Integer> getAchStatus() {
        return achStatus;
    }

    /**
     * @return
     */
    @JsonProperty("AchStatusText")
    public Optional<String> getAchStatusText() {
        return achStatusText;
    }

    /**
     * @return The amount of the batch.
     */
    @JsonProperty("BatchAmount")
    public Optional<Double> getBatchAmount() {
        return batchAmount;
    }

    /**
     * @return
     */
    @JsonProperty("BatchCancelledAmount")
    public Optional<Double> getBatchCancelledAmount() {
        return batchCancelledAmount;
    }

    /**
     * @return
     */
    @JsonProperty("BatchCancelledRecords")
    public Optional<Integer> getBatchCancelledRecords() {
        return batchCancelledRecords;
    }

    /**
     * @return The batch date.
     */
    @JsonProperty("BatchDate")
    public Optional<OffsetDateTime> getBatchDate() {
        return batchDate;
    }

    @JsonProperty("BatchNumber")
    public Optional<String> getBatchNumber() {
        return batchNumber;
    }

    /**
     * @return
     */
    @JsonProperty("BatchPaidAmount")
    public Optional<Double> getBatchPaidAmount() {
        return batchPaidAmount;
    }

    /**
     * @return
     */
    @JsonProperty("BatchPaidRecords")
    public Optional<Integer> getBatchPaidRecords() {
        return batchPaidRecords;
    }

    /**
     * @return
     */
    @JsonProperty("BatchProcessedAmount")
    public Optional<Double> getBatchProcessedAmount() {
        return batchProcessedAmount;
    }

    /**
     * @return
     */
    @JsonProperty("BatchProcessedRecords")
    public Optional<Integer> getBatchProcessedRecords() {
        return batchProcessedRecords;
    }

    /**
     * @return
     */
    @JsonProperty("BatchProcessingAmount")
    public Optional<Double> getBatchProcessingAmount() {
        return batchProcessingAmount;
    }

    /**
     * @return
     */
    @JsonProperty("BatchProcessingRecords")
    public Optional<Integer> getBatchProcessingRecords() {
        return batchProcessingRecords;
    }

    /**
     * @return The number of records in the batch.
     */
    @JsonProperty("BatchRecords")
    public Optional<Integer> getBatchRecords() {
        return batchRecords;
    }

    /**
     * @return The batch status. See <a href="/developers/references/money-out-statuses#batch-statuses">Batch Status</a> for more.
     */
    @JsonProperty("BatchStatus")
    public Optional<Integer> getBatchStatus() {
        return batchStatus;
    }

    /**
     * @return A text description of the batch status.
     */
    @JsonProperty("BatchStatusText")
    public Optional<String> getBatchStatusText() {
        return batchStatusText;
    }

    /**
     * @return
     */
    @JsonProperty("CardAmount")
    public Optional<Double> getCardAmount() {
        return cardAmount;
    }

    /**
     * @return
     */
    @JsonProperty("CardRecords")
    public Optional<Integer> getCardRecords() {
        return cardRecords;
    }

    /**
     * @return
     */
    @JsonProperty("CardStatus")
    public Optional<Integer> getCardStatus() {
        return cardStatus;
    }

    /**
     * @return
     */
    @JsonProperty("CardStatusText")
    public Optional<String> getCardStatusText() {
        return cardStatusText;
    }

    /**
     * @return
     */
    @JsonProperty("CheckAmount")
    public Optional<Double> getCheckAmount() {
        return checkAmount;
    }

    /**
     * @return
     */
    @JsonProperty("CheckRecords")
    public Optional<Integer> getCheckRecords() {
        return checkRecords;
    }

    /**
     * @return
     */
    @JsonProperty("CheckStatus")
    public Optional<Integer> getCheckStatus() {
        return checkStatus;
    }

    /**
     * @return
     */
    @JsonProperty("CheckStatusText")
    public Optional<String> getCheckStatusText() {
        return checkStatusText;
    }

    @JsonProperty("EntryName")
    public Optional<String> getEntryName() {
        return entryName;
    }

    @JsonProperty("externalPaypointID")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    /**
     * @return The batch ID.
     */
    @JsonProperty("IdBatch")
    public Optional<Integer> getIdBatch() {
        return idBatch;
    }

    /**
     * @return The entrypoint's parent org.
     */
    @JsonProperty("ParentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    /**
     * @return Paypoint DBA name.
     */
    @JsonProperty("PaypointDba")
    public Optional<String> getPaypointDba() {
        return paypointDba;
    }

    /**
     * @return Paypoint ID.
     */
    @JsonProperty("PaypointId")
    public Optional<Integer> getPaypointId() {
        return paypointId;
    }

    /**
     * @return Paypoint legal name.
     */
    @JsonProperty("PaypointName")
    public Optional<String> getPaypointName() {
        return paypointName;
    }

    /**
     * @return
     */
    @JsonProperty("VcardAmount")
    public Optional<Double> getVcardAmount() {
        return vcardAmount;
    }

    /**
     * @return
     */
    @JsonProperty("VcardRecords")
    public Optional<Integer> getVcardRecords() {
        return vcardRecords;
    }

    /**
     * @return
     */
    @JsonProperty("VcardStatus")
    public Optional<Integer> getVcardStatus() {
        return vcardStatus;
    }

    /**
     * @return
     */
    @JsonProperty("VcardStatusText")
    public Optional<String> getVcardStatusText() {
        return vcardStatusText;
    }

    /**
     * @return
     */
    @JsonProperty("WireAmount")
    public Optional<Double> getWireAmount() {
        return wireAmount;
    }

    /**
     * @return
     */
    @JsonProperty("WireRecords")
    public Optional<Integer> getWireRecords() {
        return wireRecords;
    }

    /**
     * @return
     */
    @JsonProperty("WireStatus")
    public Optional<Integer> getWireStatus() {
        return wireStatus;
    }

    /**
     * @return
     */
    @JsonProperty("WireStatusText")
    public Optional<String> getWireStatusText() {
        return wireStatusText;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryBatchesOutResponseRecordsItem
                && equalTo((QueryBatchesOutResponseRecordsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryBatchesOutResponseRecordsItem other) {
        return achAmount.equals(other.achAmount)
                && achRecords.equals(other.achRecords)
                && achStatus.equals(other.achStatus)
                && achStatusText.equals(other.achStatusText)
                && batchAmount.equals(other.batchAmount)
                && batchCancelledAmount.equals(other.batchCancelledAmount)
                && batchCancelledRecords.equals(other.batchCancelledRecords)
                && batchDate.equals(other.batchDate)
                && batchNumber.equals(other.batchNumber)
                && batchPaidAmount.equals(other.batchPaidAmount)
                && batchPaidRecords.equals(other.batchPaidRecords)
                && batchProcessedAmount.equals(other.batchProcessedAmount)
                && batchProcessedRecords.equals(other.batchProcessedRecords)
                && batchProcessingAmount.equals(other.batchProcessingAmount)
                && batchProcessingRecords.equals(other.batchProcessingRecords)
                && batchRecords.equals(other.batchRecords)
                && batchStatus.equals(other.batchStatus)
                && batchStatusText.equals(other.batchStatusText)
                && cardAmount.equals(other.cardAmount)
                && cardRecords.equals(other.cardRecords)
                && cardStatus.equals(other.cardStatus)
                && cardStatusText.equals(other.cardStatusText)
                && checkAmount.equals(other.checkAmount)
                && checkRecords.equals(other.checkRecords)
                && checkStatus.equals(other.checkStatus)
                && checkStatusText.equals(other.checkStatusText)
                && entryName.equals(other.entryName)
                && externalPaypointId.equals(other.externalPaypointId)
                && idBatch.equals(other.idBatch)
                && parentOrgName.equals(other.parentOrgName)
                && paypointDba.equals(other.paypointDba)
                && paypointId.equals(other.paypointId)
                && paypointName.equals(other.paypointName)
                && vcardAmount.equals(other.vcardAmount)
                && vcardRecords.equals(other.vcardRecords)
                && vcardStatus.equals(other.vcardStatus)
                && vcardStatusText.equals(other.vcardStatusText)
                && wireAmount.equals(other.wireAmount)
                && wireRecords.equals(other.wireRecords)
                && wireStatus.equals(other.wireStatus)
                && wireStatusText.equals(other.wireStatusText);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.achAmount,
                this.achRecords,
                this.achStatus,
                this.achStatusText,
                this.batchAmount,
                this.batchCancelledAmount,
                this.batchCancelledRecords,
                this.batchDate,
                this.batchNumber,
                this.batchPaidAmount,
                this.batchPaidRecords,
                this.batchProcessedAmount,
                this.batchProcessedRecords,
                this.batchProcessingAmount,
                this.batchProcessingRecords,
                this.batchRecords,
                this.batchStatus,
                this.batchStatusText,
                this.cardAmount,
                this.cardRecords,
                this.cardStatus,
                this.cardStatusText,
                this.checkAmount,
                this.checkRecords,
                this.checkStatus,
                this.checkStatusText,
                this.entryName,
                this.externalPaypointId,
                this.idBatch,
                this.parentOrgName,
                this.paypointDba,
                this.paypointId,
                this.paypointName,
                this.vcardAmount,
                this.vcardRecords,
                this.vcardStatus,
                this.vcardStatusText,
                this.wireAmount,
                this.wireRecords,
                this.wireStatus,
                this.wireStatusText);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> achAmount = Optional.empty();

        private Optional<Integer> achRecords = Optional.empty();

        private Optional<Integer> achStatus = Optional.empty();

        private Optional<String> achStatusText = Optional.empty();

        private Optional<Double> batchAmount = Optional.empty();

        private Optional<Double> batchCancelledAmount = Optional.empty();

        private Optional<Integer> batchCancelledRecords = Optional.empty();

        private Optional<OffsetDateTime> batchDate = Optional.empty();

        private Optional<String> batchNumber = Optional.empty();

        private Optional<Double> batchPaidAmount = Optional.empty();

        private Optional<Integer> batchPaidRecords = Optional.empty();

        private Optional<Double> batchProcessedAmount = Optional.empty();

        private Optional<Integer> batchProcessedRecords = Optional.empty();

        private Optional<Double> batchProcessingAmount = Optional.empty();

        private Optional<Integer> batchProcessingRecords = Optional.empty();

        private Optional<Integer> batchRecords = Optional.empty();

        private Optional<Integer> batchStatus = Optional.empty();

        private Optional<String> batchStatusText = Optional.empty();

        private Optional<Double> cardAmount = Optional.empty();

        private Optional<Integer> cardRecords = Optional.empty();

        private Optional<Integer> cardStatus = Optional.empty();

        private Optional<String> cardStatusText = Optional.empty();

        private Optional<Double> checkAmount = Optional.empty();

        private Optional<Integer> checkRecords = Optional.empty();

        private Optional<Integer> checkStatus = Optional.empty();

        private Optional<String> checkStatusText = Optional.empty();

        private Optional<String> entryName = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<Integer> idBatch = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<String> paypointDba = Optional.empty();

        private Optional<Integer> paypointId = Optional.empty();

        private Optional<String> paypointName = Optional.empty();

        private Optional<Double> vcardAmount = Optional.empty();

        private Optional<Integer> vcardRecords = Optional.empty();

        private Optional<Integer> vcardStatus = Optional.empty();

        private Optional<String> vcardStatusText = Optional.empty();

        private Optional<Double> wireAmount = Optional.empty();

        private Optional<Integer> wireRecords = Optional.empty();

        private Optional<Integer> wireStatus = Optional.empty();

        private Optional<String> wireStatusText = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryBatchesOutResponseRecordsItem other) {
            achAmount(other.getAchAmount());
            achRecords(other.getAchRecords());
            achStatus(other.getAchStatus());
            achStatusText(other.getAchStatusText());
            batchAmount(other.getBatchAmount());
            batchCancelledAmount(other.getBatchCancelledAmount());
            batchCancelledRecords(other.getBatchCancelledRecords());
            batchDate(other.getBatchDate());
            batchNumber(other.getBatchNumber());
            batchPaidAmount(other.getBatchPaidAmount());
            batchPaidRecords(other.getBatchPaidRecords());
            batchProcessedAmount(other.getBatchProcessedAmount());
            batchProcessedRecords(other.getBatchProcessedRecords());
            batchProcessingAmount(other.getBatchProcessingAmount());
            batchProcessingRecords(other.getBatchProcessingRecords());
            batchRecords(other.getBatchRecords());
            batchStatus(other.getBatchStatus());
            batchStatusText(other.getBatchStatusText());
            cardAmount(other.getCardAmount());
            cardRecords(other.getCardRecords());
            cardStatus(other.getCardStatus());
            cardStatusText(other.getCardStatusText());
            checkAmount(other.getCheckAmount());
            checkRecords(other.getCheckRecords());
            checkStatus(other.getCheckStatus());
            checkStatusText(other.getCheckStatusText());
            entryName(other.getEntryName());
            externalPaypointId(other.getExternalPaypointId());
            idBatch(other.getIdBatch());
            parentOrgName(other.getParentOrgName());
            paypointDba(other.getPaypointDba());
            paypointId(other.getPaypointId());
            paypointName(other.getPaypointName());
            vcardAmount(other.getVcardAmount());
            vcardRecords(other.getVcardRecords());
            vcardStatus(other.getVcardStatus());
            vcardStatusText(other.getVcardStatusText());
            wireAmount(other.getWireAmount());
            wireRecords(other.getWireRecords());
            wireStatus(other.getWireStatus());
            wireStatusText(other.getWireStatusText());
            return this;
        }

        @JsonSetter(value = "AchAmount", nulls = Nulls.SKIP)
        public Builder achAmount(Optional<Double> achAmount) {
            this.achAmount = achAmount;
            return this;
        }

        public Builder achAmount(Double achAmount) {
            this.achAmount = Optional.ofNullable(achAmount);
            return this;
        }

        @JsonSetter(value = "AchRecords", nulls = Nulls.SKIP)
        public Builder achRecords(Optional<Integer> achRecords) {
            this.achRecords = achRecords;
            return this;
        }

        public Builder achRecords(Integer achRecords) {
            this.achRecords = Optional.ofNullable(achRecords);
            return this;
        }

        @JsonSetter(value = "AchStatus", nulls = Nulls.SKIP)
        public Builder achStatus(Optional<Integer> achStatus) {
            this.achStatus = achStatus;
            return this;
        }

        public Builder achStatus(Integer achStatus) {
            this.achStatus = Optional.ofNullable(achStatus);
            return this;
        }

        @JsonSetter(value = "AchStatusText", nulls = Nulls.SKIP)
        public Builder achStatusText(Optional<String> achStatusText) {
            this.achStatusText = achStatusText;
            return this;
        }

        public Builder achStatusText(String achStatusText) {
            this.achStatusText = Optional.ofNullable(achStatusText);
            return this;
        }

        /**
         * <p>The amount of the batch.</p>
         */
        @JsonSetter(value = "BatchAmount", nulls = Nulls.SKIP)
        public Builder batchAmount(Optional<Double> batchAmount) {
            this.batchAmount = batchAmount;
            return this;
        }

        public Builder batchAmount(Double batchAmount) {
            this.batchAmount = Optional.ofNullable(batchAmount);
            return this;
        }

        @JsonSetter(value = "BatchCancelledAmount", nulls = Nulls.SKIP)
        public Builder batchCancelledAmount(Optional<Double> batchCancelledAmount) {
            this.batchCancelledAmount = batchCancelledAmount;
            return this;
        }

        public Builder batchCancelledAmount(Double batchCancelledAmount) {
            this.batchCancelledAmount = Optional.ofNullable(batchCancelledAmount);
            return this;
        }

        @JsonSetter(value = "BatchCancelledRecords", nulls = Nulls.SKIP)
        public Builder batchCancelledRecords(Optional<Integer> batchCancelledRecords) {
            this.batchCancelledRecords = batchCancelledRecords;
            return this;
        }

        public Builder batchCancelledRecords(Integer batchCancelledRecords) {
            this.batchCancelledRecords = Optional.ofNullable(batchCancelledRecords);
            return this;
        }

        /**
         * <p>The batch date.</p>
         */
        @JsonSetter(value = "BatchDate", nulls = Nulls.SKIP)
        public Builder batchDate(Optional<OffsetDateTime> batchDate) {
            this.batchDate = batchDate;
            return this;
        }

        public Builder batchDate(OffsetDateTime batchDate) {
            this.batchDate = Optional.ofNullable(batchDate);
            return this;
        }

        @JsonSetter(value = "BatchNumber", nulls = Nulls.SKIP)
        public Builder batchNumber(Optional<String> batchNumber) {
            this.batchNumber = batchNumber;
            return this;
        }

        public Builder batchNumber(String batchNumber) {
            this.batchNumber = Optional.ofNullable(batchNumber);
            return this;
        }

        @JsonSetter(value = "BatchPaidAmount", nulls = Nulls.SKIP)
        public Builder batchPaidAmount(Optional<Double> batchPaidAmount) {
            this.batchPaidAmount = batchPaidAmount;
            return this;
        }

        public Builder batchPaidAmount(Double batchPaidAmount) {
            this.batchPaidAmount = Optional.ofNullable(batchPaidAmount);
            return this;
        }

        @JsonSetter(value = "BatchPaidRecords", nulls = Nulls.SKIP)
        public Builder batchPaidRecords(Optional<Integer> batchPaidRecords) {
            this.batchPaidRecords = batchPaidRecords;
            return this;
        }

        public Builder batchPaidRecords(Integer batchPaidRecords) {
            this.batchPaidRecords = Optional.ofNullable(batchPaidRecords);
            return this;
        }

        @JsonSetter(value = "BatchProcessedAmount", nulls = Nulls.SKIP)
        public Builder batchProcessedAmount(Optional<Double> batchProcessedAmount) {
            this.batchProcessedAmount = batchProcessedAmount;
            return this;
        }

        public Builder batchProcessedAmount(Double batchProcessedAmount) {
            this.batchProcessedAmount = Optional.ofNullable(batchProcessedAmount);
            return this;
        }

        @JsonSetter(value = "BatchProcessedRecords", nulls = Nulls.SKIP)
        public Builder batchProcessedRecords(Optional<Integer> batchProcessedRecords) {
            this.batchProcessedRecords = batchProcessedRecords;
            return this;
        }

        public Builder batchProcessedRecords(Integer batchProcessedRecords) {
            this.batchProcessedRecords = Optional.ofNullable(batchProcessedRecords);
            return this;
        }

        @JsonSetter(value = "BatchProcessingAmount", nulls = Nulls.SKIP)
        public Builder batchProcessingAmount(Optional<Double> batchProcessingAmount) {
            this.batchProcessingAmount = batchProcessingAmount;
            return this;
        }

        public Builder batchProcessingAmount(Double batchProcessingAmount) {
            this.batchProcessingAmount = Optional.ofNullable(batchProcessingAmount);
            return this;
        }

        @JsonSetter(value = "BatchProcessingRecords", nulls = Nulls.SKIP)
        public Builder batchProcessingRecords(Optional<Integer> batchProcessingRecords) {
            this.batchProcessingRecords = batchProcessingRecords;
            return this;
        }

        public Builder batchProcessingRecords(Integer batchProcessingRecords) {
            this.batchProcessingRecords = Optional.ofNullable(batchProcessingRecords);
            return this;
        }

        /**
         * <p>The number of records in the batch.</p>
         */
        @JsonSetter(value = "BatchRecords", nulls = Nulls.SKIP)
        public Builder batchRecords(Optional<Integer> batchRecords) {
            this.batchRecords = batchRecords;
            return this;
        }

        public Builder batchRecords(Integer batchRecords) {
            this.batchRecords = Optional.ofNullable(batchRecords);
            return this;
        }

        /**
         * <p>The batch status. See <a href="/developers/references/money-out-statuses#batch-statuses">Batch Status</a> for more.</p>
         */
        @JsonSetter(value = "BatchStatus", nulls = Nulls.SKIP)
        public Builder batchStatus(Optional<Integer> batchStatus) {
            this.batchStatus = batchStatus;
            return this;
        }

        public Builder batchStatus(Integer batchStatus) {
            this.batchStatus = Optional.ofNullable(batchStatus);
            return this;
        }

        /**
         * <p>A text description of the batch status.</p>
         */
        @JsonSetter(value = "BatchStatusText", nulls = Nulls.SKIP)
        public Builder batchStatusText(Optional<String> batchStatusText) {
            this.batchStatusText = batchStatusText;
            return this;
        }

        public Builder batchStatusText(String batchStatusText) {
            this.batchStatusText = Optional.ofNullable(batchStatusText);
            return this;
        }

        @JsonSetter(value = "CardAmount", nulls = Nulls.SKIP)
        public Builder cardAmount(Optional<Double> cardAmount) {
            this.cardAmount = cardAmount;
            return this;
        }

        public Builder cardAmount(Double cardAmount) {
            this.cardAmount = Optional.ofNullable(cardAmount);
            return this;
        }

        @JsonSetter(value = "CardRecords", nulls = Nulls.SKIP)
        public Builder cardRecords(Optional<Integer> cardRecords) {
            this.cardRecords = cardRecords;
            return this;
        }

        public Builder cardRecords(Integer cardRecords) {
            this.cardRecords = Optional.ofNullable(cardRecords);
            return this;
        }

        @JsonSetter(value = "CardStatus", nulls = Nulls.SKIP)
        public Builder cardStatus(Optional<Integer> cardStatus) {
            this.cardStatus = cardStatus;
            return this;
        }

        public Builder cardStatus(Integer cardStatus) {
            this.cardStatus = Optional.ofNullable(cardStatus);
            return this;
        }

        @JsonSetter(value = "CardStatusText", nulls = Nulls.SKIP)
        public Builder cardStatusText(Optional<String> cardStatusText) {
            this.cardStatusText = cardStatusText;
            return this;
        }

        public Builder cardStatusText(String cardStatusText) {
            this.cardStatusText = Optional.ofNullable(cardStatusText);
            return this;
        }

        @JsonSetter(value = "CheckAmount", nulls = Nulls.SKIP)
        public Builder checkAmount(Optional<Double> checkAmount) {
            this.checkAmount = checkAmount;
            return this;
        }

        public Builder checkAmount(Double checkAmount) {
            this.checkAmount = Optional.ofNullable(checkAmount);
            return this;
        }

        @JsonSetter(value = "CheckRecords", nulls = Nulls.SKIP)
        public Builder checkRecords(Optional<Integer> checkRecords) {
            this.checkRecords = checkRecords;
            return this;
        }

        public Builder checkRecords(Integer checkRecords) {
            this.checkRecords = Optional.ofNullable(checkRecords);
            return this;
        }

        @JsonSetter(value = "CheckStatus", nulls = Nulls.SKIP)
        public Builder checkStatus(Optional<Integer> checkStatus) {
            this.checkStatus = checkStatus;
            return this;
        }

        public Builder checkStatus(Integer checkStatus) {
            this.checkStatus = Optional.ofNullable(checkStatus);
            return this;
        }

        @JsonSetter(value = "CheckStatusText", nulls = Nulls.SKIP)
        public Builder checkStatusText(Optional<String> checkStatusText) {
            this.checkStatusText = checkStatusText;
            return this;
        }

        public Builder checkStatusText(String checkStatusText) {
            this.checkStatusText = Optional.ofNullable(checkStatusText);
            return this;
        }

        @JsonSetter(value = "EntryName", nulls = Nulls.SKIP)
        public Builder entryName(Optional<String> entryName) {
            this.entryName = entryName;
            return this;
        }

        public Builder entryName(String entryName) {
            this.entryName = Optional.ofNullable(entryName);
            return this;
        }

        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        /**
         * <p>The batch ID.</p>
         */
        @JsonSetter(value = "IdBatch", nulls = Nulls.SKIP)
        public Builder idBatch(Optional<Integer> idBatch) {
            this.idBatch = idBatch;
            return this;
        }

        public Builder idBatch(Integer idBatch) {
            this.idBatch = Optional.ofNullable(idBatch);
            return this;
        }

        /**
         * <p>The entrypoint's parent org.</p>
         */
        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        /**
         * <p>Paypoint DBA name.</p>
         */
        @JsonSetter(value = "PaypointDba", nulls = Nulls.SKIP)
        public Builder paypointDba(Optional<String> paypointDba) {
            this.paypointDba = paypointDba;
            return this;
        }

        public Builder paypointDba(String paypointDba) {
            this.paypointDba = Optional.ofNullable(paypointDba);
            return this;
        }

        /**
         * <p>Paypoint ID.</p>
         */
        @JsonSetter(value = "PaypointId", nulls = Nulls.SKIP)
        public Builder paypointId(Optional<Integer> paypointId) {
            this.paypointId = paypointId;
            return this;
        }

        public Builder paypointId(Integer paypointId) {
            this.paypointId = Optional.ofNullable(paypointId);
            return this;
        }

        /**
         * <p>Paypoint legal name.</p>
         */
        @JsonSetter(value = "PaypointName", nulls = Nulls.SKIP)
        public Builder paypointName(Optional<String> paypointName) {
            this.paypointName = paypointName;
            return this;
        }

        public Builder paypointName(String paypointName) {
            this.paypointName = Optional.ofNullable(paypointName);
            return this;
        }

        @JsonSetter(value = "VcardAmount", nulls = Nulls.SKIP)
        public Builder vcardAmount(Optional<Double> vcardAmount) {
            this.vcardAmount = vcardAmount;
            return this;
        }

        public Builder vcardAmount(Double vcardAmount) {
            this.vcardAmount = Optional.ofNullable(vcardAmount);
            return this;
        }

        @JsonSetter(value = "VcardRecords", nulls = Nulls.SKIP)
        public Builder vcardRecords(Optional<Integer> vcardRecords) {
            this.vcardRecords = vcardRecords;
            return this;
        }

        public Builder vcardRecords(Integer vcardRecords) {
            this.vcardRecords = Optional.ofNullable(vcardRecords);
            return this;
        }

        @JsonSetter(value = "VcardStatus", nulls = Nulls.SKIP)
        public Builder vcardStatus(Optional<Integer> vcardStatus) {
            this.vcardStatus = vcardStatus;
            return this;
        }

        public Builder vcardStatus(Integer vcardStatus) {
            this.vcardStatus = Optional.ofNullable(vcardStatus);
            return this;
        }

        @JsonSetter(value = "VcardStatusText", nulls = Nulls.SKIP)
        public Builder vcardStatusText(Optional<String> vcardStatusText) {
            this.vcardStatusText = vcardStatusText;
            return this;
        }

        public Builder vcardStatusText(String vcardStatusText) {
            this.vcardStatusText = Optional.ofNullable(vcardStatusText);
            return this;
        }

        @JsonSetter(value = "WireAmount", nulls = Nulls.SKIP)
        public Builder wireAmount(Optional<Double> wireAmount) {
            this.wireAmount = wireAmount;
            return this;
        }

        public Builder wireAmount(Double wireAmount) {
            this.wireAmount = Optional.ofNullable(wireAmount);
            return this;
        }

        @JsonSetter(value = "WireRecords", nulls = Nulls.SKIP)
        public Builder wireRecords(Optional<Integer> wireRecords) {
            this.wireRecords = wireRecords;
            return this;
        }

        public Builder wireRecords(Integer wireRecords) {
            this.wireRecords = Optional.ofNullable(wireRecords);
            return this;
        }

        @JsonSetter(value = "WireStatus", nulls = Nulls.SKIP)
        public Builder wireStatus(Optional<Integer> wireStatus) {
            this.wireStatus = wireStatus;
            return this;
        }

        public Builder wireStatus(Integer wireStatus) {
            this.wireStatus = Optional.ofNullable(wireStatus);
            return this;
        }

        @JsonSetter(value = "WireStatusText", nulls = Nulls.SKIP)
        public Builder wireStatusText(Optional<String> wireStatusText) {
            this.wireStatusText = wireStatusText;
            return this;
        }

        public Builder wireStatusText(String wireStatusText) {
            this.wireStatusText = Optional.ofNullable(wireStatusText);
            return this;
        }

        public QueryBatchesOutResponseRecordsItem build() {
            return new QueryBatchesOutResponseRecordsItem(
                    achAmount,
                    achRecords,
                    achStatus,
                    achStatusText,
                    batchAmount,
                    batchCancelledAmount,
                    batchCancelledRecords,
                    batchDate,
                    batchNumber,
                    batchPaidAmount,
                    batchPaidRecords,
                    batchProcessedAmount,
                    batchProcessedRecords,
                    batchProcessingAmount,
                    batchProcessingRecords,
                    batchRecords,
                    batchStatus,
                    batchStatusText,
                    cardAmount,
                    cardRecords,
                    cardStatus,
                    cardStatusText,
                    checkAmount,
                    checkRecords,
                    checkStatus,
                    checkStatusText,
                    entryName,
                    externalPaypointId,
                    idBatch,
                    parentOrgName,
                    paypointDba,
                    paypointId,
                    paypointName,
                    vcardAmount,
                    vcardRecords,
                    vcardStatus,
                    vcardStatusText,
                    wireAmount,
                    wireRecords,
                    wireStatus,
                    wireStatusText,
                    additionalProperties);
        }
    }
}
