/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AchPaymentMethod.Builder.class)
public final class AchPaymentMethod {
    private final Optional<String> storedMethodId;

    private final Map<String, Object> additionalProperties;

    private AchPaymentMethod(Optional<String> storedMethodId, Map<String, Object> additionalProperties) {
        this.storedMethodId = storedMethodId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Payment method type
     */
    @JsonProperty("method")
    public String getMethod() {
        return "ach";
    }

    /**
     * @return ID of the stored ACH payment method. Required when using a previously saved ACH method when the vendor has more than one saved method. See the <a href="/developers/developer-guides/pay-out-manage-payouts">Payouts with saved ACH payment methods</a> section for more details.
     */
    @JsonProperty("storedMethodId")
    public Optional<String> getStoredMethodId() {
        return storedMethodId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AchPaymentMethod && equalTo((AchPaymentMethod) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AchPaymentMethod other) {
        return storedMethodId.equals(other.storedMethodId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.storedMethodId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> storedMethodId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AchPaymentMethod other) {
            storedMethodId(other.getStoredMethodId());
            return this;
        }

        /**
         * <p>ID of the stored ACH payment method. Required when using a previously saved ACH method when the vendor has more than one saved method. See the <a href="/developers/developer-guides/pay-out-manage-payouts">Payouts with saved ACH payment methods</a> section for more details.</p>
         */
        @JsonSetter(value = "storedMethodId", nulls = Nulls.SKIP)
        public Builder storedMethodId(Optional<String> storedMethodId) {
            this.storedMethodId = storedMethodId;
            return this;
        }

        public Builder storedMethodId(String storedMethodId) {
            this.storedMethodId = Optional.ofNullable(storedMethodId);
            return this;
        }

        public AchPaymentMethod build() {
            return new AchPaymentMethod(storedMethodId, additionalProperties);
        }
    }
}
