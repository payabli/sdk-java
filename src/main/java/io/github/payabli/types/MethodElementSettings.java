/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MethodElementSettings.Builder.class)
public final class MethodElementSettings {
    private final Optional<MethodElementSettingsApplePay> applePay;

    private final Map<String, Object> additionalProperties;

    private MethodElementSettings(
            Optional<MethodElementSettingsApplePay> applePay, Map<String, Object> additionalProperties) {
        this.applePay = applePay;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("applePay")
    public Optional<MethodElementSettingsApplePay> getApplePay() {
        return applePay;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MethodElementSettings && equalTo((MethodElementSettings) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MethodElementSettings other) {
        return applePay.equals(other.applePay);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.applePay);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<MethodElementSettingsApplePay> applePay = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(MethodElementSettings other) {
            applePay(other.getApplePay());
            return this;
        }

        @JsonSetter(value = "applePay", nulls = Nulls.SKIP)
        public Builder applePay(Optional<MethodElementSettingsApplePay> applePay) {
            this.applePay = applePay;
            return this;
        }

        public Builder applePay(MethodElementSettingsApplePay applePay) {
            this.applePay = Optional.ofNullable(applePay);
            return this;
        }

        public MethodElementSettings build() {
            return new MethodElementSettings(applePay, additionalProperties);
        }
    }
}
