/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentCategories.Builder.class)
public final class PaymentCategories {
    private final double amount;

    private final Optional<String> description;

    private final String label;

    private final Optional<Integer> qty;

    private final Map<String, Object> additionalProperties;

    private PaymentCategories(
            double amount,
            Optional<String> description,
            String label,
            Optional<Integer> qty,
            Map<String, Object> additionalProperties) {
        this.amount = amount;
        this.description = description;
        this.label = label;
        this.qty = qty;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Price/cost per unit of item or category.
     */
    @JsonProperty("amount")
    public double getAmount() {
        return amount;
    }

    /**
     * @return Description of item or category
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return Name of item or category.
     */
    @JsonProperty("label")
    public String getLabel() {
        return label;
    }

    /**
     * @return Quantity of item or category
     */
    @JsonProperty("qty")
    public Optional<Integer> getQty() {
        return qty;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentCategories && equalTo((PaymentCategories) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentCategories other) {
        return amount == other.amount
                && description.equals(other.description)
                && label.equals(other.label)
                && qty.equals(other.qty);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.amount, this.description, this.label, this.qty);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AmountStage builder() {
        return new Builder();
    }

    public interface AmountStage {
        /**
         * <p>Price/cost per unit of item or category.</p>
         */
        LabelStage amount(double amount);

        Builder from(PaymentCategories other);
    }

    public interface LabelStage {
        /**
         * <p>Name of item or category.</p>
         */
        _FinalStage label(@NotNull String label);
    }

    public interface _FinalStage {
        PaymentCategories build();

        /**
         * <p>Description of item or category</p>
         */
        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        /**
         * <p>Quantity of item or category</p>
         */
        _FinalStage qty(Optional<Integer> qty);

        _FinalStage qty(Integer qty);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AmountStage, LabelStage, _FinalStage {
        private double amount;

        private String label;

        private Optional<Integer> qty = Optional.empty();

        private Optional<String> description = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaymentCategories other) {
            amount(other.getAmount());
            description(other.getDescription());
            label(other.getLabel());
            qty(other.getQty());
            return this;
        }

        /**
         * <p>Price/cost per unit of item or category.</p>
         * <p>Price/cost per unit of item or category.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amount")
        public LabelStage amount(double amount) {
            this.amount = amount;
            return this;
        }

        /**
         * <p>Name of item or category.</p>
         * <p>Name of item or category.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("label")
        public _FinalStage label(@NotNull String label) {
            this.label = Objects.requireNonNull(label, "label must not be null");
            return this;
        }

        /**
         * <p>Quantity of item or category</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage qty(Integer qty) {
            this.qty = Optional.ofNullable(qty);
            return this;
        }

        /**
         * <p>Quantity of item or category</p>
         */
        @java.lang.Override
        @JsonSetter(value = "qty", nulls = Nulls.SKIP)
        public _FinalStage qty(Optional<Integer> qty) {
            this.qty = qty;
            return this;
        }

        /**
         * <p>Description of item or category</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>Description of item or category</p>
         */
        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public PaymentCategories build() {
            return new PaymentCategories(amount, description, label, qty, additionalProperties);
        }
    }
}
