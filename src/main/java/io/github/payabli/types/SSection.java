/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SSection.Builder.class)
public final class SSection {
    private final Optional<AchSection> ach;

    private final Optional<CardSection> card;

    private final Map<String, Object> additionalProperties;

    private SSection(Optional<AchSection> ach, Optional<CardSection> card, Map<String, Object> additionalProperties) {
        this.ach = ach;
        this.card = card;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("ach")
    public Optional<AchSection> getAch() {
        return ach;
    }

    @JsonProperty("card")
    public Optional<CardSection> getCard() {
        return card;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SSection && equalTo((SSection) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SSection other) {
        return ach.equals(other.ach) && card.equals(other.card);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.ach, this.card);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<AchSection> ach = Optional.empty();

        private Optional<CardSection> card = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SSection other) {
            ach(other.getAch());
            card(other.getCard());
            return this;
        }

        @JsonSetter(value = "ach", nulls = Nulls.SKIP)
        public Builder ach(Optional<AchSection> ach) {
            this.ach = ach;
            return this;
        }

        public Builder ach(AchSection ach) {
            this.ach = Optional.ofNullable(ach);
            return this;
        }

        @JsonSetter(value = "card", nulls = Nulls.SKIP)
        public Builder card(Optional<CardSection> card) {
            this.card = card;
            return this;
        }

        public Builder card(CardSection card) {
            this.card = Optional.ofNullable(card);
            return this;
        }

        public SSection build() {
            return new SSection(ach, card, additionalProperties);
        }
    }
}
