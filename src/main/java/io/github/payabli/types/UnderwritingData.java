/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UnderwritingData.Builder.class)
public final class UnderwritingData {
    private final UnderWritingMethod method;

    private final Optional<String> policyId;

    private final Map<String, Object> additionalProperties;

    private UnderwritingData(
            UnderWritingMethod method, Optional<String> policyId, Map<String, Object> additionalProperties) {
        this.method = method;
        this.policyId = policyId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("method")
    public UnderWritingMethod getMethod() {
        return method;
    }

    @JsonProperty("policyId")
    public Optional<String> getPolicyId() {
        return policyId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UnderwritingData && equalTo((UnderwritingData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UnderwritingData other) {
        return method.equals(other.method) && policyId.equals(other.policyId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.method, this.policyId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MethodStage builder() {
        return new Builder();
    }

    public interface MethodStage {
        _FinalStage method(@NotNull UnderWritingMethod method);

        Builder from(UnderwritingData other);
    }

    public interface _FinalStage {
        UnderwritingData build();

        _FinalStage policyId(Optional<String> policyId);

        _FinalStage policyId(String policyId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MethodStage, _FinalStage {
        private UnderWritingMethod method;

        private Optional<String> policyId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UnderwritingData other) {
            method(other.getMethod());
            policyId(other.getPolicyId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("method")
        public _FinalStage method(@NotNull UnderWritingMethod method) {
            this.method = Objects.requireNonNull(method, "method must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage policyId(String policyId) {
            this.policyId = Optional.ofNullable(policyId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "policyId", nulls = Nulls.SKIP)
        public _FinalStage policyId(Optional<String> policyId) {
            this.policyId = policyId;
            return this;
        }

        @java.lang.Override
        public UnderwritingData build() {
            return new UnderwritingData(method, policyId, additionalProperties);
        }
    }
}
