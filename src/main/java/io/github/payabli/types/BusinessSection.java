/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BusinessSection.Builder.class)
public final class BusinessSection {
    private final Optional<TemplateElement> baddress;

    private final Optional<TemplateElement> baddress1;

    private final Optional<TemplateElement> bcity;

    private final Optional<TemplateElement> bcountry;

    private final Optional<TemplateElement> bstate;

    private final Optional<TemplateElement> btype;

    private final Optional<TemplateElement> bzip;

    private final Optional<TemplateElement> dbaname;

    private final Optional<TemplateElement> ein;

    private final Optional<TemplateElement> faxnumber;

    private final Optional<TemplateElement> legalname;

    private final Optional<TemplateElement> license;

    private final Optional<TemplateElement> licstate;

    private final Optional<TemplateElement> maddress;

    private final Optional<TemplateElement> maddress1;

    private final Optional<TemplateElement> mcity;

    private final Optional<TemplateElement> mcountry;

    private final Optional<TemplateElement> mstate;

    private final Optional<TemplateElement> mzip;

    private final Optional<TemplateElement> phonenumber;

    private final Optional<TemplateElement> startdate;

    private final Optional<TemplateElement> taxfillname;

    private final Optional<Boolean> visible;

    private final Optional<TemplateElement> website;

    private final Optional<TemplateAdditionalDataSection> additionalData;

    private final Map<String, Object> additionalProperties;

    private BusinessSection(
            Optional<TemplateElement> baddress,
            Optional<TemplateElement> baddress1,
            Optional<TemplateElement> bcity,
            Optional<TemplateElement> bcountry,
            Optional<TemplateElement> bstate,
            Optional<TemplateElement> btype,
            Optional<TemplateElement> bzip,
            Optional<TemplateElement> dbaname,
            Optional<TemplateElement> ein,
            Optional<TemplateElement> faxnumber,
            Optional<TemplateElement> legalname,
            Optional<TemplateElement> license,
            Optional<TemplateElement> licstate,
            Optional<TemplateElement> maddress,
            Optional<TemplateElement> maddress1,
            Optional<TemplateElement> mcity,
            Optional<TemplateElement> mcountry,
            Optional<TemplateElement> mstate,
            Optional<TemplateElement> mzip,
            Optional<TemplateElement> phonenumber,
            Optional<TemplateElement> startdate,
            Optional<TemplateElement> taxfillname,
            Optional<Boolean> visible,
            Optional<TemplateElement> website,
            Optional<TemplateAdditionalDataSection> additionalData,
            Map<String, Object> additionalProperties) {
        this.baddress = baddress;
        this.baddress1 = baddress1;
        this.bcity = bcity;
        this.bcountry = bcountry;
        this.bstate = bstate;
        this.btype = btype;
        this.bzip = bzip;
        this.dbaname = dbaname;
        this.ein = ein;
        this.faxnumber = faxnumber;
        this.legalname = legalname;
        this.license = license;
        this.licstate = licstate;
        this.maddress = maddress;
        this.maddress1 = maddress1;
        this.mcity = mcity;
        this.mcountry = mcountry;
        this.mstate = mstate;
        this.mzip = mzip;
        this.phonenumber = phonenumber;
        this.startdate = startdate;
        this.taxfillname = taxfillname;
        this.visible = visible;
        this.website = website;
        this.additionalData = additionalData;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("baddress")
    public Optional<TemplateElement> getBaddress() {
        return baddress;
    }

    @JsonProperty("baddress1")
    public Optional<TemplateElement> getBaddress1() {
        return baddress1;
    }

    @JsonProperty("bcity")
    public Optional<TemplateElement> getBcity() {
        return bcity;
    }

    @JsonProperty("bcountry")
    public Optional<TemplateElement> getBcountry() {
        return bcountry;
    }

    @JsonProperty("bstate")
    public Optional<TemplateElement> getBstate() {
        return bstate;
    }

    @JsonProperty("btype")
    public Optional<TemplateElement> getBtype() {
        return btype;
    }

    @JsonProperty("bzip")
    public Optional<TemplateElement> getBzip() {
        return bzip;
    }

    @JsonProperty("dbaname")
    public Optional<TemplateElement> getDbaname() {
        return dbaname;
    }

    @JsonProperty("ein")
    public Optional<TemplateElement> getEin() {
        return ein;
    }

    @JsonProperty("faxnumber")
    public Optional<TemplateElement> getFaxnumber() {
        return faxnumber;
    }

    @JsonProperty("legalname")
    public Optional<TemplateElement> getLegalname() {
        return legalname;
    }

    @JsonProperty("license")
    public Optional<TemplateElement> getLicense() {
        return license;
    }

    @JsonProperty("licstate")
    public Optional<TemplateElement> getLicstate() {
        return licstate;
    }

    @JsonProperty("maddress")
    public Optional<TemplateElement> getMaddress() {
        return maddress;
    }

    @JsonProperty("maddress1")
    public Optional<TemplateElement> getMaddress1() {
        return maddress1;
    }

    @JsonProperty("mcity")
    public Optional<TemplateElement> getMcity() {
        return mcity;
    }

    @JsonProperty("mcountry")
    public Optional<TemplateElement> getMcountry() {
        return mcountry;
    }

    @JsonProperty("mstate")
    public Optional<TemplateElement> getMstate() {
        return mstate;
    }

    @JsonProperty("mzip")
    public Optional<TemplateElement> getMzip() {
        return mzip;
    }

    @JsonProperty("phonenumber")
    public Optional<TemplateElement> getPhonenumber() {
        return phonenumber;
    }

    @JsonProperty("startdate")
    public Optional<TemplateElement> getStartdate() {
        return startdate;
    }

    @JsonProperty("taxfillname")
    public Optional<TemplateElement> getTaxfillname() {
        return taxfillname;
    }

    @JsonProperty("visible")
    public Optional<Boolean> getVisible() {
        return visible;
    }

    @JsonProperty("website")
    public Optional<TemplateElement> getWebsite() {
        return website;
    }

    @JsonProperty("additionalData")
    public Optional<TemplateAdditionalDataSection> getAdditionalData() {
        return additionalData;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BusinessSection && equalTo((BusinessSection) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BusinessSection other) {
        return baddress.equals(other.baddress)
                && baddress1.equals(other.baddress1)
                && bcity.equals(other.bcity)
                && bcountry.equals(other.bcountry)
                && bstate.equals(other.bstate)
                && btype.equals(other.btype)
                && bzip.equals(other.bzip)
                && dbaname.equals(other.dbaname)
                && ein.equals(other.ein)
                && faxnumber.equals(other.faxnumber)
                && legalname.equals(other.legalname)
                && license.equals(other.license)
                && licstate.equals(other.licstate)
                && maddress.equals(other.maddress)
                && maddress1.equals(other.maddress1)
                && mcity.equals(other.mcity)
                && mcountry.equals(other.mcountry)
                && mstate.equals(other.mstate)
                && mzip.equals(other.mzip)
                && phonenumber.equals(other.phonenumber)
                && startdate.equals(other.startdate)
                && taxfillname.equals(other.taxfillname)
                && visible.equals(other.visible)
                && website.equals(other.website)
                && additionalData.equals(other.additionalData);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.baddress,
                this.baddress1,
                this.bcity,
                this.bcountry,
                this.bstate,
                this.btype,
                this.bzip,
                this.dbaname,
                this.ein,
                this.faxnumber,
                this.legalname,
                this.license,
                this.licstate,
                this.maddress,
                this.maddress1,
                this.mcity,
                this.mcountry,
                this.mstate,
                this.mzip,
                this.phonenumber,
                this.startdate,
                this.taxfillname,
                this.visible,
                this.website,
                this.additionalData);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<TemplateElement> baddress = Optional.empty();

        private Optional<TemplateElement> baddress1 = Optional.empty();

        private Optional<TemplateElement> bcity = Optional.empty();

        private Optional<TemplateElement> bcountry = Optional.empty();

        private Optional<TemplateElement> bstate = Optional.empty();

        private Optional<TemplateElement> btype = Optional.empty();

        private Optional<TemplateElement> bzip = Optional.empty();

        private Optional<TemplateElement> dbaname = Optional.empty();

        private Optional<TemplateElement> ein = Optional.empty();

        private Optional<TemplateElement> faxnumber = Optional.empty();

        private Optional<TemplateElement> legalname = Optional.empty();

        private Optional<TemplateElement> license = Optional.empty();

        private Optional<TemplateElement> licstate = Optional.empty();

        private Optional<TemplateElement> maddress = Optional.empty();

        private Optional<TemplateElement> maddress1 = Optional.empty();

        private Optional<TemplateElement> mcity = Optional.empty();

        private Optional<TemplateElement> mcountry = Optional.empty();

        private Optional<TemplateElement> mstate = Optional.empty();

        private Optional<TemplateElement> mzip = Optional.empty();

        private Optional<TemplateElement> phonenumber = Optional.empty();

        private Optional<TemplateElement> startdate = Optional.empty();

        private Optional<TemplateElement> taxfillname = Optional.empty();

        private Optional<Boolean> visible = Optional.empty();

        private Optional<TemplateElement> website = Optional.empty();

        private Optional<TemplateAdditionalDataSection> additionalData = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BusinessSection other) {
            baddress(other.getBaddress());
            baddress1(other.getBaddress1());
            bcity(other.getBcity());
            bcountry(other.getBcountry());
            bstate(other.getBstate());
            btype(other.getBtype());
            bzip(other.getBzip());
            dbaname(other.getDbaname());
            ein(other.getEin());
            faxnumber(other.getFaxnumber());
            legalname(other.getLegalname());
            license(other.getLicense());
            licstate(other.getLicstate());
            maddress(other.getMaddress());
            maddress1(other.getMaddress1());
            mcity(other.getMcity());
            mcountry(other.getMcountry());
            mstate(other.getMstate());
            mzip(other.getMzip());
            phonenumber(other.getPhonenumber());
            startdate(other.getStartdate());
            taxfillname(other.getTaxfillname());
            visible(other.getVisible());
            website(other.getWebsite());
            additionalData(other.getAdditionalData());
            return this;
        }

        @JsonSetter(value = "baddress", nulls = Nulls.SKIP)
        public Builder baddress(Optional<TemplateElement> baddress) {
            this.baddress = baddress;
            return this;
        }

        public Builder baddress(TemplateElement baddress) {
            this.baddress = Optional.ofNullable(baddress);
            return this;
        }

        @JsonSetter(value = "baddress1", nulls = Nulls.SKIP)
        public Builder baddress1(Optional<TemplateElement> baddress1) {
            this.baddress1 = baddress1;
            return this;
        }

        public Builder baddress1(TemplateElement baddress1) {
            this.baddress1 = Optional.ofNullable(baddress1);
            return this;
        }

        @JsonSetter(value = "bcity", nulls = Nulls.SKIP)
        public Builder bcity(Optional<TemplateElement> bcity) {
            this.bcity = bcity;
            return this;
        }

        public Builder bcity(TemplateElement bcity) {
            this.bcity = Optional.ofNullable(bcity);
            return this;
        }

        @JsonSetter(value = "bcountry", nulls = Nulls.SKIP)
        public Builder bcountry(Optional<TemplateElement> bcountry) {
            this.bcountry = bcountry;
            return this;
        }

        public Builder bcountry(TemplateElement bcountry) {
            this.bcountry = Optional.ofNullable(bcountry);
            return this;
        }

        @JsonSetter(value = "bstate", nulls = Nulls.SKIP)
        public Builder bstate(Optional<TemplateElement> bstate) {
            this.bstate = bstate;
            return this;
        }

        public Builder bstate(TemplateElement bstate) {
            this.bstate = Optional.ofNullable(bstate);
            return this;
        }

        @JsonSetter(value = "btype", nulls = Nulls.SKIP)
        public Builder btype(Optional<TemplateElement> btype) {
            this.btype = btype;
            return this;
        }

        public Builder btype(TemplateElement btype) {
            this.btype = Optional.ofNullable(btype);
            return this;
        }

        @JsonSetter(value = "bzip", nulls = Nulls.SKIP)
        public Builder bzip(Optional<TemplateElement> bzip) {
            this.bzip = bzip;
            return this;
        }

        public Builder bzip(TemplateElement bzip) {
            this.bzip = Optional.ofNullable(bzip);
            return this;
        }

        @JsonSetter(value = "dbaname", nulls = Nulls.SKIP)
        public Builder dbaname(Optional<TemplateElement> dbaname) {
            this.dbaname = dbaname;
            return this;
        }

        public Builder dbaname(TemplateElement dbaname) {
            this.dbaname = Optional.ofNullable(dbaname);
            return this;
        }

        @JsonSetter(value = "ein", nulls = Nulls.SKIP)
        public Builder ein(Optional<TemplateElement> ein) {
            this.ein = ein;
            return this;
        }

        public Builder ein(TemplateElement ein) {
            this.ein = Optional.ofNullable(ein);
            return this;
        }

        @JsonSetter(value = "faxnumber", nulls = Nulls.SKIP)
        public Builder faxnumber(Optional<TemplateElement> faxnumber) {
            this.faxnumber = faxnumber;
            return this;
        }

        public Builder faxnumber(TemplateElement faxnumber) {
            this.faxnumber = Optional.ofNullable(faxnumber);
            return this;
        }

        @JsonSetter(value = "legalname", nulls = Nulls.SKIP)
        public Builder legalname(Optional<TemplateElement> legalname) {
            this.legalname = legalname;
            return this;
        }

        public Builder legalname(TemplateElement legalname) {
            this.legalname = Optional.ofNullable(legalname);
            return this;
        }

        @JsonSetter(value = "license", nulls = Nulls.SKIP)
        public Builder license(Optional<TemplateElement> license) {
            this.license = license;
            return this;
        }

        public Builder license(TemplateElement license) {
            this.license = Optional.ofNullable(license);
            return this;
        }

        @JsonSetter(value = "licstate", nulls = Nulls.SKIP)
        public Builder licstate(Optional<TemplateElement> licstate) {
            this.licstate = licstate;
            return this;
        }

        public Builder licstate(TemplateElement licstate) {
            this.licstate = Optional.ofNullable(licstate);
            return this;
        }

        @JsonSetter(value = "maddress", nulls = Nulls.SKIP)
        public Builder maddress(Optional<TemplateElement> maddress) {
            this.maddress = maddress;
            return this;
        }

        public Builder maddress(TemplateElement maddress) {
            this.maddress = Optional.ofNullable(maddress);
            return this;
        }

        @JsonSetter(value = "maddress1", nulls = Nulls.SKIP)
        public Builder maddress1(Optional<TemplateElement> maddress1) {
            this.maddress1 = maddress1;
            return this;
        }

        public Builder maddress1(TemplateElement maddress1) {
            this.maddress1 = Optional.ofNullable(maddress1);
            return this;
        }

        @JsonSetter(value = "mcity", nulls = Nulls.SKIP)
        public Builder mcity(Optional<TemplateElement> mcity) {
            this.mcity = mcity;
            return this;
        }

        public Builder mcity(TemplateElement mcity) {
            this.mcity = Optional.ofNullable(mcity);
            return this;
        }

        @JsonSetter(value = "mcountry", nulls = Nulls.SKIP)
        public Builder mcountry(Optional<TemplateElement> mcountry) {
            this.mcountry = mcountry;
            return this;
        }

        public Builder mcountry(TemplateElement mcountry) {
            this.mcountry = Optional.ofNullable(mcountry);
            return this;
        }

        @JsonSetter(value = "mstate", nulls = Nulls.SKIP)
        public Builder mstate(Optional<TemplateElement> mstate) {
            this.mstate = mstate;
            return this;
        }

        public Builder mstate(TemplateElement mstate) {
            this.mstate = Optional.ofNullable(mstate);
            return this;
        }

        @JsonSetter(value = "mzip", nulls = Nulls.SKIP)
        public Builder mzip(Optional<TemplateElement> mzip) {
            this.mzip = mzip;
            return this;
        }

        public Builder mzip(TemplateElement mzip) {
            this.mzip = Optional.ofNullable(mzip);
            return this;
        }

        @JsonSetter(value = "phonenumber", nulls = Nulls.SKIP)
        public Builder phonenumber(Optional<TemplateElement> phonenumber) {
            this.phonenumber = phonenumber;
            return this;
        }

        public Builder phonenumber(TemplateElement phonenumber) {
            this.phonenumber = Optional.ofNullable(phonenumber);
            return this;
        }

        @JsonSetter(value = "startdate", nulls = Nulls.SKIP)
        public Builder startdate(Optional<TemplateElement> startdate) {
            this.startdate = startdate;
            return this;
        }

        public Builder startdate(TemplateElement startdate) {
            this.startdate = Optional.ofNullable(startdate);
            return this;
        }

        @JsonSetter(value = "taxfillname", nulls = Nulls.SKIP)
        public Builder taxfillname(Optional<TemplateElement> taxfillname) {
            this.taxfillname = taxfillname;
            return this;
        }

        public Builder taxfillname(TemplateElement taxfillname) {
            this.taxfillname = Optional.ofNullable(taxfillname);
            return this;
        }

        @JsonSetter(value = "visible", nulls = Nulls.SKIP)
        public Builder visible(Optional<Boolean> visible) {
            this.visible = visible;
            return this;
        }

        public Builder visible(Boolean visible) {
            this.visible = Optional.ofNullable(visible);
            return this;
        }

        @JsonSetter(value = "website", nulls = Nulls.SKIP)
        public Builder website(Optional<TemplateElement> website) {
            this.website = website;
            return this;
        }

        public Builder website(TemplateElement website) {
            this.website = Optional.ofNullable(website);
            return this;
        }

        @JsonSetter(value = "additionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<TemplateAdditionalDataSection> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(TemplateAdditionalDataSection additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        public BusinessSection build() {
            return new BusinessSection(
                    baddress,
                    baddress1,
                    bcity,
                    bcountry,
                    bstate,
                    btype,
                    bzip,
                    dbaname,
                    ein,
                    faxnumber,
                    legalname,
                    license,
                    licstate,
                    maddress,
                    maddress1,
                    mcity,
                    mcountry,
                    mstate,
                    mzip,
                    phonenumber,
                    startdate,
                    taxfillname,
                    visible,
                    website,
                    additionalData,
                    additionalProperties);
        }
    }
}
