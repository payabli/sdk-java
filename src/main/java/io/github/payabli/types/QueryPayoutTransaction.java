/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryPayoutTransaction.Builder.class)
public final class QueryPayoutTransaction {
    private final Optional<List<QueryPayoutTransactionRecordsItem>> records;

    private final Optional<QueryPayoutTransactionSummary> summary;

    private final Map<String, Object> additionalProperties;

    private QueryPayoutTransaction(
            Optional<List<QueryPayoutTransactionRecordsItem>> records,
            Optional<QueryPayoutTransactionSummary> summary,
            Map<String, Object> additionalProperties) {
        this.records = records;
        this.summary = summary;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("Records")
    public Optional<List<QueryPayoutTransactionRecordsItem>> getRecords() {
        return records;
    }

    @JsonProperty("Summary")
    public Optional<QueryPayoutTransactionSummary> getSummary() {
        return summary;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryPayoutTransaction && equalTo((QueryPayoutTransaction) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryPayoutTransaction other) {
        return records.equals(other.records) && summary.equals(other.summary);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.records, this.summary);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<QueryPayoutTransactionRecordsItem>> records = Optional.empty();

        private Optional<QueryPayoutTransactionSummary> summary = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryPayoutTransaction other) {
            records(other.getRecords());
            summary(other.getSummary());
            return this;
        }

        @JsonSetter(value = "Records", nulls = Nulls.SKIP)
        public Builder records(Optional<List<QueryPayoutTransactionRecordsItem>> records) {
            this.records = records;
            return this;
        }

        public Builder records(List<QueryPayoutTransactionRecordsItem> records) {
            this.records = Optional.ofNullable(records);
            return this;
        }

        @JsonSetter(value = "Summary", nulls = Nulls.SKIP)
        public Builder summary(Optional<QueryPayoutTransactionSummary> summary) {
            this.summary = summary;
            return this;
        }

        public Builder summary(QueryPayoutTransactionSummary summary) {
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        public QueryPayoutTransaction build() {
            return new QueryPayoutTransaction(records, summary, additionalProperties);
        }
    }
}
