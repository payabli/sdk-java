/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomerData.Builder.class)
public final class CustomerData {
    private final Optional<String> customerNumber;

    private final Optional<String> customerUsername;

    private final Optional<String> customerPsw;

    private final Optional<Integer> customerStatus;

    private final Optional<String> company;

    private final Optional<String> firstname;

    private final Optional<String> lastname;

    private final Optional<String> phone;

    private final Optional<String> email;

    private final Optional<String> address;

    private final Optional<String> address1;

    private final Optional<String> city;

    private final Optional<String> state;

    private final Optional<String> zip;

    private final Optional<String> country;

    private final Optional<String> shippingAddress;

    private final Optional<String> shippingAddress1;

    private final Optional<String> shippingCity;

    private final Optional<String> shippingState;

    private final Optional<String> shippingZip;

    private final Optional<String> shippingCountry;

    private final Optional<Double> balance;

    private final Optional<Integer> timeZone;

    private final Optional<Map<String, Optional<String>>> additionalFields;

    private final Optional<List<Optional<String>>> identifierFields;

    private final Optional<OffsetDateTime> createdAt;

    private final Map<String, Object> additionalProperties;

    private CustomerData(
            Optional<String> customerNumber,
            Optional<String> customerUsername,
            Optional<String> customerPsw,
            Optional<Integer> customerStatus,
            Optional<String> company,
            Optional<String> firstname,
            Optional<String> lastname,
            Optional<String> phone,
            Optional<String> email,
            Optional<String> address,
            Optional<String> address1,
            Optional<String> city,
            Optional<String> state,
            Optional<String> zip,
            Optional<String> country,
            Optional<String> shippingAddress,
            Optional<String> shippingAddress1,
            Optional<String> shippingCity,
            Optional<String> shippingState,
            Optional<String> shippingZip,
            Optional<String> shippingCountry,
            Optional<Double> balance,
            Optional<Integer> timeZone,
            Optional<Map<String, Optional<String>>> additionalFields,
            Optional<List<Optional<String>>> identifierFields,
            Optional<OffsetDateTime> createdAt,
            Map<String, Object> additionalProperties) {
        this.customerNumber = customerNumber;
        this.customerUsername = customerUsername;
        this.customerPsw = customerPsw;
        this.customerStatus = customerStatus;
        this.company = company;
        this.firstname = firstname;
        this.lastname = lastname;
        this.phone = phone;
        this.email = email;
        this.address = address;
        this.address1 = address1;
        this.city = city;
        this.state = state;
        this.zip = zip;
        this.country = country;
        this.shippingAddress = shippingAddress;
        this.shippingAddress1 = shippingAddress1;
        this.shippingCity = shippingCity;
        this.shippingState = shippingState;
        this.shippingZip = shippingZip;
        this.shippingCountry = shippingCountry;
        this.balance = balance;
        this.timeZone = timeZone;
        this.additionalFields = additionalFields;
        this.identifierFields = identifierFields;
        this.createdAt = createdAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("customerNumber")
    public Optional<String> getCustomerNumber() {
        return customerNumber;
    }

    /**
     * @return Customer username for customer portal
     */
    @JsonProperty("customerUsername")
    public Optional<String> getCustomerUsername() {
        return customerUsername;
    }

    /**
     * @return Customer password for customer portal
     */
    @JsonProperty("customerPsw")
    public Optional<String> getCustomerPsw() {
        return customerPsw;
    }

    @JsonProperty("customerStatus")
    public Optional<Integer> getCustomerStatus() {
        return customerStatus;
    }

    /**
     * @return Company name
     */
    @JsonProperty("company")
    public Optional<String> getCompany() {
        return company;
    }

    /**
     * @return Customer first name
     */
    @JsonProperty("firstname")
    public Optional<String> getFirstname() {
        return firstname;
    }

    /**
     * @return Customer last name
     */
    @JsonProperty("lastname")
    public Optional<String> getLastname() {
        return lastname;
    }

    /**
     * @return Customer phone number
     */
    @JsonProperty("phone")
    public Optional<String> getPhone() {
        return phone;
    }

    /**
     * @return Customer email address.
     */
    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    /**
     * @return Customer address
     */
    @JsonProperty("address")
    public Optional<String> getAddress() {
        return address;
    }

    /**
     * @return Additional customer address
     */
    @JsonProperty("address1")
    public Optional<String> getAddress1() {
        return address1;
    }

    /**
     * @return Customer city
     */
    @JsonProperty("city")
    public Optional<String> getCity() {
        return city;
    }

    /**
     * @return Customer State
     */
    @JsonProperty("state")
    public Optional<String> getState() {
        return state;
    }

    /**
     * @return Customer postal code
     */
    @JsonProperty("zip")
    public Optional<String> getZip() {
        return zip;
    }

    /**
     * @return Customer country in ISO-3166-1 alpha 2 format. See https://en.wikipedia.org/wiki/ISO_3166-1 for reference.
     */
    @JsonProperty("country")
    public Optional<String> getCountry() {
        return country;
    }

    @JsonProperty("shippingAddress")
    public Optional<String> getShippingAddress() {
        return shippingAddress;
    }

    @JsonProperty("shippingAddress1")
    public Optional<String> getShippingAddress1() {
        return shippingAddress1;
    }

    @JsonProperty("shippingCity")
    public Optional<String> getShippingCity() {
        return shippingCity;
    }

    @JsonProperty("shippingState")
    public Optional<String> getShippingState() {
        return shippingState;
    }

    @JsonProperty("shippingZip")
    public Optional<String> getShippingZip() {
        return shippingZip;
    }

    @JsonProperty("shippingCountry")
    public Optional<String> getShippingCountry() {
        return shippingCountry;
    }

    /**
     * @return Customer balance.
     */
    @JsonProperty("balance")
    public Optional<Double> getBalance() {
        return balance;
    }

    @JsonProperty("timeZone")
    public Optional<Integer> getTimeZone() {
        return timeZone;
    }

    /**
     * @return Additional Custom fields in format &quot;key&quot;:&quot;value&quot;.
     */
    @JsonProperty("additionalFields")
    public Optional<Map<String, Optional<String>>> getAdditionalFields() {
        return additionalFields;
    }

    @JsonProperty("identifierFields")
    public Optional<List<Optional<String>>> getIdentifierFields() {
        return identifierFields;
    }

    @JsonProperty("createdAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomerData && equalTo((CustomerData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomerData other) {
        return customerNumber.equals(other.customerNumber)
                && customerUsername.equals(other.customerUsername)
                && customerPsw.equals(other.customerPsw)
                && customerStatus.equals(other.customerStatus)
                && company.equals(other.company)
                && firstname.equals(other.firstname)
                && lastname.equals(other.lastname)
                && phone.equals(other.phone)
                && email.equals(other.email)
                && address.equals(other.address)
                && address1.equals(other.address1)
                && city.equals(other.city)
                && state.equals(other.state)
                && zip.equals(other.zip)
                && country.equals(other.country)
                && shippingAddress.equals(other.shippingAddress)
                && shippingAddress1.equals(other.shippingAddress1)
                && shippingCity.equals(other.shippingCity)
                && shippingState.equals(other.shippingState)
                && shippingZip.equals(other.shippingZip)
                && shippingCountry.equals(other.shippingCountry)
                && balance.equals(other.balance)
                && timeZone.equals(other.timeZone)
                && additionalFields.equals(other.additionalFields)
                && identifierFields.equals(other.identifierFields)
                && createdAt.equals(other.createdAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.customerNumber,
                this.customerUsername,
                this.customerPsw,
                this.customerStatus,
                this.company,
                this.firstname,
                this.lastname,
                this.phone,
                this.email,
                this.address,
                this.address1,
                this.city,
                this.state,
                this.zip,
                this.country,
                this.shippingAddress,
                this.shippingAddress1,
                this.shippingCity,
                this.shippingState,
                this.shippingZip,
                this.shippingCountry,
                this.balance,
                this.timeZone,
                this.additionalFields,
                this.identifierFields,
                this.createdAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> customerNumber = Optional.empty();

        private Optional<String> customerUsername = Optional.empty();

        private Optional<String> customerPsw = Optional.empty();

        private Optional<Integer> customerStatus = Optional.empty();

        private Optional<String> company = Optional.empty();

        private Optional<String> firstname = Optional.empty();

        private Optional<String> lastname = Optional.empty();

        private Optional<String> phone = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> address = Optional.empty();

        private Optional<String> address1 = Optional.empty();

        private Optional<String> city = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<String> zip = Optional.empty();

        private Optional<String> country = Optional.empty();

        private Optional<String> shippingAddress = Optional.empty();

        private Optional<String> shippingAddress1 = Optional.empty();

        private Optional<String> shippingCity = Optional.empty();

        private Optional<String> shippingState = Optional.empty();

        private Optional<String> shippingZip = Optional.empty();

        private Optional<String> shippingCountry = Optional.empty();

        private Optional<Double> balance = Optional.empty();

        private Optional<Integer> timeZone = Optional.empty();

        private Optional<Map<String, Optional<String>>> additionalFields = Optional.empty();

        private Optional<List<Optional<String>>> identifierFields = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CustomerData other) {
            customerNumber(other.getCustomerNumber());
            customerUsername(other.getCustomerUsername());
            customerPsw(other.getCustomerPsw());
            customerStatus(other.getCustomerStatus());
            company(other.getCompany());
            firstname(other.getFirstname());
            lastname(other.getLastname());
            phone(other.getPhone());
            email(other.getEmail());
            address(other.getAddress());
            address1(other.getAddress1());
            city(other.getCity());
            state(other.getState());
            zip(other.getZip());
            country(other.getCountry());
            shippingAddress(other.getShippingAddress());
            shippingAddress1(other.getShippingAddress1());
            shippingCity(other.getShippingCity());
            shippingState(other.getShippingState());
            shippingZip(other.getShippingZip());
            shippingCountry(other.getShippingCountry());
            balance(other.getBalance());
            timeZone(other.getTimeZone());
            additionalFields(other.getAdditionalFields());
            identifierFields(other.getIdentifierFields());
            createdAt(other.getCreatedAt());
            return this;
        }

        @JsonSetter(value = "customerNumber", nulls = Nulls.SKIP)
        public Builder customerNumber(Optional<String> customerNumber) {
            this.customerNumber = customerNumber;
            return this;
        }

        public Builder customerNumber(String customerNumber) {
            this.customerNumber = Optional.ofNullable(customerNumber);
            return this;
        }

        /**
         * <p>Customer username for customer portal</p>
         */
        @JsonSetter(value = "customerUsername", nulls = Nulls.SKIP)
        public Builder customerUsername(Optional<String> customerUsername) {
            this.customerUsername = customerUsername;
            return this;
        }

        public Builder customerUsername(String customerUsername) {
            this.customerUsername = Optional.ofNullable(customerUsername);
            return this;
        }

        /**
         * <p>Customer password for customer portal</p>
         */
        @JsonSetter(value = "customerPsw", nulls = Nulls.SKIP)
        public Builder customerPsw(Optional<String> customerPsw) {
            this.customerPsw = customerPsw;
            return this;
        }

        public Builder customerPsw(String customerPsw) {
            this.customerPsw = Optional.ofNullable(customerPsw);
            return this;
        }

        @JsonSetter(value = "customerStatus", nulls = Nulls.SKIP)
        public Builder customerStatus(Optional<Integer> customerStatus) {
            this.customerStatus = customerStatus;
            return this;
        }

        public Builder customerStatus(Integer customerStatus) {
            this.customerStatus = Optional.ofNullable(customerStatus);
            return this;
        }

        /**
         * <p>Company name</p>
         */
        @JsonSetter(value = "company", nulls = Nulls.SKIP)
        public Builder company(Optional<String> company) {
            this.company = company;
            return this;
        }

        public Builder company(String company) {
            this.company = Optional.ofNullable(company);
            return this;
        }

        /**
         * <p>Customer first name</p>
         */
        @JsonSetter(value = "firstname", nulls = Nulls.SKIP)
        public Builder firstname(Optional<String> firstname) {
            this.firstname = firstname;
            return this;
        }

        public Builder firstname(String firstname) {
            this.firstname = Optional.ofNullable(firstname);
            return this;
        }

        /**
         * <p>Customer last name</p>
         */
        @JsonSetter(value = "lastname", nulls = Nulls.SKIP)
        public Builder lastname(Optional<String> lastname) {
            this.lastname = lastname;
            return this;
        }

        public Builder lastname(String lastname) {
            this.lastname = Optional.ofNullable(lastname);
            return this;
        }

        /**
         * <p>Customer phone number</p>
         */
        @JsonSetter(value = "phone", nulls = Nulls.SKIP)
        public Builder phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * <p>Customer email address.</p>
         */
        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * <p>Customer address</p>
         */
        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<String> address) {
            this.address = address;
            return this;
        }

        public Builder address(String address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        /**
         * <p>Additional customer address</p>
         */
        @JsonSetter(value = "address1", nulls = Nulls.SKIP)
        public Builder address1(Optional<String> address1) {
            this.address1 = address1;
            return this;
        }

        public Builder address1(String address1) {
            this.address1 = Optional.ofNullable(address1);
            return this;
        }

        /**
         * <p>Customer city</p>
         */
        @JsonSetter(value = "city", nulls = Nulls.SKIP)
        public Builder city(Optional<String> city) {
            this.city = city;
            return this;
        }

        public Builder city(String city) {
            this.city = Optional.ofNullable(city);
            return this;
        }

        /**
         * <p>Customer State</p>
         */
        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<String> state) {
            this.state = state;
            return this;
        }

        public Builder state(String state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * <p>Customer postal code</p>
         */
        @JsonSetter(value = "zip", nulls = Nulls.SKIP)
        public Builder zip(Optional<String> zip) {
            this.zip = zip;
            return this;
        }

        public Builder zip(String zip) {
            this.zip = Optional.ofNullable(zip);
            return this;
        }

        /**
         * <p>Customer country in ISO-3166-1 alpha 2 format. See https://en.wikipedia.org/wiki/ISO_3166-1 for reference.</p>
         */
        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public Builder country(Optional<String> country) {
            this.country = country;
            return this;
        }

        public Builder country(String country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        @JsonSetter(value = "shippingAddress", nulls = Nulls.SKIP)
        public Builder shippingAddress(Optional<String> shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }

        public Builder shippingAddress(String shippingAddress) {
            this.shippingAddress = Optional.ofNullable(shippingAddress);
            return this;
        }

        @JsonSetter(value = "shippingAddress1", nulls = Nulls.SKIP)
        public Builder shippingAddress1(Optional<String> shippingAddress1) {
            this.shippingAddress1 = shippingAddress1;
            return this;
        }

        public Builder shippingAddress1(String shippingAddress1) {
            this.shippingAddress1 = Optional.ofNullable(shippingAddress1);
            return this;
        }

        @JsonSetter(value = "shippingCity", nulls = Nulls.SKIP)
        public Builder shippingCity(Optional<String> shippingCity) {
            this.shippingCity = shippingCity;
            return this;
        }

        public Builder shippingCity(String shippingCity) {
            this.shippingCity = Optional.ofNullable(shippingCity);
            return this;
        }

        @JsonSetter(value = "shippingState", nulls = Nulls.SKIP)
        public Builder shippingState(Optional<String> shippingState) {
            this.shippingState = shippingState;
            return this;
        }

        public Builder shippingState(String shippingState) {
            this.shippingState = Optional.ofNullable(shippingState);
            return this;
        }

        @JsonSetter(value = "shippingZip", nulls = Nulls.SKIP)
        public Builder shippingZip(Optional<String> shippingZip) {
            this.shippingZip = shippingZip;
            return this;
        }

        public Builder shippingZip(String shippingZip) {
            this.shippingZip = Optional.ofNullable(shippingZip);
            return this;
        }

        @JsonSetter(value = "shippingCountry", nulls = Nulls.SKIP)
        public Builder shippingCountry(Optional<String> shippingCountry) {
            this.shippingCountry = shippingCountry;
            return this;
        }

        public Builder shippingCountry(String shippingCountry) {
            this.shippingCountry = Optional.ofNullable(shippingCountry);
            return this;
        }

        /**
         * <p>Customer balance.</p>
         */
        @JsonSetter(value = "balance", nulls = Nulls.SKIP)
        public Builder balance(Optional<Double> balance) {
            this.balance = balance;
            return this;
        }

        public Builder balance(Double balance) {
            this.balance = Optional.ofNullable(balance);
            return this;
        }

        @JsonSetter(value = "timeZone", nulls = Nulls.SKIP)
        public Builder timeZone(Optional<Integer> timeZone) {
            this.timeZone = timeZone;
            return this;
        }

        public Builder timeZone(Integer timeZone) {
            this.timeZone = Optional.ofNullable(timeZone);
            return this;
        }

        /**
         * <p>Additional Custom fields in format &quot;key&quot;:&quot;value&quot;.</p>
         */
        @JsonSetter(value = "additionalFields", nulls = Nulls.SKIP)
        public Builder additionalFields(Optional<Map<String, Optional<String>>> additionalFields) {
            this.additionalFields = additionalFields;
            return this;
        }

        public Builder additionalFields(Map<String, Optional<String>> additionalFields) {
            this.additionalFields = Optional.ofNullable(additionalFields);
            return this;
        }

        @JsonSetter(value = "identifierFields", nulls = Nulls.SKIP)
        public Builder identifierFields(Optional<List<Optional<String>>> identifierFields) {
            this.identifierFields = identifierFields;
            return this;
        }

        public Builder identifierFields(List<Optional<String>> identifierFields) {
            this.identifierFields = Optional.ofNullable(identifierFields);
            return this;
        }

        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public CustomerData build() {
            return new CustomerData(
                    customerNumber,
                    customerUsername,
                    customerPsw,
                    customerStatus,
                    company,
                    firstname,
                    lastname,
                    phone,
                    email,
                    address,
                    address1,
                    city,
                    state,
                    zip,
                    country,
                    shippingAddress,
                    shippingAddress1,
                    shippingCity,
                    shippingState,
                    shippingZip,
                    shippingCountry,
                    balance,
                    timeZone,
                    additionalFields,
                    identifierFields,
                    createdAt,
                    additionalProperties);
        }
    }
}
