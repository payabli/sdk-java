/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TierItem.Builder.class)
public final class TierItem {
    private final Optional<Double> amountxAuth;

    private final Optional<Double> highPayRange;

    private final Optional<Double> lowPayRange;

    private final Optional<Double> percentxAuth;

    private final Map<String, Object> additionalProperties;

    private TierItem(
            Optional<Double> amountxAuth,
            Optional<Double> highPayRange,
            Optional<Double> lowPayRange,
            Optional<Double> percentxAuth,
            Map<String, Object> additionalProperties) {
        this.amountxAuth = amountxAuth;
        this.highPayRange = highPayRange;
        this.lowPayRange = lowPayRange;
        this.percentxAuth = percentxAuth;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("amountxAuth")
    public Optional<Double> getAmountxAuth() {
        return amountxAuth;
    }

    @JsonProperty("highPayRange")
    public Optional<Double> getHighPayRange() {
        return highPayRange;
    }

    @JsonProperty("lowPayRange")
    public Optional<Double> getLowPayRange() {
        return lowPayRange;
    }

    @JsonProperty("percentxAuth")
    public Optional<Double> getPercentxAuth() {
        return percentxAuth;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TierItem && equalTo((TierItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TierItem other) {
        return amountxAuth.equals(other.amountxAuth)
                && highPayRange.equals(other.highPayRange)
                && lowPayRange.equals(other.lowPayRange)
                && percentxAuth.equals(other.percentxAuth);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.amountxAuth, this.highPayRange, this.lowPayRange, this.percentxAuth);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> amountxAuth = Optional.empty();

        private Optional<Double> highPayRange = Optional.empty();

        private Optional<Double> lowPayRange = Optional.empty();

        private Optional<Double> percentxAuth = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TierItem other) {
            amountxAuth(other.getAmountxAuth());
            highPayRange(other.getHighPayRange());
            lowPayRange(other.getLowPayRange());
            percentxAuth(other.getPercentxAuth());
            return this;
        }

        @JsonSetter(value = "amountxAuth", nulls = Nulls.SKIP)
        public Builder amountxAuth(Optional<Double> amountxAuth) {
            this.amountxAuth = amountxAuth;
            return this;
        }

        public Builder amountxAuth(Double amountxAuth) {
            this.amountxAuth = Optional.ofNullable(amountxAuth);
            return this;
        }

        @JsonSetter(value = "highPayRange", nulls = Nulls.SKIP)
        public Builder highPayRange(Optional<Double> highPayRange) {
            this.highPayRange = highPayRange;
            return this;
        }

        public Builder highPayRange(Double highPayRange) {
            this.highPayRange = Optional.ofNullable(highPayRange);
            return this;
        }

        @JsonSetter(value = "lowPayRange", nulls = Nulls.SKIP)
        public Builder lowPayRange(Optional<Double> lowPayRange) {
            this.lowPayRange = lowPayRange;
            return this;
        }

        public Builder lowPayRange(Double lowPayRange) {
            this.lowPayRange = Optional.ofNullable(lowPayRange);
            return this;
        }

        @JsonSetter(value = "percentxAuth", nulls = Nulls.SKIP)
        public Builder percentxAuth(Optional<Double> percentxAuth) {
            this.percentxAuth = percentxAuth;
            return this;
        }

        public Builder percentxAuth(Double percentxAuth) {
            this.percentxAuth = Optional.ofNullable(percentxAuth);
            return this;
        }

        public TierItem build() {
            return new TierItem(amountxAuth, highPayRange, lowPayRange, percentxAuth, additionalProperties);
        }
    }
}
