/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Bnk.Builder.class)
public final class Bnk {
    private final Optional<LinkData> accountNumber;

    private final Optional<LinkData> bankName;

    private final Optional<LinkData> routingAccount;

    private final Optional<LinkData> typeAccount;

    private final Map<String, Object> additionalProperties;

    private Bnk(
            Optional<LinkData> accountNumber,
            Optional<LinkData> bankName,
            Optional<LinkData> routingAccount,
            Optional<LinkData> typeAccount,
            Map<String, Object> additionalProperties) {
        this.accountNumber = accountNumber;
        this.bankName = bankName;
        this.routingAccount = routingAccount;
        this.typeAccount = typeAccount;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("accountNumber")
    public Optional<LinkData> getAccountNumber() {
        return accountNumber;
    }

    @JsonProperty("bankName")
    public Optional<LinkData> getBankName() {
        return bankName;
    }

    @JsonProperty("routingAccount")
    public Optional<LinkData> getRoutingAccount() {
        return routingAccount;
    }

    @JsonProperty("typeAccount")
    public Optional<LinkData> getTypeAccount() {
        return typeAccount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Bnk && equalTo((Bnk) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Bnk other) {
        return accountNumber.equals(other.accountNumber)
                && bankName.equals(other.bankName)
                && routingAccount.equals(other.routingAccount)
                && typeAccount.equals(other.typeAccount);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.accountNumber, this.bankName, this.routingAccount, this.typeAccount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<LinkData> accountNumber = Optional.empty();

        private Optional<LinkData> bankName = Optional.empty();

        private Optional<LinkData> routingAccount = Optional.empty();

        private Optional<LinkData> typeAccount = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Bnk other) {
            accountNumber(other.getAccountNumber());
            bankName(other.getBankName());
            routingAccount(other.getRoutingAccount());
            typeAccount(other.getTypeAccount());
            return this;
        }

        @JsonSetter(value = "accountNumber", nulls = Nulls.SKIP)
        public Builder accountNumber(Optional<LinkData> accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }

        public Builder accountNumber(LinkData accountNumber) {
            this.accountNumber = Optional.ofNullable(accountNumber);
            return this;
        }

        @JsonSetter(value = "bankName", nulls = Nulls.SKIP)
        public Builder bankName(Optional<LinkData> bankName) {
            this.bankName = bankName;
            return this;
        }

        public Builder bankName(LinkData bankName) {
            this.bankName = Optional.ofNullable(bankName);
            return this;
        }

        @JsonSetter(value = "routingAccount", nulls = Nulls.SKIP)
        public Builder routingAccount(Optional<LinkData> routingAccount) {
            this.routingAccount = routingAccount;
            return this;
        }

        public Builder routingAccount(LinkData routingAccount) {
            this.routingAccount = Optional.ofNullable(routingAccount);
            return this;
        }

        @JsonSetter(value = "typeAccount", nulls = Nulls.SKIP)
        public Builder typeAccount(Optional<LinkData> typeAccount) {
            this.typeAccount = typeAccount;
            return this;
        }

        public Builder typeAccount(LinkData typeAccount) {
            this.typeAccount = Optional.ofNullable(typeAccount);
            return this;
        }

        public Bnk build() {
            return new Bnk(accountNumber, bankName, routingAccount, typeAccount, additionalProperties);
        }
    }
}
