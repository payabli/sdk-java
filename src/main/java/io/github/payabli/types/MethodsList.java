/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MethodsList.Builder.class)
public final class MethodsList {
    private final Optional<Boolean> amex;

    private final Optional<Boolean> applePay;

    private final Optional<Boolean> googlePay;

    private final Optional<Boolean> discover;

    private final Optional<Boolean> eCheck;

    private final Optional<Boolean> mastercard;

    private final Optional<Boolean> visa;

    private final Map<String, Object> additionalProperties;

    private MethodsList(
            Optional<Boolean> amex,
            Optional<Boolean> applePay,
            Optional<Boolean> googlePay,
            Optional<Boolean> discover,
            Optional<Boolean> eCheck,
            Optional<Boolean> mastercard,
            Optional<Boolean> visa,
            Map<String, Object> additionalProperties) {
        this.amex = amex;
        this.applePay = applePay;
        this.googlePay = googlePay;
        this.discover = discover;
        this.eCheck = eCheck;
        this.mastercard = mastercard;
        this.visa = visa;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return When <code>true</code>, American Express is accepted.
     */
    @JsonProperty("amex")
    public Optional<Boolean> getAmex() {
        return amex;
    }

    /**
     * @return When <code>true</code>, Apple Pay is accepted.
     */
    @JsonProperty("applePay")
    public Optional<Boolean> getApplePay() {
        return applePay;
    }

    /**
     * @return When <code>true</code>, Google Pay is accepted.
     */
    @JsonProperty("googlePay")
    public Optional<Boolean> getGooglePay() {
        return googlePay;
    }

    /**
     * @return When <code>true</code>, Discover is accepted.
     */
    @JsonProperty("discover")
    public Optional<Boolean> getDiscover() {
        return discover;
    }

    /**
     * @return When <code>true</code>, ACH is accepted.
     */
    @JsonProperty("eCheck")
    public Optional<Boolean> getECheck() {
        return eCheck;
    }

    /**
     * @return When <code>true</code>, Mastercard is accepted.
     */
    @JsonProperty("mastercard")
    public Optional<Boolean> getMastercard() {
        return mastercard;
    }

    /**
     * @return When <code>true</code>, Visa is accepted.
     */
    @JsonProperty("visa")
    public Optional<Boolean> getVisa() {
        return visa;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MethodsList && equalTo((MethodsList) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MethodsList other) {
        return amex.equals(other.amex)
                && applePay.equals(other.applePay)
                && googlePay.equals(other.googlePay)
                && discover.equals(other.discover)
                && eCheck.equals(other.eCheck)
                && mastercard.equals(other.mastercard)
                && visa.equals(other.visa);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.amex, this.applePay, this.googlePay, this.discover, this.eCheck, this.mastercard, this.visa);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> amex = Optional.empty();

        private Optional<Boolean> applePay = Optional.empty();

        private Optional<Boolean> googlePay = Optional.empty();

        private Optional<Boolean> discover = Optional.empty();

        private Optional<Boolean> eCheck = Optional.empty();

        private Optional<Boolean> mastercard = Optional.empty();

        private Optional<Boolean> visa = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(MethodsList other) {
            amex(other.getAmex());
            applePay(other.getApplePay());
            googlePay(other.getGooglePay());
            discover(other.getDiscover());
            eCheck(other.getECheck());
            mastercard(other.getMastercard());
            visa(other.getVisa());
            return this;
        }

        /**
         * <p>When <code>true</code>, American Express is accepted.</p>
         */
        @JsonSetter(value = "amex", nulls = Nulls.SKIP)
        public Builder amex(Optional<Boolean> amex) {
            this.amex = amex;
            return this;
        }

        public Builder amex(Boolean amex) {
            this.amex = Optional.ofNullable(amex);
            return this;
        }

        /**
         * <p>When <code>true</code>, Apple Pay is accepted.</p>
         */
        @JsonSetter(value = "applePay", nulls = Nulls.SKIP)
        public Builder applePay(Optional<Boolean> applePay) {
            this.applePay = applePay;
            return this;
        }

        public Builder applePay(Boolean applePay) {
            this.applePay = Optional.ofNullable(applePay);
            return this;
        }

        /**
         * <p>When <code>true</code>, Google Pay is accepted.</p>
         */
        @JsonSetter(value = "googlePay", nulls = Nulls.SKIP)
        public Builder googlePay(Optional<Boolean> googlePay) {
            this.googlePay = googlePay;
            return this;
        }

        public Builder googlePay(Boolean googlePay) {
            this.googlePay = Optional.ofNullable(googlePay);
            return this;
        }

        /**
         * <p>When <code>true</code>, Discover is accepted.</p>
         */
        @JsonSetter(value = "discover", nulls = Nulls.SKIP)
        public Builder discover(Optional<Boolean> discover) {
            this.discover = discover;
            return this;
        }

        public Builder discover(Boolean discover) {
            this.discover = Optional.ofNullable(discover);
            return this;
        }

        /**
         * <p>When <code>true</code>, ACH is accepted.</p>
         */
        @JsonSetter(value = "eCheck", nulls = Nulls.SKIP)
        public Builder eCheck(Optional<Boolean> eCheck) {
            this.eCheck = eCheck;
            return this;
        }

        public Builder eCheck(Boolean eCheck) {
            this.eCheck = Optional.ofNullable(eCheck);
            return this;
        }

        /**
         * <p>When <code>true</code>, Mastercard is accepted.</p>
         */
        @JsonSetter(value = "mastercard", nulls = Nulls.SKIP)
        public Builder mastercard(Optional<Boolean> mastercard) {
            this.mastercard = mastercard;
            return this;
        }

        public Builder mastercard(Boolean mastercard) {
            this.mastercard = Optional.ofNullable(mastercard);
            return this;
        }

        /**
         * <p>When <code>true</code>, Visa is accepted.</p>
         */
        @JsonSetter(value = "visa", nulls = Nulls.SKIP)
        public Builder visa(Optional<Boolean> visa) {
            this.visa = visa;
            return this;
        }

        public Builder visa(Boolean visa) {
            this.visa = Optional.ofNullable(visa);
            return this;
        }

        public MethodsList build() {
            return new MethodsList(amex, applePay, googlePay, discover, eCheck, mastercard, visa, additionalProperties);
        }
    }
}
