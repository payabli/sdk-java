/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrganizationQueryRecord.Builder.class)
public final class OrganizationQueryRecord {
    private final Optional<List<OrganizationQueryRecordServicesItem>> services;

    private final Optional<Instrument> billingInfo;

    private final Optional<List<Contacts>> contacts;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<Boolean> hasBilling;

    private final Optional<Boolean> hasResidual;

    private final Optional<Long> idOrg;

    private final Optional<Boolean> isRoot;

    private final Optional<String> orgAddress;

    private final Optional<String> orgCity;

    private final Optional<String> orgCountry;

    private final Optional<String> orgEntryName;

    private final Optional<String> orgId;

    private final Optional<FileContent> orgLogo;

    private final Optional<String> orgName;

    private final Optional<Long> orgParentId;

    private final Optional<String> orgParentName;

    private final Optional<String> orgState;

    private final Optional<Integer> orgTimezone;

    private final Optional<Integer> orgType;

    private final Optional<String> orgWebsite;

    private final Optional<String> orgZip;

    private final Optional<Boolean> recipientEmailNotification;

    private final Optional<String> replyToEmail;

    private final Optional<Boolean> resumable;

    private final Optional<SummaryOrg> summary;

    private final Optional<List<UserQueryRecord>> users;

    private final Map<String, Object> additionalProperties;

    private OrganizationQueryRecord(
            Optional<List<OrganizationQueryRecordServicesItem>> services,
            Optional<Instrument> billingInfo,
            Optional<List<Contacts>> contacts,
            Optional<OffsetDateTime> createdAt,
            Optional<Boolean> hasBilling,
            Optional<Boolean> hasResidual,
            Optional<Long> idOrg,
            Optional<Boolean> isRoot,
            Optional<String> orgAddress,
            Optional<String> orgCity,
            Optional<String> orgCountry,
            Optional<String> orgEntryName,
            Optional<String> orgId,
            Optional<FileContent> orgLogo,
            Optional<String> orgName,
            Optional<Long> orgParentId,
            Optional<String> orgParentName,
            Optional<String> orgState,
            Optional<Integer> orgTimezone,
            Optional<Integer> orgType,
            Optional<String> orgWebsite,
            Optional<String> orgZip,
            Optional<Boolean> recipientEmailNotification,
            Optional<String> replyToEmail,
            Optional<Boolean> resumable,
            Optional<SummaryOrg> summary,
            Optional<List<UserQueryRecord>> users,
            Map<String, Object> additionalProperties) {
        this.services = services;
        this.billingInfo = billingInfo;
        this.contacts = contacts;
        this.createdAt = createdAt;
        this.hasBilling = hasBilling;
        this.hasResidual = hasResidual;
        this.idOrg = idOrg;
        this.isRoot = isRoot;
        this.orgAddress = orgAddress;
        this.orgCity = orgCity;
        this.orgCountry = orgCountry;
        this.orgEntryName = orgEntryName;
        this.orgId = orgId;
        this.orgLogo = orgLogo;
        this.orgName = orgName;
        this.orgParentId = orgParentId;
        this.orgParentName = orgParentName;
        this.orgState = orgState;
        this.orgTimezone = orgTimezone;
        this.orgType = orgType;
        this.orgWebsite = orgWebsite;
        this.orgZip = orgZip;
        this.recipientEmailNotification = recipientEmailNotification;
        this.replyToEmail = replyToEmail;
        this.resumable = resumable;
        this.summary = summary;
        this.users = users;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("services")
    public Optional<List<OrganizationQueryRecordServicesItem>> getServices() {
        return services;
    }

    @JsonProperty("billingInfo")
    public Optional<Instrument> getBillingInfo() {
        return billingInfo;
    }

    @JsonProperty("contacts")
    public Optional<List<Contacts>> getContacts() {
        return contacts;
    }

    @JsonProperty("createdAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("hasBilling")
    public Optional<Boolean> getHasBilling() {
        return hasBilling;
    }

    @JsonProperty("hasResidual")
    public Optional<Boolean> getHasResidual() {
        return hasResidual;
    }

    @JsonProperty("idOrg")
    public Optional<Long> getIdOrg() {
        return idOrg;
    }

    @JsonProperty("isRoot")
    public Optional<Boolean> getIsRoot() {
        return isRoot;
    }

    @JsonProperty("orgAddress")
    public Optional<String> getOrgAddress() {
        return orgAddress;
    }

    @JsonProperty("orgCity")
    public Optional<String> getOrgCity() {
        return orgCity;
    }

    @JsonProperty("orgCountry")
    public Optional<String> getOrgCountry() {
        return orgCountry;
    }

    @JsonProperty("orgEntryName")
    public Optional<String> getOrgEntryName() {
        return orgEntryName;
    }

    @JsonProperty("orgId")
    public Optional<String> getOrgId() {
        return orgId;
    }

    @JsonProperty("orgLogo")
    public Optional<FileContent> getOrgLogo() {
        return orgLogo;
    }

    @JsonProperty("orgName")
    public Optional<String> getOrgName() {
        return orgName;
    }

    @JsonProperty("orgParentId")
    public Optional<Long> getOrgParentId() {
        return orgParentId;
    }

    @JsonProperty("orgParentName")
    public Optional<String> getOrgParentName() {
        return orgParentName;
    }

    @JsonProperty("orgState")
    public Optional<String> getOrgState() {
        return orgState;
    }

    @JsonProperty("orgTimezone")
    public Optional<Integer> getOrgTimezone() {
        return orgTimezone;
    }

    @JsonProperty("orgType")
    public Optional<Integer> getOrgType() {
        return orgType;
    }

    @JsonProperty("orgWebsite")
    public Optional<String> getOrgWebsite() {
        return orgWebsite;
    }

    @JsonProperty("orgZip")
    public Optional<String> getOrgZip() {
        return orgZip;
    }

    @JsonProperty("recipientEmailNotification")
    public Optional<Boolean> getRecipientEmailNotification() {
        return recipientEmailNotification;
    }

    @JsonProperty("replyToEmail")
    public Optional<String> getReplyToEmail() {
        return replyToEmail;
    }

    @JsonProperty("resumable")
    public Optional<Boolean> getResumable() {
        return resumable;
    }

    @JsonProperty("summary")
    public Optional<SummaryOrg> getSummary() {
        return summary;
    }

    @JsonProperty("users")
    public Optional<List<UserQueryRecord>> getUsers() {
        return users;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrganizationQueryRecord && equalTo((OrganizationQueryRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrganizationQueryRecord other) {
        return services.equals(other.services)
                && billingInfo.equals(other.billingInfo)
                && contacts.equals(other.contacts)
                && createdAt.equals(other.createdAt)
                && hasBilling.equals(other.hasBilling)
                && hasResidual.equals(other.hasResidual)
                && idOrg.equals(other.idOrg)
                && isRoot.equals(other.isRoot)
                && orgAddress.equals(other.orgAddress)
                && orgCity.equals(other.orgCity)
                && orgCountry.equals(other.orgCountry)
                && orgEntryName.equals(other.orgEntryName)
                && orgId.equals(other.orgId)
                && orgLogo.equals(other.orgLogo)
                && orgName.equals(other.orgName)
                && orgParentId.equals(other.orgParentId)
                && orgParentName.equals(other.orgParentName)
                && orgState.equals(other.orgState)
                && orgTimezone.equals(other.orgTimezone)
                && orgType.equals(other.orgType)
                && orgWebsite.equals(other.orgWebsite)
                && orgZip.equals(other.orgZip)
                && recipientEmailNotification.equals(other.recipientEmailNotification)
                && replyToEmail.equals(other.replyToEmail)
                && resumable.equals(other.resumable)
                && summary.equals(other.summary)
                && users.equals(other.users);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.services,
                this.billingInfo,
                this.contacts,
                this.createdAt,
                this.hasBilling,
                this.hasResidual,
                this.idOrg,
                this.isRoot,
                this.orgAddress,
                this.orgCity,
                this.orgCountry,
                this.orgEntryName,
                this.orgId,
                this.orgLogo,
                this.orgName,
                this.orgParentId,
                this.orgParentName,
                this.orgState,
                this.orgTimezone,
                this.orgType,
                this.orgWebsite,
                this.orgZip,
                this.recipientEmailNotification,
                this.replyToEmail,
                this.resumable,
                this.summary,
                this.users);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<OrganizationQueryRecordServicesItem>> services = Optional.empty();

        private Optional<Instrument> billingInfo = Optional.empty();

        private Optional<List<Contacts>> contacts = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<Boolean> hasBilling = Optional.empty();

        private Optional<Boolean> hasResidual = Optional.empty();

        private Optional<Long> idOrg = Optional.empty();

        private Optional<Boolean> isRoot = Optional.empty();

        private Optional<String> orgAddress = Optional.empty();

        private Optional<String> orgCity = Optional.empty();

        private Optional<String> orgCountry = Optional.empty();

        private Optional<String> orgEntryName = Optional.empty();

        private Optional<String> orgId = Optional.empty();

        private Optional<FileContent> orgLogo = Optional.empty();

        private Optional<String> orgName = Optional.empty();

        private Optional<Long> orgParentId = Optional.empty();

        private Optional<String> orgParentName = Optional.empty();

        private Optional<String> orgState = Optional.empty();

        private Optional<Integer> orgTimezone = Optional.empty();

        private Optional<Integer> orgType = Optional.empty();

        private Optional<String> orgWebsite = Optional.empty();

        private Optional<String> orgZip = Optional.empty();

        private Optional<Boolean> recipientEmailNotification = Optional.empty();

        private Optional<String> replyToEmail = Optional.empty();

        private Optional<Boolean> resumable = Optional.empty();

        private Optional<SummaryOrg> summary = Optional.empty();

        private Optional<List<UserQueryRecord>> users = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrganizationQueryRecord other) {
            services(other.getServices());
            billingInfo(other.getBillingInfo());
            contacts(other.getContacts());
            createdAt(other.getCreatedAt());
            hasBilling(other.getHasBilling());
            hasResidual(other.getHasResidual());
            idOrg(other.getIdOrg());
            isRoot(other.getIsRoot());
            orgAddress(other.getOrgAddress());
            orgCity(other.getOrgCity());
            orgCountry(other.getOrgCountry());
            orgEntryName(other.getOrgEntryName());
            orgId(other.getOrgId());
            orgLogo(other.getOrgLogo());
            orgName(other.getOrgName());
            orgParentId(other.getOrgParentId());
            orgParentName(other.getOrgParentName());
            orgState(other.getOrgState());
            orgTimezone(other.getOrgTimezone());
            orgType(other.getOrgType());
            orgWebsite(other.getOrgWebsite());
            orgZip(other.getOrgZip());
            recipientEmailNotification(other.getRecipientEmailNotification());
            replyToEmail(other.getReplyToEmail());
            resumable(other.getResumable());
            summary(other.getSummary());
            users(other.getUsers());
            return this;
        }

        @JsonSetter(value = "services", nulls = Nulls.SKIP)
        public Builder services(Optional<List<OrganizationQueryRecordServicesItem>> services) {
            this.services = services;
            return this;
        }

        public Builder services(List<OrganizationQueryRecordServicesItem> services) {
            this.services = Optional.ofNullable(services);
            return this;
        }

        @JsonSetter(value = "billingInfo", nulls = Nulls.SKIP)
        public Builder billingInfo(Optional<Instrument> billingInfo) {
            this.billingInfo = billingInfo;
            return this;
        }

        public Builder billingInfo(Instrument billingInfo) {
            this.billingInfo = Optional.ofNullable(billingInfo);
            return this;
        }

        @JsonSetter(value = "contacts", nulls = Nulls.SKIP)
        public Builder contacts(Optional<List<Contacts>> contacts) {
            this.contacts = contacts;
            return this;
        }

        public Builder contacts(List<Contacts> contacts) {
            this.contacts = Optional.ofNullable(contacts);
            return this;
        }

        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "hasBilling", nulls = Nulls.SKIP)
        public Builder hasBilling(Optional<Boolean> hasBilling) {
            this.hasBilling = hasBilling;
            return this;
        }

        public Builder hasBilling(Boolean hasBilling) {
            this.hasBilling = Optional.ofNullable(hasBilling);
            return this;
        }

        @JsonSetter(value = "hasResidual", nulls = Nulls.SKIP)
        public Builder hasResidual(Optional<Boolean> hasResidual) {
            this.hasResidual = hasResidual;
            return this;
        }

        public Builder hasResidual(Boolean hasResidual) {
            this.hasResidual = Optional.ofNullable(hasResidual);
            return this;
        }

        @JsonSetter(value = "idOrg", nulls = Nulls.SKIP)
        public Builder idOrg(Optional<Long> idOrg) {
            this.idOrg = idOrg;
            return this;
        }

        public Builder idOrg(Long idOrg) {
            this.idOrg = Optional.ofNullable(idOrg);
            return this;
        }

        @JsonSetter(value = "isRoot", nulls = Nulls.SKIP)
        public Builder isRoot(Optional<Boolean> isRoot) {
            this.isRoot = isRoot;
            return this;
        }

        public Builder isRoot(Boolean isRoot) {
            this.isRoot = Optional.ofNullable(isRoot);
            return this;
        }

        @JsonSetter(value = "orgAddress", nulls = Nulls.SKIP)
        public Builder orgAddress(Optional<String> orgAddress) {
            this.orgAddress = orgAddress;
            return this;
        }

        public Builder orgAddress(String orgAddress) {
            this.orgAddress = Optional.ofNullable(orgAddress);
            return this;
        }

        @JsonSetter(value = "orgCity", nulls = Nulls.SKIP)
        public Builder orgCity(Optional<String> orgCity) {
            this.orgCity = orgCity;
            return this;
        }

        public Builder orgCity(String orgCity) {
            this.orgCity = Optional.ofNullable(orgCity);
            return this;
        }

        @JsonSetter(value = "orgCountry", nulls = Nulls.SKIP)
        public Builder orgCountry(Optional<String> orgCountry) {
            this.orgCountry = orgCountry;
            return this;
        }

        public Builder orgCountry(String orgCountry) {
            this.orgCountry = Optional.ofNullable(orgCountry);
            return this;
        }

        @JsonSetter(value = "orgEntryName", nulls = Nulls.SKIP)
        public Builder orgEntryName(Optional<String> orgEntryName) {
            this.orgEntryName = orgEntryName;
            return this;
        }

        public Builder orgEntryName(String orgEntryName) {
            this.orgEntryName = Optional.ofNullable(orgEntryName);
            return this;
        }

        @JsonSetter(value = "orgId", nulls = Nulls.SKIP)
        public Builder orgId(Optional<String> orgId) {
            this.orgId = orgId;
            return this;
        }

        public Builder orgId(String orgId) {
            this.orgId = Optional.ofNullable(orgId);
            return this;
        }

        @JsonSetter(value = "orgLogo", nulls = Nulls.SKIP)
        public Builder orgLogo(Optional<FileContent> orgLogo) {
            this.orgLogo = orgLogo;
            return this;
        }

        public Builder orgLogo(FileContent orgLogo) {
            this.orgLogo = Optional.ofNullable(orgLogo);
            return this;
        }

        @JsonSetter(value = "orgName", nulls = Nulls.SKIP)
        public Builder orgName(Optional<String> orgName) {
            this.orgName = orgName;
            return this;
        }

        public Builder orgName(String orgName) {
            this.orgName = Optional.ofNullable(orgName);
            return this;
        }

        @JsonSetter(value = "orgParentId", nulls = Nulls.SKIP)
        public Builder orgParentId(Optional<Long> orgParentId) {
            this.orgParentId = orgParentId;
            return this;
        }

        public Builder orgParentId(Long orgParentId) {
            this.orgParentId = Optional.ofNullable(orgParentId);
            return this;
        }

        @JsonSetter(value = "orgParentName", nulls = Nulls.SKIP)
        public Builder orgParentName(Optional<String> orgParentName) {
            this.orgParentName = orgParentName;
            return this;
        }

        public Builder orgParentName(String orgParentName) {
            this.orgParentName = Optional.ofNullable(orgParentName);
            return this;
        }

        @JsonSetter(value = "orgState", nulls = Nulls.SKIP)
        public Builder orgState(Optional<String> orgState) {
            this.orgState = orgState;
            return this;
        }

        public Builder orgState(String orgState) {
            this.orgState = Optional.ofNullable(orgState);
            return this;
        }

        @JsonSetter(value = "orgTimezone", nulls = Nulls.SKIP)
        public Builder orgTimezone(Optional<Integer> orgTimezone) {
            this.orgTimezone = orgTimezone;
            return this;
        }

        public Builder orgTimezone(Integer orgTimezone) {
            this.orgTimezone = Optional.ofNullable(orgTimezone);
            return this;
        }

        @JsonSetter(value = "orgType", nulls = Nulls.SKIP)
        public Builder orgType(Optional<Integer> orgType) {
            this.orgType = orgType;
            return this;
        }

        public Builder orgType(Integer orgType) {
            this.orgType = Optional.ofNullable(orgType);
            return this;
        }

        @JsonSetter(value = "orgWebsite", nulls = Nulls.SKIP)
        public Builder orgWebsite(Optional<String> orgWebsite) {
            this.orgWebsite = orgWebsite;
            return this;
        }

        public Builder orgWebsite(String orgWebsite) {
            this.orgWebsite = Optional.ofNullable(orgWebsite);
            return this;
        }

        @JsonSetter(value = "orgZip", nulls = Nulls.SKIP)
        public Builder orgZip(Optional<String> orgZip) {
            this.orgZip = orgZip;
            return this;
        }

        public Builder orgZip(String orgZip) {
            this.orgZip = Optional.ofNullable(orgZip);
            return this;
        }

        @JsonSetter(value = "recipientEmailNotification", nulls = Nulls.SKIP)
        public Builder recipientEmailNotification(Optional<Boolean> recipientEmailNotification) {
            this.recipientEmailNotification = recipientEmailNotification;
            return this;
        }

        public Builder recipientEmailNotification(Boolean recipientEmailNotification) {
            this.recipientEmailNotification = Optional.ofNullable(recipientEmailNotification);
            return this;
        }

        @JsonSetter(value = "replyToEmail", nulls = Nulls.SKIP)
        public Builder replyToEmail(Optional<String> replyToEmail) {
            this.replyToEmail = replyToEmail;
            return this;
        }

        public Builder replyToEmail(String replyToEmail) {
            this.replyToEmail = Optional.ofNullable(replyToEmail);
            return this;
        }

        @JsonSetter(value = "resumable", nulls = Nulls.SKIP)
        public Builder resumable(Optional<Boolean> resumable) {
            this.resumable = resumable;
            return this;
        }

        public Builder resumable(Boolean resumable) {
            this.resumable = Optional.ofNullable(resumable);
            return this;
        }

        @JsonSetter(value = "summary", nulls = Nulls.SKIP)
        public Builder summary(Optional<SummaryOrg> summary) {
            this.summary = summary;
            return this;
        }

        public Builder summary(SummaryOrg summary) {
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        @JsonSetter(value = "users", nulls = Nulls.SKIP)
        public Builder users(Optional<List<UserQueryRecord>> users) {
            this.users = users;
            return this;
        }

        public Builder users(List<UserQueryRecord> users) {
            this.users = Optional.ofNullable(users);
            return this;
        }

        public OrganizationQueryRecord build() {
            return new OrganizationQueryRecord(
                    services,
                    billingInfo,
                    contacts,
                    createdAt,
                    hasBilling,
                    hasResidual,
                    idOrg,
                    isRoot,
                    orgAddress,
                    orgCity,
                    orgCountry,
                    orgEntryName,
                    orgId,
                    orgLogo,
                    orgName,
                    orgParentId,
                    orgParentName,
                    orgState,
                    orgTimezone,
                    orgType,
                    orgWebsite,
                    orgZip,
                    recipientEmailNotification,
                    replyToEmail,
                    resumable,
                    summary,
                    users,
                    additionalProperties);
        }
    }
}
