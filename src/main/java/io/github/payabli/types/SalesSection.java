/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SalesSection.Builder.class)
public final class SalesSection {
    private final Optional<String> salesCode;

    private final Optional<String> salesCrm;

    private final Map<String, Object> additionalProperties;

    private SalesSection(
            Optional<String> salesCode, Optional<String> salesCrm, Map<String, Object> additionalProperties) {
        this.salesCode = salesCode;
        this.salesCrm = salesCrm;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("salesCode")
    public Optional<String> getSalesCode() {
        return salesCode;
    }

    @JsonProperty("salesCRM")
    public Optional<String> getSalesCrm() {
        return salesCrm;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SalesSection && equalTo((SalesSection) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SalesSection other) {
        return salesCode.equals(other.salesCode) && salesCrm.equals(other.salesCrm);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.salesCode, this.salesCrm);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> salesCode = Optional.empty();

        private Optional<String> salesCrm = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SalesSection other) {
            salesCode(other.getSalesCode());
            salesCrm(other.getSalesCrm());
            return this;
        }

        @JsonSetter(value = "salesCode", nulls = Nulls.SKIP)
        public Builder salesCode(Optional<String> salesCode) {
            this.salesCode = salesCode;
            return this;
        }

        public Builder salesCode(String salesCode) {
            this.salesCode = Optional.ofNullable(salesCode);
            return this;
        }

        @JsonSetter(value = "salesCRM", nulls = Nulls.SKIP)
        public Builder salesCrm(Optional<String> salesCrm) {
            this.salesCrm = salesCrm;
            return this;
        }

        public Builder salesCrm(String salesCrm) {
            this.salesCrm = Optional.ofNullable(salesCrm);
            return this;
        }

        public SalesSection build() {
            return new SalesSection(salesCode, salesCrm, additionalProperties);
        }
    }
}
