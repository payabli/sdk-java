/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryPayoutTransactionRecordsItem.Builder.class)
public final class QueryPayoutTransactionRecordsItem {
    private final Optional<String> batchNumber;

    private final Optional<Integer> batchId;

    private final Optional<List<BillPayOutData>> bills;

    private final Optional<String> cardToken;

    private final Optional<FileContent> checkData;

    private final Optional<String> checkNumber;

    private final Optional<String> comments;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<String> entryName;

    private final Optional<List<QueryTransactionEvents>> events;

    private final Optional<String> externalPaypointId;

    private final Optional<Double> feeAmount;

    private final Optional<String> gateway;

    private final Optional<Boolean> hasVcardTransactions;

    private final Optional<Long> idOut;

    private final Optional<Boolean> isSameDayAch;

    private final Optional<OffsetDateTime> lastUpdated;

    private final Optional<Double> netAmount;

    private final Optional<String> parentOrgName;

    private final Optional<Long> parentOrgId;

    private final Optional<QueryPayoutTransactionRecordsItemPaymentData> paymentData;

    private final Optional<String> paymentId;

    private final Optional<String> paymentMethod;

    private final Optional<String> paymentStatus;

    private final Optional<String> payoutProgram;

    private final Optional<String> paypointDbaname;

    private final Optional<String> paypointLegalname;

    private final Optional<String> riskAction;

    private final Optional<Integer> riskActionCode;

    private final Optional<Boolean> riskFlagged;

    private final Optional<OffsetDateTime> riskFlaggedOn;

    private final Optional<String> riskReason;

    private final Optional<String> riskStatus;

    private final Optional<Long> scheduleId;

    private final Optional<String> settlementStatus;

    private final Optional<String> source;

    private final Optional<Integer> status;

    private final Optional<Double> totalAmount;

    private final Optional<VendorQueryRecord> vendor;

    private final Map<String, Object> additionalProperties;

    private QueryPayoutTransactionRecordsItem(
            Optional<String> batchNumber,
            Optional<Integer> batchId,
            Optional<List<BillPayOutData>> bills,
            Optional<String> cardToken,
            Optional<FileContent> checkData,
            Optional<String> checkNumber,
            Optional<String> comments,
            Optional<OffsetDateTime> createdAt,
            Optional<String> entryName,
            Optional<List<QueryTransactionEvents>> events,
            Optional<String> externalPaypointId,
            Optional<Double> feeAmount,
            Optional<String> gateway,
            Optional<Boolean> hasVcardTransactions,
            Optional<Long> idOut,
            Optional<Boolean> isSameDayAch,
            Optional<OffsetDateTime> lastUpdated,
            Optional<Double> netAmount,
            Optional<String> parentOrgName,
            Optional<Long> parentOrgId,
            Optional<QueryPayoutTransactionRecordsItemPaymentData> paymentData,
            Optional<String> paymentId,
            Optional<String> paymentMethod,
            Optional<String> paymentStatus,
            Optional<String> payoutProgram,
            Optional<String> paypointDbaname,
            Optional<String> paypointLegalname,
            Optional<String> riskAction,
            Optional<Integer> riskActionCode,
            Optional<Boolean> riskFlagged,
            Optional<OffsetDateTime> riskFlaggedOn,
            Optional<String> riskReason,
            Optional<String> riskStatus,
            Optional<Long> scheduleId,
            Optional<String> settlementStatus,
            Optional<String> source,
            Optional<Integer> status,
            Optional<Double> totalAmount,
            Optional<VendorQueryRecord> vendor,
            Map<String, Object> additionalProperties) {
        this.batchNumber = batchNumber;
        this.batchId = batchId;
        this.bills = bills;
        this.cardToken = cardToken;
        this.checkData = checkData;
        this.checkNumber = checkNumber;
        this.comments = comments;
        this.createdAt = createdAt;
        this.entryName = entryName;
        this.events = events;
        this.externalPaypointId = externalPaypointId;
        this.feeAmount = feeAmount;
        this.gateway = gateway;
        this.hasVcardTransactions = hasVcardTransactions;
        this.idOut = idOut;
        this.isSameDayAch = isSameDayAch;
        this.lastUpdated = lastUpdated;
        this.netAmount = netAmount;
        this.parentOrgName = parentOrgName;
        this.parentOrgId = parentOrgId;
        this.paymentData = paymentData;
        this.paymentId = paymentId;
        this.paymentMethod = paymentMethod;
        this.paymentStatus = paymentStatus;
        this.payoutProgram = payoutProgram;
        this.paypointDbaname = paypointDbaname;
        this.paypointLegalname = paypointLegalname;
        this.riskAction = riskAction;
        this.riskActionCode = riskActionCode;
        this.riskFlagged = riskFlagged;
        this.riskFlaggedOn = riskFlaggedOn;
        this.riskReason = riskReason;
        this.riskStatus = riskStatus;
        this.scheduleId = scheduleId;
        this.settlementStatus = settlementStatus;
        this.source = source;
        this.status = status;
        this.totalAmount = totalAmount;
        this.vendor = vendor;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("BatchNumber")
    public Optional<String> getBatchNumber() {
        return batchNumber;
    }

    /**
     * @return Identifier of the batch associated with payout transaction.
     */
    @JsonProperty("BatchId")
    public Optional<Integer> getBatchId() {
        return batchId;
    }

    /**
     * @return Events associated with this transaction.
     */
    @JsonProperty("Bills")
    public Optional<List<BillPayOutData>> getBills() {
        return bills;
    }

    @JsonProperty("CardToken")
    public Optional<String> getCardToken() {
        return cardToken;
    }

    /**
     * @return Object referencing paper check image.
     */
    @JsonProperty("CheckData")
    public Optional<FileContent> getCheckData() {
        return checkData;
    }

    /**
     * @return Paper check number related to payout transaction.
     */
    @JsonProperty("CheckNumber")
    public Optional<String> getCheckNumber() {
        return checkNumber;
    }

    /**
     * @return Any comment or description for payout transaction.
     */
    @JsonProperty("Comments")
    public Optional<String> getComments() {
        return comments;
    }

    /**
     * @return Timestamp when the payment was created, in UTC.
     */
    @JsonProperty("CreatedAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("EntryName")
    public Optional<String> getEntryName() {
        return entryName;
    }

    /**
     * @return Events associated with this transaction.
     */
    @JsonProperty("Events")
    public Optional<List<QueryTransactionEvents>> getEvents() {
        return events;
    }

    @JsonProperty("externalPaypointID")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    @JsonProperty("FeeAmount")
    public Optional<Double> getFeeAmount() {
        return feeAmount;
    }

    @JsonProperty("Gateway")
    public Optional<String> getGateway() {
        return gateway;
    }

    @JsonProperty("HasVcardTransactions")
    public Optional<Boolean> getHasVcardTransactions() {
        return hasVcardTransactions;
    }

    /**
     * @return Identifier of payout transaction.
     */
    @JsonProperty("IdOut")
    public Optional<Long> getIdOut() {
        return idOut;
    }

    @JsonProperty("IsSameDayACH")
    public Optional<Boolean> getIsSameDayAch() {
        return isSameDayAch;
    }

    /**
     * @return Timestamp when payment record was updated.
     */
    @JsonProperty("LastUpdated")
    public Optional<OffsetDateTime> getLastUpdated() {
        return lastUpdated;
    }

    /**
     * @return Net amount paid.
     */
    @JsonProperty("NetAmount")
    public Optional<Double> getNetAmount() {
        return netAmount;
    }

    @JsonProperty("ParentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    @JsonProperty("ParentOrgId")
    public Optional<Long> getParentOrgId() {
        return parentOrgId;
    }

    @JsonProperty("PaymentData")
    public Optional<QueryPayoutTransactionRecordsItemPaymentData> getPaymentData() {
        return paymentData;
    }

    @JsonProperty("PaymentId")
    public Optional<String> getPaymentId() {
        return paymentId;
    }

    /**
     * @return The payment method for the transaction.
     */
    @JsonProperty("PaymentMethod")
    public Optional<String> getPaymentMethod() {
        return paymentMethod;
    }

    /**
     * @return Status of payout transaction. See <a href="guides/money-out-statuses#payout-transaction-statuses">Payout Transaction Statuses</a> for a full reference.
     */
    @JsonProperty("PaymentStatus")
    public Optional<String> getPaymentStatus() {
        return paymentStatus;
    }

    @JsonProperty("PayoutProgram")
    public Optional<String> getPayoutProgram() {
        return payoutProgram;
    }

    @JsonProperty("PaypointDbaname")
    public Optional<String> getPaypointDbaname() {
        return paypointDbaname;
    }

    /**
     * @return Paypoint legal name.
     */
    @JsonProperty("PaypointLegalname")
    public Optional<String> getPaypointLegalname() {
        return paypointLegalname;
    }

    @JsonProperty("RiskAction")
    public Optional<String> getRiskAction() {
        return riskAction;
    }

    @JsonProperty("RiskActionCode")
    public Optional<Integer> getRiskActionCode() {
        return riskActionCode;
    }

    @JsonProperty("RiskFlagged")
    public Optional<Boolean> getRiskFlagged() {
        return riskFlagged;
    }

    @JsonProperty("RiskFlaggedOn")
    public Optional<OffsetDateTime> getRiskFlaggedOn() {
        return riskFlaggedOn;
    }

    @JsonProperty("RiskReason")
    public Optional<String> getRiskReason() {
        return riskReason;
    }

    @JsonProperty("RiskStatus")
    public Optional<String> getRiskStatus() {
        return riskStatus;
    }

    @JsonProperty("ScheduleId")
    public Optional<Long> getScheduleId() {
        return scheduleId;
    }

    @JsonProperty("SettlementStatus")
    public Optional<String> getSettlementStatus() {
        return settlementStatus;
    }

    @JsonProperty("Source")
    public Optional<String> getSource() {
        return source;
    }

    /**
     * @return Internal status of transaction.
     */
    @JsonProperty("Status")
    public Optional<Integer> getStatus() {
        return status;
    }

    /**
     * @return Transaction total amount (including service fee or sub-charge).
     */
    @JsonProperty("TotalAmount")
    public Optional<Double> getTotalAmount() {
        return totalAmount;
    }

    /**
     * @return Vendor related to the payout transaction.
     */
    @JsonProperty("Vendor")
    public Optional<VendorQueryRecord> getVendor() {
        return vendor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryPayoutTransactionRecordsItem && equalTo((QueryPayoutTransactionRecordsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryPayoutTransactionRecordsItem other) {
        return batchNumber.equals(other.batchNumber)
                && batchId.equals(other.batchId)
                && bills.equals(other.bills)
                && cardToken.equals(other.cardToken)
                && checkData.equals(other.checkData)
                && checkNumber.equals(other.checkNumber)
                && comments.equals(other.comments)
                && createdAt.equals(other.createdAt)
                && entryName.equals(other.entryName)
                && events.equals(other.events)
                && externalPaypointId.equals(other.externalPaypointId)
                && feeAmount.equals(other.feeAmount)
                && gateway.equals(other.gateway)
                && hasVcardTransactions.equals(other.hasVcardTransactions)
                && idOut.equals(other.idOut)
                && isSameDayAch.equals(other.isSameDayAch)
                && lastUpdated.equals(other.lastUpdated)
                && netAmount.equals(other.netAmount)
                && parentOrgName.equals(other.parentOrgName)
                && parentOrgId.equals(other.parentOrgId)
                && paymentData.equals(other.paymentData)
                && paymentId.equals(other.paymentId)
                && paymentMethod.equals(other.paymentMethod)
                && paymentStatus.equals(other.paymentStatus)
                && payoutProgram.equals(other.payoutProgram)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointLegalname.equals(other.paypointLegalname)
                && riskAction.equals(other.riskAction)
                && riskActionCode.equals(other.riskActionCode)
                && riskFlagged.equals(other.riskFlagged)
                && riskFlaggedOn.equals(other.riskFlaggedOn)
                && riskReason.equals(other.riskReason)
                && riskStatus.equals(other.riskStatus)
                && scheduleId.equals(other.scheduleId)
                && settlementStatus.equals(other.settlementStatus)
                && source.equals(other.source)
                && status.equals(other.status)
                && totalAmount.equals(other.totalAmount)
                && vendor.equals(other.vendor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.batchNumber,
                this.batchId,
                this.bills,
                this.cardToken,
                this.checkData,
                this.checkNumber,
                this.comments,
                this.createdAt,
                this.entryName,
                this.events,
                this.externalPaypointId,
                this.feeAmount,
                this.gateway,
                this.hasVcardTransactions,
                this.idOut,
                this.isSameDayAch,
                this.lastUpdated,
                this.netAmount,
                this.parentOrgName,
                this.parentOrgId,
                this.paymentData,
                this.paymentId,
                this.paymentMethod,
                this.paymentStatus,
                this.payoutProgram,
                this.paypointDbaname,
                this.paypointLegalname,
                this.riskAction,
                this.riskActionCode,
                this.riskFlagged,
                this.riskFlaggedOn,
                this.riskReason,
                this.riskStatus,
                this.scheduleId,
                this.settlementStatus,
                this.source,
                this.status,
                this.totalAmount,
                this.vendor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> batchNumber = Optional.empty();

        private Optional<Integer> batchId = Optional.empty();

        private Optional<List<BillPayOutData>> bills = Optional.empty();

        private Optional<String> cardToken = Optional.empty();

        private Optional<FileContent> checkData = Optional.empty();

        private Optional<String> checkNumber = Optional.empty();

        private Optional<String> comments = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> entryName = Optional.empty();

        private Optional<List<QueryTransactionEvents>> events = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<Double> feeAmount = Optional.empty();

        private Optional<String> gateway = Optional.empty();

        private Optional<Boolean> hasVcardTransactions = Optional.empty();

        private Optional<Long> idOut = Optional.empty();

        private Optional<Boolean> isSameDayAch = Optional.empty();

        private Optional<OffsetDateTime> lastUpdated = Optional.empty();

        private Optional<Double> netAmount = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<Long> parentOrgId = Optional.empty();

        private Optional<QueryPayoutTransactionRecordsItemPaymentData> paymentData = Optional.empty();

        private Optional<String> paymentId = Optional.empty();

        private Optional<String> paymentMethod = Optional.empty();

        private Optional<String> paymentStatus = Optional.empty();

        private Optional<String> payoutProgram = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<String> riskAction = Optional.empty();

        private Optional<Integer> riskActionCode = Optional.empty();

        private Optional<Boolean> riskFlagged = Optional.empty();

        private Optional<OffsetDateTime> riskFlaggedOn = Optional.empty();

        private Optional<String> riskReason = Optional.empty();

        private Optional<String> riskStatus = Optional.empty();

        private Optional<Long> scheduleId = Optional.empty();

        private Optional<String> settlementStatus = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<Integer> status = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<VendorQueryRecord> vendor = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryPayoutTransactionRecordsItem other) {
            batchNumber(other.getBatchNumber());
            batchId(other.getBatchId());
            bills(other.getBills());
            cardToken(other.getCardToken());
            checkData(other.getCheckData());
            checkNumber(other.getCheckNumber());
            comments(other.getComments());
            createdAt(other.getCreatedAt());
            entryName(other.getEntryName());
            events(other.getEvents());
            externalPaypointId(other.getExternalPaypointId());
            feeAmount(other.getFeeAmount());
            gateway(other.getGateway());
            hasVcardTransactions(other.getHasVcardTransactions());
            idOut(other.getIdOut());
            isSameDayAch(other.getIsSameDayAch());
            lastUpdated(other.getLastUpdated());
            netAmount(other.getNetAmount());
            parentOrgName(other.getParentOrgName());
            parentOrgId(other.getParentOrgId());
            paymentData(other.getPaymentData());
            paymentId(other.getPaymentId());
            paymentMethod(other.getPaymentMethod());
            paymentStatus(other.getPaymentStatus());
            payoutProgram(other.getPayoutProgram());
            paypointDbaname(other.getPaypointDbaname());
            paypointLegalname(other.getPaypointLegalname());
            riskAction(other.getRiskAction());
            riskActionCode(other.getRiskActionCode());
            riskFlagged(other.getRiskFlagged());
            riskFlaggedOn(other.getRiskFlaggedOn());
            riskReason(other.getRiskReason());
            riskStatus(other.getRiskStatus());
            scheduleId(other.getScheduleId());
            settlementStatus(other.getSettlementStatus());
            source(other.getSource());
            status(other.getStatus());
            totalAmount(other.getTotalAmount());
            vendor(other.getVendor());
            return this;
        }

        @JsonSetter(value = "BatchNumber", nulls = Nulls.SKIP)
        public Builder batchNumber(Optional<String> batchNumber) {
            this.batchNumber = batchNumber;
            return this;
        }

        public Builder batchNumber(String batchNumber) {
            this.batchNumber = Optional.ofNullable(batchNumber);
            return this;
        }

        /**
         * <p>Identifier of the batch associated with payout transaction.</p>
         */
        @JsonSetter(value = "BatchId", nulls = Nulls.SKIP)
        public Builder batchId(Optional<Integer> batchId) {
            this.batchId = batchId;
            return this;
        }

        public Builder batchId(Integer batchId) {
            this.batchId = Optional.ofNullable(batchId);
            return this;
        }

        /**
         * <p>Events associated with this transaction.</p>
         */
        @JsonSetter(value = "Bills", nulls = Nulls.SKIP)
        public Builder bills(Optional<List<BillPayOutData>> bills) {
            this.bills = bills;
            return this;
        }

        public Builder bills(List<BillPayOutData> bills) {
            this.bills = Optional.ofNullable(bills);
            return this;
        }

        @JsonSetter(value = "CardToken", nulls = Nulls.SKIP)
        public Builder cardToken(Optional<String> cardToken) {
            this.cardToken = cardToken;
            return this;
        }

        public Builder cardToken(String cardToken) {
            this.cardToken = Optional.ofNullable(cardToken);
            return this;
        }

        /**
         * <p>Object referencing paper check image.</p>
         */
        @JsonSetter(value = "CheckData", nulls = Nulls.SKIP)
        public Builder checkData(Optional<FileContent> checkData) {
            this.checkData = checkData;
            return this;
        }

        public Builder checkData(FileContent checkData) {
            this.checkData = Optional.ofNullable(checkData);
            return this;
        }

        /**
         * <p>Paper check number related to payout transaction.</p>
         */
        @JsonSetter(value = "CheckNumber", nulls = Nulls.SKIP)
        public Builder checkNumber(Optional<String> checkNumber) {
            this.checkNumber = checkNumber;
            return this;
        }

        public Builder checkNumber(String checkNumber) {
            this.checkNumber = Optional.ofNullable(checkNumber);
            return this;
        }

        /**
         * <p>Any comment or description for payout transaction.</p>
         */
        @JsonSetter(value = "Comments", nulls = Nulls.SKIP)
        public Builder comments(Optional<String> comments) {
            this.comments = comments;
            return this;
        }

        public Builder comments(String comments) {
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        /**
         * <p>Timestamp when the payment was created, in UTC.</p>
         */
        @JsonSetter(value = "CreatedAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "EntryName", nulls = Nulls.SKIP)
        public Builder entryName(Optional<String> entryName) {
            this.entryName = entryName;
            return this;
        }

        public Builder entryName(String entryName) {
            this.entryName = Optional.ofNullable(entryName);
            return this;
        }

        /**
         * <p>Events associated with this transaction.</p>
         */
        @JsonSetter(value = "Events", nulls = Nulls.SKIP)
        public Builder events(Optional<List<QueryTransactionEvents>> events) {
            this.events = events;
            return this;
        }

        public Builder events(List<QueryTransactionEvents> events) {
            this.events = Optional.ofNullable(events);
            return this;
        }

        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        @JsonSetter(value = "FeeAmount", nulls = Nulls.SKIP)
        public Builder feeAmount(Optional<Double> feeAmount) {
            this.feeAmount = feeAmount;
            return this;
        }

        public Builder feeAmount(Double feeAmount) {
            this.feeAmount = Optional.ofNullable(feeAmount);
            return this;
        }

        @JsonSetter(value = "Gateway", nulls = Nulls.SKIP)
        public Builder gateway(Optional<String> gateway) {
            this.gateway = gateway;
            return this;
        }

        public Builder gateway(String gateway) {
            this.gateway = Optional.ofNullable(gateway);
            return this;
        }

        @JsonSetter(value = "HasVcardTransactions", nulls = Nulls.SKIP)
        public Builder hasVcardTransactions(Optional<Boolean> hasVcardTransactions) {
            this.hasVcardTransactions = hasVcardTransactions;
            return this;
        }

        public Builder hasVcardTransactions(Boolean hasVcardTransactions) {
            this.hasVcardTransactions = Optional.ofNullable(hasVcardTransactions);
            return this;
        }

        /**
         * <p>Identifier of payout transaction.</p>
         */
        @JsonSetter(value = "IdOut", nulls = Nulls.SKIP)
        public Builder idOut(Optional<Long> idOut) {
            this.idOut = idOut;
            return this;
        }

        public Builder idOut(Long idOut) {
            this.idOut = Optional.ofNullable(idOut);
            return this;
        }

        @JsonSetter(value = "IsSameDayACH", nulls = Nulls.SKIP)
        public Builder isSameDayAch(Optional<Boolean> isSameDayAch) {
            this.isSameDayAch = isSameDayAch;
            return this;
        }

        public Builder isSameDayAch(Boolean isSameDayAch) {
            this.isSameDayAch = Optional.ofNullable(isSameDayAch);
            return this;
        }

        /**
         * <p>Timestamp when payment record was updated.</p>
         */
        @JsonSetter(value = "LastUpdated", nulls = Nulls.SKIP)
        public Builder lastUpdated(Optional<OffsetDateTime> lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }

        public Builder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = Optional.ofNullable(lastUpdated);
            return this;
        }

        /**
         * <p>Net amount paid.</p>
         */
        @JsonSetter(value = "NetAmount", nulls = Nulls.SKIP)
        public Builder netAmount(Optional<Double> netAmount) {
            this.netAmount = netAmount;
            return this;
        }

        public Builder netAmount(Double netAmount) {
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        @JsonSetter(value = "ParentOrgId", nulls = Nulls.SKIP)
        public Builder parentOrgId(Optional<Long> parentOrgId) {
            this.parentOrgId = parentOrgId;
            return this;
        }

        public Builder parentOrgId(Long parentOrgId) {
            this.parentOrgId = Optional.ofNullable(parentOrgId);
            return this;
        }

        @JsonSetter(value = "PaymentData", nulls = Nulls.SKIP)
        public Builder paymentData(Optional<QueryPayoutTransactionRecordsItemPaymentData> paymentData) {
            this.paymentData = paymentData;
            return this;
        }

        public Builder paymentData(QueryPayoutTransactionRecordsItemPaymentData paymentData) {
            this.paymentData = Optional.ofNullable(paymentData);
            return this;
        }

        @JsonSetter(value = "PaymentId", nulls = Nulls.SKIP)
        public Builder paymentId(Optional<String> paymentId) {
            this.paymentId = paymentId;
            return this;
        }

        public Builder paymentId(String paymentId) {
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        /**
         * <p>The payment method for the transaction.</p>
         */
        @JsonSetter(value = "PaymentMethod", nulls = Nulls.SKIP)
        public Builder paymentMethod(Optional<String> paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }

        public Builder paymentMethod(String paymentMethod) {
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        /**
         * <p>Status of payout transaction. See <a href="guides/money-out-statuses#payout-transaction-statuses">Payout Transaction Statuses</a> for a full reference.</p>
         */
        @JsonSetter(value = "PaymentStatus", nulls = Nulls.SKIP)
        public Builder paymentStatus(Optional<String> paymentStatus) {
            this.paymentStatus = paymentStatus;
            return this;
        }

        public Builder paymentStatus(String paymentStatus) {
            this.paymentStatus = Optional.ofNullable(paymentStatus);
            return this;
        }

        @JsonSetter(value = "PayoutProgram", nulls = Nulls.SKIP)
        public Builder payoutProgram(Optional<String> payoutProgram) {
            this.payoutProgram = payoutProgram;
            return this;
        }

        public Builder payoutProgram(String payoutProgram) {
            this.payoutProgram = Optional.ofNullable(payoutProgram);
            return this;
        }

        @JsonSetter(value = "PaypointDbaname", nulls = Nulls.SKIP)
        public Builder paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        public Builder paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        /**
         * <p>Paypoint legal name.</p>
         */
        @JsonSetter(value = "PaypointLegalname", nulls = Nulls.SKIP)
        public Builder paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        public Builder paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        @JsonSetter(value = "RiskAction", nulls = Nulls.SKIP)
        public Builder riskAction(Optional<String> riskAction) {
            this.riskAction = riskAction;
            return this;
        }

        public Builder riskAction(String riskAction) {
            this.riskAction = Optional.ofNullable(riskAction);
            return this;
        }

        @JsonSetter(value = "RiskActionCode", nulls = Nulls.SKIP)
        public Builder riskActionCode(Optional<Integer> riskActionCode) {
            this.riskActionCode = riskActionCode;
            return this;
        }

        public Builder riskActionCode(Integer riskActionCode) {
            this.riskActionCode = Optional.ofNullable(riskActionCode);
            return this;
        }

        @JsonSetter(value = "RiskFlagged", nulls = Nulls.SKIP)
        public Builder riskFlagged(Optional<Boolean> riskFlagged) {
            this.riskFlagged = riskFlagged;
            return this;
        }

        public Builder riskFlagged(Boolean riskFlagged) {
            this.riskFlagged = Optional.ofNullable(riskFlagged);
            return this;
        }

        @JsonSetter(value = "RiskFlaggedOn", nulls = Nulls.SKIP)
        public Builder riskFlaggedOn(Optional<OffsetDateTime> riskFlaggedOn) {
            this.riskFlaggedOn = riskFlaggedOn;
            return this;
        }

        public Builder riskFlaggedOn(OffsetDateTime riskFlaggedOn) {
            this.riskFlaggedOn = Optional.ofNullable(riskFlaggedOn);
            return this;
        }

        @JsonSetter(value = "RiskReason", nulls = Nulls.SKIP)
        public Builder riskReason(Optional<String> riskReason) {
            this.riskReason = riskReason;
            return this;
        }

        public Builder riskReason(String riskReason) {
            this.riskReason = Optional.ofNullable(riskReason);
            return this;
        }

        @JsonSetter(value = "RiskStatus", nulls = Nulls.SKIP)
        public Builder riskStatus(Optional<String> riskStatus) {
            this.riskStatus = riskStatus;
            return this;
        }

        public Builder riskStatus(String riskStatus) {
            this.riskStatus = Optional.ofNullable(riskStatus);
            return this;
        }

        @JsonSetter(value = "ScheduleId", nulls = Nulls.SKIP)
        public Builder scheduleId(Optional<Long> scheduleId) {
            this.scheduleId = scheduleId;
            return this;
        }

        public Builder scheduleId(Long scheduleId) {
            this.scheduleId = Optional.ofNullable(scheduleId);
            return this;
        }

        @JsonSetter(value = "SettlementStatus", nulls = Nulls.SKIP)
        public Builder settlementStatus(Optional<String> settlementStatus) {
            this.settlementStatus = settlementStatus;
            return this;
        }

        public Builder settlementStatus(String settlementStatus) {
            this.settlementStatus = Optional.ofNullable(settlementStatus);
            return this;
        }

        @JsonSetter(value = "Source", nulls = Nulls.SKIP)
        public Builder source(Optional<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * <p>Internal status of transaction.</p>
         */
        @JsonSetter(value = "Status", nulls = Nulls.SKIP)
        public Builder status(Optional<Integer> status) {
            this.status = status;
            return this;
        }

        public Builder status(Integer status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>Transaction total amount (including service fee or sub-charge).</p>
         */
        @JsonSetter(value = "TotalAmount", nulls = Nulls.SKIP)
        public Builder totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * <p>Vendor related to the payout transaction.</p>
         */
        @JsonSetter(value = "Vendor", nulls = Nulls.SKIP)
        public Builder vendor(Optional<VendorQueryRecord> vendor) {
            this.vendor = vendor;
            return this;
        }

        public Builder vendor(VendorQueryRecord vendor) {
            this.vendor = Optional.ofNullable(vendor);
            return this;
        }

        public QueryPayoutTransactionRecordsItem build() {
            return new QueryPayoutTransactionRecordsItem(
                    batchNumber,
                    batchId,
                    bills,
                    cardToken,
                    checkData,
                    checkNumber,
                    comments,
                    createdAt,
                    entryName,
                    events,
                    externalPaypointId,
                    feeAmount,
                    gateway,
                    hasVcardTransactions,
                    idOut,
                    isSameDayAch,
                    lastUpdated,
                    netAmount,
                    parentOrgName,
                    parentOrgId,
                    paymentData,
                    paymentId,
                    paymentMethod,
                    paymentStatus,
                    payoutProgram,
                    paypointDbaname,
                    paypointLegalname,
                    riskAction,
                    riskActionCode,
                    riskFlagged,
                    riskFlaggedOn,
                    riskReason,
                    riskStatus,
                    scheduleId,
                    settlementStatus,
                    source,
                    status,
                    totalAmount,
                    vendor,
                    additionalProperties);
        }
    }
}
