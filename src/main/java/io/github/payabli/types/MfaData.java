/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MfaData.Builder.class)
public final class MfaData {
    private final Optional<Boolean> mfa;

    private final Optional<Integer> mfaMode;

    private final Map<String, Object> additionalProperties;

    private MfaData(Optional<Boolean> mfa, Optional<Integer> mfaMode, Map<String, Object> additionalProperties) {
        this.mfa = mfa;
        this.mfaMode = mfaMode;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("mfa")
    public Optional<Boolean> getMfa() {
        return mfa;
    }

    @JsonProperty("mfaMode")
    public Optional<Integer> getMfaMode() {
        return mfaMode;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MfaData && equalTo((MfaData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MfaData other) {
        return mfa.equals(other.mfa) && mfaMode.equals(other.mfaMode);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.mfa, this.mfaMode);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> mfa = Optional.empty();

        private Optional<Integer> mfaMode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(MfaData other) {
            mfa(other.getMfa());
            mfaMode(other.getMfaMode());
            return this;
        }

        @JsonSetter(value = "mfa", nulls = Nulls.SKIP)
        public Builder mfa(Optional<Boolean> mfa) {
            this.mfa = mfa;
            return this;
        }

        public Builder mfa(Boolean mfa) {
            this.mfa = Optional.ofNullable(mfa);
            return this;
        }

        @JsonSetter(value = "mfaMode", nulls = Nulls.SKIP)
        public Builder mfaMode(Optional<Integer> mfaMode) {
            this.mfaMode = mfaMode;
            return this;
        }

        public Builder mfaMode(Integer mfaMode) {
            this.mfaMode = Optional.ofNullable(mfaMode);
            return this;
        }

        public MfaData build() {
            return new MfaData(mfa, mfaMode, additionalProperties);
        }
    }
}
