/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.Nullable;
import io.github.payabli.core.NullableNonemptyFilter;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentMethodDomainApiResponse.Builder.class)
public final class PaymentMethodDomainApiResponse {
    private final Optional<String> type;

    private final ApplePayData applePay;

    private final GooglePayData googlePay;

    private final Optional<List<CascadeJobDetails>> cascades;

    private final OffsetDateTime createdAt;

    private final String domainName;

    private final long entityId;

    private final String entityType;

    private final String id;

    private final long ownerEntityId;

    private final String ownerEntityType;

    private final Optional<OffsetDateTime> updatedAt;

    private final Map<String, Object> additionalProperties;

    private PaymentMethodDomainApiResponse(
            Optional<String> type,
            ApplePayData applePay,
            GooglePayData googlePay,
            Optional<List<CascadeJobDetails>> cascades,
            OffsetDateTime createdAt,
            String domainName,
            long entityId,
            String entityType,
            String id,
            long ownerEntityId,
            String ownerEntityType,
            Optional<OffsetDateTime> updatedAt,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.applePay = applePay;
        this.googlePay = googlePay;
        this.cascades = cascades;
        this.createdAt = createdAt;
        this.domainName = domainName;
        this.entityId = entityId;
        this.entityType = entityType;
        this.id = id;
        this.ownerEntityId = ownerEntityId;
        this.ownerEntityType = ownerEntityType;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The record type. For payment method domains, this is always <code>PaymentMethodDomain</code>.
     */
    @JsonIgnore
    public Optional<String> getType() {
        if (type == null) {
            return Optional.empty();
        }
        return type;
    }

    @JsonProperty("applePay")
    public ApplePayData getApplePay() {
        return applePay;
    }

    @JsonProperty("googlePay")
    public GooglePayData getGooglePay() {
        return googlePay;
    }

    /**
     * @return Data about the domain's cascade status.
     */
    @JsonProperty("cascades")
    public Optional<List<CascadeJobDetails>> getCascades() {
        return cascades;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("domainName")
    public String getDomainName() {
        return domainName;
    }

    @JsonProperty("entityId")
    public long getEntityId() {
        return entityId;
    }

    @JsonProperty("entityType")
    public String getEntityType() {
        return entityType;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("ownerEntityId")
    public long getOwnerEntityId() {
        return ownerEntityId;
    }

    @JsonProperty("ownerEntityType")
    public String getOwnerEntityType() {
        return ownerEntityType;
    }

    @JsonProperty("updatedAt")
    public Optional<OffsetDateTime> getUpdatedAt() {
        return updatedAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("type")
    private Optional<String> _getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentMethodDomainApiResponse && equalTo((PaymentMethodDomainApiResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentMethodDomainApiResponse other) {
        return type.equals(other.type)
                && applePay.equals(other.applePay)
                && googlePay.equals(other.googlePay)
                && cascades.equals(other.cascades)
                && createdAt.equals(other.createdAt)
                && domainName.equals(other.domainName)
                && entityId == other.entityId
                && entityType.equals(other.entityType)
                && id.equals(other.id)
                && ownerEntityId == other.ownerEntityId
                && ownerEntityType.equals(other.ownerEntityType)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.type,
                this.applePay,
                this.googlePay,
                this.cascades,
                this.createdAt,
                this.domainName,
                this.entityId,
                this.entityType,
                this.id,
                this.ownerEntityId,
                this.ownerEntityType,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ApplePayStage builder() {
        return new Builder();
    }

    public interface ApplePayStage {
        GooglePayStage applePay(@NotNull ApplePayData applePay);

        Builder from(PaymentMethodDomainApiResponse other);
    }

    public interface GooglePayStage {
        CreatedAtStage googlePay(@NotNull GooglePayData googlePay);
    }

    public interface CreatedAtStage {
        DomainNameStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface DomainNameStage {
        EntityIdStage domainName(@NotNull String domainName);
    }

    public interface EntityIdStage {
        EntityTypeStage entityId(long entityId);
    }

    public interface EntityTypeStage {
        IdStage entityType(@NotNull String entityType);
    }

    public interface IdStage {
        OwnerEntityIdStage id(@NotNull String id);
    }

    public interface OwnerEntityIdStage {
        OwnerEntityTypeStage ownerEntityId(long ownerEntityId);
    }

    public interface OwnerEntityTypeStage {
        _FinalStage ownerEntityType(@NotNull String ownerEntityType);
    }

    public interface _FinalStage {
        PaymentMethodDomainApiResponse build();

        /**
         * <p>The record type. For payment method domains, this is always <code>PaymentMethodDomain</code>.</p>
         */
        _FinalStage type(Optional<String> type);

        _FinalStage type(String type);

        _FinalStage type(Nullable<String> type);

        /**
         * <p>Data about the domain's cascade status.</p>
         */
        _FinalStage cascades(Optional<List<CascadeJobDetails>> cascades);

        _FinalStage cascades(List<CascadeJobDetails> cascades);

        _FinalStage updatedAt(Optional<OffsetDateTime> updatedAt);

        _FinalStage updatedAt(OffsetDateTime updatedAt);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements ApplePayStage,
                    GooglePayStage,
                    CreatedAtStage,
                    DomainNameStage,
                    EntityIdStage,
                    EntityTypeStage,
                    IdStage,
                    OwnerEntityIdStage,
                    OwnerEntityTypeStage,
                    _FinalStage {
        private ApplePayData applePay;

        private GooglePayData googlePay;

        private OffsetDateTime createdAt;

        private String domainName;

        private long entityId;

        private String entityType;

        private String id;

        private long ownerEntityId;

        private String ownerEntityType;

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Optional<List<CascadeJobDetails>> cascades = Optional.empty();

        private Optional<String> type = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaymentMethodDomainApiResponse other) {
            type(other.getType());
            applePay(other.getApplePay());
            googlePay(other.getGooglePay());
            cascades(other.getCascades());
            createdAt(other.getCreatedAt());
            domainName(other.getDomainName());
            entityId(other.getEntityId());
            entityType(other.getEntityType());
            id(other.getId());
            ownerEntityId(other.getOwnerEntityId());
            ownerEntityType(other.getOwnerEntityType());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @java.lang.Override
        @JsonSetter("applePay")
        public GooglePayStage applePay(@NotNull ApplePayData applePay) {
            this.applePay = Objects.requireNonNull(applePay, "applePay must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("googlePay")
        public CreatedAtStage googlePay(@NotNull GooglePayData googlePay) {
            this.googlePay = Objects.requireNonNull(googlePay, "googlePay must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public DomainNameStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("domainName")
        public EntityIdStage domainName(@NotNull String domainName) {
            this.domainName = Objects.requireNonNull(domainName, "domainName must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("entityId")
        public EntityTypeStage entityId(long entityId) {
            this.entityId = entityId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("entityType")
        public IdStage entityType(@NotNull String entityType) {
            this.entityType = Objects.requireNonNull(entityType, "entityType must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public OwnerEntityIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("ownerEntityId")
        public OwnerEntityTypeStage ownerEntityId(long ownerEntityId) {
            this.ownerEntityId = ownerEntityId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("ownerEntityType")
        public _FinalStage ownerEntityType(@NotNull String ownerEntityType) {
            this.ownerEntityType = Objects.requireNonNull(ownerEntityType, "ownerEntityType must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "updatedAt", nulls = Nulls.SKIP)
        public _FinalStage updatedAt(Optional<OffsetDateTime> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>Data about the domain's cascade status.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage cascades(List<CascadeJobDetails> cascades) {
            this.cascades = Optional.ofNullable(cascades);
            return this;
        }

        /**
         * <p>Data about the domain's cascade status.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "cascades", nulls = Nulls.SKIP)
        public _FinalStage cascades(Optional<List<CascadeJobDetails>> cascades) {
            this.cascades = cascades;
            return this;
        }

        /**
         * <p>The record type. For payment method domains, this is always <code>PaymentMethodDomain</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage type(Nullable<String> type) {
            if (type.isNull()) {
                this.type = null;
            } else if (type.isEmpty()) {
                this.type = Optional.empty();
            } else {
                this.type = Optional.of(type.get());
            }
            return this;
        }

        /**
         * <p>The record type. For payment method domains, this is always <code>PaymentMethodDomain</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>The record type. For payment method domains, this is always <code>PaymentMethodDomain</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public _FinalStage type(Optional<String> type) {
            this.type = type;
            return this;
        }

        @java.lang.Override
        public PaymentMethodDomainApiResponse build() {
            return new PaymentMethodDomainApiResponse(
                    type,
                    applePay,
                    googlePay,
                    cascades,
                    createdAt,
                    domainName,
                    entityId,
                    entityType,
                    id,
                    ownerEntityId,
                    ownerEntityType,
                    updatedAt,
                    additionalProperties);
        }
    }
}
