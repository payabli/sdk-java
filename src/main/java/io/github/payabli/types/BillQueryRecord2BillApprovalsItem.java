/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BillQueryRecord2BillApprovalsItem.Builder.class)
public final class BillQueryRecord2BillApprovalsItem {
    private final Optional<Integer> approved;

    private final Optional<OffsetDateTime> approvedTime;

    private final Optional<String> comments;

    private final Optional<String> email;

    private final Optional<Long> id;

    private final Map<String, Object> additionalProperties;

    private BillQueryRecord2BillApprovalsItem(
            Optional<Integer> approved,
            Optional<OffsetDateTime> approvedTime,
            Optional<String> comments,
            Optional<String> email,
            Optional<Long> id,
            Map<String, Object> additionalProperties) {
        this.approved = approved;
        this.approvedTime = approvedTime;
        this.comments = comments;
        this.email = email;
        this.id = id;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Indicates whether the bill has been approved. <code>0</code> is false, and <code>1</code> is true.
     */
    @JsonProperty("approved")
    public Optional<Integer> getApproved() {
        return approved;
    }

    /**
     * @return Timestamp of when the approval was made, in UTC.
     */
    @JsonProperty("approvedTime")
    public Optional<OffsetDateTime> getApprovedTime() {
        return approvedTime;
    }

    /**
     * @return Additional comments on the approval.
     */
    @JsonProperty("comments")
    public Optional<String> getComments() {
        return comments;
    }

    /**
     * @return The approving user's email address.
     */
    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    /**
     * @return The approving user's ID.
     */
    @JsonProperty("Id")
    public Optional<Long> getId() {
        return id;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BillQueryRecord2BillApprovalsItem && equalTo((BillQueryRecord2BillApprovalsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BillQueryRecord2BillApprovalsItem other) {
        return approved.equals(other.approved)
                && approvedTime.equals(other.approvedTime)
                && comments.equals(other.comments)
                && email.equals(other.email)
                && id.equals(other.id);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.approved, this.approvedTime, this.comments, this.email, this.id);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> approved = Optional.empty();

        private Optional<OffsetDateTime> approvedTime = Optional.empty();

        private Optional<String> comments = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<Long> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BillQueryRecord2BillApprovalsItem other) {
            approved(other.getApproved());
            approvedTime(other.getApprovedTime());
            comments(other.getComments());
            email(other.getEmail());
            id(other.getId());
            return this;
        }

        /**
         * <p>Indicates whether the bill has been approved. <code>0</code> is false, and <code>1</code> is true.</p>
         */
        @JsonSetter(value = "approved", nulls = Nulls.SKIP)
        public Builder approved(Optional<Integer> approved) {
            this.approved = approved;
            return this;
        }

        public Builder approved(Integer approved) {
            this.approved = Optional.ofNullable(approved);
            return this;
        }

        /**
         * <p>Timestamp of when the approval was made, in UTC.</p>
         */
        @JsonSetter(value = "approvedTime", nulls = Nulls.SKIP)
        public Builder approvedTime(Optional<OffsetDateTime> approvedTime) {
            this.approvedTime = approvedTime;
            return this;
        }

        public Builder approvedTime(OffsetDateTime approvedTime) {
            this.approvedTime = Optional.ofNullable(approvedTime);
            return this;
        }

        /**
         * <p>Additional comments on the approval.</p>
         */
        @JsonSetter(value = "comments", nulls = Nulls.SKIP)
        public Builder comments(Optional<String> comments) {
            this.comments = comments;
            return this;
        }

        public Builder comments(String comments) {
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        /**
         * <p>The approving user's email address.</p>
         */
        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * <p>The approving user's ID.</p>
         */
        @JsonSetter(value = "Id", nulls = Nulls.SKIP)
        public Builder id(Optional<Long> id) {
            this.id = id;
            return this;
        }

        public Builder id(Long id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        public BillQueryRecord2BillApprovalsItem build() {
            return new BillQueryRecord2BillApprovalsItem(
                    approved, approvedTime, comments, email, id, additionalProperties);
        }
    }
}
