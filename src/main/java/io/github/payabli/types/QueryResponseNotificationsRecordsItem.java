/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryResponseNotificationsRecordsItem.Builder.class)
public final class QueryResponseNotificationsRecordsItem {
    private final Optional<NotificationContent> content;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<Frequencynotification> frequency;

    private final Optional<OffsetDateTime> lastUpdated;

    private final Optional<Methodnotification> method;

    private final Optional<Long> notificationId;

    private final Optional<String> ownerId;

    private final Optional<String> ownerName;

    private final Optional<Integer> ownerType;

    private final Optional<String> source;

    private final Optional<Integer> status;

    private final Optional<String> target;

    private final Map<String, Object> additionalProperties;

    private QueryResponseNotificationsRecordsItem(
            Optional<NotificationContent> content,
            Optional<OffsetDateTime> createdAt,
            Optional<Frequencynotification> frequency,
            Optional<OffsetDateTime> lastUpdated,
            Optional<Methodnotification> method,
            Optional<Long> notificationId,
            Optional<String> ownerId,
            Optional<String> ownerName,
            Optional<Integer> ownerType,
            Optional<String> source,
            Optional<Integer> status,
            Optional<String> target,
            Map<String, Object> additionalProperties) {
        this.content = content;
        this.createdAt = createdAt;
        this.frequency = frequency;
        this.lastUpdated = lastUpdated;
        this.method = method;
        this.notificationId = notificationId;
        this.ownerId = ownerId;
        this.ownerName = ownerName;
        this.ownerType = ownerType;
        this.source = source;
        this.status = status;
        this.target = target;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Notification content.
     */
    @JsonProperty("content")
    public Optional<NotificationContent> getContent() {
        return content;
    }

    /**
     * @return Timestamp of when notification was created, in UTC.
     */
    @JsonProperty("createdAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("frequency")
    public Optional<Frequencynotification> getFrequency() {
        return frequency;
    }

    /**
     * @return Timestamp of when notification was last updated, in UTC.
     */
    @JsonProperty("lastUpdated")
    public Optional<OffsetDateTime> getLastUpdated() {
        return lastUpdated;
    }

    @JsonProperty("method")
    public Optional<Methodnotification> getMethod() {
        return method;
    }

    @JsonProperty("notificationId")
    public Optional<Long> getNotificationId() {
        return notificationId;
    }

    @JsonProperty("ownerId")
    public Optional<String> getOwnerId() {
        return ownerId;
    }

    /**
     * @return Name of entity owner of notification.
     */
    @JsonProperty("ownerName")
    public Optional<String> getOwnerName() {
        return ownerName;
    }

    @JsonProperty("ownerType")
    public Optional<Integer> getOwnerType() {
        return ownerType;
    }

    /**
     * @return Custom descriptor of source of notification.
     */
    @JsonProperty("source")
    public Optional<String> getSource() {
        return source;
    }

    @JsonProperty("status")
    public Optional<Integer> getStatus() {
        return status;
    }

    @JsonProperty("target")
    public Optional<String> getTarget() {
        return target;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryResponseNotificationsRecordsItem
                && equalTo((QueryResponseNotificationsRecordsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryResponseNotificationsRecordsItem other) {
        return content.equals(other.content)
                && createdAt.equals(other.createdAt)
                && frequency.equals(other.frequency)
                && lastUpdated.equals(other.lastUpdated)
                && method.equals(other.method)
                && notificationId.equals(other.notificationId)
                && ownerId.equals(other.ownerId)
                && ownerName.equals(other.ownerName)
                && ownerType.equals(other.ownerType)
                && source.equals(other.source)
                && status.equals(other.status)
                && target.equals(other.target);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.content,
                this.createdAt,
                this.frequency,
                this.lastUpdated,
                this.method,
                this.notificationId,
                this.ownerId,
                this.ownerName,
                this.ownerType,
                this.source,
                this.status,
                this.target);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<NotificationContent> content = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<Frequencynotification> frequency = Optional.empty();

        private Optional<OffsetDateTime> lastUpdated = Optional.empty();

        private Optional<Methodnotification> method = Optional.empty();

        private Optional<Long> notificationId = Optional.empty();

        private Optional<String> ownerId = Optional.empty();

        private Optional<String> ownerName = Optional.empty();

        private Optional<Integer> ownerType = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<Integer> status = Optional.empty();

        private Optional<String> target = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryResponseNotificationsRecordsItem other) {
            content(other.getContent());
            createdAt(other.getCreatedAt());
            frequency(other.getFrequency());
            lastUpdated(other.getLastUpdated());
            method(other.getMethod());
            notificationId(other.getNotificationId());
            ownerId(other.getOwnerId());
            ownerName(other.getOwnerName());
            ownerType(other.getOwnerType());
            source(other.getSource());
            status(other.getStatus());
            target(other.getTarget());
            return this;
        }

        /**
         * <p>Notification content.</p>
         */
        @JsonSetter(value = "content", nulls = Nulls.SKIP)
        public Builder content(Optional<NotificationContent> content) {
            this.content = content;
            return this;
        }

        public Builder content(NotificationContent content) {
            this.content = Optional.ofNullable(content);
            return this;
        }

        /**
         * <p>Timestamp of when notification was created, in UTC.</p>
         */
        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "frequency", nulls = Nulls.SKIP)
        public Builder frequency(Optional<Frequencynotification> frequency) {
            this.frequency = frequency;
            return this;
        }

        public Builder frequency(Frequencynotification frequency) {
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        /**
         * <p>Timestamp of when notification was last updated, in UTC.</p>
         */
        @JsonSetter(value = "lastUpdated", nulls = Nulls.SKIP)
        public Builder lastUpdated(Optional<OffsetDateTime> lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }

        public Builder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = Optional.ofNullable(lastUpdated);
            return this;
        }

        @JsonSetter(value = "method", nulls = Nulls.SKIP)
        public Builder method(Optional<Methodnotification> method) {
            this.method = method;
            return this;
        }

        public Builder method(Methodnotification method) {
            this.method = Optional.ofNullable(method);
            return this;
        }

        @JsonSetter(value = "notificationId", nulls = Nulls.SKIP)
        public Builder notificationId(Optional<Long> notificationId) {
            this.notificationId = notificationId;
            return this;
        }

        public Builder notificationId(Long notificationId) {
            this.notificationId = Optional.ofNullable(notificationId);
            return this;
        }

        @JsonSetter(value = "ownerId", nulls = Nulls.SKIP)
        public Builder ownerId(Optional<String> ownerId) {
            this.ownerId = ownerId;
            return this;
        }

        public Builder ownerId(String ownerId) {
            this.ownerId = Optional.ofNullable(ownerId);
            return this;
        }

        /**
         * <p>Name of entity owner of notification.</p>
         */
        @JsonSetter(value = "ownerName", nulls = Nulls.SKIP)
        public Builder ownerName(Optional<String> ownerName) {
            this.ownerName = ownerName;
            return this;
        }

        public Builder ownerName(String ownerName) {
            this.ownerName = Optional.ofNullable(ownerName);
            return this;
        }

        @JsonSetter(value = "ownerType", nulls = Nulls.SKIP)
        public Builder ownerType(Optional<Integer> ownerType) {
            this.ownerType = ownerType;
            return this;
        }

        public Builder ownerType(Integer ownerType) {
            this.ownerType = Optional.ofNullable(ownerType);
            return this;
        }

        /**
         * <p>Custom descriptor of source of notification.</p>
         */
        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public Builder source(Optional<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<Integer> status) {
            this.status = status;
            return this;
        }

        public Builder status(Integer status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "target", nulls = Nulls.SKIP)
        public Builder target(Optional<String> target) {
            this.target = target;
            return this;
        }

        public Builder target(String target) {
            this.target = Optional.ofNullable(target);
            return this;
        }

        public QueryResponseNotificationsRecordsItem build() {
            return new QueryResponseNotificationsRecordsItem(
                    content,
                    createdAt,
                    frequency,
                    lastUpdated,
                    method,
                    notificationId,
                    ownerId,
                    ownerName,
                    ownerType,
                    source,
                    status,
                    target,
                    additionalProperties);
        }
    }
}
