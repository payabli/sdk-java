/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TemplateData.Builder.class)
public final class TemplateData {
    private final Optional<Long> orgId;

    private final Optional<Long> pricingId;

    private final Optional<String> templateCode;

    private final Optional<TemplateContent> templateContent;

    private final Optional<String> templateDescription;

    private final Optional<String> templateName;

    private final Map<String, Object> additionalProperties;

    private TemplateData(
            Optional<Long> orgId,
            Optional<Long> pricingId,
            Optional<String> templateCode,
            Optional<TemplateContent> templateContent,
            Optional<String> templateDescription,
            Optional<String> templateName,
            Map<String, Object> additionalProperties) {
        this.orgId = orgId;
        this.pricingId = pricingId;
        this.templateCode = templateCode;
        this.templateContent = templateContent;
        this.templateDescription = templateDescription;
        this.templateName = templateName;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The ID of the organization the template belongs to.
     */
    @JsonProperty("orgId")
    public Optional<Long> getOrgId() {
        return orgId;
    }

    @JsonProperty("pricingId")
    public Optional<Long> getPricingId() {
        return pricingId;
    }

    @JsonProperty("templateCode")
    public Optional<String> getTemplateCode() {
        return templateCode;
    }

    @JsonProperty("templateContent")
    public Optional<TemplateContent> getTemplateContent() {
        return templateContent;
    }

    /**
     * @return A description for the template.
     */
    @JsonProperty("templateDescription")
    public Optional<String> getTemplateDescription() {
        return templateDescription;
    }

    @JsonProperty("templateName")
    public Optional<String> getTemplateName() {
        return templateName;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TemplateData && equalTo((TemplateData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TemplateData other) {
        return orgId.equals(other.orgId)
                && pricingId.equals(other.pricingId)
                && templateCode.equals(other.templateCode)
                && templateContent.equals(other.templateContent)
                && templateDescription.equals(other.templateDescription)
                && templateName.equals(other.templateName);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.orgId,
                this.pricingId,
                this.templateCode,
                this.templateContent,
                this.templateDescription,
                this.templateName);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Long> orgId = Optional.empty();

        private Optional<Long> pricingId = Optional.empty();

        private Optional<String> templateCode = Optional.empty();

        private Optional<TemplateContent> templateContent = Optional.empty();

        private Optional<String> templateDescription = Optional.empty();

        private Optional<String> templateName = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TemplateData other) {
            orgId(other.getOrgId());
            pricingId(other.getPricingId());
            templateCode(other.getTemplateCode());
            templateContent(other.getTemplateContent());
            templateDescription(other.getTemplateDescription());
            templateName(other.getTemplateName());
            return this;
        }

        /**
         * <p>The ID of the organization the template belongs to.</p>
         */
        @JsonSetter(value = "orgId", nulls = Nulls.SKIP)
        public Builder orgId(Optional<Long> orgId) {
            this.orgId = orgId;
            return this;
        }

        public Builder orgId(Long orgId) {
            this.orgId = Optional.ofNullable(orgId);
            return this;
        }

        @JsonSetter(value = "pricingId", nulls = Nulls.SKIP)
        public Builder pricingId(Optional<Long> pricingId) {
            this.pricingId = pricingId;
            return this;
        }

        public Builder pricingId(Long pricingId) {
            this.pricingId = Optional.ofNullable(pricingId);
            return this;
        }

        @JsonSetter(value = "templateCode", nulls = Nulls.SKIP)
        public Builder templateCode(Optional<String> templateCode) {
            this.templateCode = templateCode;
            return this;
        }

        public Builder templateCode(String templateCode) {
            this.templateCode = Optional.ofNullable(templateCode);
            return this;
        }

        @JsonSetter(value = "templateContent", nulls = Nulls.SKIP)
        public Builder templateContent(Optional<TemplateContent> templateContent) {
            this.templateContent = templateContent;
            return this;
        }

        public Builder templateContent(TemplateContent templateContent) {
            this.templateContent = Optional.ofNullable(templateContent);
            return this;
        }

        /**
         * <p>A description for the template.</p>
         */
        @JsonSetter(value = "templateDescription", nulls = Nulls.SKIP)
        public Builder templateDescription(Optional<String> templateDescription) {
            this.templateDescription = templateDescription;
            return this;
        }

        public Builder templateDescription(String templateDescription) {
            this.templateDescription = Optional.ofNullable(templateDescription);
            return this;
        }

        @JsonSetter(value = "templateName", nulls = Nulls.SKIP)
        public Builder templateName(Optional<String> templateName) {
            this.templateName = templateName;
            return this;
        }

        public Builder templateName(String templateName) {
            this.templateName = Optional.ofNullable(templateName);
            return this;
        }

        public TemplateData build() {
            return new TemplateData(
                    orgId,
                    pricingId,
                    templateCode,
                    templateContent,
                    templateDescription,
                    templateName,
                    additionalProperties);
        }
    }
}
