/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PayoutGatewayConnector.Builder.class)
public final class PayoutGatewayConnector {
    private final Optional<String> configuration;

    private final Optional<String> name;

    private final Optional<Integer> mode;

    private final Optional<String> bank;

    private final Optional<String> descriptor;

    private final Optional<Integer> gatewayId;

    private final Optional<Boolean> enabled;

    private final Optional<Boolean> enableAchValidation;

    private final Optional<Boolean> testMode;

    private final Map<String, Object> additionalProperties;

    private PayoutGatewayConnector(
            Optional<String> configuration,
            Optional<String> name,
            Optional<Integer> mode,
            Optional<String> bank,
            Optional<String> descriptor,
            Optional<Integer> gatewayId,
            Optional<Boolean> enabled,
            Optional<Boolean> enableAchValidation,
            Optional<Boolean> testMode,
            Map<String, Object> additionalProperties) {
        this.configuration = configuration;
        this.name = name;
        this.mode = mode;
        this.bank = bank;
        this.descriptor = descriptor;
        this.gatewayId = gatewayId;
        this.enabled = enabled;
        this.enableAchValidation = enableAchValidation;
        this.testMode = testMode;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("configuration")
    public Optional<String> getConfiguration() {
        return configuration;
    }

    @JsonProperty("Name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("Mode")
    public Optional<Integer> getMode() {
        return mode;
    }

    @JsonProperty("Bank")
    public Optional<String> getBank() {
        return bank;
    }

    @JsonProperty("Descriptor")
    public Optional<String> getDescriptor() {
        return descriptor;
    }

    @JsonProperty("gatewayID")
    public Optional<Integer> getGatewayId() {
        return gatewayId;
    }

    @JsonProperty("Enabled")
    public Optional<Boolean> getEnabled() {
        return enabled;
    }

    @JsonProperty("EnableACHValidation")
    public Optional<Boolean> getEnableAchValidation() {
        return enableAchValidation;
    }

    @JsonProperty("TestMode")
    public Optional<Boolean> getTestMode() {
        return testMode;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PayoutGatewayConnector && equalTo((PayoutGatewayConnector) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PayoutGatewayConnector other) {
        return configuration.equals(other.configuration)
                && name.equals(other.name)
                && mode.equals(other.mode)
                && bank.equals(other.bank)
                && descriptor.equals(other.descriptor)
                && gatewayId.equals(other.gatewayId)
                && enabled.equals(other.enabled)
                && enableAchValidation.equals(other.enableAchValidation)
                && testMode.equals(other.testMode);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.configuration,
                this.name,
                this.mode,
                this.bank,
                this.descriptor,
                this.gatewayId,
                this.enabled,
                this.enableAchValidation,
                this.testMode);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> configuration = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<Integer> mode = Optional.empty();

        private Optional<String> bank = Optional.empty();

        private Optional<String> descriptor = Optional.empty();

        private Optional<Integer> gatewayId = Optional.empty();

        private Optional<Boolean> enabled = Optional.empty();

        private Optional<Boolean> enableAchValidation = Optional.empty();

        private Optional<Boolean> testMode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PayoutGatewayConnector other) {
            configuration(other.getConfiguration());
            name(other.getName());
            mode(other.getMode());
            bank(other.getBank());
            descriptor(other.getDescriptor());
            gatewayId(other.getGatewayId());
            enabled(other.getEnabled());
            enableAchValidation(other.getEnableAchValidation());
            testMode(other.getTestMode());
            return this;
        }

        @JsonSetter(value = "configuration", nulls = Nulls.SKIP)
        public Builder configuration(Optional<String> configuration) {
            this.configuration = configuration;
            return this;
        }

        public Builder configuration(String configuration) {
            this.configuration = Optional.ofNullable(configuration);
            return this;
        }

        @JsonSetter(value = "Name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "Mode", nulls = Nulls.SKIP)
        public Builder mode(Optional<Integer> mode) {
            this.mode = mode;
            return this;
        }

        public Builder mode(Integer mode) {
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        @JsonSetter(value = "Bank", nulls = Nulls.SKIP)
        public Builder bank(Optional<String> bank) {
            this.bank = bank;
            return this;
        }

        public Builder bank(String bank) {
            this.bank = Optional.ofNullable(bank);
            return this;
        }

        @JsonSetter(value = "Descriptor", nulls = Nulls.SKIP)
        public Builder descriptor(Optional<String> descriptor) {
            this.descriptor = descriptor;
            return this;
        }

        public Builder descriptor(String descriptor) {
            this.descriptor = Optional.ofNullable(descriptor);
            return this;
        }

        @JsonSetter(value = "gatewayID", nulls = Nulls.SKIP)
        public Builder gatewayId(Optional<Integer> gatewayId) {
            this.gatewayId = gatewayId;
            return this;
        }

        public Builder gatewayId(Integer gatewayId) {
            this.gatewayId = Optional.ofNullable(gatewayId);
            return this;
        }

        @JsonSetter(value = "Enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        @JsonSetter(value = "EnableACHValidation", nulls = Nulls.SKIP)
        public Builder enableAchValidation(Optional<Boolean> enableAchValidation) {
            this.enableAchValidation = enableAchValidation;
            return this;
        }

        public Builder enableAchValidation(Boolean enableAchValidation) {
            this.enableAchValidation = Optional.ofNullable(enableAchValidation);
            return this;
        }

        @JsonSetter(value = "TestMode", nulls = Nulls.SKIP)
        public Builder testMode(Optional<Boolean> testMode) {
            this.testMode = testMode;
            return this;
        }

        public Builder testMode(Boolean testMode) {
            this.testMode = Optional.ofNullable(testMode);
            return this;
        }

        public PayoutGatewayConnector build() {
            return new PayoutGatewayConnector(
                    configuration,
                    name,
                    mode,
                    bank,
                    descriptor,
                    gatewayId,
                    enabled,
                    enableAchValidation,
                    testMode,
                    additionalProperties);
        }
    }
}
