/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BankSection.Builder.class)
public final class BankSection {
    private final Optional<Boolean> visible;

    private final Optional<TemplateElement> accountNumber;

    private final Optional<TemplateElement> accountType;

    private final Optional<TemplateElement> bankName;

    private final Optional<TemplateElement> routingNumber;

    private final Map<String, Object> additionalProperties;

    private BankSection(
            Optional<Boolean> visible,
            Optional<TemplateElement> accountNumber,
            Optional<TemplateElement> accountType,
            Optional<TemplateElement> bankName,
            Optional<TemplateElement> routingNumber,
            Map<String, Object> additionalProperties) {
        this.visible = visible;
        this.accountNumber = accountNumber;
        this.accountType = accountType;
        this.bankName = bankName;
        this.routingNumber = routingNumber;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("visible")
    public Optional<Boolean> getVisible() {
        return visible;
    }

    @JsonProperty("accountNumber")
    public Optional<TemplateElement> getAccountNumber() {
        return accountNumber;
    }

    @JsonProperty("accountType")
    public Optional<TemplateElement> getAccountType() {
        return accountType;
    }

    @JsonProperty("bankName")
    public Optional<TemplateElement> getBankName() {
        return bankName;
    }

    @JsonProperty("routingNumber")
    public Optional<TemplateElement> getRoutingNumber() {
        return routingNumber;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BankSection && equalTo((BankSection) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BankSection other) {
        return visible.equals(other.visible)
                && accountNumber.equals(other.accountNumber)
                && accountType.equals(other.accountType)
                && bankName.equals(other.bankName)
                && routingNumber.equals(other.routingNumber);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.visible, this.accountNumber, this.accountType, this.bankName, this.routingNumber);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> visible = Optional.empty();

        private Optional<TemplateElement> accountNumber = Optional.empty();

        private Optional<TemplateElement> accountType = Optional.empty();

        private Optional<TemplateElement> bankName = Optional.empty();

        private Optional<TemplateElement> routingNumber = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BankSection other) {
            visible(other.getVisible());
            accountNumber(other.getAccountNumber());
            accountType(other.getAccountType());
            bankName(other.getBankName());
            routingNumber(other.getRoutingNumber());
            return this;
        }

        @JsonSetter(value = "visible", nulls = Nulls.SKIP)
        public Builder visible(Optional<Boolean> visible) {
            this.visible = visible;
            return this;
        }

        public Builder visible(Boolean visible) {
            this.visible = Optional.ofNullable(visible);
            return this;
        }

        @JsonSetter(value = "accountNumber", nulls = Nulls.SKIP)
        public Builder accountNumber(Optional<TemplateElement> accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }

        public Builder accountNumber(TemplateElement accountNumber) {
            this.accountNumber = Optional.ofNullable(accountNumber);
            return this;
        }

        @JsonSetter(value = "accountType", nulls = Nulls.SKIP)
        public Builder accountType(Optional<TemplateElement> accountType) {
            this.accountType = accountType;
            return this;
        }

        public Builder accountType(TemplateElement accountType) {
            this.accountType = Optional.ofNullable(accountType);
            return this;
        }

        @JsonSetter(value = "bankName", nulls = Nulls.SKIP)
        public Builder bankName(Optional<TemplateElement> bankName) {
            this.bankName = bankName;
            return this;
        }

        public Builder bankName(TemplateElement bankName) {
            this.bankName = Optional.ofNullable(bankName);
            return this;
        }

        @JsonSetter(value = "routingNumber", nulls = Nulls.SKIP)
        public Builder routingNumber(Optional<TemplateElement> routingNumber) {
            this.routingNumber = routingNumber;
            return this;
        }

        public Builder routingNumber(TemplateElement routingNumber) {
            this.routingNumber = Optional.ofNullable(routingNumber);
            return this;
        }

        public BankSection build() {
            return new BankSection(visible, accountNumber, accountType, bankName, routingNumber, additionalProperties);
        }
    }
}
