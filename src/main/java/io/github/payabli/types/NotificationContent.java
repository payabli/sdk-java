/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NotificationContent.Builder.class)
public final class NotificationContent {
    private final Optional<NotificationContentEventType> eventType;

    private final Optional<NotificationContentFileFormat> fileFormat;

    private final Optional<List<KeyValueDuo>> internalData;

    private final Optional<NotificationContentReportName> reportName;

    private final Optional<Integer> timeZone;

    private final Optional<String> transactionId;

    private final Optional<List<KeyValueDuo>> webHeaderParameters;

    private final Map<String, Object> additionalProperties;

    private NotificationContent(
            Optional<NotificationContentEventType> eventType,
            Optional<NotificationContentFileFormat> fileFormat,
            Optional<List<KeyValueDuo>> internalData,
            Optional<NotificationContentReportName> reportName,
            Optional<Integer> timeZone,
            Optional<String> transactionId,
            Optional<List<KeyValueDuo>> webHeaderParameters,
            Map<String, Object> additionalProperties) {
        this.eventType = eventType;
        this.fileFormat = fileFormat;
        this.internalData = internalData;
        this.reportName = reportName;
        this.timeZone = timeZone;
        this.transactionId = transactionId;
        this.webHeaderParameters = webHeaderParameters;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The notification's event name.
     */
    @JsonProperty("eventType")
    public Optional<NotificationContentEventType> getEventType() {
        return eventType;
    }

    /**
     * @return Indicate the format of report file to be generated by the engine.
     * Used for <code>method</code> = <em>report-email</em> and <em>report-web</em>.
     */
    @JsonProperty("fileFormat")
    public Optional<NotificationContentFileFormat> getFileFormat() {
        return fileFormat;
    }

    /**
     * @return Array of pairs key:value to insert in request body to target in <strong>method</strong> = <em>web</em> or <em>report-web</em>.
     */
    @JsonProperty("internalData")
    public Optional<List<KeyValueDuo>> getInternalData() {
        return internalData;
    }

    /**
     * @return The kind report to generate. For <a href="/developers/developer-guides/notifications-and-webhooks-overview#automated-reports">automated reports</a> only.
     */
    @JsonProperty("reportName")
    public Optional<NotificationContentReportName> getReportName() {
        return reportName;
    }

    @JsonProperty("timeZone")
    public Optional<Integer> getTimeZone() {
        return timeZone;
    }

    /**
     * @return Used internally to reference the entity or object generating the event.
     */
    @JsonProperty("transactionId")
    public Optional<String> getTransactionId() {
        return transactionId;
    }

    /**
     * @return Array of pairs key:value to insert in header of request to target in <strong>method</strong> = <em>web</em> or <em>report-web</em>.
     */
    @JsonProperty("webHeaderParameters")
    public Optional<List<KeyValueDuo>> getWebHeaderParameters() {
        return webHeaderParameters;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NotificationContent && equalTo((NotificationContent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NotificationContent other) {
        return eventType.equals(other.eventType)
                && fileFormat.equals(other.fileFormat)
                && internalData.equals(other.internalData)
                && reportName.equals(other.reportName)
                && timeZone.equals(other.timeZone)
                && transactionId.equals(other.transactionId)
                && webHeaderParameters.equals(other.webHeaderParameters);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.eventType,
                this.fileFormat,
                this.internalData,
                this.reportName,
                this.timeZone,
                this.transactionId,
                this.webHeaderParameters);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<NotificationContentEventType> eventType = Optional.empty();

        private Optional<NotificationContentFileFormat> fileFormat = Optional.empty();

        private Optional<List<KeyValueDuo>> internalData = Optional.empty();

        private Optional<NotificationContentReportName> reportName = Optional.empty();

        private Optional<Integer> timeZone = Optional.empty();

        private Optional<String> transactionId = Optional.empty();

        private Optional<List<KeyValueDuo>> webHeaderParameters = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(NotificationContent other) {
            eventType(other.getEventType());
            fileFormat(other.getFileFormat());
            internalData(other.getInternalData());
            reportName(other.getReportName());
            timeZone(other.getTimeZone());
            transactionId(other.getTransactionId());
            webHeaderParameters(other.getWebHeaderParameters());
            return this;
        }

        /**
         * <p>The notification's event name.</p>
         */
        @JsonSetter(value = "eventType", nulls = Nulls.SKIP)
        public Builder eventType(Optional<NotificationContentEventType> eventType) {
            this.eventType = eventType;
            return this;
        }

        public Builder eventType(NotificationContentEventType eventType) {
            this.eventType = Optional.ofNullable(eventType);
            return this;
        }

        /**
         * <p>Indicate the format of report file to be generated by the engine.
         * Used for <code>method</code> = <em>report-email</em> and <em>report-web</em>.</p>
         */
        @JsonSetter(value = "fileFormat", nulls = Nulls.SKIP)
        public Builder fileFormat(Optional<NotificationContentFileFormat> fileFormat) {
            this.fileFormat = fileFormat;
            return this;
        }

        public Builder fileFormat(NotificationContentFileFormat fileFormat) {
            this.fileFormat = Optional.ofNullable(fileFormat);
            return this;
        }

        /**
         * <p>Array of pairs key:value to insert in request body to target in <strong>method</strong> = <em>web</em> or <em>report-web</em>.</p>
         */
        @JsonSetter(value = "internalData", nulls = Nulls.SKIP)
        public Builder internalData(Optional<List<KeyValueDuo>> internalData) {
            this.internalData = internalData;
            return this;
        }

        public Builder internalData(List<KeyValueDuo> internalData) {
            this.internalData = Optional.ofNullable(internalData);
            return this;
        }

        /**
         * <p>The kind report to generate. For <a href="/developers/developer-guides/notifications-and-webhooks-overview#automated-reports">automated reports</a> only.</p>
         */
        @JsonSetter(value = "reportName", nulls = Nulls.SKIP)
        public Builder reportName(Optional<NotificationContentReportName> reportName) {
            this.reportName = reportName;
            return this;
        }

        public Builder reportName(NotificationContentReportName reportName) {
            this.reportName = Optional.ofNullable(reportName);
            return this;
        }

        @JsonSetter(value = "timeZone", nulls = Nulls.SKIP)
        public Builder timeZone(Optional<Integer> timeZone) {
            this.timeZone = timeZone;
            return this;
        }

        public Builder timeZone(Integer timeZone) {
            this.timeZone = Optional.ofNullable(timeZone);
            return this;
        }

        /**
         * <p>Used internally to reference the entity or object generating the event.</p>
         */
        @JsonSetter(value = "transactionId", nulls = Nulls.SKIP)
        public Builder transactionId(Optional<String> transactionId) {
            this.transactionId = transactionId;
            return this;
        }

        public Builder transactionId(String transactionId) {
            this.transactionId = Optional.ofNullable(transactionId);
            return this;
        }

        /**
         * <p>Array of pairs key:value to insert in header of request to target in <strong>method</strong> = <em>web</em> or <em>report-web</em>.</p>
         */
        @JsonSetter(value = "webHeaderParameters", nulls = Nulls.SKIP)
        public Builder webHeaderParameters(Optional<List<KeyValueDuo>> webHeaderParameters) {
            this.webHeaderParameters = webHeaderParameters;
            return this;
        }

        public Builder webHeaderParameters(List<KeyValueDuo> webHeaderParameters) {
            this.webHeaderParameters = Optional.ofNullable(webHeaderParameters);
            return this;
        }

        public NotificationContent build() {
            return new NotificationContent(
                    eventType,
                    fileFormat,
                    internalData,
                    reportName,
                    timeZone,
                    transactionId,
                    webHeaderParameters,
                    additionalProperties);
        }
    }
}
