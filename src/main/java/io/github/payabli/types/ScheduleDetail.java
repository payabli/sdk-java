/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ScheduleDetail.Builder.class)
public final class ScheduleDetail {
    private final Optional<String> endDate;

    private final Optional<Frequency> frequency;

    private final Optional<Integer> planId;

    private final Optional<String> startDate;

    private final Map<String, Object> additionalProperties;

    private ScheduleDetail(
            Optional<String> endDate,
            Optional<Frequency> frequency,
            Optional<Integer> planId,
            Optional<String> startDate,
            Map<String, Object> additionalProperties) {
        this.endDate = endDate;
        this.frequency = frequency;
        this.planId = planId;
        this.startDate = startDate;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Subscription end date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY or the value <code>untilcancelled</code> to indicate a scheduled payment with infinite cycle.
     */
    @JsonProperty("endDate")
    public Optional<String> getEndDate() {
        return endDate;
    }

    /**
     * @return Frequency of the subscription.
     */
    @JsonProperty("frequency")
    public Optional<Frequency> getFrequency() {
        return frequency;
    }

    /**
     * @return This field is for future development, leave null. Identifier of subscription plan applied in the scheduled payment/subscription.
     */
    @JsonProperty("planId")
    public Optional<Integer> getPlanId() {
        return planId;
    }

    /**
     * @return Subscription start date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY. This must be a future date.
     */
    @JsonProperty("startDate")
    public Optional<String> getStartDate() {
        return startDate;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ScheduleDetail && equalTo((ScheduleDetail) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ScheduleDetail other) {
        return endDate.equals(other.endDate)
                && frequency.equals(other.frequency)
                && planId.equals(other.planId)
                && startDate.equals(other.startDate);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.endDate, this.frequency, this.planId, this.startDate);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> endDate = Optional.empty();

        private Optional<Frequency> frequency = Optional.empty();

        private Optional<Integer> planId = Optional.empty();

        private Optional<String> startDate = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ScheduleDetail other) {
            endDate(other.getEndDate());
            frequency(other.getFrequency());
            planId(other.getPlanId());
            startDate(other.getStartDate());
            return this;
        }

        /**
         * <p>Subscription end date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY or the value <code>untilcancelled</code> to indicate a scheduled payment with infinite cycle.</p>
         */
        @JsonSetter(value = "endDate", nulls = Nulls.SKIP)
        public Builder endDate(Optional<String> endDate) {
            this.endDate = endDate;
            return this;
        }

        public Builder endDate(String endDate) {
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * <p>Frequency of the subscription.</p>
         */
        @JsonSetter(value = "frequency", nulls = Nulls.SKIP)
        public Builder frequency(Optional<Frequency> frequency) {
            this.frequency = frequency;
            return this;
        }

        public Builder frequency(Frequency frequency) {
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        /**
         * <p>This field is for future development, leave null. Identifier of subscription plan applied in the scheduled payment/subscription.</p>
         */
        @JsonSetter(value = "planId", nulls = Nulls.SKIP)
        public Builder planId(Optional<Integer> planId) {
            this.planId = planId;
            return this;
        }

        public Builder planId(Integer planId) {
            this.planId = Optional.ofNullable(planId);
            return this;
        }

        /**
         * <p>Subscription start date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY. This must be a future date.</p>
         */
        @JsonSetter(value = "startDate", nulls = Nulls.SKIP)
        public Builder startDate(Optional<String> startDate) {
            this.startDate = startDate;
            return this;
        }

        public Builder startDate(String startDate) {
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        public ScheduleDetail build() {
            return new ScheduleDetail(endDate, frequency, planId, startDate, additionalProperties);
        }
    }
}
