/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ASection.Builder.class)
public final class ASection {
    private final Optional<Integer> minimumDocuments;

    private final Optional<Boolean> multipleContacts;

    private final Optional<Boolean> multipleOwners;

    private final Map<String, Object> additionalProperties;

    private ASection(
            Optional<Integer> minimumDocuments,
            Optional<Boolean> multipleContacts,
            Optional<Boolean> multipleOwners,
            Map<String, Object> additionalProperties) {
        this.minimumDocuments = minimumDocuments;
        this.multipleContacts = multipleContacts;
        this.multipleOwners = multipleOwners;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("minimumDocuments")
    public Optional<Integer> getMinimumDocuments() {
        return minimumDocuments;
    }

    @JsonProperty("multipleContacts")
    public Optional<Boolean> getMultipleContacts() {
        return multipleContacts;
    }

    @JsonProperty("multipleOwners")
    public Optional<Boolean> getMultipleOwners() {
        return multipleOwners;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ASection && equalTo((ASection) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ASection other) {
        return minimumDocuments.equals(other.minimumDocuments)
                && multipleContacts.equals(other.multipleContacts)
                && multipleOwners.equals(other.multipleOwners);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.minimumDocuments, this.multipleContacts, this.multipleOwners);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> minimumDocuments = Optional.empty();

        private Optional<Boolean> multipleContacts = Optional.empty();

        private Optional<Boolean> multipleOwners = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ASection other) {
            minimumDocuments(other.getMinimumDocuments());
            multipleContacts(other.getMultipleContacts());
            multipleOwners(other.getMultipleOwners());
            return this;
        }

        @JsonSetter(value = "minimumDocuments", nulls = Nulls.SKIP)
        public Builder minimumDocuments(Optional<Integer> minimumDocuments) {
            this.minimumDocuments = minimumDocuments;
            return this;
        }

        public Builder minimumDocuments(Integer minimumDocuments) {
            this.minimumDocuments = Optional.ofNullable(minimumDocuments);
            return this;
        }

        @JsonSetter(value = "multipleContacts", nulls = Nulls.SKIP)
        public Builder multipleContacts(Optional<Boolean> multipleContacts) {
            this.multipleContacts = multipleContacts;
            return this;
        }

        public Builder multipleContacts(Boolean multipleContacts) {
            this.multipleContacts = Optional.ofNullable(multipleContacts);
            return this;
        }

        @JsonSetter(value = "multipleOwners", nulls = Nulls.SKIP)
        public Builder multipleOwners(Optional<Boolean> multipleOwners) {
            this.multipleOwners = multipleOwners;
            return this;
        }

        public Builder multipleOwners(Boolean multipleOwners) {
            this.multipleOwners = Optional.ofNullable(multipleOwners);
            return this;
        }

        public ASection build() {
            return new ASection(minimumDocuments, multipleContacts, multipleOwners, additionalProperties);
        }
    }
}
