/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransferBankAccount.Builder.class)
public final class TransferBankAccount {
    private final String accountNumber;

    private final String routingNumber;

    private final Map<String, Object> additionalProperties;

    private TransferBankAccount(String accountNumber, String routingNumber, Map<String, Object> additionalProperties) {
        this.accountNumber = accountNumber;
        this.routingNumber = routingNumber;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("accountNumber")
    public String getAccountNumber() {
        return accountNumber;
    }

    @JsonProperty("routingNumber")
    public String getRoutingNumber() {
        return routingNumber;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransferBankAccount && equalTo((TransferBankAccount) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransferBankAccount other) {
        return accountNumber.equals(other.accountNumber) && routingNumber.equals(other.routingNumber);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.accountNumber, this.routingNumber);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AccountNumberStage builder() {
        return new Builder();
    }

    public interface AccountNumberStage {
        RoutingNumberStage accountNumber(@NotNull String accountNumber);

        Builder from(TransferBankAccount other);
    }

    public interface RoutingNumberStage {
        _FinalStage routingNumber(@NotNull String routingNumber);
    }

    public interface _FinalStage {
        TransferBankAccount build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AccountNumberStage, RoutingNumberStage, _FinalStage {
        private String accountNumber;

        private String routingNumber;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TransferBankAccount other) {
            accountNumber(other.getAccountNumber());
            routingNumber(other.getRoutingNumber());
            return this;
        }

        @java.lang.Override
        @JsonSetter("accountNumber")
        public RoutingNumberStage accountNumber(@NotNull String accountNumber) {
            this.accountNumber = Objects.requireNonNull(accountNumber, "accountNumber must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("routingNumber")
        public _FinalStage routingNumber(@NotNull String routingNumber) {
            this.routingNumber = Objects.requireNonNull(routingNumber, "routingNumber must not be null");
            return this;
        }

        @java.lang.Override
        public TransferBankAccount build() {
            return new TransferBankAccount(accountNumber, routingNumber, additionalProperties);
        }
    }
}
