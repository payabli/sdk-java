/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ContactElement.Builder.class)
public final class ContactElement {
    private final Optional<String> emailLabel;

    private final Optional<Boolean> enabled;

    private final Optional<String> header;

    private final Optional<Integer> order;

    private final Optional<Boolean> paymentIcons;

    private final Optional<String> phoneLabel;

    private final Map<String, Object> additionalProperties;

    private ContactElement(
            Optional<String> emailLabel,
            Optional<Boolean> enabled,
            Optional<String> header,
            Optional<Integer> order,
            Optional<Boolean> paymentIcons,
            Optional<String> phoneLabel,
            Map<String, Object> additionalProperties) {
        this.emailLabel = emailLabel;
        this.enabled = enabled;
        this.header = header;
        this.order = order;
        this.paymentIcons = paymentIcons;
        this.phoneLabel = phoneLabel;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Custom content for email
     */
    @JsonProperty("emailLabel")
    public Optional<String> getEmailLabel() {
        return emailLabel;
    }

    @JsonProperty("enabled")
    public Optional<Boolean> getEnabled() {
        return enabled;
    }

    /**
     * @return Header text for section
     */
    @JsonProperty("header")
    public Optional<String> getHeader() {
        return header;
    }

    @JsonProperty("order")
    public Optional<Integer> getOrder() {
        return order;
    }

    /**
     * @return Flag indicating if icons for accepted card brands will be shown
     */
    @JsonProperty("paymentIcons")
    public Optional<Boolean> getPaymentIcons() {
        return paymentIcons;
    }

    /**
     * @return Custom content for phone number
     */
    @JsonProperty("phoneLabel")
    public Optional<String> getPhoneLabel() {
        return phoneLabel;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ContactElement && equalTo((ContactElement) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ContactElement other) {
        return emailLabel.equals(other.emailLabel)
                && enabled.equals(other.enabled)
                && header.equals(other.header)
                && order.equals(other.order)
                && paymentIcons.equals(other.paymentIcons)
                && phoneLabel.equals(other.phoneLabel);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.emailLabel, this.enabled, this.header, this.order, this.paymentIcons, this.phoneLabel);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> emailLabel = Optional.empty();

        private Optional<Boolean> enabled = Optional.empty();

        private Optional<String> header = Optional.empty();

        private Optional<Integer> order = Optional.empty();

        private Optional<Boolean> paymentIcons = Optional.empty();

        private Optional<String> phoneLabel = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ContactElement other) {
            emailLabel(other.getEmailLabel());
            enabled(other.getEnabled());
            header(other.getHeader());
            order(other.getOrder());
            paymentIcons(other.getPaymentIcons());
            phoneLabel(other.getPhoneLabel());
            return this;
        }

        /**
         * <p>Custom content for email</p>
         */
        @JsonSetter(value = "emailLabel", nulls = Nulls.SKIP)
        public Builder emailLabel(Optional<String> emailLabel) {
            this.emailLabel = emailLabel;
            return this;
        }

        public Builder emailLabel(String emailLabel) {
            this.emailLabel = Optional.ofNullable(emailLabel);
            return this;
        }

        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * <p>Header text for section</p>
         */
        @JsonSetter(value = "header", nulls = Nulls.SKIP)
        public Builder header(Optional<String> header) {
            this.header = header;
            return this;
        }

        public Builder header(String header) {
            this.header = Optional.ofNullable(header);
            return this;
        }

        @JsonSetter(value = "order", nulls = Nulls.SKIP)
        public Builder order(Optional<Integer> order) {
            this.order = order;
            return this;
        }

        public Builder order(Integer order) {
            this.order = Optional.ofNullable(order);
            return this;
        }

        /**
         * <p>Flag indicating if icons for accepted card brands will be shown</p>
         */
        @JsonSetter(value = "paymentIcons", nulls = Nulls.SKIP)
        public Builder paymentIcons(Optional<Boolean> paymentIcons) {
            this.paymentIcons = paymentIcons;
            return this;
        }

        public Builder paymentIcons(Boolean paymentIcons) {
            this.paymentIcons = Optional.ofNullable(paymentIcons);
            return this;
        }

        /**
         * <p>Custom content for phone number</p>
         */
        @JsonSetter(value = "phoneLabel", nulls = Nulls.SKIP)
        public Builder phoneLabel(Optional<String> phoneLabel) {
            this.phoneLabel = phoneLabel;
            return this;
        }

        public Builder phoneLabel(String phoneLabel) {
            this.phoneLabel = Optional.ofNullable(phoneLabel);
            return this;
        }

        public ContactElement build() {
            return new ContactElement(
                    emailLabel, enabled, header, order, paymentIcons, phoneLabel, additionalProperties);
        }
    }
}
