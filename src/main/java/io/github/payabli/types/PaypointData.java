/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaypointData.Builder.class)
public final class PaypointData {
    private final Optional<String> address1;

    private final Optional<String> address2;

    private final Optional<List<Bank>> bankData;

    private final Optional<Long> boardingId;

    private final Optional<String> city;

    private final Optional<List<Contacts>> contacts;

    private final Optional<String> country;

    private final Optional<List<PayabliCredentialsPascal>> credentials;

    private final Optional<String> dbaName;

    private final Optional<String> externalPaypointId;

    private final Optional<String> fax;

    private final Optional<Long> idPaypoint;

    private final Optional<String> legalName;

    private final Optional<OrgData> parentOrg;

    private final Optional<Integer> paypointStatus;

    private final Optional<String> phone;

    private final Optional<Services> serviceData;

    private final Optional<String> state;

    private final Optional<PaypointSummary> summary;

    private final Optional<Integer> timeZone;

    private final Optional<String> websiteAddress;

    private final Optional<String> zip;

    private final Map<String, Object> additionalProperties;

    private PaypointData(
            Optional<String> address1,
            Optional<String> address2,
            Optional<List<Bank>> bankData,
            Optional<Long> boardingId,
            Optional<String> city,
            Optional<List<Contacts>> contacts,
            Optional<String> country,
            Optional<List<PayabliCredentialsPascal>> credentials,
            Optional<String> dbaName,
            Optional<String> externalPaypointId,
            Optional<String> fax,
            Optional<Long> idPaypoint,
            Optional<String> legalName,
            Optional<OrgData> parentOrg,
            Optional<Integer> paypointStatus,
            Optional<String> phone,
            Optional<Services> serviceData,
            Optional<String> state,
            Optional<PaypointSummary> summary,
            Optional<Integer> timeZone,
            Optional<String> websiteAddress,
            Optional<String> zip,
            Map<String, Object> additionalProperties) {
        this.address1 = address1;
        this.address2 = address2;
        this.bankData = bankData;
        this.boardingId = boardingId;
        this.city = city;
        this.contacts = contacts;
        this.country = country;
        this.credentials = credentials;
        this.dbaName = dbaName;
        this.externalPaypointId = externalPaypointId;
        this.fax = fax;
        this.idPaypoint = idPaypoint;
        this.legalName = legalName;
        this.parentOrg = parentOrg;
        this.paypointStatus = paypointStatus;
        this.phone = phone;
        this.serviceData = serviceData;
        this.state = state;
        this.summary = summary;
        this.timeZone = timeZone;
        this.websiteAddress = websiteAddress;
        this.zip = zip;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("address1")
    public Optional<String> getAddress1() {
        return address1;
    }

    @JsonProperty("address2")
    public Optional<String> getAddress2() {
        return address2;
    }

    @JsonProperty("bankData")
    public Optional<List<Bank>> getBankData() {
        return bankData;
    }

    @JsonProperty("boardingId")
    public Optional<Long> getBoardingId() {
        return boardingId;
    }

    @JsonProperty("city")
    public Optional<String> getCity() {
        return city;
    }

    @JsonProperty("contacts")
    public Optional<List<Contacts>> getContacts() {
        return contacts;
    }

    @JsonProperty("country")
    public Optional<String> getCountry() {
        return country;
    }

    @JsonProperty("credentials")
    public Optional<List<PayabliCredentialsPascal>> getCredentials() {
        return credentials;
    }

    @JsonProperty("dbaName")
    public Optional<String> getDbaName() {
        return dbaName;
    }

    @JsonProperty("externalPaypointID")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    /**
     * @return Fax number
     */
    @JsonProperty("fax")
    public Optional<String> getFax() {
        return fax;
    }

    @JsonProperty("idPaypoint")
    public Optional<Long> getIdPaypoint() {
        return idPaypoint;
    }

    @JsonProperty("legalName")
    public Optional<String> getLegalName() {
        return legalName;
    }

    @JsonProperty("parentOrg")
    public Optional<OrgData> getParentOrg() {
        return parentOrg;
    }

    @JsonProperty("paypointStatus")
    public Optional<Integer> getPaypointStatus() {
        return paypointStatus;
    }

    @JsonProperty("phone")
    public Optional<String> getPhone() {
        return phone;
    }

    @JsonProperty("serviceData")
    public Optional<Services> getServiceData() {
        return serviceData;
    }

    @JsonProperty("state")
    public Optional<String> getState() {
        return state;
    }

    @JsonProperty("summary")
    public Optional<PaypointSummary> getSummary() {
        return summary;
    }

    @JsonProperty("timeZone")
    public Optional<Integer> getTimeZone() {
        return timeZone;
    }

    @JsonProperty("websiteAddress")
    public Optional<String> getWebsiteAddress() {
        return websiteAddress;
    }

    @JsonProperty("zip")
    public Optional<String> getZip() {
        return zip;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaypointData && equalTo((PaypointData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaypointData other) {
        return address1.equals(other.address1)
                && address2.equals(other.address2)
                && bankData.equals(other.bankData)
                && boardingId.equals(other.boardingId)
                && city.equals(other.city)
                && contacts.equals(other.contacts)
                && country.equals(other.country)
                && credentials.equals(other.credentials)
                && dbaName.equals(other.dbaName)
                && externalPaypointId.equals(other.externalPaypointId)
                && fax.equals(other.fax)
                && idPaypoint.equals(other.idPaypoint)
                && legalName.equals(other.legalName)
                && parentOrg.equals(other.parentOrg)
                && paypointStatus.equals(other.paypointStatus)
                && phone.equals(other.phone)
                && serviceData.equals(other.serviceData)
                && state.equals(other.state)
                && summary.equals(other.summary)
                && timeZone.equals(other.timeZone)
                && websiteAddress.equals(other.websiteAddress)
                && zip.equals(other.zip);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.address1,
                this.address2,
                this.bankData,
                this.boardingId,
                this.city,
                this.contacts,
                this.country,
                this.credentials,
                this.dbaName,
                this.externalPaypointId,
                this.fax,
                this.idPaypoint,
                this.legalName,
                this.parentOrg,
                this.paypointStatus,
                this.phone,
                this.serviceData,
                this.state,
                this.summary,
                this.timeZone,
                this.websiteAddress,
                this.zip);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> address1 = Optional.empty();

        private Optional<String> address2 = Optional.empty();

        private Optional<List<Bank>> bankData = Optional.empty();

        private Optional<Long> boardingId = Optional.empty();

        private Optional<String> city = Optional.empty();

        private Optional<List<Contacts>> contacts = Optional.empty();

        private Optional<String> country = Optional.empty();

        private Optional<List<PayabliCredentialsPascal>> credentials = Optional.empty();

        private Optional<String> dbaName = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<String> fax = Optional.empty();

        private Optional<Long> idPaypoint = Optional.empty();

        private Optional<String> legalName = Optional.empty();

        private Optional<OrgData> parentOrg = Optional.empty();

        private Optional<Integer> paypointStatus = Optional.empty();

        private Optional<String> phone = Optional.empty();

        private Optional<Services> serviceData = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<PaypointSummary> summary = Optional.empty();

        private Optional<Integer> timeZone = Optional.empty();

        private Optional<String> websiteAddress = Optional.empty();

        private Optional<String> zip = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PaypointData other) {
            address1(other.getAddress1());
            address2(other.getAddress2());
            bankData(other.getBankData());
            boardingId(other.getBoardingId());
            city(other.getCity());
            contacts(other.getContacts());
            country(other.getCountry());
            credentials(other.getCredentials());
            dbaName(other.getDbaName());
            externalPaypointId(other.getExternalPaypointId());
            fax(other.getFax());
            idPaypoint(other.getIdPaypoint());
            legalName(other.getLegalName());
            parentOrg(other.getParentOrg());
            paypointStatus(other.getPaypointStatus());
            phone(other.getPhone());
            serviceData(other.getServiceData());
            state(other.getState());
            summary(other.getSummary());
            timeZone(other.getTimeZone());
            websiteAddress(other.getWebsiteAddress());
            zip(other.getZip());
            return this;
        }

        @JsonSetter(value = "address1", nulls = Nulls.SKIP)
        public Builder address1(Optional<String> address1) {
            this.address1 = address1;
            return this;
        }

        public Builder address1(String address1) {
            this.address1 = Optional.ofNullable(address1);
            return this;
        }

        @JsonSetter(value = "address2", nulls = Nulls.SKIP)
        public Builder address2(Optional<String> address2) {
            this.address2 = address2;
            return this;
        }

        public Builder address2(String address2) {
            this.address2 = Optional.ofNullable(address2);
            return this;
        }

        @JsonSetter(value = "bankData", nulls = Nulls.SKIP)
        public Builder bankData(Optional<List<Bank>> bankData) {
            this.bankData = bankData;
            return this;
        }

        public Builder bankData(List<Bank> bankData) {
            this.bankData = Optional.ofNullable(bankData);
            return this;
        }

        @JsonSetter(value = "boardingId", nulls = Nulls.SKIP)
        public Builder boardingId(Optional<Long> boardingId) {
            this.boardingId = boardingId;
            return this;
        }

        public Builder boardingId(Long boardingId) {
            this.boardingId = Optional.ofNullable(boardingId);
            return this;
        }

        @JsonSetter(value = "city", nulls = Nulls.SKIP)
        public Builder city(Optional<String> city) {
            this.city = city;
            return this;
        }

        public Builder city(String city) {
            this.city = Optional.ofNullable(city);
            return this;
        }

        @JsonSetter(value = "contacts", nulls = Nulls.SKIP)
        public Builder contacts(Optional<List<Contacts>> contacts) {
            this.contacts = contacts;
            return this;
        }

        public Builder contacts(List<Contacts> contacts) {
            this.contacts = Optional.ofNullable(contacts);
            return this;
        }

        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public Builder country(Optional<String> country) {
            this.country = country;
            return this;
        }

        public Builder country(String country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        @JsonSetter(value = "credentials", nulls = Nulls.SKIP)
        public Builder credentials(Optional<List<PayabliCredentialsPascal>> credentials) {
            this.credentials = credentials;
            return this;
        }

        public Builder credentials(List<PayabliCredentialsPascal> credentials) {
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        @JsonSetter(value = "dbaName", nulls = Nulls.SKIP)
        public Builder dbaName(Optional<String> dbaName) {
            this.dbaName = dbaName;
            return this;
        }

        public Builder dbaName(String dbaName) {
            this.dbaName = Optional.ofNullable(dbaName);
            return this;
        }

        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        /**
         * <p>Fax number</p>
         */
        @JsonSetter(value = "fax", nulls = Nulls.SKIP)
        public Builder fax(Optional<String> fax) {
            this.fax = fax;
            return this;
        }

        public Builder fax(String fax) {
            this.fax = Optional.ofNullable(fax);
            return this;
        }

        @JsonSetter(value = "idPaypoint", nulls = Nulls.SKIP)
        public Builder idPaypoint(Optional<Long> idPaypoint) {
            this.idPaypoint = idPaypoint;
            return this;
        }

        public Builder idPaypoint(Long idPaypoint) {
            this.idPaypoint = Optional.ofNullable(idPaypoint);
            return this;
        }

        @JsonSetter(value = "legalName", nulls = Nulls.SKIP)
        public Builder legalName(Optional<String> legalName) {
            this.legalName = legalName;
            return this;
        }

        public Builder legalName(String legalName) {
            this.legalName = Optional.ofNullable(legalName);
            return this;
        }

        @JsonSetter(value = "parentOrg", nulls = Nulls.SKIP)
        public Builder parentOrg(Optional<OrgData> parentOrg) {
            this.parentOrg = parentOrg;
            return this;
        }

        public Builder parentOrg(OrgData parentOrg) {
            this.parentOrg = Optional.ofNullable(parentOrg);
            return this;
        }

        @JsonSetter(value = "paypointStatus", nulls = Nulls.SKIP)
        public Builder paypointStatus(Optional<Integer> paypointStatus) {
            this.paypointStatus = paypointStatus;
            return this;
        }

        public Builder paypointStatus(Integer paypointStatus) {
            this.paypointStatus = Optional.ofNullable(paypointStatus);
            return this;
        }

        @JsonSetter(value = "phone", nulls = Nulls.SKIP)
        public Builder phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        @JsonSetter(value = "serviceData", nulls = Nulls.SKIP)
        public Builder serviceData(Optional<Services> serviceData) {
            this.serviceData = serviceData;
            return this;
        }

        public Builder serviceData(Services serviceData) {
            this.serviceData = Optional.ofNullable(serviceData);
            return this;
        }

        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<String> state) {
            this.state = state;
            return this;
        }

        public Builder state(String state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        @JsonSetter(value = "summary", nulls = Nulls.SKIP)
        public Builder summary(Optional<PaypointSummary> summary) {
            this.summary = summary;
            return this;
        }

        public Builder summary(PaypointSummary summary) {
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        @JsonSetter(value = "timeZone", nulls = Nulls.SKIP)
        public Builder timeZone(Optional<Integer> timeZone) {
            this.timeZone = timeZone;
            return this;
        }

        public Builder timeZone(Integer timeZone) {
            this.timeZone = Optional.ofNullable(timeZone);
            return this;
        }

        @JsonSetter(value = "websiteAddress", nulls = Nulls.SKIP)
        public Builder websiteAddress(Optional<String> websiteAddress) {
            this.websiteAddress = websiteAddress;
            return this;
        }

        public Builder websiteAddress(String websiteAddress) {
            this.websiteAddress = Optional.ofNullable(websiteAddress);
            return this;
        }

        @JsonSetter(value = "zip", nulls = Nulls.SKIP)
        public Builder zip(Optional<String> zip) {
            this.zip = zip;
            return this;
        }

        public Builder zip(String zip) {
            this.zip = Optional.ofNullable(zip);
            return this;
        }

        public PaypointData build() {
            return new PaypointData(
                    address1,
                    address2,
                    bankData,
                    boardingId,
                    city,
                    contacts,
                    country,
                    credentials,
                    dbaName,
                    externalPaypointId,
                    fax,
                    idPaypoint,
                    legalName,
                    parentOrg,
                    paypointStatus,
                    phone,
                    serviceData,
                    state,
                    summary,
                    timeZone,
                    websiteAddress,
                    zip,
                    additionalProperties);
        }
    }
}
