/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VendorResponseStoredMethod.Builder.class)
public final class VendorResponseStoredMethod {
    private final Optional<String> idPmethod;

    private final Optional<String> method;

    private final Optional<String> descriptor;

    private final Optional<String> maskedAccount;

    private final Optional<String> expDate;

    private final Optional<String> holderName;

    private final Optional<String> achSecCode;

    private final Optional<String> achHolderType;

    private final Optional<Boolean> isValidatedAch;

    private final Optional<String> bin;

    private final Optional<String> binData;

    private final Optional<String> aba;

    private final Optional<String> postalCode;

    private final Optional<String> methodType;

    private final Optional<OffsetDateTime> lastUpdated;

    private final Optional<OffsetDateTime> cardUpdatedOn;

    private final Map<String, Object> additionalProperties;

    private VendorResponseStoredMethod(
            Optional<String> idPmethod,
            Optional<String> method,
            Optional<String> descriptor,
            Optional<String> maskedAccount,
            Optional<String> expDate,
            Optional<String> holderName,
            Optional<String> achSecCode,
            Optional<String> achHolderType,
            Optional<Boolean> isValidatedAch,
            Optional<String> bin,
            Optional<String> binData,
            Optional<String> aba,
            Optional<String> postalCode,
            Optional<String> methodType,
            Optional<OffsetDateTime> lastUpdated,
            Optional<OffsetDateTime> cardUpdatedOn,
            Map<String, Object> additionalProperties) {
        this.idPmethod = idPmethod;
        this.method = method;
        this.descriptor = descriptor;
        this.maskedAccount = maskedAccount;
        this.expDate = expDate;
        this.holderName = holderName;
        this.achSecCode = achSecCode;
        this.achHolderType = achHolderType;
        this.isValidatedAch = isValidatedAch;
        this.bin = bin;
        this.binData = binData;
        this.aba = aba;
        this.postalCode = postalCode;
        this.methodType = methodType;
        this.lastUpdated = lastUpdated;
        this.cardUpdatedOn = cardUpdatedOn;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("IdPmethod")
    public Optional<String> getIdPmethod() {
        return idPmethod;
    }

    @JsonProperty("Method")
    public Optional<String> getMethod() {
        return method;
    }

    @JsonProperty("Descriptor")
    public Optional<String> getDescriptor() {
        return descriptor;
    }

    @JsonProperty("MaskedAccount")
    public Optional<String> getMaskedAccount() {
        return maskedAccount;
    }

    @JsonProperty("ExpDate")
    public Optional<String> getExpDate() {
        return expDate;
    }

    @JsonProperty("HolderName")
    public Optional<String> getHolderName() {
        return holderName;
    }

    @JsonProperty("AchSecCode")
    public Optional<String> getAchSecCode() {
        return achSecCode;
    }

    @JsonProperty("AchHolderType")
    public Optional<String> getAchHolderType() {
        return achHolderType;
    }

    @JsonProperty("IsValidatedACH")
    public Optional<Boolean> getIsValidatedAch() {
        return isValidatedAch;
    }

    @JsonProperty("BIN")
    public Optional<String> getBin() {
        return bin;
    }

    @JsonProperty("binData")
    public Optional<String> getBinData() {
        return binData;
    }

    @JsonProperty("ABA")
    public Optional<String> getAba() {
        return aba;
    }

    @JsonProperty("PostalCode")
    public Optional<String> getPostalCode() {
        return postalCode;
    }

    @JsonProperty("MethodType")
    public Optional<String> getMethodType() {
        return methodType;
    }

    @JsonProperty("LastUpdated")
    public Optional<OffsetDateTime> getLastUpdated() {
        return lastUpdated;
    }

    @JsonProperty("CardUpdatedOn")
    public Optional<OffsetDateTime> getCardUpdatedOn() {
        return cardUpdatedOn;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VendorResponseStoredMethod && equalTo((VendorResponseStoredMethod) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VendorResponseStoredMethod other) {
        return idPmethod.equals(other.idPmethod)
                && method.equals(other.method)
                && descriptor.equals(other.descriptor)
                && maskedAccount.equals(other.maskedAccount)
                && expDate.equals(other.expDate)
                && holderName.equals(other.holderName)
                && achSecCode.equals(other.achSecCode)
                && achHolderType.equals(other.achHolderType)
                && isValidatedAch.equals(other.isValidatedAch)
                && bin.equals(other.bin)
                && binData.equals(other.binData)
                && aba.equals(other.aba)
                && postalCode.equals(other.postalCode)
                && methodType.equals(other.methodType)
                && lastUpdated.equals(other.lastUpdated)
                && cardUpdatedOn.equals(other.cardUpdatedOn);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.idPmethod,
                this.method,
                this.descriptor,
                this.maskedAccount,
                this.expDate,
                this.holderName,
                this.achSecCode,
                this.achHolderType,
                this.isValidatedAch,
                this.bin,
                this.binData,
                this.aba,
                this.postalCode,
                this.methodType,
                this.lastUpdated,
                this.cardUpdatedOn);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> idPmethod = Optional.empty();

        private Optional<String> method = Optional.empty();

        private Optional<String> descriptor = Optional.empty();

        private Optional<String> maskedAccount = Optional.empty();

        private Optional<String> expDate = Optional.empty();

        private Optional<String> holderName = Optional.empty();

        private Optional<String> achSecCode = Optional.empty();

        private Optional<String> achHolderType = Optional.empty();

        private Optional<Boolean> isValidatedAch = Optional.empty();

        private Optional<String> bin = Optional.empty();

        private Optional<String> binData = Optional.empty();

        private Optional<String> aba = Optional.empty();

        private Optional<String> postalCode = Optional.empty();

        private Optional<String> methodType = Optional.empty();

        private Optional<OffsetDateTime> lastUpdated = Optional.empty();

        private Optional<OffsetDateTime> cardUpdatedOn = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(VendorResponseStoredMethod other) {
            idPmethod(other.getIdPmethod());
            method(other.getMethod());
            descriptor(other.getDescriptor());
            maskedAccount(other.getMaskedAccount());
            expDate(other.getExpDate());
            holderName(other.getHolderName());
            achSecCode(other.getAchSecCode());
            achHolderType(other.getAchHolderType());
            isValidatedAch(other.getIsValidatedAch());
            bin(other.getBin());
            binData(other.getBinData());
            aba(other.getAba());
            postalCode(other.getPostalCode());
            methodType(other.getMethodType());
            lastUpdated(other.getLastUpdated());
            cardUpdatedOn(other.getCardUpdatedOn());
            return this;
        }

        @JsonSetter(value = "IdPmethod", nulls = Nulls.SKIP)
        public Builder idPmethod(Optional<String> idPmethod) {
            this.idPmethod = idPmethod;
            return this;
        }

        public Builder idPmethod(String idPmethod) {
            this.idPmethod = Optional.ofNullable(idPmethod);
            return this;
        }

        @JsonSetter(value = "Method", nulls = Nulls.SKIP)
        public Builder method(Optional<String> method) {
            this.method = method;
            return this;
        }

        public Builder method(String method) {
            this.method = Optional.ofNullable(method);
            return this;
        }

        @JsonSetter(value = "Descriptor", nulls = Nulls.SKIP)
        public Builder descriptor(Optional<String> descriptor) {
            this.descriptor = descriptor;
            return this;
        }

        public Builder descriptor(String descriptor) {
            this.descriptor = Optional.ofNullable(descriptor);
            return this;
        }

        @JsonSetter(value = "MaskedAccount", nulls = Nulls.SKIP)
        public Builder maskedAccount(Optional<String> maskedAccount) {
            this.maskedAccount = maskedAccount;
            return this;
        }

        public Builder maskedAccount(String maskedAccount) {
            this.maskedAccount = Optional.ofNullable(maskedAccount);
            return this;
        }

        @JsonSetter(value = "ExpDate", nulls = Nulls.SKIP)
        public Builder expDate(Optional<String> expDate) {
            this.expDate = expDate;
            return this;
        }

        public Builder expDate(String expDate) {
            this.expDate = Optional.ofNullable(expDate);
            return this;
        }

        @JsonSetter(value = "HolderName", nulls = Nulls.SKIP)
        public Builder holderName(Optional<String> holderName) {
            this.holderName = holderName;
            return this;
        }

        public Builder holderName(String holderName) {
            this.holderName = Optional.ofNullable(holderName);
            return this;
        }

        @JsonSetter(value = "AchSecCode", nulls = Nulls.SKIP)
        public Builder achSecCode(Optional<String> achSecCode) {
            this.achSecCode = achSecCode;
            return this;
        }

        public Builder achSecCode(String achSecCode) {
            this.achSecCode = Optional.ofNullable(achSecCode);
            return this;
        }

        @JsonSetter(value = "AchHolderType", nulls = Nulls.SKIP)
        public Builder achHolderType(Optional<String> achHolderType) {
            this.achHolderType = achHolderType;
            return this;
        }

        public Builder achHolderType(String achHolderType) {
            this.achHolderType = Optional.ofNullable(achHolderType);
            return this;
        }

        @JsonSetter(value = "IsValidatedACH", nulls = Nulls.SKIP)
        public Builder isValidatedAch(Optional<Boolean> isValidatedAch) {
            this.isValidatedAch = isValidatedAch;
            return this;
        }

        public Builder isValidatedAch(Boolean isValidatedAch) {
            this.isValidatedAch = Optional.ofNullable(isValidatedAch);
            return this;
        }

        @JsonSetter(value = "BIN", nulls = Nulls.SKIP)
        public Builder bin(Optional<String> bin) {
            this.bin = bin;
            return this;
        }

        public Builder bin(String bin) {
            this.bin = Optional.ofNullable(bin);
            return this;
        }

        @JsonSetter(value = "binData", nulls = Nulls.SKIP)
        public Builder binData(Optional<String> binData) {
            this.binData = binData;
            return this;
        }

        public Builder binData(String binData) {
            this.binData = Optional.ofNullable(binData);
            return this;
        }

        @JsonSetter(value = "ABA", nulls = Nulls.SKIP)
        public Builder aba(Optional<String> aba) {
            this.aba = aba;
            return this;
        }

        public Builder aba(String aba) {
            this.aba = Optional.ofNullable(aba);
            return this;
        }

        @JsonSetter(value = "PostalCode", nulls = Nulls.SKIP)
        public Builder postalCode(Optional<String> postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public Builder postalCode(String postalCode) {
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        @JsonSetter(value = "MethodType", nulls = Nulls.SKIP)
        public Builder methodType(Optional<String> methodType) {
            this.methodType = methodType;
            return this;
        }

        public Builder methodType(String methodType) {
            this.methodType = Optional.ofNullable(methodType);
            return this;
        }

        @JsonSetter(value = "LastUpdated", nulls = Nulls.SKIP)
        public Builder lastUpdated(Optional<OffsetDateTime> lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }

        public Builder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = Optional.ofNullable(lastUpdated);
            return this;
        }

        @JsonSetter(value = "CardUpdatedOn", nulls = Nulls.SKIP)
        public Builder cardUpdatedOn(Optional<OffsetDateTime> cardUpdatedOn) {
            this.cardUpdatedOn = cardUpdatedOn;
            return this;
        }

        public Builder cardUpdatedOn(OffsetDateTime cardUpdatedOn) {
            this.cardUpdatedOn = Optional.ofNullable(cardUpdatedOn);
            return this;
        }

        public VendorResponseStoredMethod build() {
            return new VendorResponseStoredMethod(
                    idPmethod,
                    method,
                    descriptor,
                    maskedAccount,
                    expDate,
                    holderName,
                    achSecCode,
                    achHolderType,
                    isValidatedAch,
                    bin,
                    binData,
                    aba,
                    postalCode,
                    methodType,
                    lastUpdated,
                    cardUpdatedOn,
                    additionalProperties);
        }
    }
}
