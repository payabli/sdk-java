/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = LineItemQueryRecord.Builder.class)
public final class LineItemQueryRecord {
    private final Optional<OffsetDateTime> createdAt;

    private final Optional<Long> id;

    private final Optional<List<Optional<String>>> itemCategories;

    private final Optional<String> itemCommodityCode;

    private final double itemCost;

    private final Optional<String> itemDescription;

    private final Optional<Integer> itemMode;

    private final Optional<String> itemProductCode;

    private final Optional<String> itemProductName;

    private final int itemQty;

    private final Optional<String> itemUnitOfMeasure;

    private final Optional<OffsetDateTime> lastUpdated;

    private final Optional<String> pageidentifier;

    private final Optional<String> parentOrgName;

    private final Optional<String> paypointDbaname;

    private final Optional<String> paypointEntryname;

    private final Optional<String> paypointLegalname;

    private final Map<String, Object> additionalProperties;

    private LineItemQueryRecord(
            Optional<OffsetDateTime> createdAt,
            Optional<Long> id,
            Optional<List<Optional<String>>> itemCategories,
            Optional<String> itemCommodityCode,
            double itemCost,
            Optional<String> itemDescription,
            Optional<Integer> itemMode,
            Optional<String> itemProductCode,
            Optional<String> itemProductName,
            int itemQty,
            Optional<String> itemUnitOfMeasure,
            Optional<OffsetDateTime> lastUpdated,
            Optional<String> pageidentifier,
            Optional<String> parentOrgName,
            Optional<String> paypointDbaname,
            Optional<String> paypointEntryname,
            Optional<String> paypointLegalname,
            Map<String, Object> additionalProperties) {
        this.createdAt = createdAt;
        this.id = id;
        this.itemCategories = itemCategories;
        this.itemCommodityCode = itemCommodityCode;
        this.itemCost = itemCost;
        this.itemDescription = itemDescription;
        this.itemMode = itemMode;
        this.itemProductCode = itemProductCode;
        this.itemProductName = itemProductName;
        this.itemQty = itemQty;
        this.itemUnitOfMeasure = itemUnitOfMeasure;
        this.lastUpdated = lastUpdated;
        this.pageidentifier = pageidentifier;
        this.parentOrgName = parentOrgName;
        this.paypointDbaname = paypointDbaname;
        this.paypointEntryname = paypointEntryname;
        this.paypointLegalname = paypointLegalname;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Timestamp of when line item was created, in UTC.
     */
    @JsonProperty("createdAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return Identifier of line item.
     */
    @JsonProperty("id")
    public Optional<Long> getId() {
        return id;
    }

    /**
     * @return Array of tags classifying item or product.
     */
    @JsonProperty("itemCategories")
    public Optional<List<Optional<String>>> getItemCategories() {
        return itemCategories;
    }

    @JsonProperty("itemCommodityCode")
    public Optional<String> getItemCommodityCode() {
        return itemCommodityCode;
    }

    /**
     * @return Item or product price per unit.
     */
    @JsonProperty("itemCost")
    public double getItemCost() {
        return itemCost;
    }

    @JsonProperty("itemDescription")
    public Optional<String> getItemDescription() {
        return itemDescription;
    }

    /**
     * @return Internal class of item or product: value '0' is only for invoices , '1' for bills, and '2' common for both.
     */
    @JsonProperty("itemMode")
    public Optional<Integer> getItemMode() {
        return itemMode;
    }

    @JsonProperty("itemProductCode")
    public Optional<String> getItemProductCode() {
        return itemProductCode;
    }

    @JsonProperty("itemProductName")
    public Optional<String> getItemProductName() {
        return itemProductName;
    }

    /**
     * @return Quantity of item or product.
     */
    @JsonProperty("itemQty")
    public int getItemQty() {
        return itemQty;
    }

    @JsonProperty("itemUnitOfMeasure")
    public Optional<String> getItemUnitOfMeasure() {
        return itemUnitOfMeasure;
    }

    /**
     * @return Timestamp of when the line item was updated, in UTC.
     */
    @JsonProperty("lastUpdated")
    public Optional<OffsetDateTime> getLastUpdated() {
        return lastUpdated;
    }

    @JsonProperty("pageidentifier")
    public Optional<String> getPageidentifier() {
        return pageidentifier;
    }

    /**
     * @return The name of the paypoint's parent organization.
     */
    @JsonProperty("ParentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    /**
     * @return The paypoint's DBA name.
     */
    @JsonProperty("PaypointDbaname")
    public Optional<String> getPaypointDbaname() {
        return paypointDbaname;
    }

    /**
     * @return The paypoint's entryname (entrypoint) value.
     */
    @JsonProperty("PaypointEntryname")
    public Optional<String> getPaypointEntryname() {
        return paypointEntryname;
    }

    /**
     * @return The paypoint's legal name.
     */
    @JsonProperty("PaypointLegalname")
    public Optional<String> getPaypointLegalname() {
        return paypointLegalname;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof LineItemQueryRecord && equalTo((LineItemQueryRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(LineItemQueryRecord other) {
        return createdAt.equals(other.createdAt)
                && id.equals(other.id)
                && itemCategories.equals(other.itemCategories)
                && itemCommodityCode.equals(other.itemCommodityCode)
                && itemCost == other.itemCost
                && itemDescription.equals(other.itemDescription)
                && itemMode.equals(other.itemMode)
                && itemProductCode.equals(other.itemProductCode)
                && itemProductName.equals(other.itemProductName)
                && itemQty == other.itemQty
                && itemUnitOfMeasure.equals(other.itemUnitOfMeasure)
                && lastUpdated.equals(other.lastUpdated)
                && pageidentifier.equals(other.pageidentifier)
                && parentOrgName.equals(other.parentOrgName)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointEntryname.equals(other.paypointEntryname)
                && paypointLegalname.equals(other.paypointLegalname);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.createdAt,
                this.id,
                this.itemCategories,
                this.itemCommodityCode,
                this.itemCost,
                this.itemDescription,
                this.itemMode,
                this.itemProductCode,
                this.itemProductName,
                this.itemQty,
                this.itemUnitOfMeasure,
                this.lastUpdated,
                this.pageidentifier,
                this.parentOrgName,
                this.paypointDbaname,
                this.paypointEntryname,
                this.paypointLegalname);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ItemCostStage builder() {
        return new Builder();
    }

    public interface ItemCostStage {
        /**
         * <p>Item or product price per unit.</p>
         */
        ItemQtyStage itemCost(double itemCost);

        Builder from(LineItemQueryRecord other);
    }

    public interface ItemQtyStage {
        /**
         * <p>Quantity of item or product.</p>
         */
        _FinalStage itemQty(int itemQty);
    }

    public interface _FinalStage {
        LineItemQueryRecord build();

        /**
         * <p>Timestamp of when line item was created, in UTC.</p>
         */
        _FinalStage createdAt(Optional<OffsetDateTime> createdAt);

        _FinalStage createdAt(OffsetDateTime createdAt);

        /**
         * <p>Identifier of line item.</p>
         */
        _FinalStage id(Optional<Long> id);

        _FinalStage id(Long id);

        /**
         * <p>Array of tags classifying item or product.</p>
         */
        _FinalStage itemCategories(Optional<List<Optional<String>>> itemCategories);

        _FinalStage itemCategories(List<Optional<String>> itemCategories);

        _FinalStage itemCommodityCode(Optional<String> itemCommodityCode);

        _FinalStage itemCommodityCode(String itemCommodityCode);

        _FinalStage itemDescription(Optional<String> itemDescription);

        _FinalStage itemDescription(String itemDescription);

        /**
         * <p>Internal class of item or product: value '0' is only for invoices , '1' for bills, and '2' common for both.</p>
         */
        _FinalStage itemMode(Optional<Integer> itemMode);

        _FinalStage itemMode(Integer itemMode);

        _FinalStage itemProductCode(Optional<String> itemProductCode);

        _FinalStage itemProductCode(String itemProductCode);

        _FinalStage itemProductName(Optional<String> itemProductName);

        _FinalStage itemProductName(String itemProductName);

        _FinalStage itemUnitOfMeasure(Optional<String> itemUnitOfMeasure);

        _FinalStage itemUnitOfMeasure(String itemUnitOfMeasure);

        /**
         * <p>Timestamp of when the line item was updated, in UTC.</p>
         */
        _FinalStage lastUpdated(Optional<OffsetDateTime> lastUpdated);

        _FinalStage lastUpdated(OffsetDateTime lastUpdated);

        _FinalStage pageidentifier(Optional<String> pageidentifier);

        _FinalStage pageidentifier(String pageidentifier);

        /**
         * <p>The name of the paypoint's parent organization.</p>
         */
        _FinalStage parentOrgName(Optional<String> parentOrgName);

        _FinalStage parentOrgName(String parentOrgName);

        /**
         * <p>The paypoint's DBA name.</p>
         */
        _FinalStage paypointDbaname(Optional<String> paypointDbaname);

        _FinalStage paypointDbaname(String paypointDbaname);

        /**
         * <p>The paypoint's entryname (entrypoint) value.</p>
         */
        _FinalStage paypointEntryname(Optional<String> paypointEntryname);

        _FinalStage paypointEntryname(String paypointEntryname);

        /**
         * <p>The paypoint's legal name.</p>
         */
        _FinalStage paypointLegalname(Optional<String> paypointLegalname);

        _FinalStage paypointLegalname(String paypointLegalname);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ItemCostStage, ItemQtyStage, _FinalStage {
        private double itemCost;

        private int itemQty;

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<String> paypointEntryname = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<String> pageidentifier = Optional.empty();

        private Optional<OffsetDateTime> lastUpdated = Optional.empty();

        private Optional<String> itemUnitOfMeasure = Optional.empty();

        private Optional<String> itemProductName = Optional.empty();

        private Optional<String> itemProductCode = Optional.empty();

        private Optional<Integer> itemMode = Optional.empty();

        private Optional<String> itemDescription = Optional.empty();

        private Optional<String> itemCommodityCode = Optional.empty();

        private Optional<List<Optional<String>>> itemCategories = Optional.empty();

        private Optional<Long> id = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(LineItemQueryRecord other) {
            createdAt(other.getCreatedAt());
            id(other.getId());
            itemCategories(other.getItemCategories());
            itemCommodityCode(other.getItemCommodityCode());
            itemCost(other.getItemCost());
            itemDescription(other.getItemDescription());
            itemMode(other.getItemMode());
            itemProductCode(other.getItemProductCode());
            itemProductName(other.getItemProductName());
            itemQty(other.getItemQty());
            itemUnitOfMeasure(other.getItemUnitOfMeasure());
            lastUpdated(other.getLastUpdated());
            pageidentifier(other.getPageidentifier());
            parentOrgName(other.getParentOrgName());
            paypointDbaname(other.getPaypointDbaname());
            paypointEntryname(other.getPaypointEntryname());
            paypointLegalname(other.getPaypointLegalname());
            return this;
        }

        /**
         * <p>Item or product price per unit.</p>
         * <p>Item or product price per unit.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("itemCost")
        public ItemQtyStage itemCost(double itemCost) {
            this.itemCost = itemCost;
            return this;
        }

        /**
         * <p>Quantity of item or product.</p>
         * <p>Quantity of item or product.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("itemQty")
        public _FinalStage itemQty(int itemQty) {
            this.itemQty = itemQty;
            return this;
        }

        /**
         * <p>The paypoint's legal name.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        /**
         * <p>The paypoint's legal name.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "PaypointLegalname", nulls = Nulls.SKIP)
        public _FinalStage paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        /**
         * <p>The paypoint's entryname (entrypoint) value.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paypointEntryname(String paypointEntryname) {
            this.paypointEntryname = Optional.ofNullable(paypointEntryname);
            return this;
        }

        /**
         * <p>The paypoint's entryname (entrypoint) value.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "PaypointEntryname", nulls = Nulls.SKIP)
        public _FinalStage paypointEntryname(Optional<String> paypointEntryname) {
            this.paypointEntryname = paypointEntryname;
            return this;
        }

        /**
         * <p>The paypoint's DBA name.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        /**
         * <p>The paypoint's DBA name.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "PaypointDbaname", nulls = Nulls.SKIP)
        public _FinalStage paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        /**
         * <p>The name of the paypoint's parent organization.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        /**
         * <p>The name of the paypoint's parent organization.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public _FinalStage parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        @java.lang.Override
        public _FinalStage pageidentifier(String pageidentifier) {
            this.pageidentifier = Optional.ofNullable(pageidentifier);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "pageidentifier", nulls = Nulls.SKIP)
        public _FinalStage pageidentifier(Optional<String> pageidentifier) {
            this.pageidentifier = pageidentifier;
            return this;
        }

        /**
         * <p>Timestamp of when the line item was updated, in UTC.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = Optional.ofNullable(lastUpdated);
            return this;
        }

        /**
         * <p>Timestamp of when the line item was updated, in UTC.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "lastUpdated", nulls = Nulls.SKIP)
        public _FinalStage lastUpdated(Optional<OffsetDateTime> lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }

        @java.lang.Override
        public _FinalStage itemUnitOfMeasure(String itemUnitOfMeasure) {
            this.itemUnitOfMeasure = Optional.ofNullable(itemUnitOfMeasure);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "itemUnitOfMeasure", nulls = Nulls.SKIP)
        public _FinalStage itemUnitOfMeasure(Optional<String> itemUnitOfMeasure) {
            this.itemUnitOfMeasure = itemUnitOfMeasure;
            return this;
        }

        @java.lang.Override
        public _FinalStage itemProductName(String itemProductName) {
            this.itemProductName = Optional.ofNullable(itemProductName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "itemProductName", nulls = Nulls.SKIP)
        public _FinalStage itemProductName(Optional<String> itemProductName) {
            this.itemProductName = itemProductName;
            return this;
        }

        @java.lang.Override
        public _FinalStage itemProductCode(String itemProductCode) {
            this.itemProductCode = Optional.ofNullable(itemProductCode);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "itemProductCode", nulls = Nulls.SKIP)
        public _FinalStage itemProductCode(Optional<String> itemProductCode) {
            this.itemProductCode = itemProductCode;
            return this;
        }

        /**
         * <p>Internal class of item or product: value '0' is only for invoices , '1' for bills, and '2' common for both.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage itemMode(Integer itemMode) {
            this.itemMode = Optional.ofNullable(itemMode);
            return this;
        }

        /**
         * <p>Internal class of item or product: value '0' is only for invoices , '1' for bills, and '2' common for both.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "itemMode", nulls = Nulls.SKIP)
        public _FinalStage itemMode(Optional<Integer> itemMode) {
            this.itemMode = itemMode;
            return this;
        }

        @java.lang.Override
        public _FinalStage itemDescription(String itemDescription) {
            this.itemDescription = Optional.ofNullable(itemDescription);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "itemDescription", nulls = Nulls.SKIP)
        public _FinalStage itemDescription(Optional<String> itemDescription) {
            this.itemDescription = itemDescription;
            return this;
        }

        @java.lang.Override
        public _FinalStage itemCommodityCode(String itemCommodityCode) {
            this.itemCommodityCode = Optional.ofNullable(itemCommodityCode);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "itemCommodityCode", nulls = Nulls.SKIP)
        public _FinalStage itemCommodityCode(Optional<String> itemCommodityCode) {
            this.itemCommodityCode = itemCommodityCode;
            return this;
        }

        /**
         * <p>Array of tags classifying item or product.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage itemCategories(List<Optional<String>> itemCategories) {
            this.itemCategories = Optional.ofNullable(itemCategories);
            return this;
        }

        /**
         * <p>Array of tags classifying item or product.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "itemCategories", nulls = Nulls.SKIP)
        public _FinalStage itemCategories(Optional<List<Optional<String>>> itemCategories) {
            this.itemCategories = itemCategories;
            return this;
        }

        /**
         * <p>Identifier of line item.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(Long id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>Identifier of line item.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<Long> id) {
            this.id = id;
            return this;
        }

        /**
         * <p>Timestamp of when line item was created, in UTC.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>Timestamp of when line item was created, in UTC.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public _FinalStage createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        public LineItemQueryRecord build() {
            return new LineItemQueryRecord(
                    createdAt,
                    id,
                    itemCategories,
                    itemCommodityCode,
                    itemCost,
                    itemDescription,
                    itemMode,
                    itemProductCode,
                    itemProductName,
                    itemQty,
                    itemUnitOfMeasure,
                    lastUpdated,
                    pageidentifier,
                    parentOrgName,
                    paypointDbaname,
                    paypointEntryname,
                    paypointLegalname,
                    additionalProperties);
        }
    }
}
