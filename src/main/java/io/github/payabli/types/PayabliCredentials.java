/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PayabliCredentials.Builder.class)
public final class PayabliCredentials {
    private final Optional<String> accountId;

    private final Optional<Double> cfeeFix;

    private final Optional<Double> cfeeFloat;

    private final Optional<Double> cfeeMax;

    private final Optional<Double> cfeeMin;

    private final Optional<Double> maxticket;

    private final Optional<Double> minticket;

    private final Optional<Integer> mode;

    private final Optional<Long> referenceId;

    private final Optional<String> service;

    private final Map<String, Object> additionalProperties;

    private PayabliCredentials(
            Optional<String> accountId,
            Optional<Double> cfeeFix,
            Optional<Double> cfeeFloat,
            Optional<Double> cfeeMax,
            Optional<Double> cfeeMin,
            Optional<Double> maxticket,
            Optional<Double> minticket,
            Optional<Integer> mode,
            Optional<Long> referenceId,
            Optional<String> service,
            Map<String, Object> additionalProperties) {
        this.accountId = accountId;
        this.cfeeFix = cfeeFix;
        this.cfeeFloat = cfeeFloat;
        this.cfeeMax = cfeeMax;
        this.cfeeMin = cfeeMin;
        this.maxticket = maxticket;
        this.minticket = minticket;
        this.mode = mode;
        this.referenceId = referenceId;
        this.service = service;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("accountId")
    public Optional<String> getAccountId() {
        return accountId;
    }

    @JsonProperty("cfeeFix")
    public Optional<Double> getCfeeFix() {
        return cfeeFix;
    }

    @JsonProperty("cfeeFloat")
    public Optional<Double> getCfeeFloat() {
        return cfeeFloat;
    }

    @JsonProperty("cfeeMax")
    public Optional<Double> getCfeeMax() {
        return cfeeMax;
    }

    @JsonProperty("cfeeMin")
    public Optional<Double> getCfeeMin() {
        return cfeeMin;
    }

    @JsonProperty("maxticket")
    public Optional<Double> getMaxticket() {
        return maxticket;
    }

    @JsonProperty("minticket")
    public Optional<Double> getMinticket() {
        return minticket;
    }

    @JsonProperty("mode")
    public Optional<Integer> getMode() {
        return mode;
    }

    @JsonProperty("referenceId")
    public Optional<Long> getReferenceId() {
        return referenceId;
    }

    @JsonProperty("service")
    public Optional<String> getService() {
        return service;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PayabliCredentials && equalTo((PayabliCredentials) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PayabliCredentials other) {
        return accountId.equals(other.accountId)
                && cfeeFix.equals(other.cfeeFix)
                && cfeeFloat.equals(other.cfeeFloat)
                && cfeeMax.equals(other.cfeeMax)
                && cfeeMin.equals(other.cfeeMin)
                && maxticket.equals(other.maxticket)
                && minticket.equals(other.minticket)
                && mode.equals(other.mode)
                && referenceId.equals(other.referenceId)
                && service.equals(other.service);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accountId,
                this.cfeeFix,
                this.cfeeFloat,
                this.cfeeMax,
                this.cfeeMin,
                this.maxticket,
                this.minticket,
                this.mode,
                this.referenceId,
                this.service);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> accountId = Optional.empty();

        private Optional<Double> cfeeFix = Optional.empty();

        private Optional<Double> cfeeFloat = Optional.empty();

        private Optional<Double> cfeeMax = Optional.empty();

        private Optional<Double> cfeeMin = Optional.empty();

        private Optional<Double> maxticket = Optional.empty();

        private Optional<Double> minticket = Optional.empty();

        private Optional<Integer> mode = Optional.empty();

        private Optional<Long> referenceId = Optional.empty();

        private Optional<String> service = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PayabliCredentials other) {
            accountId(other.getAccountId());
            cfeeFix(other.getCfeeFix());
            cfeeFloat(other.getCfeeFloat());
            cfeeMax(other.getCfeeMax());
            cfeeMin(other.getCfeeMin());
            maxticket(other.getMaxticket());
            minticket(other.getMinticket());
            mode(other.getMode());
            referenceId(other.getReferenceId());
            service(other.getService());
            return this;
        }

        @JsonSetter(value = "accountId", nulls = Nulls.SKIP)
        public Builder accountId(Optional<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            this.accountId = Optional.ofNullable(accountId);
            return this;
        }

        @JsonSetter(value = "cfeeFix", nulls = Nulls.SKIP)
        public Builder cfeeFix(Optional<Double> cfeeFix) {
            this.cfeeFix = cfeeFix;
            return this;
        }

        public Builder cfeeFix(Double cfeeFix) {
            this.cfeeFix = Optional.ofNullable(cfeeFix);
            return this;
        }

        @JsonSetter(value = "cfeeFloat", nulls = Nulls.SKIP)
        public Builder cfeeFloat(Optional<Double> cfeeFloat) {
            this.cfeeFloat = cfeeFloat;
            return this;
        }

        public Builder cfeeFloat(Double cfeeFloat) {
            this.cfeeFloat = Optional.ofNullable(cfeeFloat);
            return this;
        }

        @JsonSetter(value = "cfeeMax", nulls = Nulls.SKIP)
        public Builder cfeeMax(Optional<Double> cfeeMax) {
            this.cfeeMax = cfeeMax;
            return this;
        }

        public Builder cfeeMax(Double cfeeMax) {
            this.cfeeMax = Optional.ofNullable(cfeeMax);
            return this;
        }

        @JsonSetter(value = "cfeeMin", nulls = Nulls.SKIP)
        public Builder cfeeMin(Optional<Double> cfeeMin) {
            this.cfeeMin = cfeeMin;
            return this;
        }

        public Builder cfeeMin(Double cfeeMin) {
            this.cfeeMin = Optional.ofNullable(cfeeMin);
            return this;
        }

        @JsonSetter(value = "maxticket", nulls = Nulls.SKIP)
        public Builder maxticket(Optional<Double> maxticket) {
            this.maxticket = maxticket;
            return this;
        }

        public Builder maxticket(Double maxticket) {
            this.maxticket = Optional.ofNullable(maxticket);
            return this;
        }

        @JsonSetter(value = "minticket", nulls = Nulls.SKIP)
        public Builder minticket(Optional<Double> minticket) {
            this.minticket = minticket;
            return this;
        }

        public Builder minticket(Double minticket) {
            this.minticket = Optional.ofNullable(minticket);
            return this;
        }

        @JsonSetter(value = "mode", nulls = Nulls.SKIP)
        public Builder mode(Optional<Integer> mode) {
            this.mode = mode;
            return this;
        }

        public Builder mode(Integer mode) {
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        @JsonSetter(value = "referenceId", nulls = Nulls.SKIP)
        public Builder referenceId(Optional<Long> referenceId) {
            this.referenceId = referenceId;
            return this;
        }

        public Builder referenceId(Long referenceId) {
            this.referenceId = Optional.ofNullable(referenceId);
            return this;
        }

        @JsonSetter(value = "service", nulls = Nulls.SKIP)
        public Builder service(Optional<String> service) {
            this.service = service;
            return this;
        }

        public Builder service(String service) {
            this.service = Optional.ofNullable(service);
            return this;
        }

        public PayabliCredentials build() {
            return new PayabliCredentials(
                    accountId,
                    cfeeFix,
                    cfeeFloat,
                    cfeeMax,
                    cfeeMin,
                    maxticket,
                    minticket,
                    mode,
                    referenceId,
                    service,
                    additionalProperties);
        }
    }
}
