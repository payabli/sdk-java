/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OrgData.Builder.class)
public final class OrgData {
    private final Optional<Long> idOrg;

    private final Optional<String> orgAddress;

    private final Optional<FileContent> orgLogo;

    private final Optional<String> orgName;

    private final Optional<Integer> orgStatus;

    private final Optional<Integer> orgType;

    private final Map<String, Object> additionalProperties;

    private OrgData(
            Optional<Long> idOrg,
            Optional<String> orgAddress,
            Optional<FileContent> orgLogo,
            Optional<String> orgName,
            Optional<Integer> orgStatus,
            Optional<Integer> orgType,
            Map<String, Object> additionalProperties) {
        this.idOrg = idOrg;
        this.orgAddress = orgAddress;
        this.orgLogo = orgLogo;
        this.orgName = orgName;
        this.orgStatus = orgStatus;
        this.orgType = orgType;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("idOrg")
    public Optional<Long> getIdOrg() {
        return idOrg;
    }

    @JsonProperty("orgAddress")
    public Optional<String> getOrgAddress() {
        return orgAddress;
    }

    @JsonProperty("orgLogo")
    public Optional<FileContent> getOrgLogo() {
        return orgLogo;
    }

    @JsonProperty("orgName")
    public Optional<String> getOrgName() {
        return orgName;
    }

    /**
     * @return The paypoint's status.
     * <p>Active - <code>1</code></p>
     * <p>Inactive - 0</p>
     */
    @JsonProperty("orgStatus")
    public Optional<Integer> getOrgStatus() {
        return orgStatus;
    }

    @JsonProperty("orgType")
    public Optional<Integer> getOrgType() {
        return orgType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OrgData && equalTo((OrgData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OrgData other) {
        return idOrg.equals(other.idOrg)
                && orgAddress.equals(other.orgAddress)
                && orgLogo.equals(other.orgLogo)
                && orgName.equals(other.orgName)
                && orgStatus.equals(other.orgStatus)
                && orgType.equals(other.orgType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.idOrg, this.orgAddress, this.orgLogo, this.orgName, this.orgStatus, this.orgType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Long> idOrg = Optional.empty();

        private Optional<String> orgAddress = Optional.empty();

        private Optional<FileContent> orgLogo = Optional.empty();

        private Optional<String> orgName = Optional.empty();

        private Optional<Integer> orgStatus = Optional.empty();

        private Optional<Integer> orgType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OrgData other) {
            idOrg(other.getIdOrg());
            orgAddress(other.getOrgAddress());
            orgLogo(other.getOrgLogo());
            orgName(other.getOrgName());
            orgStatus(other.getOrgStatus());
            orgType(other.getOrgType());
            return this;
        }

        @JsonSetter(value = "idOrg", nulls = Nulls.SKIP)
        public Builder idOrg(Optional<Long> idOrg) {
            this.idOrg = idOrg;
            return this;
        }

        public Builder idOrg(Long idOrg) {
            this.idOrg = Optional.ofNullable(idOrg);
            return this;
        }

        @JsonSetter(value = "orgAddress", nulls = Nulls.SKIP)
        public Builder orgAddress(Optional<String> orgAddress) {
            this.orgAddress = orgAddress;
            return this;
        }

        public Builder orgAddress(String orgAddress) {
            this.orgAddress = Optional.ofNullable(orgAddress);
            return this;
        }

        @JsonSetter(value = "orgLogo", nulls = Nulls.SKIP)
        public Builder orgLogo(Optional<FileContent> orgLogo) {
            this.orgLogo = orgLogo;
            return this;
        }

        public Builder orgLogo(FileContent orgLogo) {
            this.orgLogo = Optional.ofNullable(orgLogo);
            return this;
        }

        @JsonSetter(value = "orgName", nulls = Nulls.SKIP)
        public Builder orgName(Optional<String> orgName) {
            this.orgName = orgName;
            return this;
        }

        public Builder orgName(String orgName) {
            this.orgName = Optional.ofNullable(orgName);
            return this;
        }

        /**
         * <p>The paypoint's status.</p>
         * <p>Active - <code>1</code></p>
         * <p>Inactive - 0</p>
         */
        @JsonSetter(value = "orgStatus", nulls = Nulls.SKIP)
        public Builder orgStatus(Optional<Integer> orgStatus) {
            this.orgStatus = orgStatus;
            return this;
        }

        public Builder orgStatus(Integer orgStatus) {
            this.orgStatus = Optional.ofNullable(orgStatus);
            return this;
        }

        @JsonSetter(value = "orgType", nulls = Nulls.SKIP)
        public Builder orgType(Optional<Integer> orgType) {
            this.orgType = orgType;
            return this;
        }

        public Builder orgType(Integer orgType) {
            this.orgType = Optional.ofNullable(orgType);
            return this;
        }

        public OrgData build() {
            return new OrgData(idOrg, orgAddress, orgLogo, orgName, orgStatus, orgType, additionalProperties);
        }
    }
}
