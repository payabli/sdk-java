/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BDetails.Builder.class)
public final class BDetails {
    private final Optional<LinkData> btype;

    private final Optional<LinkData> dbaname;

    private final Optional<LinkData> ein;

    private final Optional<LinkData> faxnumber;

    private final Optional<LinkData> legalname;

    private final Optional<LinkData> license;

    private final Optional<LinkData> licstate;

    private final Optional<LinkData> phonenumber;

    private final Optional<LinkData> startdate;

    private final Optional<LinkData> taxfillname;

    private final Optional<LinkData> website;

    private final Map<String, Object> additionalProperties;

    private BDetails(
            Optional<LinkData> btype,
            Optional<LinkData> dbaname,
            Optional<LinkData> ein,
            Optional<LinkData> faxnumber,
            Optional<LinkData> legalname,
            Optional<LinkData> license,
            Optional<LinkData> licstate,
            Optional<LinkData> phonenumber,
            Optional<LinkData> startdate,
            Optional<LinkData> taxfillname,
            Optional<LinkData> website,
            Map<String, Object> additionalProperties) {
        this.btype = btype;
        this.dbaname = dbaname;
        this.ein = ein;
        this.faxnumber = faxnumber;
        this.legalname = legalname;
        this.license = license;
        this.licstate = licstate;
        this.phonenumber = phonenumber;
        this.startdate = startdate;
        this.taxfillname = taxfillname;
        this.website = website;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("btype")
    public Optional<LinkData> getBtype() {
        return btype;
    }

    @JsonProperty("dbaname")
    public Optional<LinkData> getDbaname() {
        return dbaname;
    }

    @JsonProperty("ein")
    public Optional<LinkData> getEin() {
        return ein;
    }

    @JsonProperty("faxnumber")
    public Optional<LinkData> getFaxnumber() {
        return faxnumber;
    }

    @JsonProperty("legalname")
    public Optional<LinkData> getLegalname() {
        return legalname;
    }

    @JsonProperty("license")
    public Optional<LinkData> getLicense() {
        return license;
    }

    @JsonProperty("licstate")
    public Optional<LinkData> getLicstate() {
        return licstate;
    }

    @JsonProperty("phonenumber")
    public Optional<LinkData> getPhonenumber() {
        return phonenumber;
    }

    @JsonProperty("startdate")
    public Optional<LinkData> getStartdate() {
        return startdate;
    }

    @JsonProperty("taxfillname")
    public Optional<LinkData> getTaxfillname() {
        return taxfillname;
    }

    @JsonProperty("website")
    public Optional<LinkData> getWebsite() {
        return website;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BDetails && equalTo((BDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BDetails other) {
        return btype.equals(other.btype)
                && dbaname.equals(other.dbaname)
                && ein.equals(other.ein)
                && faxnumber.equals(other.faxnumber)
                && legalname.equals(other.legalname)
                && license.equals(other.license)
                && licstate.equals(other.licstate)
                && phonenumber.equals(other.phonenumber)
                && startdate.equals(other.startdate)
                && taxfillname.equals(other.taxfillname)
                && website.equals(other.website);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.btype,
                this.dbaname,
                this.ein,
                this.faxnumber,
                this.legalname,
                this.license,
                this.licstate,
                this.phonenumber,
                this.startdate,
                this.taxfillname,
                this.website);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<LinkData> btype = Optional.empty();

        private Optional<LinkData> dbaname = Optional.empty();

        private Optional<LinkData> ein = Optional.empty();

        private Optional<LinkData> faxnumber = Optional.empty();

        private Optional<LinkData> legalname = Optional.empty();

        private Optional<LinkData> license = Optional.empty();

        private Optional<LinkData> licstate = Optional.empty();

        private Optional<LinkData> phonenumber = Optional.empty();

        private Optional<LinkData> startdate = Optional.empty();

        private Optional<LinkData> taxfillname = Optional.empty();

        private Optional<LinkData> website = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BDetails other) {
            btype(other.getBtype());
            dbaname(other.getDbaname());
            ein(other.getEin());
            faxnumber(other.getFaxnumber());
            legalname(other.getLegalname());
            license(other.getLicense());
            licstate(other.getLicstate());
            phonenumber(other.getPhonenumber());
            startdate(other.getStartdate());
            taxfillname(other.getTaxfillname());
            website(other.getWebsite());
            return this;
        }

        @JsonSetter(value = "btype", nulls = Nulls.SKIP)
        public Builder btype(Optional<LinkData> btype) {
            this.btype = btype;
            return this;
        }

        public Builder btype(LinkData btype) {
            this.btype = Optional.ofNullable(btype);
            return this;
        }

        @JsonSetter(value = "dbaname", nulls = Nulls.SKIP)
        public Builder dbaname(Optional<LinkData> dbaname) {
            this.dbaname = dbaname;
            return this;
        }

        public Builder dbaname(LinkData dbaname) {
            this.dbaname = Optional.ofNullable(dbaname);
            return this;
        }

        @JsonSetter(value = "ein", nulls = Nulls.SKIP)
        public Builder ein(Optional<LinkData> ein) {
            this.ein = ein;
            return this;
        }

        public Builder ein(LinkData ein) {
            this.ein = Optional.ofNullable(ein);
            return this;
        }

        @JsonSetter(value = "faxnumber", nulls = Nulls.SKIP)
        public Builder faxnumber(Optional<LinkData> faxnumber) {
            this.faxnumber = faxnumber;
            return this;
        }

        public Builder faxnumber(LinkData faxnumber) {
            this.faxnumber = Optional.ofNullable(faxnumber);
            return this;
        }

        @JsonSetter(value = "legalname", nulls = Nulls.SKIP)
        public Builder legalname(Optional<LinkData> legalname) {
            this.legalname = legalname;
            return this;
        }

        public Builder legalname(LinkData legalname) {
            this.legalname = Optional.ofNullable(legalname);
            return this;
        }

        @JsonSetter(value = "license", nulls = Nulls.SKIP)
        public Builder license(Optional<LinkData> license) {
            this.license = license;
            return this;
        }

        public Builder license(LinkData license) {
            this.license = Optional.ofNullable(license);
            return this;
        }

        @JsonSetter(value = "licstate", nulls = Nulls.SKIP)
        public Builder licstate(Optional<LinkData> licstate) {
            this.licstate = licstate;
            return this;
        }

        public Builder licstate(LinkData licstate) {
            this.licstate = Optional.ofNullable(licstate);
            return this;
        }

        @JsonSetter(value = "phonenumber", nulls = Nulls.SKIP)
        public Builder phonenumber(Optional<LinkData> phonenumber) {
            this.phonenumber = phonenumber;
            return this;
        }

        public Builder phonenumber(LinkData phonenumber) {
            this.phonenumber = Optional.ofNullable(phonenumber);
            return this;
        }

        @JsonSetter(value = "startdate", nulls = Nulls.SKIP)
        public Builder startdate(Optional<LinkData> startdate) {
            this.startdate = startdate;
            return this;
        }

        public Builder startdate(LinkData startdate) {
            this.startdate = Optional.ofNullable(startdate);
            return this;
        }

        @JsonSetter(value = "taxfillname", nulls = Nulls.SKIP)
        public Builder taxfillname(Optional<LinkData> taxfillname) {
            this.taxfillname = taxfillname;
            return this;
        }

        public Builder taxfillname(LinkData taxfillname) {
            this.taxfillname = Optional.ofNullable(taxfillname);
            return this;
        }

        @JsonSetter(value = "website", nulls = Nulls.SKIP)
        public Builder website(Optional<LinkData> website) {
            this.website = website;
            return this;
        }

        public Builder website(LinkData website) {
            this.website = Optional.ofNullable(website);
            return this;
        }

        public BDetails build() {
            return new BDetails(
                    btype,
                    dbaname,
                    ein,
                    faxnumber,
                    legalname,
                    license,
                    licstate,
                    phonenumber,
                    startdate,
                    taxfillname,
                    website,
                    additionalProperties);
        }
    }
}
