/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UserData.Builder.class)
public final class UserData {
    private final Optional<List<UsrAccess>> access;

    private final Optional<Map<String, Optional<Map<String, Object>>>> additionalData;

    private final Optional<String> email;

    private final Optional<String> language;

    private final Optional<MfaData> mfaData;

    private final Optional<String> name;

    private final Optional<String> phone;

    private final Optional<String> pwd;

    private final Optional<List<OrgScope>> scope;

    private final Optional<Integer> timeZone;

    private final Optional<Integer> usrStatus;

    private final Map<String, Object> additionalProperties;

    private UserData(
            Optional<List<UsrAccess>> access,
            Optional<Map<String, Optional<Map<String, Object>>>> additionalData,
            Optional<String> email,
            Optional<String> language,
            Optional<MfaData> mfaData,
            Optional<String> name,
            Optional<String> phone,
            Optional<String> pwd,
            Optional<List<OrgScope>> scope,
            Optional<Integer> timeZone,
            Optional<Integer> usrStatus,
            Map<String, Object> additionalProperties) {
        this.access = access;
        this.additionalData = additionalData;
        this.email = email;
        this.language = language;
        this.mfaData = mfaData;
        this.name = name;
        this.phone = phone;
        this.pwd = pwd;
        this.scope = scope;
        this.timeZone = timeZone;
        this.usrStatus = usrStatus;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("access")
    public Optional<List<UsrAccess>> getAccess() {
        return access;
    }

    @JsonProperty("additionalData")
    public Optional<Map<String, Optional<Map<String, Object>>>> getAdditionalData() {
        return additionalData;
    }

    /**
     * @return The user's email address.
     */
    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    @JsonProperty("language")
    public Optional<String> getLanguage() {
        return language;
    }

    @JsonProperty("mfaData")
    public Optional<MfaData> getMfaData() {
        return mfaData;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The user's phone number.
     */
    @JsonProperty("phone")
    public Optional<String> getPhone() {
        return phone;
    }

    @JsonProperty("pwd")
    public Optional<String> getPwd() {
        return pwd;
    }

    @JsonProperty("scope")
    public Optional<List<OrgScope>> getScope() {
        return scope;
    }

    @JsonProperty("timeZone")
    public Optional<Integer> getTimeZone() {
        return timeZone;
    }

    @JsonProperty("usrStatus")
    public Optional<Integer> getUsrStatus() {
        return usrStatus;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserData && equalTo((UserData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserData other) {
        return access.equals(other.access)
                && additionalData.equals(other.additionalData)
                && email.equals(other.email)
                && language.equals(other.language)
                && mfaData.equals(other.mfaData)
                && name.equals(other.name)
                && phone.equals(other.phone)
                && pwd.equals(other.pwd)
                && scope.equals(other.scope)
                && timeZone.equals(other.timeZone)
                && usrStatus.equals(other.usrStatus);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.access,
                this.additionalData,
                this.email,
                this.language,
                this.mfaData,
                this.name,
                this.phone,
                this.pwd,
                this.scope,
                this.timeZone,
                this.usrStatus);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<UsrAccess>> access = Optional.empty();

        private Optional<Map<String, Optional<Map<String, Object>>>> additionalData = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> language = Optional.empty();

        private Optional<MfaData> mfaData = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> phone = Optional.empty();

        private Optional<String> pwd = Optional.empty();

        private Optional<List<OrgScope>> scope = Optional.empty();

        private Optional<Integer> timeZone = Optional.empty();

        private Optional<Integer> usrStatus = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UserData other) {
            access(other.getAccess());
            additionalData(other.getAdditionalData());
            email(other.getEmail());
            language(other.getLanguage());
            mfaData(other.getMfaData());
            name(other.getName());
            phone(other.getPhone());
            pwd(other.getPwd());
            scope(other.getScope());
            timeZone(other.getTimeZone());
            usrStatus(other.getUsrStatus());
            return this;
        }

        @JsonSetter(value = "access", nulls = Nulls.SKIP)
        public Builder access(Optional<List<UsrAccess>> access) {
            this.access = access;
            return this;
        }

        public Builder access(List<UsrAccess> access) {
            this.access = Optional.ofNullable(access);
            return this;
        }

        @JsonSetter(value = "additionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<Map<String, Optional<Map<String, Object>>>> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(Map<String, Optional<Map<String, Object>>> additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        /**
         * <p>The user's email address.</p>
         */
        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        @JsonSetter(value = "language", nulls = Nulls.SKIP)
        public Builder language(Optional<String> language) {
            this.language = language;
            return this;
        }

        public Builder language(String language) {
            this.language = Optional.ofNullable(language);
            return this;
        }

        @JsonSetter(value = "mfaData", nulls = Nulls.SKIP)
        public Builder mfaData(Optional<MfaData> mfaData) {
            this.mfaData = mfaData;
            return this;
        }

        public Builder mfaData(MfaData mfaData) {
            this.mfaData = Optional.ofNullable(mfaData);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>The user's phone number.</p>
         */
        @JsonSetter(value = "phone", nulls = Nulls.SKIP)
        public Builder phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        @JsonSetter(value = "pwd", nulls = Nulls.SKIP)
        public Builder pwd(Optional<String> pwd) {
            this.pwd = pwd;
            return this;
        }

        public Builder pwd(String pwd) {
            this.pwd = Optional.ofNullable(pwd);
            return this;
        }

        @JsonSetter(value = "scope", nulls = Nulls.SKIP)
        public Builder scope(Optional<List<OrgScope>> scope) {
            this.scope = scope;
            return this;
        }

        public Builder scope(List<OrgScope> scope) {
            this.scope = Optional.ofNullable(scope);
            return this;
        }

        @JsonSetter(value = "timeZone", nulls = Nulls.SKIP)
        public Builder timeZone(Optional<Integer> timeZone) {
            this.timeZone = timeZone;
            return this;
        }

        public Builder timeZone(Integer timeZone) {
            this.timeZone = Optional.ofNullable(timeZone);
            return this;
        }

        @JsonSetter(value = "usrStatus", nulls = Nulls.SKIP)
        public Builder usrStatus(Optional<Integer> usrStatus) {
            this.usrStatus = usrStatus;
            return this;
        }

        public Builder usrStatus(Integer usrStatus) {
            this.usrStatus = Optional.ofNullable(usrStatus);
            return this;
        }

        public UserData build() {
            return new UserData(
                    access,
                    additionalData,
                    email,
                    language,
                    mfaData,
                    name,
                    phone,
                    pwd,
                    scope,
                    timeZone,
                    usrStatus,
                    additionalProperties);
        }
    }
}
