/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApplicationDetailsRecordMessagesItem.Builder.class)
public final class ApplicationDetailsRecordMessagesItem {
    private final Optional<String> content;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<Integer> currentApplicationStatus;

    private final Optional<Integer> currentApplicationSubStatus;

    private final Optional<Integer> id;

    private final Optional<Integer> messageType;

    private final Optional<Integer> originalApplicationStatus;

    private final Optional<Integer> originalApplicationSubStatus;

    private final Optional<Integer> roomId;

    private final Optional<Integer> userId;

    private final Optional<String> userName;

    private final Map<String, Object> additionalProperties;

    private ApplicationDetailsRecordMessagesItem(
            Optional<String> content,
            Optional<OffsetDateTime> createdAt,
            Optional<Integer> currentApplicationStatus,
            Optional<Integer> currentApplicationSubStatus,
            Optional<Integer> id,
            Optional<Integer> messageType,
            Optional<Integer> originalApplicationStatus,
            Optional<Integer> originalApplicationSubStatus,
            Optional<Integer> roomId,
            Optional<Integer> userId,
            Optional<String> userName,
            Map<String, Object> additionalProperties) {
        this.content = content;
        this.createdAt = createdAt;
        this.currentApplicationStatus = currentApplicationStatus;
        this.currentApplicationSubStatus = currentApplicationSubStatus;
        this.id = id;
        this.messageType = messageType;
        this.originalApplicationStatus = originalApplicationStatus;
        this.originalApplicationSubStatus = originalApplicationSubStatus;
        this.roomId = roomId;
        this.userId = userId;
        this.userName = userName;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("content")
    public Optional<String> getContent() {
        return content;
    }

    @JsonProperty("createdAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("currentApplicationStatus")
    public Optional<Integer> getCurrentApplicationStatus() {
        return currentApplicationStatus;
    }

    @JsonProperty("currentApplicationSubStatus")
    public Optional<Integer> getCurrentApplicationSubStatus() {
        return currentApplicationSubStatus;
    }

    @JsonProperty("id")
    public Optional<Integer> getId() {
        return id;
    }

    @JsonProperty("messageType")
    public Optional<Integer> getMessageType() {
        return messageType;
    }

    @JsonProperty("originalApplicationStatus")
    public Optional<Integer> getOriginalApplicationStatus() {
        return originalApplicationStatus;
    }

    @JsonProperty("originalApplicationSubStatus")
    public Optional<Integer> getOriginalApplicationSubStatus() {
        return originalApplicationSubStatus;
    }

    @JsonProperty("roomId")
    public Optional<Integer> getRoomId() {
        return roomId;
    }

    @JsonProperty("userId")
    public Optional<Integer> getUserId() {
        return userId;
    }

    @JsonProperty("userName")
    public Optional<String> getUserName() {
        return userName;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApplicationDetailsRecordMessagesItem
                && equalTo((ApplicationDetailsRecordMessagesItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApplicationDetailsRecordMessagesItem other) {
        return content.equals(other.content)
                && createdAt.equals(other.createdAt)
                && currentApplicationStatus.equals(other.currentApplicationStatus)
                && currentApplicationSubStatus.equals(other.currentApplicationSubStatus)
                && id.equals(other.id)
                && messageType.equals(other.messageType)
                && originalApplicationStatus.equals(other.originalApplicationStatus)
                && originalApplicationSubStatus.equals(other.originalApplicationSubStatus)
                && roomId.equals(other.roomId)
                && userId.equals(other.userId)
                && userName.equals(other.userName);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.content,
                this.createdAt,
                this.currentApplicationStatus,
                this.currentApplicationSubStatus,
                this.id,
                this.messageType,
                this.originalApplicationStatus,
                this.originalApplicationSubStatus,
                this.roomId,
                this.userId,
                this.userName);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> content = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<Integer> currentApplicationStatus = Optional.empty();

        private Optional<Integer> currentApplicationSubStatus = Optional.empty();

        private Optional<Integer> id = Optional.empty();

        private Optional<Integer> messageType = Optional.empty();

        private Optional<Integer> originalApplicationStatus = Optional.empty();

        private Optional<Integer> originalApplicationSubStatus = Optional.empty();

        private Optional<Integer> roomId = Optional.empty();

        private Optional<Integer> userId = Optional.empty();

        private Optional<String> userName = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ApplicationDetailsRecordMessagesItem other) {
            content(other.getContent());
            createdAt(other.getCreatedAt());
            currentApplicationStatus(other.getCurrentApplicationStatus());
            currentApplicationSubStatus(other.getCurrentApplicationSubStatus());
            id(other.getId());
            messageType(other.getMessageType());
            originalApplicationStatus(other.getOriginalApplicationStatus());
            originalApplicationSubStatus(other.getOriginalApplicationSubStatus());
            roomId(other.getRoomId());
            userId(other.getUserId());
            userName(other.getUserName());
            return this;
        }

        @JsonSetter(value = "content", nulls = Nulls.SKIP)
        public Builder content(Optional<String> content) {
            this.content = content;
            return this;
        }

        public Builder content(String content) {
            this.content = Optional.ofNullable(content);
            return this;
        }

        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "currentApplicationStatus", nulls = Nulls.SKIP)
        public Builder currentApplicationStatus(Optional<Integer> currentApplicationStatus) {
            this.currentApplicationStatus = currentApplicationStatus;
            return this;
        }

        public Builder currentApplicationStatus(Integer currentApplicationStatus) {
            this.currentApplicationStatus = Optional.ofNullable(currentApplicationStatus);
            return this;
        }

        @JsonSetter(value = "currentApplicationSubStatus", nulls = Nulls.SKIP)
        public Builder currentApplicationSubStatus(Optional<Integer> currentApplicationSubStatus) {
            this.currentApplicationSubStatus = currentApplicationSubStatus;
            return this;
        }

        public Builder currentApplicationSubStatus(Integer currentApplicationSubStatus) {
            this.currentApplicationSubStatus = Optional.ofNullable(currentApplicationSubStatus);
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<Integer> id) {
            this.id = id;
            return this;
        }

        public Builder id(Integer id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "messageType", nulls = Nulls.SKIP)
        public Builder messageType(Optional<Integer> messageType) {
            this.messageType = messageType;
            return this;
        }

        public Builder messageType(Integer messageType) {
            this.messageType = Optional.ofNullable(messageType);
            return this;
        }

        @JsonSetter(value = "originalApplicationStatus", nulls = Nulls.SKIP)
        public Builder originalApplicationStatus(Optional<Integer> originalApplicationStatus) {
            this.originalApplicationStatus = originalApplicationStatus;
            return this;
        }

        public Builder originalApplicationStatus(Integer originalApplicationStatus) {
            this.originalApplicationStatus = Optional.ofNullable(originalApplicationStatus);
            return this;
        }

        @JsonSetter(value = "originalApplicationSubStatus", nulls = Nulls.SKIP)
        public Builder originalApplicationSubStatus(Optional<Integer> originalApplicationSubStatus) {
            this.originalApplicationSubStatus = originalApplicationSubStatus;
            return this;
        }

        public Builder originalApplicationSubStatus(Integer originalApplicationSubStatus) {
            this.originalApplicationSubStatus = Optional.ofNullable(originalApplicationSubStatus);
            return this;
        }

        @JsonSetter(value = "roomId", nulls = Nulls.SKIP)
        public Builder roomId(Optional<Integer> roomId) {
            this.roomId = roomId;
            return this;
        }

        public Builder roomId(Integer roomId) {
            this.roomId = Optional.ofNullable(roomId);
            return this;
        }

        @JsonSetter(value = "userId", nulls = Nulls.SKIP)
        public Builder userId(Optional<Integer> userId) {
            this.userId = userId;
            return this;
        }

        public Builder userId(Integer userId) {
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        @JsonSetter(value = "userName", nulls = Nulls.SKIP)
        public Builder userName(Optional<String> userName) {
            this.userName = userName;
            return this;
        }

        public Builder userName(String userName) {
            this.userName = Optional.ofNullable(userName);
            return this;
        }

        public ApplicationDetailsRecordMessagesItem build() {
            return new ApplicationDetailsRecordMessagesItem(
                    content,
                    createdAt,
                    currentApplicationStatus,
                    currentApplicationSubStatus,
                    id,
                    messageType,
                    originalApplicationStatus,
                    originalApplicationSubStatus,
                    roomId,
                    userId,
                    userName,
                    additionalProperties);
        }
    }
}
