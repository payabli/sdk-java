/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BinData.Builder.class)
public final class BinData {
    private final Optional<String> binMatchedLength;

    private final Optional<String> binCardBrand;

    private final Optional<String> binCardType;

    private final Optional<String> binCardCategory;

    private final Optional<String> binCardIssuer;

    private final Optional<String> binCardIssuerCountry;

    private final Optional<String> binCardIssuerCountryCodeA2;

    private final Optional<String> binCardIssuerCountryNumber;

    private final Optional<String> binCardIsRegulated;

    private final Optional<String> binCardUseCategory;

    private final Optional<String> binCardIssuerCountryCodeA3;

    private final Map<String, Object> additionalProperties;

    private BinData(
            Optional<String> binMatchedLength,
            Optional<String> binCardBrand,
            Optional<String> binCardType,
            Optional<String> binCardCategory,
            Optional<String> binCardIssuer,
            Optional<String> binCardIssuerCountry,
            Optional<String> binCardIssuerCountryCodeA2,
            Optional<String> binCardIssuerCountryNumber,
            Optional<String> binCardIsRegulated,
            Optional<String> binCardUseCategory,
            Optional<String> binCardIssuerCountryCodeA3,
            Map<String, Object> additionalProperties) {
        this.binMatchedLength = binMatchedLength;
        this.binCardBrand = binCardBrand;
        this.binCardType = binCardType;
        this.binCardCategory = binCardCategory;
        this.binCardIssuer = binCardIssuer;
        this.binCardIssuerCountry = binCardIssuerCountry;
        this.binCardIssuerCountryCodeA2 = binCardIssuerCountryCodeA2;
        this.binCardIssuerCountryNumber = binCardIssuerCountryNumber;
        this.binCardIsRegulated = binCardIsRegulated;
        this.binCardUseCategory = binCardUseCategory;
        this.binCardIssuerCountryCodeA3 = binCardIssuerCountryCodeA3;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The number of characters from the beginning of the card number that
     * were matched against a Bank Identification Number (BIN) or the Card
     * Range table.
     */
    @JsonProperty("binMatchedLength")
    public Optional<String> getBinMatchedLength() {
        return binMatchedLength;
    }

    /**
     * @return The card brand. For example, Visa, Mastercard, American Express,
     * Discover.
     */
    @JsonProperty("binCardBrand")
    public Optional<String> getBinCardBrand() {
        return binCardBrand;
    }

    /**
     * @return The type of card: Credit or Debit.
     */
    @JsonProperty("binCardType")
    public Optional<String> getBinCardType() {
        return binCardType;
    }

    /**
     * @return The category of the card, which indicates the card product. For example: Standard, Gold, Platinum, etc. The binCardCategory for prepaid cards is marked <code>PREPAID</code>.
     */
    @JsonProperty("binCardCategory")
    public Optional<String> getBinCardCategory() {
        return binCardCategory;
    }

    /**
     * @return The name of the financial institution that issued the card.
     */
    @JsonProperty("binCardIssuer")
    public Optional<String> getBinCardIssuer() {
        return binCardIssuer;
    }

    /**
     * @return The issuing financial institution's country name.
     */
    @JsonProperty("binCardIssuerCountry")
    public Optional<String> getBinCardIssuerCountry() {
        return binCardIssuerCountry;
    }

    /**
     * @return The issuing financial institution's two-character ISO country code. See <a href="https://www.iso.org/obp/ui/#search">this resource</a> for a list of codes.
     */
    @JsonProperty("binCardIssuerCountryCodeA2")
    public Optional<String> getBinCardIssuerCountryCodeA2() {
        return binCardIssuerCountryCodeA2;
    }

    /**
     * @return The issuing financial institution's ISO standard numeric country code. See <a href="https://www.iso.org/obp/ui/#search">this resource</a> for a list of codes.
     */
    @JsonProperty("binCardIssuerCountryNumber")
    public Optional<String> getBinCardIssuerCountryNumber() {
        return binCardIssuerCountryNumber;
    }

    /**
     * @return Indicates whether the card is regulated.
     */
    @JsonProperty("binCardIsRegulated")
    public Optional<String> getBinCardIsRegulated() {
        return binCardIsRegulated;
    }

    /**
     * @return The use category classification for the card.
     */
    @JsonProperty("binCardUseCategory")
    public Optional<String> getBinCardUseCategory() {
        return binCardUseCategory;
    }

    /**
     * @return The issuing financial institution's three-character ISO country code.
     * See <a href="https://www.iso.org/obp/ui/#search">this resource</a> for a list of
     * codes.
     */
    @JsonProperty("binCardIssuerCountryCodeA3")
    public Optional<String> getBinCardIssuerCountryCodeA3() {
        return binCardIssuerCountryCodeA3;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BinData && equalTo((BinData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BinData other) {
        return binMatchedLength.equals(other.binMatchedLength)
                && binCardBrand.equals(other.binCardBrand)
                && binCardType.equals(other.binCardType)
                && binCardCategory.equals(other.binCardCategory)
                && binCardIssuer.equals(other.binCardIssuer)
                && binCardIssuerCountry.equals(other.binCardIssuerCountry)
                && binCardIssuerCountryCodeA2.equals(other.binCardIssuerCountryCodeA2)
                && binCardIssuerCountryNumber.equals(other.binCardIssuerCountryNumber)
                && binCardIsRegulated.equals(other.binCardIsRegulated)
                && binCardUseCategory.equals(other.binCardUseCategory)
                && binCardIssuerCountryCodeA3.equals(other.binCardIssuerCountryCodeA3);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.binMatchedLength,
                this.binCardBrand,
                this.binCardType,
                this.binCardCategory,
                this.binCardIssuer,
                this.binCardIssuerCountry,
                this.binCardIssuerCountryCodeA2,
                this.binCardIssuerCountryNumber,
                this.binCardIsRegulated,
                this.binCardUseCategory,
                this.binCardIssuerCountryCodeA3);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> binMatchedLength = Optional.empty();

        private Optional<String> binCardBrand = Optional.empty();

        private Optional<String> binCardType = Optional.empty();

        private Optional<String> binCardCategory = Optional.empty();

        private Optional<String> binCardIssuer = Optional.empty();

        private Optional<String> binCardIssuerCountry = Optional.empty();

        private Optional<String> binCardIssuerCountryCodeA2 = Optional.empty();

        private Optional<String> binCardIssuerCountryNumber = Optional.empty();

        private Optional<String> binCardIsRegulated = Optional.empty();

        private Optional<String> binCardUseCategory = Optional.empty();

        private Optional<String> binCardIssuerCountryCodeA3 = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BinData other) {
            binMatchedLength(other.getBinMatchedLength());
            binCardBrand(other.getBinCardBrand());
            binCardType(other.getBinCardType());
            binCardCategory(other.getBinCardCategory());
            binCardIssuer(other.getBinCardIssuer());
            binCardIssuerCountry(other.getBinCardIssuerCountry());
            binCardIssuerCountryCodeA2(other.getBinCardIssuerCountryCodeA2());
            binCardIssuerCountryNumber(other.getBinCardIssuerCountryNumber());
            binCardIsRegulated(other.getBinCardIsRegulated());
            binCardUseCategory(other.getBinCardUseCategory());
            binCardIssuerCountryCodeA3(other.getBinCardIssuerCountryCodeA3());
            return this;
        }

        /**
         * <p>The number of characters from the beginning of the card number that
         * were matched against a Bank Identification Number (BIN) or the Card
         * Range table.</p>
         */
        @JsonSetter(value = "binMatchedLength", nulls = Nulls.SKIP)
        public Builder binMatchedLength(Optional<String> binMatchedLength) {
            this.binMatchedLength = binMatchedLength;
            return this;
        }

        public Builder binMatchedLength(String binMatchedLength) {
            this.binMatchedLength = Optional.ofNullable(binMatchedLength);
            return this;
        }

        /**
         * <p>The card brand. For example, Visa, Mastercard, American Express,
         * Discover.</p>
         */
        @JsonSetter(value = "binCardBrand", nulls = Nulls.SKIP)
        public Builder binCardBrand(Optional<String> binCardBrand) {
            this.binCardBrand = binCardBrand;
            return this;
        }

        public Builder binCardBrand(String binCardBrand) {
            this.binCardBrand = Optional.ofNullable(binCardBrand);
            return this;
        }

        /**
         * <p>The type of card: Credit or Debit.</p>
         */
        @JsonSetter(value = "binCardType", nulls = Nulls.SKIP)
        public Builder binCardType(Optional<String> binCardType) {
            this.binCardType = binCardType;
            return this;
        }

        public Builder binCardType(String binCardType) {
            this.binCardType = Optional.ofNullable(binCardType);
            return this;
        }

        /**
         * <p>The category of the card, which indicates the card product. For example: Standard, Gold, Platinum, etc. The binCardCategory for prepaid cards is marked <code>PREPAID</code>.</p>
         */
        @JsonSetter(value = "binCardCategory", nulls = Nulls.SKIP)
        public Builder binCardCategory(Optional<String> binCardCategory) {
            this.binCardCategory = binCardCategory;
            return this;
        }

        public Builder binCardCategory(String binCardCategory) {
            this.binCardCategory = Optional.ofNullable(binCardCategory);
            return this;
        }

        /**
         * <p>The name of the financial institution that issued the card.</p>
         */
        @JsonSetter(value = "binCardIssuer", nulls = Nulls.SKIP)
        public Builder binCardIssuer(Optional<String> binCardIssuer) {
            this.binCardIssuer = binCardIssuer;
            return this;
        }

        public Builder binCardIssuer(String binCardIssuer) {
            this.binCardIssuer = Optional.ofNullable(binCardIssuer);
            return this;
        }

        /**
         * <p>The issuing financial institution's country name.</p>
         */
        @JsonSetter(value = "binCardIssuerCountry", nulls = Nulls.SKIP)
        public Builder binCardIssuerCountry(Optional<String> binCardIssuerCountry) {
            this.binCardIssuerCountry = binCardIssuerCountry;
            return this;
        }

        public Builder binCardIssuerCountry(String binCardIssuerCountry) {
            this.binCardIssuerCountry = Optional.ofNullable(binCardIssuerCountry);
            return this;
        }

        /**
         * <p>The issuing financial institution's two-character ISO country code. See <a href="https://www.iso.org/obp/ui/#search">this resource</a> for a list of codes.</p>
         */
        @JsonSetter(value = "binCardIssuerCountryCodeA2", nulls = Nulls.SKIP)
        public Builder binCardIssuerCountryCodeA2(Optional<String> binCardIssuerCountryCodeA2) {
            this.binCardIssuerCountryCodeA2 = binCardIssuerCountryCodeA2;
            return this;
        }

        public Builder binCardIssuerCountryCodeA2(String binCardIssuerCountryCodeA2) {
            this.binCardIssuerCountryCodeA2 = Optional.ofNullable(binCardIssuerCountryCodeA2);
            return this;
        }

        /**
         * <p>The issuing financial institution's ISO standard numeric country code. See <a href="https://www.iso.org/obp/ui/#search">this resource</a> for a list of codes.</p>
         */
        @JsonSetter(value = "binCardIssuerCountryNumber", nulls = Nulls.SKIP)
        public Builder binCardIssuerCountryNumber(Optional<String> binCardIssuerCountryNumber) {
            this.binCardIssuerCountryNumber = binCardIssuerCountryNumber;
            return this;
        }

        public Builder binCardIssuerCountryNumber(String binCardIssuerCountryNumber) {
            this.binCardIssuerCountryNumber = Optional.ofNullable(binCardIssuerCountryNumber);
            return this;
        }

        /**
         * <p>Indicates whether the card is regulated.</p>
         */
        @JsonSetter(value = "binCardIsRegulated", nulls = Nulls.SKIP)
        public Builder binCardIsRegulated(Optional<String> binCardIsRegulated) {
            this.binCardIsRegulated = binCardIsRegulated;
            return this;
        }

        public Builder binCardIsRegulated(String binCardIsRegulated) {
            this.binCardIsRegulated = Optional.ofNullable(binCardIsRegulated);
            return this;
        }

        /**
         * <p>The use category classification for the card.</p>
         */
        @JsonSetter(value = "binCardUseCategory", nulls = Nulls.SKIP)
        public Builder binCardUseCategory(Optional<String> binCardUseCategory) {
            this.binCardUseCategory = binCardUseCategory;
            return this;
        }

        public Builder binCardUseCategory(String binCardUseCategory) {
            this.binCardUseCategory = Optional.ofNullable(binCardUseCategory);
            return this;
        }

        /**
         * <p>The issuing financial institution's three-character ISO country code.
         * See <a href="https://www.iso.org/obp/ui/#search">this resource</a> for a list of
         * codes.</p>
         */
        @JsonSetter(value = "binCardIssuerCountryCodeA3", nulls = Nulls.SKIP)
        public Builder binCardIssuerCountryCodeA3(Optional<String> binCardIssuerCountryCodeA3) {
            this.binCardIssuerCountryCodeA3 = binCardIssuerCountryCodeA3;
            return this;
        }

        public Builder binCardIssuerCountryCodeA3(String binCardIssuerCountryCodeA3) {
            this.binCardIssuerCountryCodeA3 = Optional.ofNullable(binCardIssuerCountryCodeA3);
            return this;
        }

        public BinData build() {
            return new BinData(
                    binMatchedLength,
                    binCardBrand,
                    binCardType,
                    binCardCategory,
                    binCardIssuer,
                    binCardIssuerCountry,
                    binCardIssuerCountryCodeA2,
                    binCardIssuerCountryNumber,
                    binCardIsRegulated,
                    binCardUseCategory,
                    binCardIssuerCountryCodeA3,
                    additionalProperties);
        }
    }
}
