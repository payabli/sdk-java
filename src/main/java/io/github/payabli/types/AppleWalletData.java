/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AppleWalletData.Builder.class)
public final class AppleWalletData {
    private final Optional<String> entry;

    private final Optional<String> applePayMerchantId;

    private final Optional<List<String>> domainNames;

    private final Optional<String> paypointName;

    private final Optional<String> paypointUrl;

    private final Optional<OffsetDateTime> markedForDeletionAt;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<OffsetDateTime> updatedAt;

    private final Optional<String> id;

    private final Optional<String> type;

    private final Map<String, Object> additionalProperties;

    private AppleWalletData(
            Optional<String> entry,
            Optional<String> applePayMerchantId,
            Optional<List<String>> domainNames,
            Optional<String> paypointName,
            Optional<String> paypointUrl,
            Optional<OffsetDateTime> markedForDeletionAt,
            Optional<OffsetDateTime> createdAt,
            Optional<OffsetDateTime> updatedAt,
            Optional<String> id,
            Optional<String> type,
            Map<String, Object> additionalProperties) {
        this.entry = entry;
        this.applePayMerchantId = applePayMerchantId;
        this.domainNames = domainNames;
        this.paypointName = paypointName;
        this.paypointUrl = paypointUrl;
        this.markedForDeletionAt = markedForDeletionAt;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.id = id;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("entry")
    public Optional<String> getEntry() {
        return entry;
    }

    /**
     * @return The Apple Pay merchant identifier.
     */
    @JsonProperty("applePayMerchantId")
    public Optional<String> getApplePayMerchantId() {
        return applePayMerchantId;
    }

    /**
     * @return A list of domain names that are enabled for this paypoint.
     */
    @JsonProperty("domainNames")
    public Optional<List<String>> getDomainNames() {
        return domainNames;
    }

    @JsonProperty("paypointName")
    public Optional<String> getPaypointName() {
        return paypointName;
    }

    /**
     * @return The paypoint URL.
     */
    @JsonProperty("paypointUrl")
    public Optional<String> getPaypointUrl() {
        return paypointUrl;
    }

    /**
     * @return The date and time a paypoint's Apple Pay registration was scheduled for deletion. The paypoint will be unregistered from Apple Pay permanently 30 days from this value.
     */
    @JsonProperty("markedForDeletionAt")
    public Optional<OffsetDateTime> getMarkedForDeletionAt() {
        return markedForDeletionAt;
    }

    @JsonProperty("createdAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("updatedAt")
    public Optional<OffsetDateTime> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return Internal ID for the Apple Pay paypoint registration update.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The record type, in this context it will always be <code>ApplePayRegistration</code>.
     */
    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AppleWalletData && equalTo((AppleWalletData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AppleWalletData other) {
        return entry.equals(other.entry)
                && applePayMerchantId.equals(other.applePayMerchantId)
                && domainNames.equals(other.domainNames)
                && paypointName.equals(other.paypointName)
                && paypointUrl.equals(other.paypointUrl)
                && markedForDeletionAt.equals(other.markedForDeletionAt)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && id.equals(other.id)
                && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.entry,
                this.applePayMerchantId,
                this.domainNames,
                this.paypointName,
                this.paypointUrl,
                this.markedForDeletionAt,
                this.createdAt,
                this.updatedAt,
                this.id,
                this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> entry = Optional.empty();

        private Optional<String> applePayMerchantId = Optional.empty();

        private Optional<List<String>> domainNames = Optional.empty();

        private Optional<String> paypointName = Optional.empty();

        private Optional<String> paypointUrl = Optional.empty();

        private Optional<OffsetDateTime> markedForDeletionAt = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<String> type = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AppleWalletData other) {
            entry(other.getEntry());
            applePayMerchantId(other.getApplePayMerchantId());
            domainNames(other.getDomainNames());
            paypointName(other.getPaypointName());
            paypointUrl(other.getPaypointUrl());
            markedForDeletionAt(other.getMarkedForDeletionAt());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            id(other.getId());
            type(other.getType());
            return this;
        }

        @JsonSetter(value = "entry", nulls = Nulls.SKIP)
        public Builder entry(Optional<String> entry) {
            this.entry = entry;
            return this;
        }

        public Builder entry(String entry) {
            this.entry = Optional.ofNullable(entry);
            return this;
        }

        /**
         * <p>The Apple Pay merchant identifier.</p>
         */
        @JsonSetter(value = "applePayMerchantId", nulls = Nulls.SKIP)
        public Builder applePayMerchantId(Optional<String> applePayMerchantId) {
            this.applePayMerchantId = applePayMerchantId;
            return this;
        }

        public Builder applePayMerchantId(String applePayMerchantId) {
            this.applePayMerchantId = Optional.ofNullable(applePayMerchantId);
            return this;
        }

        /**
         * <p>A list of domain names that are enabled for this paypoint.</p>
         */
        @JsonSetter(value = "domainNames", nulls = Nulls.SKIP)
        public Builder domainNames(Optional<List<String>> domainNames) {
            this.domainNames = domainNames;
            return this;
        }

        public Builder domainNames(List<String> domainNames) {
            this.domainNames = Optional.ofNullable(domainNames);
            return this;
        }

        @JsonSetter(value = "paypointName", nulls = Nulls.SKIP)
        public Builder paypointName(Optional<String> paypointName) {
            this.paypointName = paypointName;
            return this;
        }

        public Builder paypointName(String paypointName) {
            this.paypointName = Optional.ofNullable(paypointName);
            return this;
        }

        /**
         * <p>The paypoint URL.</p>
         */
        @JsonSetter(value = "paypointUrl", nulls = Nulls.SKIP)
        public Builder paypointUrl(Optional<String> paypointUrl) {
            this.paypointUrl = paypointUrl;
            return this;
        }

        public Builder paypointUrl(String paypointUrl) {
            this.paypointUrl = Optional.ofNullable(paypointUrl);
            return this;
        }

        /**
         * <p>The date and time a paypoint's Apple Pay registration was scheduled for deletion. The paypoint will be unregistered from Apple Pay permanently 30 days from this value.</p>
         */
        @JsonSetter(value = "markedForDeletionAt", nulls = Nulls.SKIP)
        public Builder markedForDeletionAt(Optional<OffsetDateTime> markedForDeletionAt) {
            this.markedForDeletionAt = markedForDeletionAt;
            return this;
        }

        public Builder markedForDeletionAt(OffsetDateTime markedForDeletionAt) {
            this.markedForDeletionAt = Optional.ofNullable(markedForDeletionAt);
            return this;
        }

        @JsonSetter(value = "createdAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        @JsonSetter(value = "updatedAt", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>Internal ID for the Apple Pay paypoint registration update.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The record type, in this context it will always be <code>ApplePayRegistration</code>.</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        public AppleWalletData build() {
            return new AppleWalletData(
                    entry,
                    applePayMerchantId,
                    domainNames,
                    paypointName,
                    paypointUrl,
                    markedForDeletionAt,
                    createdAt,
                    updatedAt,
                    id,
                    type,
                    additionalProperties);
        }
    }
}
