/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.querytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.Nullable;
import io.github.payabli.api.core.NullableNonemptyFilter;
import io.github.payabli.api.core.ObjectMappers;
import io.github.payabli.api.types.GeneralEvents;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryBatchesResponseRecordsItem.Builder.class)
public final class QueryBatchesResponseRecordsItem {
    private final Optional<Integer> idBatch;

    private final Optional<String> batchNumber;

    private final Optional<String> transferIdentifier;

    private final Optional<List<GeneralEvents>> eventsData;

    private final Optional<String> connectorName;

    private final Optional<OffsetDateTime> batchDate;

    private final Optional<Double> batchAmount;

    private final Optional<Double> batchFeesAmount;

    private final Optional<Double> batchAuthAmount;

    private final Optional<Double> batchReleasedAmount;

    private final Optional<Double> batchHoldAmount;

    private final Optional<Double> batchReturnedAmount;

    private final Optional<Double> batchRefundAmount;

    private final Optional<Double> batchSplitAmount;

    private final int batchStatus;

    private final int batchRecords;

    private final Optional<Long> paypointId;

    private final Optional<String> paypointName;

    private final Optional<String> paypointDba;

    private final String parentOrgName;

    private final int parentOrgId;

    private final Optional<String> externalPaypointId;

    private final String entryName;

    private final Optional<String> bankName;

    private final Optional<Integer> batchType;

    private final Optional<String> method;

    private final Optional<OffsetDateTime> expectedDepositDate;

    private final Optional<OffsetDateTime> depositDate;

    private final Optional<OffsetDateTime> transferDate;

    private final Optional<QueryBatchesTransfer> transfer;

    private final Map<String, Object> additionalProperties;

    private QueryBatchesResponseRecordsItem(
            Optional<Integer> idBatch,
            Optional<String> batchNumber,
            Optional<String> transferIdentifier,
            Optional<List<GeneralEvents>> eventsData,
            Optional<String> connectorName,
            Optional<OffsetDateTime> batchDate,
            Optional<Double> batchAmount,
            Optional<Double> batchFeesAmount,
            Optional<Double> batchAuthAmount,
            Optional<Double> batchReleasedAmount,
            Optional<Double> batchHoldAmount,
            Optional<Double> batchReturnedAmount,
            Optional<Double> batchRefundAmount,
            Optional<Double> batchSplitAmount,
            int batchStatus,
            int batchRecords,
            Optional<Long> paypointId,
            Optional<String> paypointName,
            Optional<String> paypointDba,
            String parentOrgName,
            int parentOrgId,
            Optional<String> externalPaypointId,
            String entryName,
            Optional<String> bankName,
            Optional<Integer> batchType,
            Optional<String> method,
            Optional<OffsetDateTime> expectedDepositDate,
            Optional<OffsetDateTime> depositDate,
            Optional<OffsetDateTime> transferDate,
            Optional<QueryBatchesTransfer> transfer,
            Map<String, Object> additionalProperties) {
        this.idBatch = idBatch;
        this.batchNumber = batchNumber;
        this.transferIdentifier = transferIdentifier;
        this.eventsData = eventsData;
        this.connectorName = connectorName;
        this.batchDate = batchDate;
        this.batchAmount = batchAmount;
        this.batchFeesAmount = batchFeesAmount;
        this.batchAuthAmount = batchAuthAmount;
        this.batchReleasedAmount = batchReleasedAmount;
        this.batchHoldAmount = batchHoldAmount;
        this.batchReturnedAmount = batchReturnedAmount;
        this.batchRefundAmount = batchRefundAmount;
        this.batchSplitAmount = batchSplitAmount;
        this.batchStatus = batchStatus;
        this.batchRecords = batchRecords;
        this.paypointId = paypointId;
        this.paypointName = paypointName;
        this.paypointDba = paypointDba;
        this.parentOrgName = parentOrgName;
        this.parentOrgId = parentOrgId;
        this.externalPaypointId = externalPaypointId;
        this.entryName = entryName;
        this.bankName = bankName;
        this.batchType = batchType;
        this.method = method;
        this.expectedDepositDate = expectedDepositDate;
        this.depositDate = depositDate;
        this.transferDate = transferDate;
        this.transfer = transfer;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The batch ID.
     */
    @JsonIgnore
    public Optional<Integer> getIdBatch() {
        if (idBatch == null) {
            return Optional.empty();
        }
        return idBatch;
    }

    @JsonIgnore
    public Optional<String> getBatchNumber() {
        if (batchNumber == null) {
            return Optional.empty();
        }
        return batchNumber;
    }

    @JsonIgnore
    public Optional<String> getTransferIdentifier() {
        if (transferIdentifier == null) {
            return Optional.empty();
        }
        return transferIdentifier;
    }

    /**
     * @return Events associated with the batch.
     */
    @JsonIgnore
    public Optional<List<GeneralEvents>> getEventsData() {
        if (eventsData == null) {
            return Optional.empty();
        }
        return eventsData;
    }

    /**
     * @return
     */
    @JsonIgnore
    public Optional<String> getConnectorName() {
        if (connectorName == null) {
            return Optional.empty();
        }
        return connectorName;
    }

    /**
     * @return The batch date.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> getBatchDate() {
        if (batchDate == null) {
            return Optional.empty();
        }
        return batchDate;
    }

    /**
     * @return The amount of the batch.
     */
    @JsonIgnore
    public Optional<Double> getBatchAmount() {
        if (batchAmount == null) {
            return Optional.empty();
        }
        return batchAmount;
    }

    /**
     * @return The total of fees in the batch.
     */
    @JsonIgnore
    public Optional<Double> getBatchFeesAmount() {
        if (batchFeesAmount == null) {
            return Optional.empty();
        }
        return batchFeesAmount;
    }

    /**
     * @return
     */
    @JsonIgnore
    public Optional<Double> getBatchAuthAmount() {
        if (batchAuthAmount == null) {
            return Optional.empty();
        }
        return batchAuthAmount;
    }

    /**
     * @return Previously held funds that have been released after a risk review.
     */
    @JsonIgnore
    public Optional<Double> getBatchReleasedAmount() {
        if (batchReleasedAmount == null) {
            return Optional.empty();
        }
        return batchReleasedAmount;
    }

    /**
     * @return The total amount of the batch that's being held for fraud or risk concerns.
     */
    @JsonIgnore
    public Optional<Double> getBatchHoldAmount() {
        if (batchHoldAmount == null) {
            return Optional.empty();
        }
        return batchHoldAmount;
    }

    /**
     * @return Total amount of ACH returns deducted from batch.
     */
    @JsonIgnore
    public Optional<Double> getBatchReturnedAmount() {
        if (batchReturnedAmount == null) {
            return Optional.empty();
        }
        return batchReturnedAmount;
    }

    /**
     * @return The total amount of refunds deducted from batch.
     */
    @JsonIgnore
    public Optional<Double> getBatchRefundAmount() {
        if (batchRefundAmount == null) {
            return Optional.empty();
        }
        return batchRefundAmount;
    }

    /**
     * @return Total of split transactions that included split funding instructions at the time of authorization.
     */
    @JsonIgnore
    public Optional<Double> getBatchSplitAmount() {
        if (batchSplitAmount == null) {
            return Optional.empty();
        }
        return batchSplitAmount;
    }

    /**
     * @return The batch status. See <a href="/developers/references/money-in-statuses#batch-status">Batch Status</a> for more.
     */
    @JsonProperty("BatchStatus")
    public int getBatchStatus() {
        return batchStatus;
    }

    /**
     * @return The number of records in the batch.
     */
    @JsonProperty("BatchRecords")
    public int getBatchRecords() {
        return batchRecords;
    }

    @JsonIgnore
    public Optional<Long> getPaypointId() {
        if (paypointId == null) {
            return Optional.empty();
        }
        return paypointId;
    }

    @JsonIgnore
    public Optional<String> getPaypointName() {
        if (paypointName == null) {
            return Optional.empty();
        }
        return paypointName;
    }

    @JsonIgnore
    public Optional<String> getPaypointDba() {
        if (paypointDba == null) {
            return Optional.empty();
        }
        return paypointDba;
    }

    /**
     * @return The entrypoint's parent org.
     */
    @JsonProperty("ParentOrgName")
    public String getParentOrgName() {
        return parentOrgName;
    }

    /**
     * @return The parent organization ID.
     */
    @JsonProperty("ParentOrgId")
    public int getParentOrgId() {
        return parentOrgId;
    }

    @JsonIgnore
    public Optional<String> getExternalPaypointId() {
        if (externalPaypointId == null) {
            return Optional.empty();
        }
        return externalPaypointId;
    }

    @JsonProperty("EntryName")
    public String getEntryName() {
        return entryName;
    }

    /**
     * @return The bank name.
     */
    @JsonIgnore
    public Optional<String> getBankName() {
        if (bankName == null) {
            return Optional.empty();
        }
        return bankName;
    }

    /**
     * @return The batch type.
     */
    @JsonIgnore
    public Optional<Integer> getBatchType() {
        if (batchType == null) {
            return Optional.empty();
        }
        return batchType;
    }

    /**
     * @return The payment method used.
     */
    @JsonProperty("Method")
    public Optional<String> getMethod() {
        return method;
    }

    @JsonProperty("ExpectedDepositDate")
    public Optional<OffsetDateTime> getExpectedDepositDate() {
        return expectedDepositDate;
    }

    @JsonProperty("DepositDate")
    public Optional<OffsetDateTime> getDepositDate() {
        return depositDate;
    }

    /**
     * @return The batch transfer date.
     */
    @JsonProperty("TransferDate")
    public Optional<OffsetDateTime> getTransferDate() {
        return transferDate;
    }

    /**
     * @return Transfer details for the batch.
     */
    @JsonProperty("Transfer")
    public Optional<QueryBatchesTransfer> getTransfer() {
        return transfer;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("IdBatch")
    private Optional<Integer> _getIdBatch() {
        return idBatch;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BatchNumber")
    private Optional<String> _getBatchNumber() {
        return batchNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("TransferIdentifier")
    private Optional<String> _getTransferIdentifier() {
        return transferIdentifier;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("EventsData")
    private Optional<List<GeneralEvents>> _getEventsData() {
        return eventsData;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ConnectorName")
    private Optional<String> _getConnectorName() {
        return connectorName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BatchDate")
    private Optional<OffsetDateTime> _getBatchDate() {
        return batchDate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BatchAmount")
    private Optional<Double> _getBatchAmount() {
        return batchAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BatchFeesAmount")
    private Optional<Double> _getBatchFeesAmount() {
        return batchFeesAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BatchAuthAmount")
    private Optional<Double> _getBatchAuthAmount() {
        return batchAuthAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BatchReleasedAmount")
    private Optional<Double> _getBatchReleasedAmount() {
        return batchReleasedAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BatchHoldAmount")
    private Optional<Double> _getBatchHoldAmount() {
        return batchHoldAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BatchReturnedAmount")
    private Optional<Double> _getBatchReturnedAmount() {
        return batchReturnedAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BatchRefundAmount")
    private Optional<Double> _getBatchRefundAmount() {
        return batchRefundAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BatchSplitAmount")
    private Optional<Double> _getBatchSplitAmount() {
        return batchSplitAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PaypointId")
    private Optional<Long> _getPaypointId() {
        return paypointId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PaypointName")
    private Optional<String> _getPaypointName() {
        return paypointName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PaypointDba")
    private Optional<String> _getPaypointDba() {
        return paypointDba;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("externalPaypointID")
    private Optional<String> _getExternalPaypointId() {
        return externalPaypointId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BankName")
    private Optional<String> _getBankName() {
        return bankName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BatchType")
    private Optional<Integer> _getBatchType() {
        return batchType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryBatchesResponseRecordsItem && equalTo((QueryBatchesResponseRecordsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryBatchesResponseRecordsItem other) {
        return idBatch.equals(other.idBatch)
                && batchNumber.equals(other.batchNumber)
                && transferIdentifier.equals(other.transferIdentifier)
                && eventsData.equals(other.eventsData)
                && connectorName.equals(other.connectorName)
                && batchDate.equals(other.batchDate)
                && batchAmount.equals(other.batchAmount)
                && batchFeesAmount.equals(other.batchFeesAmount)
                && batchAuthAmount.equals(other.batchAuthAmount)
                && batchReleasedAmount.equals(other.batchReleasedAmount)
                && batchHoldAmount.equals(other.batchHoldAmount)
                && batchReturnedAmount.equals(other.batchReturnedAmount)
                && batchRefundAmount.equals(other.batchRefundAmount)
                && batchSplitAmount.equals(other.batchSplitAmount)
                && batchStatus == other.batchStatus
                && batchRecords == other.batchRecords
                && paypointId.equals(other.paypointId)
                && paypointName.equals(other.paypointName)
                && paypointDba.equals(other.paypointDba)
                && parentOrgName.equals(other.parentOrgName)
                && parentOrgId == other.parentOrgId
                && externalPaypointId.equals(other.externalPaypointId)
                && entryName.equals(other.entryName)
                && bankName.equals(other.bankName)
                && batchType.equals(other.batchType)
                && method.equals(other.method)
                && expectedDepositDate.equals(other.expectedDepositDate)
                && depositDate.equals(other.depositDate)
                && transferDate.equals(other.transferDate)
                && transfer.equals(other.transfer);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.idBatch,
                this.batchNumber,
                this.transferIdentifier,
                this.eventsData,
                this.connectorName,
                this.batchDate,
                this.batchAmount,
                this.batchFeesAmount,
                this.batchAuthAmount,
                this.batchReleasedAmount,
                this.batchHoldAmount,
                this.batchReturnedAmount,
                this.batchRefundAmount,
                this.batchSplitAmount,
                this.batchStatus,
                this.batchRecords,
                this.paypointId,
                this.paypointName,
                this.paypointDba,
                this.parentOrgName,
                this.parentOrgId,
                this.externalPaypointId,
                this.entryName,
                this.bankName,
                this.batchType,
                this.method,
                this.expectedDepositDate,
                this.depositDate,
                this.transferDate,
                this.transfer);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static BatchStatusStage builder() {
        return new Builder();
    }

    public interface BatchStatusStage {
        /**
         * <p>The batch status. See <a href="/developers/references/money-in-statuses#batch-status">Batch Status</a> for more.</p>
         */
        BatchRecordsStage batchStatus(int batchStatus);

        Builder from(QueryBatchesResponseRecordsItem other);
    }

    public interface BatchRecordsStage {
        /**
         * <p>The number of records in the batch.</p>
         */
        ParentOrgNameStage batchRecords(int batchRecords);
    }

    public interface ParentOrgNameStage {
        /**
         * <p>The entrypoint's parent org.</p>
         */
        ParentOrgIdStage parentOrgName(@NotNull String parentOrgName);
    }

    public interface ParentOrgIdStage {
        /**
         * <p>The parent organization ID.</p>
         */
        EntryNameStage parentOrgId(int parentOrgId);
    }

    public interface EntryNameStage {
        _FinalStage entryName(@NotNull String entryName);
    }

    public interface _FinalStage {
        QueryBatchesResponseRecordsItem build();

        /**
         * <p>The batch ID.</p>
         */
        _FinalStage idBatch(Optional<Integer> idBatch);

        _FinalStage idBatch(Integer idBatch);

        _FinalStage idBatch(Nullable<Integer> idBatch);

        _FinalStage batchNumber(Optional<String> batchNumber);

        _FinalStage batchNumber(String batchNumber);

        _FinalStage batchNumber(Nullable<String> batchNumber);

        _FinalStage transferIdentifier(Optional<String> transferIdentifier);

        _FinalStage transferIdentifier(String transferIdentifier);

        _FinalStage transferIdentifier(Nullable<String> transferIdentifier);

        /**
         * <p>Events associated with the batch.</p>
         */
        _FinalStage eventsData(Optional<List<GeneralEvents>> eventsData);

        _FinalStage eventsData(List<GeneralEvents> eventsData);

        _FinalStage eventsData(Nullable<List<GeneralEvents>> eventsData);

        _FinalStage connectorName(Optional<String> connectorName);

        _FinalStage connectorName(String connectorName);

        _FinalStage connectorName(Nullable<String> connectorName);

        /**
         * <p>The batch date.</p>
         */
        _FinalStage batchDate(Optional<OffsetDateTime> batchDate);

        _FinalStage batchDate(OffsetDateTime batchDate);

        _FinalStage batchDate(Nullable<OffsetDateTime> batchDate);

        /**
         * <p>The amount of the batch.</p>
         */
        _FinalStage batchAmount(Optional<Double> batchAmount);

        _FinalStage batchAmount(Double batchAmount);

        _FinalStage batchAmount(Nullable<Double> batchAmount);

        /**
         * <p>The total of fees in the batch.</p>
         */
        _FinalStage batchFeesAmount(Optional<Double> batchFeesAmount);

        _FinalStage batchFeesAmount(Double batchFeesAmount);

        _FinalStage batchFeesAmount(Nullable<Double> batchFeesAmount);

        _FinalStage batchAuthAmount(Optional<Double> batchAuthAmount);

        _FinalStage batchAuthAmount(Double batchAuthAmount);

        _FinalStage batchAuthAmount(Nullable<Double> batchAuthAmount);

        /**
         * <p>Previously held funds that have been released after a risk review.</p>
         */
        _FinalStage batchReleasedAmount(Optional<Double> batchReleasedAmount);

        _FinalStage batchReleasedAmount(Double batchReleasedAmount);

        _FinalStage batchReleasedAmount(Nullable<Double> batchReleasedAmount);

        /**
         * <p>The total amount of the batch that's being held for fraud or risk concerns.</p>
         */
        _FinalStage batchHoldAmount(Optional<Double> batchHoldAmount);

        _FinalStage batchHoldAmount(Double batchHoldAmount);

        _FinalStage batchHoldAmount(Nullable<Double> batchHoldAmount);

        /**
         * <p>Total amount of ACH returns deducted from batch.</p>
         */
        _FinalStage batchReturnedAmount(Optional<Double> batchReturnedAmount);

        _FinalStage batchReturnedAmount(Double batchReturnedAmount);

        _FinalStage batchReturnedAmount(Nullable<Double> batchReturnedAmount);

        /**
         * <p>The total amount of refunds deducted from batch.</p>
         */
        _FinalStage batchRefundAmount(Optional<Double> batchRefundAmount);

        _FinalStage batchRefundAmount(Double batchRefundAmount);

        _FinalStage batchRefundAmount(Nullable<Double> batchRefundAmount);

        /**
         * <p>Total of split transactions that included split funding instructions at the time of authorization.</p>
         */
        _FinalStage batchSplitAmount(Optional<Double> batchSplitAmount);

        _FinalStage batchSplitAmount(Double batchSplitAmount);

        _FinalStage batchSplitAmount(Nullable<Double> batchSplitAmount);

        _FinalStage paypointId(Optional<Long> paypointId);

        _FinalStage paypointId(Long paypointId);

        _FinalStage paypointId(Nullable<Long> paypointId);

        _FinalStage paypointName(Optional<String> paypointName);

        _FinalStage paypointName(String paypointName);

        _FinalStage paypointName(Nullable<String> paypointName);

        _FinalStage paypointDba(Optional<String> paypointDba);

        _FinalStage paypointDba(String paypointDba);

        _FinalStage paypointDba(Nullable<String> paypointDba);

        _FinalStage externalPaypointId(Optional<String> externalPaypointId);

        _FinalStage externalPaypointId(String externalPaypointId);

        _FinalStage externalPaypointId(Nullable<String> externalPaypointId);

        /**
         * <p>The bank name.</p>
         */
        _FinalStage bankName(Optional<String> bankName);

        _FinalStage bankName(String bankName);

        _FinalStage bankName(Nullable<String> bankName);

        /**
         * <p>The batch type.</p>
         */
        _FinalStage batchType(Optional<Integer> batchType);

        _FinalStage batchType(Integer batchType);

        _FinalStage batchType(Nullable<Integer> batchType);

        /**
         * <p>The payment method used.</p>
         */
        _FinalStage method(Optional<String> method);

        _FinalStage method(String method);

        _FinalStage expectedDepositDate(Optional<OffsetDateTime> expectedDepositDate);

        _FinalStage expectedDepositDate(OffsetDateTime expectedDepositDate);

        _FinalStage depositDate(Optional<OffsetDateTime> depositDate);

        _FinalStage depositDate(OffsetDateTime depositDate);

        /**
         * <p>The batch transfer date.</p>
         */
        _FinalStage transferDate(Optional<OffsetDateTime> transferDate);

        _FinalStage transferDate(OffsetDateTime transferDate);

        /**
         * <p>Transfer details for the batch.</p>
         */
        _FinalStage transfer(Optional<QueryBatchesTransfer> transfer);

        _FinalStage transfer(QueryBatchesTransfer transfer);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements BatchStatusStage,
                    BatchRecordsStage,
                    ParentOrgNameStage,
                    ParentOrgIdStage,
                    EntryNameStage,
                    _FinalStage {
        private int batchStatus;

        private int batchRecords;

        private String parentOrgName;

        private int parentOrgId;

        private String entryName;

        private Optional<QueryBatchesTransfer> transfer = Optional.empty();

        private Optional<OffsetDateTime> transferDate = Optional.empty();

        private Optional<OffsetDateTime> depositDate = Optional.empty();

        private Optional<OffsetDateTime> expectedDepositDate = Optional.empty();

        private Optional<String> method = Optional.empty();

        private Optional<Integer> batchType = Optional.empty();

        private Optional<String> bankName = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<String> paypointDba = Optional.empty();

        private Optional<String> paypointName = Optional.empty();

        private Optional<Long> paypointId = Optional.empty();

        private Optional<Double> batchSplitAmount = Optional.empty();

        private Optional<Double> batchRefundAmount = Optional.empty();

        private Optional<Double> batchReturnedAmount = Optional.empty();

        private Optional<Double> batchHoldAmount = Optional.empty();

        private Optional<Double> batchReleasedAmount = Optional.empty();

        private Optional<Double> batchAuthAmount = Optional.empty();

        private Optional<Double> batchFeesAmount = Optional.empty();

        private Optional<Double> batchAmount = Optional.empty();

        private Optional<OffsetDateTime> batchDate = Optional.empty();

        private Optional<String> connectorName = Optional.empty();

        private Optional<List<GeneralEvents>> eventsData = Optional.empty();

        private Optional<String> transferIdentifier = Optional.empty();

        private Optional<String> batchNumber = Optional.empty();

        private Optional<Integer> idBatch = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(QueryBatchesResponseRecordsItem other) {
            idBatch(other.getIdBatch());
            batchNumber(other.getBatchNumber());
            transferIdentifier(other.getTransferIdentifier());
            eventsData(other.getEventsData());
            connectorName(other.getConnectorName());
            batchDate(other.getBatchDate());
            batchAmount(other.getBatchAmount());
            batchFeesAmount(other.getBatchFeesAmount());
            batchAuthAmount(other.getBatchAuthAmount());
            batchReleasedAmount(other.getBatchReleasedAmount());
            batchHoldAmount(other.getBatchHoldAmount());
            batchReturnedAmount(other.getBatchReturnedAmount());
            batchRefundAmount(other.getBatchRefundAmount());
            batchSplitAmount(other.getBatchSplitAmount());
            batchStatus(other.getBatchStatus());
            batchRecords(other.getBatchRecords());
            paypointId(other.getPaypointId());
            paypointName(other.getPaypointName());
            paypointDba(other.getPaypointDba());
            parentOrgName(other.getParentOrgName());
            parentOrgId(other.getParentOrgId());
            externalPaypointId(other.getExternalPaypointId());
            entryName(other.getEntryName());
            bankName(other.getBankName());
            batchType(other.getBatchType());
            method(other.getMethod());
            expectedDepositDate(other.getExpectedDepositDate());
            depositDate(other.getDepositDate());
            transferDate(other.getTransferDate());
            transfer(other.getTransfer());
            return this;
        }

        /**
         * <p>The batch status. See <a href="/developers/references/money-in-statuses#batch-status">Batch Status</a> for more.</p>
         * <p>The batch status. See <a href="/developers/references/money-in-statuses#batch-status">Batch Status</a> for more.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("BatchStatus")
        public BatchRecordsStage batchStatus(int batchStatus) {
            this.batchStatus = batchStatus;
            return this;
        }

        /**
         * <p>The number of records in the batch.</p>
         * <p>The number of records in the batch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("BatchRecords")
        public ParentOrgNameStage batchRecords(int batchRecords) {
            this.batchRecords = batchRecords;
            return this;
        }

        /**
         * <p>The entrypoint's parent org.</p>
         * <p>The entrypoint's parent org.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("ParentOrgName")
        public ParentOrgIdStage parentOrgName(@NotNull String parentOrgName) {
            this.parentOrgName = Objects.requireNonNull(parentOrgName, "parentOrgName must not be null");
            return this;
        }

        /**
         * <p>The parent organization ID.</p>
         * <p>The parent organization ID.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("ParentOrgId")
        public EntryNameStage parentOrgId(int parentOrgId) {
            this.parentOrgId = parentOrgId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("EntryName")
        public _FinalStage entryName(@NotNull String entryName) {
            this.entryName = Objects.requireNonNull(entryName, "entryName must not be null");
            return this;
        }

        /**
         * <p>Transfer details for the batch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transfer(QueryBatchesTransfer transfer) {
            this.transfer = Optional.ofNullable(transfer);
            return this;
        }

        /**
         * <p>Transfer details for the batch.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "Transfer", nulls = Nulls.SKIP)
        public _FinalStage transfer(Optional<QueryBatchesTransfer> transfer) {
            this.transfer = transfer;
            return this;
        }

        /**
         * <p>The batch transfer date.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage transferDate(OffsetDateTime transferDate) {
            this.transferDate = Optional.ofNullable(transferDate);
            return this;
        }

        /**
         * <p>The batch transfer date.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "TransferDate", nulls = Nulls.SKIP)
        public _FinalStage transferDate(Optional<OffsetDateTime> transferDate) {
            this.transferDate = transferDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage depositDate(OffsetDateTime depositDate) {
            this.depositDate = Optional.ofNullable(depositDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "DepositDate", nulls = Nulls.SKIP)
        public _FinalStage depositDate(Optional<OffsetDateTime> depositDate) {
            this.depositDate = depositDate;
            return this;
        }

        @java.lang.Override
        public _FinalStage expectedDepositDate(OffsetDateTime expectedDepositDate) {
            this.expectedDepositDate = Optional.ofNullable(expectedDepositDate);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ExpectedDepositDate", nulls = Nulls.SKIP)
        public _FinalStage expectedDepositDate(Optional<OffsetDateTime> expectedDepositDate) {
            this.expectedDepositDate = expectedDepositDate;
            return this;
        }

        /**
         * <p>The payment method used.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage method(String method) {
            this.method = Optional.ofNullable(method);
            return this;
        }

        /**
         * <p>The payment method used.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "Method", nulls = Nulls.SKIP)
        public _FinalStage method(Optional<String> method) {
            this.method = method;
            return this;
        }

        /**
         * <p>The batch type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchType(Nullable<Integer> batchType) {
            if (batchType.isNull()) {
                this.batchType = null;
            } else if (batchType.isEmpty()) {
                this.batchType = Optional.empty();
            } else {
                this.batchType = Optional.of(batchType.get());
            }
            return this;
        }

        /**
         * <p>The batch type.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchType(Integer batchType) {
            this.batchType = Optional.ofNullable(batchType);
            return this;
        }

        /**
         * <p>The batch type.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "BatchType", nulls = Nulls.SKIP)
        public _FinalStage batchType(Optional<Integer> batchType) {
            this.batchType = batchType;
            return this;
        }

        /**
         * <p>The bank name.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage bankName(Nullable<String> bankName) {
            if (bankName.isNull()) {
                this.bankName = null;
            } else if (bankName.isEmpty()) {
                this.bankName = Optional.empty();
            } else {
                this.bankName = Optional.of(bankName.get());
            }
            return this;
        }

        /**
         * <p>The bank name.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage bankName(String bankName) {
            this.bankName = Optional.ofNullable(bankName);
            return this;
        }

        /**
         * <p>The bank name.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "BankName", nulls = Nulls.SKIP)
        public _FinalStage bankName(Optional<String> bankName) {
            this.bankName = bankName;
            return this;
        }

        @java.lang.Override
        public _FinalStage externalPaypointId(Nullable<String> externalPaypointId) {
            if (externalPaypointId.isNull()) {
                this.externalPaypointId = null;
            } else if (externalPaypointId.isEmpty()) {
                this.externalPaypointId = Optional.empty();
            } else {
                this.externalPaypointId = Optional.of(externalPaypointId.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public _FinalStage externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        @java.lang.Override
        public _FinalStage paypointDba(Nullable<String> paypointDba) {
            if (paypointDba.isNull()) {
                this.paypointDba = null;
            } else if (paypointDba.isEmpty()) {
                this.paypointDba = Optional.empty();
            } else {
                this.paypointDba = Optional.of(paypointDba.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage paypointDba(String paypointDba) {
            this.paypointDba = Optional.ofNullable(paypointDba);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "PaypointDba", nulls = Nulls.SKIP)
        public _FinalStage paypointDba(Optional<String> paypointDba) {
            this.paypointDba = paypointDba;
            return this;
        }

        @java.lang.Override
        public _FinalStage paypointName(Nullable<String> paypointName) {
            if (paypointName.isNull()) {
                this.paypointName = null;
            } else if (paypointName.isEmpty()) {
                this.paypointName = Optional.empty();
            } else {
                this.paypointName = Optional.of(paypointName.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage paypointName(String paypointName) {
            this.paypointName = Optional.ofNullable(paypointName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "PaypointName", nulls = Nulls.SKIP)
        public _FinalStage paypointName(Optional<String> paypointName) {
            this.paypointName = paypointName;
            return this;
        }

        @java.lang.Override
        public _FinalStage paypointId(Nullable<Long> paypointId) {
            if (paypointId.isNull()) {
                this.paypointId = null;
            } else if (paypointId.isEmpty()) {
                this.paypointId = Optional.empty();
            } else {
                this.paypointId = Optional.of(paypointId.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage paypointId(Long paypointId) {
            this.paypointId = Optional.ofNullable(paypointId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "PaypointId", nulls = Nulls.SKIP)
        public _FinalStage paypointId(Optional<Long> paypointId) {
            this.paypointId = paypointId;
            return this;
        }

        /**
         * <p>Total of split transactions that included split funding instructions at the time of authorization.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchSplitAmount(Nullable<Double> batchSplitAmount) {
            if (batchSplitAmount.isNull()) {
                this.batchSplitAmount = null;
            } else if (batchSplitAmount.isEmpty()) {
                this.batchSplitAmount = Optional.empty();
            } else {
                this.batchSplitAmount = Optional.of(batchSplitAmount.get());
            }
            return this;
        }

        /**
         * <p>Total of split transactions that included split funding instructions at the time of authorization.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchSplitAmount(Double batchSplitAmount) {
            this.batchSplitAmount = Optional.ofNullable(batchSplitAmount);
            return this;
        }

        /**
         * <p>Total of split transactions that included split funding instructions at the time of authorization.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "BatchSplitAmount", nulls = Nulls.SKIP)
        public _FinalStage batchSplitAmount(Optional<Double> batchSplitAmount) {
            this.batchSplitAmount = batchSplitAmount;
            return this;
        }

        /**
         * <p>The total amount of refunds deducted from batch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchRefundAmount(Nullable<Double> batchRefundAmount) {
            if (batchRefundAmount.isNull()) {
                this.batchRefundAmount = null;
            } else if (batchRefundAmount.isEmpty()) {
                this.batchRefundAmount = Optional.empty();
            } else {
                this.batchRefundAmount = Optional.of(batchRefundAmount.get());
            }
            return this;
        }

        /**
         * <p>The total amount of refunds deducted from batch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchRefundAmount(Double batchRefundAmount) {
            this.batchRefundAmount = Optional.ofNullable(batchRefundAmount);
            return this;
        }

        /**
         * <p>The total amount of refunds deducted from batch.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "BatchRefundAmount", nulls = Nulls.SKIP)
        public _FinalStage batchRefundAmount(Optional<Double> batchRefundAmount) {
            this.batchRefundAmount = batchRefundAmount;
            return this;
        }

        /**
         * <p>Total amount of ACH returns deducted from batch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchReturnedAmount(Nullable<Double> batchReturnedAmount) {
            if (batchReturnedAmount.isNull()) {
                this.batchReturnedAmount = null;
            } else if (batchReturnedAmount.isEmpty()) {
                this.batchReturnedAmount = Optional.empty();
            } else {
                this.batchReturnedAmount = Optional.of(batchReturnedAmount.get());
            }
            return this;
        }

        /**
         * <p>Total amount of ACH returns deducted from batch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchReturnedAmount(Double batchReturnedAmount) {
            this.batchReturnedAmount = Optional.ofNullable(batchReturnedAmount);
            return this;
        }

        /**
         * <p>Total amount of ACH returns deducted from batch.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "BatchReturnedAmount", nulls = Nulls.SKIP)
        public _FinalStage batchReturnedAmount(Optional<Double> batchReturnedAmount) {
            this.batchReturnedAmount = batchReturnedAmount;
            return this;
        }

        /**
         * <p>The total amount of the batch that's being held for fraud or risk concerns.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchHoldAmount(Nullable<Double> batchHoldAmount) {
            if (batchHoldAmount.isNull()) {
                this.batchHoldAmount = null;
            } else if (batchHoldAmount.isEmpty()) {
                this.batchHoldAmount = Optional.empty();
            } else {
                this.batchHoldAmount = Optional.of(batchHoldAmount.get());
            }
            return this;
        }

        /**
         * <p>The total amount of the batch that's being held for fraud or risk concerns.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchHoldAmount(Double batchHoldAmount) {
            this.batchHoldAmount = Optional.ofNullable(batchHoldAmount);
            return this;
        }

        /**
         * <p>The total amount of the batch that's being held for fraud or risk concerns.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "BatchHoldAmount", nulls = Nulls.SKIP)
        public _FinalStage batchHoldAmount(Optional<Double> batchHoldAmount) {
            this.batchHoldAmount = batchHoldAmount;
            return this;
        }

        /**
         * <p>Previously held funds that have been released after a risk review.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchReleasedAmount(Nullable<Double> batchReleasedAmount) {
            if (batchReleasedAmount.isNull()) {
                this.batchReleasedAmount = null;
            } else if (batchReleasedAmount.isEmpty()) {
                this.batchReleasedAmount = Optional.empty();
            } else {
                this.batchReleasedAmount = Optional.of(batchReleasedAmount.get());
            }
            return this;
        }

        /**
         * <p>Previously held funds that have been released after a risk review.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchReleasedAmount(Double batchReleasedAmount) {
            this.batchReleasedAmount = Optional.ofNullable(batchReleasedAmount);
            return this;
        }

        /**
         * <p>Previously held funds that have been released after a risk review.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "BatchReleasedAmount", nulls = Nulls.SKIP)
        public _FinalStage batchReleasedAmount(Optional<Double> batchReleasedAmount) {
            this.batchReleasedAmount = batchReleasedAmount;
            return this;
        }

        /**
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchAuthAmount(Nullable<Double> batchAuthAmount) {
            if (batchAuthAmount.isNull()) {
                this.batchAuthAmount = null;
            } else if (batchAuthAmount.isEmpty()) {
                this.batchAuthAmount = Optional.empty();
            } else {
                this.batchAuthAmount = Optional.of(batchAuthAmount.get());
            }
            return this;
        }

        /**
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchAuthAmount(Double batchAuthAmount) {
            this.batchAuthAmount = Optional.ofNullable(batchAuthAmount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "BatchAuthAmount", nulls = Nulls.SKIP)
        public _FinalStage batchAuthAmount(Optional<Double> batchAuthAmount) {
            this.batchAuthAmount = batchAuthAmount;
            return this;
        }

        /**
         * <p>The total of fees in the batch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchFeesAmount(Nullable<Double> batchFeesAmount) {
            if (batchFeesAmount.isNull()) {
                this.batchFeesAmount = null;
            } else if (batchFeesAmount.isEmpty()) {
                this.batchFeesAmount = Optional.empty();
            } else {
                this.batchFeesAmount = Optional.of(batchFeesAmount.get());
            }
            return this;
        }

        /**
         * <p>The total of fees in the batch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchFeesAmount(Double batchFeesAmount) {
            this.batchFeesAmount = Optional.ofNullable(batchFeesAmount);
            return this;
        }

        /**
         * <p>The total of fees in the batch.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "BatchFeesAmount", nulls = Nulls.SKIP)
        public _FinalStage batchFeesAmount(Optional<Double> batchFeesAmount) {
            this.batchFeesAmount = batchFeesAmount;
            return this;
        }

        /**
         * <p>The amount of the batch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchAmount(Nullable<Double> batchAmount) {
            if (batchAmount.isNull()) {
                this.batchAmount = null;
            } else if (batchAmount.isEmpty()) {
                this.batchAmount = Optional.empty();
            } else {
                this.batchAmount = Optional.of(batchAmount.get());
            }
            return this;
        }

        /**
         * <p>The amount of the batch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchAmount(Double batchAmount) {
            this.batchAmount = Optional.ofNullable(batchAmount);
            return this;
        }

        /**
         * <p>The amount of the batch.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "BatchAmount", nulls = Nulls.SKIP)
        public _FinalStage batchAmount(Optional<Double> batchAmount) {
            this.batchAmount = batchAmount;
            return this;
        }

        /**
         * <p>The batch date.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchDate(Nullable<OffsetDateTime> batchDate) {
            if (batchDate.isNull()) {
                this.batchDate = null;
            } else if (batchDate.isEmpty()) {
                this.batchDate = Optional.empty();
            } else {
                this.batchDate = Optional.of(batchDate.get());
            }
            return this;
        }

        /**
         * <p>The batch date.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage batchDate(OffsetDateTime batchDate) {
            this.batchDate = Optional.ofNullable(batchDate);
            return this;
        }

        /**
         * <p>The batch date.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "BatchDate", nulls = Nulls.SKIP)
        public _FinalStage batchDate(Optional<OffsetDateTime> batchDate) {
            this.batchDate = batchDate;
            return this;
        }

        /**
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage connectorName(Nullable<String> connectorName) {
            if (connectorName.isNull()) {
                this.connectorName = null;
            } else if (connectorName.isEmpty()) {
                this.connectorName = Optional.empty();
            } else {
                this.connectorName = Optional.of(connectorName.get());
            }
            return this;
        }

        /**
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage connectorName(String connectorName) {
            this.connectorName = Optional.ofNullable(connectorName);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ConnectorName", nulls = Nulls.SKIP)
        public _FinalStage connectorName(Optional<String> connectorName) {
            this.connectorName = connectorName;
            return this;
        }

        /**
         * <p>Events associated with the batch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage eventsData(Nullable<List<GeneralEvents>> eventsData) {
            if (eventsData.isNull()) {
                this.eventsData = null;
            } else if (eventsData.isEmpty()) {
                this.eventsData = Optional.empty();
            } else {
                this.eventsData = Optional.of(eventsData.get());
            }
            return this;
        }

        /**
         * <p>Events associated with the batch.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage eventsData(List<GeneralEvents> eventsData) {
            this.eventsData = Optional.ofNullable(eventsData);
            return this;
        }

        /**
         * <p>Events associated with the batch.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "EventsData", nulls = Nulls.SKIP)
        public _FinalStage eventsData(Optional<List<GeneralEvents>> eventsData) {
            this.eventsData = eventsData;
            return this;
        }

        @java.lang.Override
        public _FinalStage transferIdentifier(Nullable<String> transferIdentifier) {
            if (transferIdentifier.isNull()) {
                this.transferIdentifier = null;
            } else if (transferIdentifier.isEmpty()) {
                this.transferIdentifier = Optional.empty();
            } else {
                this.transferIdentifier = Optional.of(transferIdentifier.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage transferIdentifier(String transferIdentifier) {
            this.transferIdentifier = Optional.ofNullable(transferIdentifier);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "TransferIdentifier", nulls = Nulls.SKIP)
        public _FinalStage transferIdentifier(Optional<String> transferIdentifier) {
            this.transferIdentifier = transferIdentifier;
            return this;
        }

        @java.lang.Override
        public _FinalStage batchNumber(Nullable<String> batchNumber) {
            if (batchNumber.isNull()) {
                this.batchNumber = null;
            } else if (batchNumber.isEmpty()) {
                this.batchNumber = Optional.empty();
            } else {
                this.batchNumber = Optional.of(batchNumber.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage batchNumber(String batchNumber) {
            this.batchNumber = Optional.ofNullable(batchNumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "BatchNumber", nulls = Nulls.SKIP)
        public _FinalStage batchNumber(Optional<String> batchNumber) {
            this.batchNumber = batchNumber;
            return this;
        }

        /**
         * <p>The batch ID.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage idBatch(Nullable<Integer> idBatch) {
            if (idBatch.isNull()) {
                this.idBatch = null;
            } else if (idBatch.isEmpty()) {
                this.idBatch = Optional.empty();
            } else {
                this.idBatch = Optional.of(idBatch.get());
            }
            return this;
        }

        /**
         * <p>The batch ID.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage idBatch(Integer idBatch) {
            this.idBatch = Optional.ofNullable(idBatch);
            return this;
        }

        /**
         * <p>The batch ID.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "IdBatch", nulls = Nulls.SKIP)
        public _FinalStage idBatch(Optional<Integer> idBatch) {
            this.idBatch = idBatch;
            return this;
        }

        @java.lang.Override
        public QueryBatchesResponseRecordsItem build() {
            return new QueryBatchesResponseRecordsItem(
                    idBatch,
                    batchNumber,
                    transferIdentifier,
                    eventsData,
                    connectorName,
                    batchDate,
                    batchAmount,
                    batchFeesAmount,
                    batchAuthAmount,
                    batchReleasedAmount,
                    batchHoldAmount,
                    batchReturnedAmount,
                    batchRefundAmount,
                    batchSplitAmount,
                    batchStatus,
                    batchRecords,
                    paypointId,
                    paypointName,
                    paypointDba,
                    parentOrgName,
                    parentOrgId,
                    externalPaypointId,
                    entryName,
                    bankName,
                    batchType,
                    method,
                    expectedDepositDate,
                    depositDate,
                    transferDate,
                    transfer,
                    additionalProperties);
        }
    }
}
