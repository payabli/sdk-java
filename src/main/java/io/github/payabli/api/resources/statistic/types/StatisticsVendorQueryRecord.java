/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.statistic.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = StatisticsVendorQueryRecord.Builder.class)
public final class StatisticsVendorQueryRecord {
    private final String statX;

    private final int active;

    private final double activeVolume;

    private final int sentToApproval;

    private final double sentToApprovalVolume;

    private final int toApproval;

    private final double toApprovalVolume;

    private final int approved;

    private final double approvedVolume;

    private final int disapproved;

    private final double disapprovedVolume;

    private final int cancelled;

    private final double cancelledVolume;

    private final int inTransit;

    private final double inTransitVolume;

    private final int paid;

    private final double paidVolume;

    private final Map<String, Object> additionalProperties;

    private StatisticsVendorQueryRecord(
            String statX,
            int active,
            double activeVolume,
            int sentToApproval,
            double sentToApprovalVolume,
            int toApproval,
            double toApprovalVolume,
            int approved,
            double approvedVolume,
            int disapproved,
            double disapprovedVolume,
            int cancelled,
            double cancelledVolume,
            int inTransit,
            double inTransitVolume,
            int paid,
            double paidVolume,
            Map<String, Object> additionalProperties) {
        this.statX = statX;
        this.active = active;
        this.activeVolume = activeVolume;
        this.sentToApproval = sentToApproval;
        this.sentToApprovalVolume = sentToApprovalVolume;
        this.toApproval = toApproval;
        this.toApprovalVolume = toApprovalVolume;
        this.approved = approved;
        this.approvedVolume = approvedVolume;
        this.disapproved = disapproved;
        this.disapprovedVolume = disapprovedVolume;
        this.cancelled = cancelled;
        this.cancelledVolume = cancelledVolume;
        this.inTransit = inTransit;
        this.inTransitVolume = inTransitVolume;
        this.paid = paid;
        this.paidVolume = paidVolume;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Statistical grouping identifier
     */
    @JsonProperty("statX")
    public String getStatX() {
        return statX;
    }

    /**
     * @return Number of active transactions
     */
    @JsonProperty("active")
    public int getActive() {
        return active;
    }

    /**
     * @return Volume of active transactions
     */
    @JsonProperty("activeVolume")
    public double getActiveVolume() {
        return activeVolume;
    }

    /**
     * @return Number of transactions sent to approval
     */
    @JsonProperty("sentToApproval")
    public int getSentToApproval() {
        return sentToApproval;
    }

    /**
     * @return Volume of transactions sent to approval
     */
    @JsonProperty("sentToApprovalVolume")
    public double getSentToApprovalVolume() {
        return sentToApprovalVolume;
    }

    /**
     * @return Number of transactions to approval
     */
    @JsonProperty("toApproval")
    public int getToApproval() {
        return toApproval;
    }

    /**
     * @return Volume of transactions to approval
     */
    @JsonProperty("toApprovalVolume")
    public double getToApprovalVolume() {
        return toApprovalVolume;
    }

    /**
     * @return Number of approved transactions
     */
    @JsonProperty("approved")
    public int getApproved() {
        return approved;
    }

    /**
     * @return Volume of approved transactions
     */
    @JsonProperty("approvedVolume")
    public double getApprovedVolume() {
        return approvedVolume;
    }

    /**
     * @return Number of disapproved transactions
     */
    @JsonProperty("disapproved")
    public int getDisapproved() {
        return disapproved;
    }

    /**
     * @return Volume of disapproved transactions
     */
    @JsonProperty("disapprovedVolume")
    public double getDisapprovedVolume() {
        return disapprovedVolume;
    }

    /**
     * @return Number of cancelled transactions
     */
    @JsonProperty("cancelled")
    public int getCancelled() {
        return cancelled;
    }

    /**
     * @return Volume of cancelled transactions
     */
    @JsonProperty("cancelledVolume")
    public double getCancelledVolume() {
        return cancelledVolume;
    }

    /**
     * @return Number of transactions in transit
     */
    @JsonProperty("inTransit")
    public int getInTransit() {
        return inTransit;
    }

    /**
     * @return Volume of transactions in transit
     */
    @JsonProperty("inTransitVolume")
    public double getInTransitVolume() {
        return inTransitVolume;
    }

    /**
     * @return Number of paid transactions
     */
    @JsonProperty("paid")
    public int getPaid() {
        return paid;
    }

    /**
     * @return Volume of paid transactions
     */
    @JsonProperty("paidVolume")
    public double getPaidVolume() {
        return paidVolume;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof StatisticsVendorQueryRecord && equalTo((StatisticsVendorQueryRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(StatisticsVendorQueryRecord other) {
        return statX.equals(other.statX)
                && active == other.active
                && activeVolume == other.activeVolume
                && sentToApproval == other.sentToApproval
                && sentToApprovalVolume == other.sentToApprovalVolume
                && toApproval == other.toApproval
                && toApprovalVolume == other.toApprovalVolume
                && approved == other.approved
                && approvedVolume == other.approvedVolume
                && disapproved == other.disapproved
                && disapprovedVolume == other.disapprovedVolume
                && cancelled == other.cancelled
                && cancelledVolume == other.cancelledVolume
                && inTransit == other.inTransit
                && inTransitVolume == other.inTransitVolume
                && paid == other.paid
                && paidVolume == other.paidVolume;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.statX,
                this.active,
                this.activeVolume,
                this.sentToApproval,
                this.sentToApprovalVolume,
                this.toApproval,
                this.toApprovalVolume,
                this.approved,
                this.approvedVolume,
                this.disapproved,
                this.disapprovedVolume,
                this.cancelled,
                this.cancelledVolume,
                this.inTransit,
                this.inTransitVolume,
                this.paid,
                this.paidVolume);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static StatXStage builder() {
        return new Builder();
    }

    public interface StatXStage {
        /**
         * <p>Statistical grouping identifier</p>
         */
        ActiveStage statX(@NotNull String statX);

        Builder from(StatisticsVendorQueryRecord other);
    }

    public interface ActiveStage {
        /**
         * <p>Number of active transactions</p>
         */
        ActiveVolumeStage active(int active);
    }

    public interface ActiveVolumeStage {
        /**
         * <p>Volume of active transactions</p>
         */
        SentToApprovalStage activeVolume(double activeVolume);
    }

    public interface SentToApprovalStage {
        /**
         * <p>Number of transactions sent to approval</p>
         */
        SentToApprovalVolumeStage sentToApproval(int sentToApproval);
    }

    public interface SentToApprovalVolumeStage {
        /**
         * <p>Volume of transactions sent to approval</p>
         */
        ToApprovalStage sentToApprovalVolume(double sentToApprovalVolume);
    }

    public interface ToApprovalStage {
        /**
         * <p>Number of transactions to approval</p>
         */
        ToApprovalVolumeStage toApproval(int toApproval);
    }

    public interface ToApprovalVolumeStage {
        /**
         * <p>Volume of transactions to approval</p>
         */
        ApprovedStage toApprovalVolume(double toApprovalVolume);
    }

    public interface ApprovedStage {
        /**
         * <p>Number of approved transactions</p>
         */
        ApprovedVolumeStage approved(int approved);
    }

    public interface ApprovedVolumeStage {
        /**
         * <p>Volume of approved transactions</p>
         */
        DisapprovedStage approvedVolume(double approvedVolume);
    }

    public interface DisapprovedStage {
        /**
         * <p>Number of disapproved transactions</p>
         */
        DisapprovedVolumeStage disapproved(int disapproved);
    }

    public interface DisapprovedVolumeStage {
        /**
         * <p>Volume of disapproved transactions</p>
         */
        CancelledStage disapprovedVolume(double disapprovedVolume);
    }

    public interface CancelledStage {
        /**
         * <p>Number of cancelled transactions</p>
         */
        CancelledVolumeStage cancelled(int cancelled);
    }

    public interface CancelledVolumeStage {
        /**
         * <p>Volume of cancelled transactions</p>
         */
        InTransitStage cancelledVolume(double cancelledVolume);
    }

    public interface InTransitStage {
        /**
         * <p>Number of transactions in transit</p>
         */
        InTransitVolumeStage inTransit(int inTransit);
    }

    public interface InTransitVolumeStage {
        /**
         * <p>Volume of transactions in transit</p>
         */
        PaidStage inTransitVolume(double inTransitVolume);
    }

    public interface PaidStage {
        /**
         * <p>Number of paid transactions</p>
         */
        PaidVolumeStage paid(int paid);
    }

    public interface PaidVolumeStage {
        /**
         * <p>Volume of paid transactions</p>
         */
        _FinalStage paidVolume(double paidVolume);
    }

    public interface _FinalStage {
        StatisticsVendorQueryRecord build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements StatXStage,
                    ActiveStage,
                    ActiveVolumeStage,
                    SentToApprovalStage,
                    SentToApprovalVolumeStage,
                    ToApprovalStage,
                    ToApprovalVolumeStage,
                    ApprovedStage,
                    ApprovedVolumeStage,
                    DisapprovedStage,
                    DisapprovedVolumeStage,
                    CancelledStage,
                    CancelledVolumeStage,
                    InTransitStage,
                    InTransitVolumeStage,
                    PaidStage,
                    PaidVolumeStage,
                    _FinalStage {
        private String statX;

        private int active;

        private double activeVolume;

        private int sentToApproval;

        private double sentToApprovalVolume;

        private int toApproval;

        private double toApprovalVolume;

        private int approved;

        private double approvedVolume;

        private int disapproved;

        private double disapprovedVolume;

        private int cancelled;

        private double cancelledVolume;

        private int inTransit;

        private double inTransitVolume;

        private int paid;

        private double paidVolume;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(StatisticsVendorQueryRecord other) {
            statX(other.getStatX());
            active(other.getActive());
            activeVolume(other.getActiveVolume());
            sentToApproval(other.getSentToApproval());
            sentToApprovalVolume(other.getSentToApprovalVolume());
            toApproval(other.getToApproval());
            toApprovalVolume(other.getToApprovalVolume());
            approved(other.getApproved());
            approvedVolume(other.getApprovedVolume());
            disapproved(other.getDisapproved());
            disapprovedVolume(other.getDisapprovedVolume());
            cancelled(other.getCancelled());
            cancelledVolume(other.getCancelledVolume());
            inTransit(other.getInTransit());
            inTransitVolume(other.getInTransitVolume());
            paid(other.getPaid());
            paidVolume(other.getPaidVolume());
            return this;
        }

        /**
         * <p>Statistical grouping identifier</p>
         * <p>Statistical grouping identifier</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("statX")
        public ActiveStage statX(@NotNull String statX) {
            this.statX = Objects.requireNonNull(statX, "statX must not be null");
            return this;
        }

        /**
         * <p>Number of active transactions</p>
         * <p>Number of active transactions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("active")
        public ActiveVolumeStage active(int active) {
            this.active = active;
            return this;
        }

        /**
         * <p>Volume of active transactions</p>
         * <p>Volume of active transactions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("activeVolume")
        public SentToApprovalStage activeVolume(double activeVolume) {
            this.activeVolume = activeVolume;
            return this;
        }

        /**
         * <p>Number of transactions sent to approval</p>
         * <p>Number of transactions sent to approval</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("sentToApproval")
        public SentToApprovalVolumeStage sentToApproval(int sentToApproval) {
            this.sentToApproval = sentToApproval;
            return this;
        }

        /**
         * <p>Volume of transactions sent to approval</p>
         * <p>Volume of transactions sent to approval</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("sentToApprovalVolume")
        public ToApprovalStage sentToApprovalVolume(double sentToApprovalVolume) {
            this.sentToApprovalVolume = sentToApprovalVolume;
            return this;
        }

        /**
         * <p>Number of transactions to approval</p>
         * <p>Number of transactions to approval</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("toApproval")
        public ToApprovalVolumeStage toApproval(int toApproval) {
            this.toApproval = toApproval;
            return this;
        }

        /**
         * <p>Volume of transactions to approval</p>
         * <p>Volume of transactions to approval</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("toApprovalVolume")
        public ApprovedStage toApprovalVolume(double toApprovalVolume) {
            this.toApprovalVolume = toApprovalVolume;
            return this;
        }

        /**
         * <p>Number of approved transactions</p>
         * <p>Number of approved transactions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("approved")
        public ApprovedVolumeStage approved(int approved) {
            this.approved = approved;
            return this;
        }

        /**
         * <p>Volume of approved transactions</p>
         * <p>Volume of approved transactions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("approvedVolume")
        public DisapprovedStage approvedVolume(double approvedVolume) {
            this.approvedVolume = approvedVolume;
            return this;
        }

        /**
         * <p>Number of disapproved transactions</p>
         * <p>Number of disapproved transactions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("disapproved")
        public DisapprovedVolumeStage disapproved(int disapproved) {
            this.disapproved = disapproved;
            return this;
        }

        /**
         * <p>Volume of disapproved transactions</p>
         * <p>Volume of disapproved transactions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("disapprovedVolume")
        public CancelledStage disapprovedVolume(double disapprovedVolume) {
            this.disapprovedVolume = disapprovedVolume;
            return this;
        }

        /**
         * <p>Number of cancelled transactions</p>
         * <p>Number of cancelled transactions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("cancelled")
        public CancelledVolumeStage cancelled(int cancelled) {
            this.cancelled = cancelled;
            return this;
        }

        /**
         * <p>Volume of cancelled transactions</p>
         * <p>Volume of cancelled transactions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("cancelledVolume")
        public InTransitStage cancelledVolume(double cancelledVolume) {
            this.cancelledVolume = cancelledVolume;
            return this;
        }

        /**
         * <p>Number of transactions in transit</p>
         * <p>Number of transactions in transit</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("inTransit")
        public InTransitVolumeStage inTransit(int inTransit) {
            this.inTransit = inTransit;
            return this;
        }

        /**
         * <p>Volume of transactions in transit</p>
         * <p>Volume of transactions in transit</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("inTransitVolume")
        public PaidStage inTransitVolume(double inTransitVolume) {
            this.inTransitVolume = inTransitVolume;
            return this;
        }

        /**
         * <p>Number of paid transactions</p>
         * <p>Number of paid transactions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("paid")
        public PaidVolumeStage paid(int paid) {
            this.paid = paid;
            return this;
        }

        /**
         * <p>Volume of paid transactions</p>
         * <p>Volume of paid transactions</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("paidVolume")
        public _FinalStage paidVolume(double paidVolume) {
            this.paidVolume = paidVolume;
            return this;
        }

        @java.lang.Override
        public StatisticsVendorQueryRecord build() {
            return new StatisticsVendorQueryRecord(
                    statX,
                    active,
                    activeVolume,
                    sentToApproval,
                    sentToApprovalVolume,
                    toApproval,
                    toApprovalVolume,
                    approved,
                    approvedVolume,
                    disapproved,
                    disapprovedVolume,
                    cancelled,
                    cancelledVolume,
                    inTransit,
                    inTransitVolume,
                    paid,
                    paidVolume,
                    additionalProperties);
        }
    }
}
