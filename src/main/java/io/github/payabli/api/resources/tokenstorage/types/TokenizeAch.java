/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.tokenstorage.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import io.github.payabli.api.types.AchHolderType;
import io.github.payabli.api.types.Achaccounttype;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TokenizeAch.Builder.class)
public final class TokenizeAch {
    private final String method;

    private final String achAccount;

    private final Achaccounttype achAccountType;

    private final Optional<String> achCode;

    private final String achHolder;

    private final Optional<AchHolderType> achHolderType;

    private final String achRouting;

    private final Optional<String> device;

    private final Map<String, Object> additionalProperties;

    private TokenizeAch(
            String method,
            String achAccount,
            Achaccounttype achAccountType,
            Optional<String> achCode,
            String achHolder,
            Optional<AchHolderType> achHolderType,
            String achRouting,
            Optional<String> device,
            Map<String, Object> additionalProperties) {
        this.method = method;
        this.achAccount = achAccount;
        this.achAccountType = achAccountType;
        this.achCode = achCode;
        this.achHolder = achHolder;
        this.achHolderType = achHolderType;
        this.achRouting = achRouting;
        this.device = device;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of payment method to tokenize. For ACH, this is always <code>ach</code>.
     */
    @JsonProperty("method")
    public String getMethod() {
        return method;
    }

    @JsonProperty("achAccount")
    public String getAchAccount() {
        return achAccount;
    }

    @JsonProperty("achAccountType")
    public Achaccounttype getAchAccountType() {
        return achAccountType;
    }

    @JsonProperty("achCode")
    public Optional<String> getAchCode() {
        return achCode;
    }

    @JsonProperty("achHolder")
    public String getAchHolder() {
        return achHolder;
    }

    @JsonProperty("achHolderType")
    public Optional<AchHolderType> getAchHolderType() {
        return achHolderType;
    }

    @JsonProperty("achRouting")
    public String getAchRouting() {
        return achRouting;
    }

    @JsonProperty("device")
    public Optional<String> getDevice() {
        return device;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TokenizeAch && equalTo((TokenizeAch) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TokenizeAch other) {
        return method.equals(other.method)
                && achAccount.equals(other.achAccount)
                && achAccountType.equals(other.achAccountType)
                && achCode.equals(other.achCode)
                && achHolder.equals(other.achHolder)
                && achHolderType.equals(other.achHolderType)
                && achRouting.equals(other.achRouting)
                && device.equals(other.device);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.method,
                this.achAccount,
                this.achAccountType,
                this.achCode,
                this.achHolder,
                this.achHolderType,
                this.achRouting,
                this.device);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MethodStage builder() {
        return new Builder();
    }

    public interface MethodStage {
        /**
         * <p>The type of payment method to tokenize. For ACH, this is always <code>ach</code>.</p>
         */
        AchAccountStage method(@NotNull String method);

        Builder from(TokenizeAch other);
    }

    public interface AchAccountStage {
        AchAccountTypeStage achAccount(@NotNull String achAccount);
    }

    public interface AchAccountTypeStage {
        AchHolderStage achAccountType(@NotNull Achaccounttype achAccountType);
    }

    public interface AchHolderStage {
        AchRoutingStage achHolder(@NotNull String achHolder);
    }

    public interface AchRoutingStage {
        _FinalStage achRouting(@NotNull String achRouting);
    }

    public interface _FinalStage {
        TokenizeAch build();

        _FinalStage achCode(Optional<String> achCode);

        _FinalStage achCode(String achCode);

        _FinalStage achHolderType(Optional<AchHolderType> achHolderType);

        _FinalStage achHolderType(AchHolderType achHolderType);

        _FinalStage device(Optional<String> device);

        _FinalStage device(String device);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements MethodStage, AchAccountStage, AchAccountTypeStage, AchHolderStage, AchRoutingStage, _FinalStage {
        private String method;

        private String achAccount;

        private Achaccounttype achAccountType;

        private String achHolder;

        private String achRouting;

        private Optional<String> device = Optional.empty();

        private Optional<AchHolderType> achHolderType = Optional.empty();

        private Optional<String> achCode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TokenizeAch other) {
            method(other.getMethod());
            achAccount(other.getAchAccount());
            achAccountType(other.getAchAccountType());
            achCode(other.getAchCode());
            achHolder(other.getAchHolder());
            achHolderType(other.getAchHolderType());
            achRouting(other.getAchRouting());
            device(other.getDevice());
            return this;
        }

        /**
         * <p>The type of payment method to tokenize. For ACH, this is always <code>ach</code>.</p>
         * <p>The type of payment method to tokenize. For ACH, this is always <code>ach</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("method")
        public AchAccountStage method(@NotNull String method) {
            this.method = Objects.requireNonNull(method, "method must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("achAccount")
        public AchAccountTypeStage achAccount(@NotNull String achAccount) {
            this.achAccount = Objects.requireNonNull(achAccount, "achAccount must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("achAccountType")
        public AchHolderStage achAccountType(@NotNull Achaccounttype achAccountType) {
            this.achAccountType = Objects.requireNonNull(achAccountType, "achAccountType must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("achHolder")
        public AchRoutingStage achHolder(@NotNull String achHolder) {
            this.achHolder = Objects.requireNonNull(achHolder, "achHolder must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("achRouting")
        public _FinalStage achRouting(@NotNull String achRouting) {
            this.achRouting = Objects.requireNonNull(achRouting, "achRouting must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage device(String device) {
            this.device = Optional.ofNullable(device);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "device", nulls = Nulls.SKIP)
        public _FinalStage device(Optional<String> device) {
            this.device = device;
            return this;
        }

        @java.lang.Override
        public _FinalStage achHolderType(AchHolderType achHolderType) {
            this.achHolderType = Optional.ofNullable(achHolderType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "achHolderType", nulls = Nulls.SKIP)
        public _FinalStage achHolderType(Optional<AchHolderType> achHolderType) {
            this.achHolderType = achHolderType;
            return this;
        }

        @java.lang.Override
        public _FinalStage achCode(String achCode) {
            this.achCode = Optional.ofNullable(achCode);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "achCode", nulls = Nulls.SKIP)
        public _FinalStage achCode(Optional<String> achCode) {
            this.achCode = achCode;
            return this;
        }

        @java.lang.Override
        public TokenizeAch build() {
            return new TokenizeAch(
                    method,
                    achAccount,
                    achAccountType,
                    achCode,
                    achHolder,
                    achHolderType,
                    achRouting,
                    device,
                    additionalProperties);
        }
    }
}
