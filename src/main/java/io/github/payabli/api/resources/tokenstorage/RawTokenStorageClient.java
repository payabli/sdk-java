/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.tokenstorage;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.github.payabli.api.core.ClientOptions;
import io.github.payabli.api.core.MediaTypes;
import io.github.payabli.api.core.ObjectMappers;
import io.github.payabli.api.core.PayabliApiApiException;
import io.github.payabli.api.core.PayabliApiException;
import io.github.payabli.api.core.PayabliApiHttpResponse;
import io.github.payabli.api.core.QueryStringMapper;
import io.github.payabli.api.core.RequestOptions;
import io.github.payabli.api.errors.BadRequestError;
import io.github.payabli.api.errors.InternalServerError;
import io.github.payabli.api.errors.ServiceUnavailableError;
import io.github.payabli.api.errors.UnauthorizedError;
import io.github.payabli.api.resources.tokenstorage.requests.AddMethodRequest;
import io.github.payabli.api.resources.tokenstorage.requests.GetMethodRequest;
import io.github.payabli.api.resources.tokenstorage.requests.UpdateMethodRequest;
import io.github.payabli.api.resources.tokenstorage.types.AddMethodResponse;
import io.github.payabli.api.resources.tokenstorage.types.GetMethodResponse;
import io.github.payabli.api.types.PayabliApiResponse;
import io.github.payabli.api.types.PayabliApiResponsePaymethodDelete;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawTokenStorageClient {
    protected final ClientOptions clientOptions;

    public RawTokenStorageClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Saves a payment method for reuse. This call exchanges sensitive payment information for a token that can be used to process future transactions. The <code>ReferenceId</code> value in the response is the <code>storedMethodId</code> to use with transactions.
     */
    public PayabliApiHttpResponse<AddMethodResponse> addMethod(AddMethodRequest request) {
        return addMethod(request, null);
    }

    /**
     * Saves a payment method for reuse. This call exchanges sensitive payment information for a token that can be used to process future transactions. The <code>ReferenceId</code> value in the response is the <code>storedMethodId</code> to use with transactions.
     */
    public PayabliApiHttpResponse<AddMethodResponse> addMethod(
            AddMethodRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("TokenStorage/add");
        if (request.getAchValidation().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "achValidation", request.getAchValidation().get(), false);
        }
        if (request.getCreateAnonymous().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "createAnonymous", request.getCreateAnonymous().get(), false);
        }
        if (request.getForceCustomerCreation().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "forceCustomerCreation",
                    request.getForceCustomerCreation().get(),
                    false);
        }
        if (request.getTemporary().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "temporary", request.getTemporary().get(), false);
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        if (request.getIdempotencyKey().isPresent()) {
            _requestBuilder.addHeader(
                    "idempotencyKey", request.getIdempotencyKey().get());
        }
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), AddMethodResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Retrieves details for a saved payment method.
     */
    public PayabliApiHttpResponse<GetMethodResponse> getMethod(String methodId) {
        return getMethod(methodId, GetMethodRequest.builder().build());
    }

    /**
     * Retrieves details for a saved payment method.
     */
    public PayabliApiHttpResponse<GetMethodResponse> getMethod(String methodId, GetMethodRequest request) {
        return getMethod(methodId, request, null);
    }

    /**
     * Retrieves details for a saved payment method.
     */
    public PayabliApiHttpResponse<GetMethodResponse> getMethod(
            String methodId, GetMethodRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("TokenStorage")
                .addPathSegment(methodId);
        if (request.getCardExpirationFormat().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "cardExpirationFormat",
                    request.getCardExpirationFormat().get(),
                    false);
        }
        if (request.getIncludeTemporary().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "includeTemporary", request.getIncludeTemporary().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetMethodResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Deletes a saved payment method.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymethodDelete> removeMethod(String methodId) {
        return removeMethod(methodId, null);
    }

    /**
     * Deletes a saved payment method.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymethodDelete> removeMethod(
            String methodId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("TokenStorage")
                .addPathSegment(methodId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PayabliApiResponsePaymethodDelete.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Updates a saved payment method.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymethodDelete> updateMethod(
            String methodId, UpdateMethodRequest request) {
        return updateMethod(methodId, request, null);
    }

    /**
     * Updates a saved payment method.
     */
    public PayabliApiHttpResponse<PayabliApiResponsePaymethodDelete> updateMethod(
            String methodId, UpdateMethodRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("TokenStorage")
                .addPathSegment(methodId);
        if (request.getAchValidation().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "achValidation", request.getAchValidation().get(), false);
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PayabliApiResponsePaymethodDelete.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }
}
