/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.tokenstorage.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ConvertToken.Builder.class)
public final class ConvertToken {
    private final String method;

    private final String tokenId;

    private final Map<String, Object> additionalProperties;

    private ConvertToken(String method, String tokenId, Map<String, Object> additionalProperties) {
        this.method = method;
        this.tokenId = tokenId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The type of payment method to tokenize. When converting a temp token to a permanent token, this should match the <code>method</code> set for the temporary token, either <code>ach</code> or <code>card</code>.
     */
    @JsonProperty("method")
    public String getMethod() {
        return method;
    }

    /**
     * @return A temporary stored token ID to be converted to permanent.
     */
    @JsonProperty("tokenId")
    public String getTokenId() {
        return tokenId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConvertToken && equalTo((ConvertToken) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConvertToken other) {
        return method.equals(other.method) && tokenId.equals(other.tokenId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.method, this.tokenId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MethodStage builder() {
        return new Builder();
    }

    public interface MethodStage {
        /**
         * <p>The type of payment method to tokenize. When converting a temp token to a permanent token, this should match the <code>method</code> set for the temporary token, either <code>ach</code> or <code>card</code>.</p>
         */
        TokenIdStage method(@NotNull String method);

        Builder from(ConvertToken other);
    }

    public interface TokenIdStage {
        /**
         * <p>A temporary stored token ID to be converted to permanent.</p>
         */
        _FinalStage tokenId(@NotNull String tokenId);
    }

    public interface _FinalStage {
        ConvertToken build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MethodStage, TokenIdStage, _FinalStage {
        private String method;

        private String tokenId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ConvertToken other) {
            method(other.getMethod());
            tokenId(other.getTokenId());
            return this;
        }

        /**
         * <p>The type of payment method to tokenize. When converting a temp token to a permanent token, this should match the <code>method</code> set for the temporary token, either <code>ach</code> or <code>card</code>.</p>
         * <p>The type of payment method to tokenize. When converting a temp token to a permanent token, this should match the <code>method</code> set for the temporary token, either <code>ach</code> or <code>card</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("method")
        public TokenIdStage method(@NotNull String method) {
            this.method = Objects.requireNonNull(method, "method must not be null");
            return this;
        }

        /**
         * <p>A temporary stored token ID to be converted to permanent.</p>
         * <p>A temporary stored token ID to be converted to permanent.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("tokenId")
        public _FinalStage tokenId(@NotNull String tokenId) {
            this.tokenId = Objects.requireNonNull(tokenId, "tokenId must not be null");
            return this;
        }

        @java.lang.Override
        public ConvertToken build() {
            return new ConvertToken(method, tokenId, additionalProperties);
        }
    }
}
