/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.moneyout.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = VCardGetResponseAssociatedVendorSummary.Builder.class)
public final class VCardGetResponseAssociatedVendorSummary {
    private final Optional<Integer> activeBills;

    private final Optional<Integer> pendingBills;

    private final Optional<Integer> inTransitBills;

    private final Optional<Integer> paidBills;

    private final Optional<Integer> overdueBills;

    private final Optional<Integer> approvedBills;

    private final Optional<Integer> disapprovedBills;

    private final Optional<Integer> totalBills;

    private final Optional<Double> activeBillsAmount;

    private final Optional<Double> pendingBillsAmount;

    private final Optional<Double> inTransitBillsAmount;

    private final Optional<Double> paidBillsAmount;

    private final Optional<Double> overdueBillsAmount;

    private final Optional<Double> approvedBillsAmount;

    private final Optional<Double> disapprovedBillsAmount;

    private final Optional<Double> totalBillsAmount;

    private final Map<String, Object> additionalProperties;

    private VCardGetResponseAssociatedVendorSummary(
            Optional<Integer> activeBills,
            Optional<Integer> pendingBills,
            Optional<Integer> inTransitBills,
            Optional<Integer> paidBills,
            Optional<Integer> overdueBills,
            Optional<Integer> approvedBills,
            Optional<Integer> disapprovedBills,
            Optional<Integer> totalBills,
            Optional<Double> activeBillsAmount,
            Optional<Double> pendingBillsAmount,
            Optional<Double> inTransitBillsAmount,
            Optional<Double> paidBillsAmount,
            Optional<Double> overdueBillsAmount,
            Optional<Double> approvedBillsAmount,
            Optional<Double> disapprovedBillsAmount,
            Optional<Double> totalBillsAmount,
            Map<String, Object> additionalProperties) {
        this.activeBills = activeBills;
        this.pendingBills = pendingBills;
        this.inTransitBills = inTransitBills;
        this.paidBills = paidBills;
        this.overdueBills = overdueBills;
        this.approvedBills = approvedBills;
        this.disapprovedBills = disapprovedBills;
        this.totalBills = totalBills;
        this.activeBillsAmount = activeBillsAmount;
        this.pendingBillsAmount = pendingBillsAmount;
        this.inTransitBillsAmount = inTransitBillsAmount;
        this.paidBillsAmount = paidBillsAmount;
        this.overdueBillsAmount = overdueBillsAmount;
        this.approvedBillsAmount = approvedBillsAmount;
        this.disapprovedBillsAmount = disapprovedBillsAmount;
        this.totalBillsAmount = totalBillsAmount;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Number of active bills.
     */
    @JsonProperty("ActiveBills")
    public Optional<Integer> getActiveBills() {
        return activeBills;
    }

    /**
     * @return Number of bills pending approval or payment.
     */
    @JsonProperty("PendingBills")
    public Optional<Integer> getPendingBills() {
        return pendingBills;
    }

    /**
     * @return Number of bills in transit.
     */
    @JsonProperty("InTransitBills")
    public Optional<Integer> getInTransitBills() {
        return inTransitBills;
    }

    /**
     * @return Number of bills that have been paid.
     */
    @JsonProperty("PaidBills")
    public Optional<Integer> getPaidBills() {
        return paidBills;
    }

    /**
     * @return Number of bills that are overdue.
     */
    @JsonProperty("OverdueBills")
    public Optional<Integer> getOverdueBills() {
        return overdueBills;
    }

    /**
     * @return Number of bills that have been approved.
     */
    @JsonProperty("ApprovedBills")
    public Optional<Integer> getApprovedBills() {
        return approvedBills;
    }

    /**
     * @return Number of bills that have been disapproved.
     */
    @JsonProperty("DisapprovedBills")
    public Optional<Integer> getDisapprovedBills() {
        return disapprovedBills;
    }

    /**
     * @return Total number of bills.
     */
    @JsonProperty("TotalBills")
    public Optional<Integer> getTotalBills() {
        return totalBills;
    }

    /**
     * @return Total amount of active bills.
     */
    @JsonProperty("ActiveBillsAmount")
    public Optional<Double> getActiveBillsAmount() {
        return activeBillsAmount;
    }

    /**
     * @return Total amount of pending bills.
     */
    @JsonProperty("PendingBillsAmount")
    public Optional<Double> getPendingBillsAmount() {
        return pendingBillsAmount;
    }

    /**
     * @return Total amount of bills in transit.
     */
    @JsonProperty("InTransitBillsAmount")
    public Optional<Double> getInTransitBillsAmount() {
        return inTransitBillsAmount;
    }

    /**
     * @return Total amount of paid bills.
     */
    @JsonProperty("PaidBillsAmount")
    public Optional<Double> getPaidBillsAmount() {
        return paidBillsAmount;
    }

    /**
     * @return Total amount of overdue bills.
     */
    @JsonProperty("OverdueBillsAmount")
    public Optional<Double> getOverdueBillsAmount() {
        return overdueBillsAmount;
    }

    /**
     * @return Total amount of approved bills.
     */
    @JsonProperty("ApprovedBillsAmount")
    public Optional<Double> getApprovedBillsAmount() {
        return approvedBillsAmount;
    }

    /**
     * @return Total amount of rejected bills.
     */
    @JsonProperty("DisapprovedBillsAmount")
    public Optional<Double> getDisapprovedBillsAmount() {
        return disapprovedBillsAmount;
    }

    /**
     * @return Total amount of all bills.
     */
    @JsonProperty("TotalBillsAmount")
    public Optional<Double> getTotalBillsAmount() {
        return totalBillsAmount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof VCardGetResponseAssociatedVendorSummary
                && equalTo((VCardGetResponseAssociatedVendorSummary) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(VCardGetResponseAssociatedVendorSummary other) {
        return activeBills.equals(other.activeBills)
                && pendingBills.equals(other.pendingBills)
                && inTransitBills.equals(other.inTransitBills)
                && paidBills.equals(other.paidBills)
                && overdueBills.equals(other.overdueBills)
                && approvedBills.equals(other.approvedBills)
                && disapprovedBills.equals(other.disapprovedBills)
                && totalBills.equals(other.totalBills)
                && activeBillsAmount.equals(other.activeBillsAmount)
                && pendingBillsAmount.equals(other.pendingBillsAmount)
                && inTransitBillsAmount.equals(other.inTransitBillsAmount)
                && paidBillsAmount.equals(other.paidBillsAmount)
                && overdueBillsAmount.equals(other.overdueBillsAmount)
                && approvedBillsAmount.equals(other.approvedBillsAmount)
                && disapprovedBillsAmount.equals(other.disapprovedBillsAmount)
                && totalBillsAmount.equals(other.totalBillsAmount);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.activeBills,
                this.pendingBills,
                this.inTransitBills,
                this.paidBills,
                this.overdueBills,
                this.approvedBills,
                this.disapprovedBills,
                this.totalBills,
                this.activeBillsAmount,
                this.pendingBillsAmount,
                this.inTransitBillsAmount,
                this.paidBillsAmount,
                this.overdueBillsAmount,
                this.approvedBillsAmount,
                this.disapprovedBillsAmount,
                this.totalBillsAmount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> activeBills = Optional.empty();

        private Optional<Integer> pendingBills = Optional.empty();

        private Optional<Integer> inTransitBills = Optional.empty();

        private Optional<Integer> paidBills = Optional.empty();

        private Optional<Integer> overdueBills = Optional.empty();

        private Optional<Integer> approvedBills = Optional.empty();

        private Optional<Integer> disapprovedBills = Optional.empty();

        private Optional<Integer> totalBills = Optional.empty();

        private Optional<Double> activeBillsAmount = Optional.empty();

        private Optional<Double> pendingBillsAmount = Optional.empty();

        private Optional<Double> inTransitBillsAmount = Optional.empty();

        private Optional<Double> paidBillsAmount = Optional.empty();

        private Optional<Double> overdueBillsAmount = Optional.empty();

        private Optional<Double> approvedBillsAmount = Optional.empty();

        private Optional<Double> disapprovedBillsAmount = Optional.empty();

        private Optional<Double> totalBillsAmount = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(VCardGetResponseAssociatedVendorSummary other) {
            activeBills(other.getActiveBills());
            pendingBills(other.getPendingBills());
            inTransitBills(other.getInTransitBills());
            paidBills(other.getPaidBills());
            overdueBills(other.getOverdueBills());
            approvedBills(other.getApprovedBills());
            disapprovedBills(other.getDisapprovedBills());
            totalBills(other.getTotalBills());
            activeBillsAmount(other.getActiveBillsAmount());
            pendingBillsAmount(other.getPendingBillsAmount());
            inTransitBillsAmount(other.getInTransitBillsAmount());
            paidBillsAmount(other.getPaidBillsAmount());
            overdueBillsAmount(other.getOverdueBillsAmount());
            approvedBillsAmount(other.getApprovedBillsAmount());
            disapprovedBillsAmount(other.getDisapprovedBillsAmount());
            totalBillsAmount(other.getTotalBillsAmount());
            return this;
        }

        /**
         * <p>Number of active bills.</p>
         */
        @JsonSetter(value = "ActiveBills", nulls = Nulls.SKIP)
        public Builder activeBills(Optional<Integer> activeBills) {
            this.activeBills = activeBills;
            return this;
        }

        public Builder activeBills(Integer activeBills) {
            this.activeBills = Optional.ofNullable(activeBills);
            return this;
        }

        /**
         * <p>Number of bills pending approval or payment.</p>
         */
        @JsonSetter(value = "PendingBills", nulls = Nulls.SKIP)
        public Builder pendingBills(Optional<Integer> pendingBills) {
            this.pendingBills = pendingBills;
            return this;
        }

        public Builder pendingBills(Integer pendingBills) {
            this.pendingBills = Optional.ofNullable(pendingBills);
            return this;
        }

        /**
         * <p>Number of bills in transit.</p>
         */
        @JsonSetter(value = "InTransitBills", nulls = Nulls.SKIP)
        public Builder inTransitBills(Optional<Integer> inTransitBills) {
            this.inTransitBills = inTransitBills;
            return this;
        }

        public Builder inTransitBills(Integer inTransitBills) {
            this.inTransitBills = Optional.ofNullable(inTransitBills);
            return this;
        }

        /**
         * <p>Number of bills that have been paid.</p>
         */
        @JsonSetter(value = "PaidBills", nulls = Nulls.SKIP)
        public Builder paidBills(Optional<Integer> paidBills) {
            this.paidBills = paidBills;
            return this;
        }

        public Builder paidBills(Integer paidBills) {
            this.paidBills = Optional.ofNullable(paidBills);
            return this;
        }

        /**
         * <p>Number of bills that are overdue.</p>
         */
        @JsonSetter(value = "OverdueBills", nulls = Nulls.SKIP)
        public Builder overdueBills(Optional<Integer> overdueBills) {
            this.overdueBills = overdueBills;
            return this;
        }

        public Builder overdueBills(Integer overdueBills) {
            this.overdueBills = Optional.ofNullable(overdueBills);
            return this;
        }

        /**
         * <p>Number of bills that have been approved.</p>
         */
        @JsonSetter(value = "ApprovedBills", nulls = Nulls.SKIP)
        public Builder approvedBills(Optional<Integer> approvedBills) {
            this.approvedBills = approvedBills;
            return this;
        }

        public Builder approvedBills(Integer approvedBills) {
            this.approvedBills = Optional.ofNullable(approvedBills);
            return this;
        }

        /**
         * <p>Number of bills that have been disapproved.</p>
         */
        @JsonSetter(value = "DisapprovedBills", nulls = Nulls.SKIP)
        public Builder disapprovedBills(Optional<Integer> disapprovedBills) {
            this.disapprovedBills = disapprovedBills;
            return this;
        }

        public Builder disapprovedBills(Integer disapprovedBills) {
            this.disapprovedBills = Optional.ofNullable(disapprovedBills);
            return this;
        }

        /**
         * <p>Total number of bills.</p>
         */
        @JsonSetter(value = "TotalBills", nulls = Nulls.SKIP)
        public Builder totalBills(Optional<Integer> totalBills) {
            this.totalBills = totalBills;
            return this;
        }

        public Builder totalBills(Integer totalBills) {
            this.totalBills = Optional.ofNullable(totalBills);
            return this;
        }

        /**
         * <p>Total amount of active bills.</p>
         */
        @JsonSetter(value = "ActiveBillsAmount", nulls = Nulls.SKIP)
        public Builder activeBillsAmount(Optional<Double> activeBillsAmount) {
            this.activeBillsAmount = activeBillsAmount;
            return this;
        }

        public Builder activeBillsAmount(Double activeBillsAmount) {
            this.activeBillsAmount = Optional.ofNullable(activeBillsAmount);
            return this;
        }

        /**
         * <p>Total amount of pending bills.</p>
         */
        @JsonSetter(value = "PendingBillsAmount", nulls = Nulls.SKIP)
        public Builder pendingBillsAmount(Optional<Double> pendingBillsAmount) {
            this.pendingBillsAmount = pendingBillsAmount;
            return this;
        }

        public Builder pendingBillsAmount(Double pendingBillsAmount) {
            this.pendingBillsAmount = Optional.ofNullable(pendingBillsAmount);
            return this;
        }

        /**
         * <p>Total amount of bills in transit.</p>
         */
        @JsonSetter(value = "InTransitBillsAmount", nulls = Nulls.SKIP)
        public Builder inTransitBillsAmount(Optional<Double> inTransitBillsAmount) {
            this.inTransitBillsAmount = inTransitBillsAmount;
            return this;
        }

        public Builder inTransitBillsAmount(Double inTransitBillsAmount) {
            this.inTransitBillsAmount = Optional.ofNullable(inTransitBillsAmount);
            return this;
        }

        /**
         * <p>Total amount of paid bills.</p>
         */
        @JsonSetter(value = "PaidBillsAmount", nulls = Nulls.SKIP)
        public Builder paidBillsAmount(Optional<Double> paidBillsAmount) {
            this.paidBillsAmount = paidBillsAmount;
            return this;
        }

        public Builder paidBillsAmount(Double paidBillsAmount) {
            this.paidBillsAmount = Optional.ofNullable(paidBillsAmount);
            return this;
        }

        /**
         * <p>Total amount of overdue bills.</p>
         */
        @JsonSetter(value = "OverdueBillsAmount", nulls = Nulls.SKIP)
        public Builder overdueBillsAmount(Optional<Double> overdueBillsAmount) {
            this.overdueBillsAmount = overdueBillsAmount;
            return this;
        }

        public Builder overdueBillsAmount(Double overdueBillsAmount) {
            this.overdueBillsAmount = Optional.ofNullable(overdueBillsAmount);
            return this;
        }

        /**
         * <p>Total amount of approved bills.</p>
         */
        @JsonSetter(value = "ApprovedBillsAmount", nulls = Nulls.SKIP)
        public Builder approvedBillsAmount(Optional<Double> approvedBillsAmount) {
            this.approvedBillsAmount = approvedBillsAmount;
            return this;
        }

        public Builder approvedBillsAmount(Double approvedBillsAmount) {
            this.approvedBillsAmount = Optional.ofNullable(approvedBillsAmount);
            return this;
        }

        /**
         * <p>Total amount of rejected bills.</p>
         */
        @JsonSetter(value = "DisapprovedBillsAmount", nulls = Nulls.SKIP)
        public Builder disapprovedBillsAmount(Optional<Double> disapprovedBillsAmount) {
            this.disapprovedBillsAmount = disapprovedBillsAmount;
            return this;
        }

        public Builder disapprovedBillsAmount(Double disapprovedBillsAmount) {
            this.disapprovedBillsAmount = Optional.ofNullable(disapprovedBillsAmount);
            return this;
        }

        /**
         * <p>Total amount of all bills.</p>
         */
        @JsonSetter(value = "TotalBillsAmount", nulls = Nulls.SKIP)
        public Builder totalBillsAmount(Optional<Double> totalBillsAmount) {
            this.totalBillsAmount = totalBillsAmount;
            return this;
        }

        public Builder totalBillsAmount(Double totalBillsAmount) {
            this.totalBillsAmount = Optional.ofNullable(totalBillsAmount);
            return this;
        }

        public VCardGetResponseAssociatedVendorSummary build() {
            return new VCardGetResponseAssociatedVendorSummary(
                    activeBills,
                    pendingBills,
                    inTransitBills,
                    paidBills,
                    overdueBills,
                    approvedBills,
                    disapprovedBills,
                    totalBills,
                    activeBillsAmount,
                    pendingBillsAmount,
                    inTransitBillsAmount,
                    paidBillsAmount,
                    overdueBillsAmount,
                    approvedBillsAmount,
                    disapprovedBillsAmount,
                    totalBillsAmount,
                    additionalProperties);
        }
    }
}
