/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.moneyin;

import io.github.payabli.api.core.ClientOptions;
import io.github.payabli.api.core.RequestOptions;
import io.github.payabli.api.resources.moneyin.requests.RequestCredit;
import io.github.payabli.api.resources.moneyin.requests.RequestPayment;
import io.github.payabli.api.resources.moneyin.requests.RequestPaymentAuthorize;
import io.github.payabli.api.resources.moneyin.requests.RequestPaymentValidate;
import io.github.payabli.api.resources.moneyin.requests.RequestRefund;
import io.github.payabli.api.resources.moneyin.requests.SendReceipt2TransRequest;
import io.github.payabli.api.resources.moneyin.types.AuthResponse;
import io.github.payabli.api.resources.moneyin.types.CaptureRequest;
import io.github.payabli.api.resources.moneyin.types.CaptureResponse;
import io.github.payabli.api.resources.moneyin.types.PayabliApiResponseGetPaid;
import io.github.payabli.api.resources.moneyin.types.ReceiptResponse;
import io.github.payabli.api.resources.moneyin.types.RefundResponse;
import io.github.payabli.api.resources.moneyin.types.RefundWithInstructionsResponse;
import io.github.payabli.api.resources.moneyin.types.ReverseResponse;
import io.github.payabli.api.resources.moneyin.types.ValidateResponse;
import io.github.payabli.api.resources.moneyin.types.VoidResponse;
import io.github.payabli.api.types.PayabliApiResponse;
import io.github.payabli.api.types.PayabliApiResponse0;
import io.github.payabli.api.types.TransactionQueryRecords;

public class MoneyInClient {
    protected final ClientOptions clientOptions;

    private final RawMoneyInClient rawClient;

    public MoneyInClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawMoneyInClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawMoneyInClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Authorize a card transaction. This returns an authorization code and reserves funds for the merchant. Authorized transactions aren't flagged for settlement until <a href="/api-reference/moneyin/capture-an-authorized-transaction">captured</a>.
     * <p><strong>Note</strong>: Only card transactions can be authorized. This endpoint can't be used for ACH transactions.</p>
     */
    public AuthResponse authorize(RequestPaymentAuthorize request) {
        return this.rawClient.authorize(request).body();
    }

    /**
     * Authorize a card transaction. This returns an authorization code and reserves funds for the merchant. Authorized transactions aren't flagged for settlement until <a href="/api-reference/moneyin/capture-an-authorized-transaction">captured</a>.
     * <p><strong>Note</strong>: Only card transactions can be authorized. This endpoint can't be used for ACH transactions.</p>
     */
    public AuthResponse authorize(RequestPaymentAuthorize request, RequestOptions requestOptions) {
        return this.rawClient.authorize(request, requestOptions).body();
    }

    /**
     * <p>&lt;Warning&gt;
     *   This endpoint is deprecated and will be sunset on November 24, 2025. Migrate to [POST `/capture/{transId}`](/api-reference/moneyin/capture-an-authorized-transaction)`.
     * &lt;/Warning&gt;</p>
     * Capture an <a href="/api-reference/moneyin/authorize-a-transaction">authorized
     * transaction</a> to complete the transaction and move funds from the customer to merchant account.
     */
    public CaptureResponse capture(double amount, String transId) {
        return this.rawClient.capture(amount, transId).body();
    }

    /**
     * <p>&lt;Warning&gt;
     *   This endpoint is deprecated and will be sunset on November 24, 2025. Migrate to [POST `/capture/{transId}`](/api-reference/moneyin/capture-an-authorized-transaction)`.
     * &lt;/Warning&gt;</p>
     * Capture an <a href="/api-reference/moneyin/authorize-a-transaction">authorized
     * transaction</a> to complete the transaction and move funds from the customer to merchant account.
     */
    public CaptureResponse capture(double amount, String transId, RequestOptions requestOptions) {
        return this.rawClient.capture(amount, transId, requestOptions).body();
    }

    /**
     * Capture an <a href="/api-reference/moneyin/authorize-a-transaction">authorized transaction</a> to complete the transaction and move funds from the customer to merchant account.
     * <p>You can use this endpoint to capture both full and partial amounts of the original authorized transaction. See <a href="/developers/developer-guides/pay-in-auth-and-capture">Capture an authorized transaction</a> for more information about this endpoint.</p>
     */
    public CaptureResponse captureAuth(String transId, CaptureRequest request) {
        return this.rawClient.captureAuth(transId, request).body();
    }

    /**
     * Capture an <a href="/api-reference/moneyin/authorize-a-transaction">authorized transaction</a> to complete the transaction and move funds from the customer to merchant account.
     * <p>You can use this endpoint to capture both full and partial amounts of the original authorized transaction. See <a href="/developers/developer-guides/pay-in-auth-and-capture">Capture an authorized transaction</a> for more information about this endpoint.</p>
     */
    public CaptureResponse captureAuth(String transId, CaptureRequest request, RequestOptions requestOptions) {
        return this.rawClient.captureAuth(transId, request, requestOptions).body();
    }

    /**
     * Make a temporary microdeposit in a customer account to verify the customer's ownership and access to the target account. Reverse the microdeposit with <code>reverseCredit</code>.
     * <p>This feature must be enabled by Payabli on a per-merchant basis. Contact support for help.</p>
     */
    public PayabliApiResponse0 credit(RequestCredit request) {
        return this.rawClient.credit(request).body();
    }

    /**
     * Make a temporary microdeposit in a customer account to verify the customer's ownership and access to the target account. Reverse the microdeposit with <code>reverseCredit</code>.
     * <p>This feature must be enabled by Payabli on a per-merchant basis. Contact support for help.</p>
     */
    public PayabliApiResponse0 credit(RequestCredit request, RequestOptions requestOptions) {
        return this.rawClient.credit(request, requestOptions).body();
    }

    /**
     * Retrieve a processed transaction's details.
     */
    public TransactionQueryRecords details(String transId) {
        return this.rawClient.details(transId).body();
    }

    /**
     * Retrieve a processed transaction's details.
     */
    public TransactionQueryRecords details(String transId, RequestOptions requestOptions) {
        return this.rawClient.details(transId, requestOptions).body();
    }

    /**
     * Make a single transaction. This method authorizes and captures a payment in one step.
     */
    public PayabliApiResponseGetPaid getpaid(RequestPayment request) {
        return this.rawClient.getpaid(request).body();
    }

    /**
     * Make a single transaction. This method authorizes and captures a payment in one step.
     */
    public PayabliApiResponseGetPaid getpaid(RequestPayment request, RequestOptions requestOptions) {
        return this.rawClient.getpaid(request, requestOptions).body();
    }

    /**
     * A reversal either refunds or voids a transaction independent of the transaction's settlement status. Send a reversal request for a transaction, and Payabli automatically determines whether it's a refund or void. You don't need to know whether the transaction is settled or not.
     */
    public ReverseResponse reverse(double amount, String transId) {
        return this.rawClient.reverse(amount, transId).body();
    }

    /**
     * A reversal either refunds or voids a transaction independent of the transaction's settlement status. Send a reversal request for a transaction, and Payabli automatically determines whether it's a refund or void. You don't need to know whether the transaction is settled or not.
     */
    public ReverseResponse reverse(double amount, String transId, RequestOptions requestOptions) {
        return this.rawClient.reverse(amount, transId, requestOptions).body();
    }

    /**
     * Refund a transaction that has settled and send money back to the account holder. If a transaction hasn't been settled, void it instead.
     */
    public RefundResponse refund(double amount, String transId) {
        return this.rawClient.refund(amount, transId).body();
    }

    /**
     * Refund a transaction that has settled and send money back to the account holder. If a transaction hasn't been settled, void it instead.
     */
    public RefundResponse refund(double amount, String transId, RequestOptions requestOptions) {
        return this.rawClient.refund(amount, transId, requestOptions).body();
    }

    /**
     * Refunds a settled transaction with split instructions.
     */
    public RefundWithInstructionsResponse refundWithInstructions(String transId) {
        return this.rawClient.refundWithInstructions(transId).body();
    }

    /**
     * Refunds a settled transaction with split instructions.
     */
    public RefundWithInstructionsResponse refundWithInstructions(String transId, RequestRefund request) {
        return this.rawClient.refundWithInstructions(transId, request).body();
    }

    /**
     * Refunds a settled transaction with split instructions.
     */
    public RefundWithInstructionsResponse refundWithInstructions(
            String transId, RequestRefund request, RequestOptions requestOptions) {
        return this.rawClient
                .refundWithInstructions(transId, request, requestOptions)
                .body();
    }

    /**
     * Reverse microdeposits that are used to verify customer account ownership and access. The <code>transId</code> value is returned in the success response for the original credit transaction made with <code>api/MoneyIn/makecredit</code>.
     */
    public PayabliApiResponse reverseCredit(String transId) {
        return this.rawClient.reverseCredit(transId).body();
    }

    /**
     * Reverse microdeposits that are used to verify customer account ownership and access. The <code>transId</code> value is returned in the success response for the original credit transaction made with <code>api/MoneyIn/makecredit</code>.
     */
    public PayabliApiResponse reverseCredit(String transId, RequestOptions requestOptions) {
        return this.rawClient.reverseCredit(transId, requestOptions).body();
    }

    /**
     * Send a payment receipt for a transaction.
     */
    public ReceiptResponse sendReceipt2Trans(String transId) {
        return this.rawClient.sendReceipt2Trans(transId).body();
    }

    /**
     * Send a payment receipt for a transaction.
     */
    public ReceiptResponse sendReceipt2Trans(String transId, SendReceipt2TransRequest request) {
        return this.rawClient.sendReceipt2Trans(transId, request).body();
    }

    /**
     * Send a payment receipt for a transaction.
     */
    public ReceiptResponse sendReceipt2Trans(
            String transId, SendReceipt2TransRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .sendReceipt2Trans(transId, request, requestOptions)
                .body();
    }

    /**
     * Validates a card number without running a transaction or authorizing a charge.
     */
    public ValidateResponse validate(RequestPaymentValidate request) {
        return this.rawClient.validate(request).body();
    }

    /**
     * Validates a card number without running a transaction or authorizing a charge.
     */
    public ValidateResponse validate(RequestPaymentValidate request, RequestOptions requestOptions) {
        return this.rawClient.validate(request, requestOptions).body();
    }

    /**
     * Cancel a transaction that hasn't been settled yet. Voiding non-captured authorizations prevents future captures. If a transaction has been settled, refund it instead.
     */
    public VoidResponse void_(String transId) {
        return this.rawClient.void_(transId).body();
    }

    /**
     * Cancel a transaction that hasn't been settled yet. Voiding non-captured authorizations prevents future captures. If a transaction has been settled, refund it instead.
     */
    public VoidResponse void_(String transId, RequestOptions requestOptions) {
        return this.rawClient.void_(transId, requestOptions).body();
    }
}
