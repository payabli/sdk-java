/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.moneyin.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import io.github.payabli.api.resources.moneyin.types.RequestCreditPaymentMethod;
import io.github.payabli.api.types.PaymentDetailCredit;
import io.github.payabli.api.types.PayorDataRequest;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RequestCredit.Builder.class)
public final class RequestCredit {
    private final Optional<String> idempotencyKey;

    private final Optional<Boolean> forceCustomerCreation;

    private final Optional<String> accountId;

    private final PayorDataRequest customerData;

    private final Optional<String> entrypoint;

    private final Optional<String> orderDescription;

    private final Optional<String> orderId;

    private final PaymentDetailCredit paymentDetails;

    private final RequestCreditPaymentMethod paymentMethod;

    private final Optional<String> source;

    private final Optional<String> subdomain;

    private final Map<String, Object> additionalProperties;

    private RequestCredit(
            Optional<String> idempotencyKey,
            Optional<Boolean> forceCustomerCreation,
            Optional<String> accountId,
            PayorDataRequest customerData,
            Optional<String> entrypoint,
            Optional<String> orderDescription,
            Optional<String> orderId,
            PaymentDetailCredit paymentDetails,
            RequestCreditPaymentMethod paymentMethod,
            Optional<String> source,
            Optional<String> subdomain,
            Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.forceCustomerCreation = forceCustomerCreation;
        this.accountId = accountId;
        this.customerData = customerData;
        this.entrypoint = entrypoint;
        this.orderDescription = orderDescription;
        this.orderId = orderId;
        this.paymentDetails = paymentDetails;
        this.paymentMethod = paymentMethod;
        this.source = source;
        this.subdomain = subdomain;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("idempotencyKey")
    public Optional<String> getIdempotencyKey() {
        return idempotencyKey;
    }

    @JsonProperty("forceCustomerCreation")
    public Optional<Boolean> getForceCustomerCreation() {
        return forceCustomerCreation;
    }

    @JsonProperty("accountId")
    public Optional<String> getAccountId() {
        return accountId;
    }

    /**
     * @return Object describing the customer/payor.
     */
    @JsonProperty("customerData")
    public PayorDataRequest getCustomerData() {
        return customerData;
    }

    @JsonProperty("entrypoint")
    public Optional<String> getEntrypoint() {
        return entrypoint;
    }

    @JsonProperty("orderDescription")
    public Optional<String> getOrderDescription() {
        return orderDescription;
    }

    @JsonProperty("orderId")
    public Optional<String> getOrderId() {
        return orderId;
    }

    @JsonProperty("paymentDetails")
    public PaymentDetailCredit getPaymentDetails() {
        return paymentDetails;
    }

    /**
     * @return Object describing the ACH payment method to use for transaction.
     */
    @JsonProperty("paymentMethod")
    public RequestCreditPaymentMethod getPaymentMethod() {
        return paymentMethod;
    }

    @JsonProperty("source")
    public Optional<String> getSource() {
        return source;
    }

    @JsonProperty("subdomain")
    public Optional<String> getSubdomain() {
        return subdomain;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RequestCredit && equalTo((RequestCredit) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RequestCredit other) {
        return idempotencyKey.equals(other.idempotencyKey)
                && forceCustomerCreation.equals(other.forceCustomerCreation)
                && accountId.equals(other.accountId)
                && customerData.equals(other.customerData)
                && entrypoint.equals(other.entrypoint)
                && orderDescription.equals(other.orderDescription)
                && orderId.equals(other.orderId)
                && paymentDetails.equals(other.paymentDetails)
                && paymentMethod.equals(other.paymentMethod)
                && source.equals(other.source)
                && subdomain.equals(other.subdomain);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.idempotencyKey,
                this.forceCustomerCreation,
                this.accountId,
                this.customerData,
                this.entrypoint,
                this.orderDescription,
                this.orderId,
                this.paymentDetails,
                this.paymentMethod,
                this.source,
                this.subdomain);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CustomerDataStage builder() {
        return new Builder();
    }

    public interface CustomerDataStage {
        /**
         * <p>Object describing the customer/payor.</p>
         */
        PaymentDetailsStage customerData(@NotNull PayorDataRequest customerData);

        Builder from(RequestCredit other);
    }

    public interface PaymentDetailsStage {
        PaymentMethodStage paymentDetails(@NotNull PaymentDetailCredit paymentDetails);
    }

    public interface PaymentMethodStage {
        /**
         * <p>Object describing the ACH payment method to use for transaction.</p>
         */
        _FinalStage paymentMethod(@NotNull RequestCreditPaymentMethod paymentMethod);
    }

    public interface _FinalStage {
        RequestCredit build();

        _FinalStage idempotencyKey(Optional<String> idempotencyKey);

        _FinalStage idempotencyKey(String idempotencyKey);

        _FinalStage forceCustomerCreation(Optional<Boolean> forceCustomerCreation);

        _FinalStage forceCustomerCreation(Boolean forceCustomerCreation);

        _FinalStage accountId(Optional<String> accountId);

        _FinalStage accountId(String accountId);

        _FinalStage entrypoint(Optional<String> entrypoint);

        _FinalStage entrypoint(String entrypoint);

        _FinalStage orderDescription(Optional<String> orderDescription);

        _FinalStage orderDescription(String orderDescription);

        _FinalStage orderId(Optional<String> orderId);

        _FinalStage orderId(String orderId);

        _FinalStage source(Optional<String> source);

        _FinalStage source(String source);

        _FinalStage subdomain(Optional<String> subdomain);

        _FinalStage subdomain(String subdomain);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements CustomerDataStage, PaymentDetailsStage, PaymentMethodStage, _FinalStage {
        private PayorDataRequest customerData;

        private PaymentDetailCredit paymentDetails;

        private RequestCreditPaymentMethod paymentMethod;

        private Optional<String> subdomain = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<String> orderDescription = Optional.empty();

        private Optional<String> entrypoint = Optional.empty();

        private Optional<String> accountId = Optional.empty();

        private Optional<Boolean> forceCustomerCreation = Optional.empty();

        private Optional<String> idempotencyKey = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RequestCredit other) {
            idempotencyKey(other.getIdempotencyKey());
            forceCustomerCreation(other.getForceCustomerCreation());
            accountId(other.getAccountId());
            customerData(other.getCustomerData());
            entrypoint(other.getEntrypoint());
            orderDescription(other.getOrderDescription());
            orderId(other.getOrderId());
            paymentDetails(other.getPaymentDetails());
            paymentMethod(other.getPaymentMethod());
            source(other.getSource());
            subdomain(other.getSubdomain());
            return this;
        }

        /**
         * <p>Object describing the customer/payor.</p>
         * <p>Object describing the customer/payor.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("customerData")
        public PaymentDetailsStage customerData(@NotNull PayorDataRequest customerData) {
            this.customerData = Objects.requireNonNull(customerData, "customerData must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("paymentDetails")
        public PaymentMethodStage paymentDetails(@NotNull PaymentDetailCredit paymentDetails) {
            this.paymentDetails = Objects.requireNonNull(paymentDetails, "paymentDetails must not be null");
            return this;
        }

        /**
         * <p>Object describing the ACH payment method to use for transaction.</p>
         * <p>Object describing the ACH payment method to use for transaction.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("paymentMethod")
        public _FinalStage paymentMethod(@NotNull RequestCreditPaymentMethod paymentMethod) {
            this.paymentMethod = Objects.requireNonNull(paymentMethod, "paymentMethod must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage subdomain(String subdomain) {
            this.subdomain = Optional.ofNullable(subdomain);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "subdomain", nulls = Nulls.SKIP)
        public _FinalStage subdomain(Optional<String> subdomain) {
            this.subdomain = subdomain;
            return this;
        }

        @java.lang.Override
        public _FinalStage source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public _FinalStage source(Optional<String> source) {
            this.source = source;
            return this;
        }

        @java.lang.Override
        public _FinalStage orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "orderId", nulls = Nulls.SKIP)
        public _FinalStage orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        @java.lang.Override
        public _FinalStage orderDescription(String orderDescription) {
            this.orderDescription = Optional.ofNullable(orderDescription);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "orderDescription", nulls = Nulls.SKIP)
        public _FinalStage orderDescription(Optional<String> orderDescription) {
            this.orderDescription = orderDescription;
            return this;
        }

        @java.lang.Override
        public _FinalStage entrypoint(String entrypoint) {
            this.entrypoint = Optional.ofNullable(entrypoint);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "entrypoint", nulls = Nulls.SKIP)
        public _FinalStage entrypoint(Optional<String> entrypoint) {
            this.entrypoint = entrypoint;
            return this;
        }

        @java.lang.Override
        public _FinalStage accountId(String accountId) {
            this.accountId = Optional.ofNullable(accountId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "accountId", nulls = Nulls.SKIP)
        public _FinalStage accountId(Optional<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        @java.lang.Override
        public _FinalStage forceCustomerCreation(Boolean forceCustomerCreation) {
            this.forceCustomerCreation = Optional.ofNullable(forceCustomerCreation);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "forceCustomerCreation", nulls = Nulls.SKIP)
        public _FinalStage forceCustomerCreation(Optional<Boolean> forceCustomerCreation) {
            this.forceCustomerCreation = forceCustomerCreation;
            return this;
        }

        @java.lang.Override
        public _FinalStage idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "idempotencyKey", nulls = Nulls.SKIP)
        public _FinalStage idempotencyKey(Optional<String> idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        @java.lang.Override
        public RequestCredit build() {
            return new RequestCredit(
                    idempotencyKey,
                    forceCustomerCreation,
                    accountId,
                    customerData,
                    entrypoint,
                    orderDescription,
                    orderId,
                    paymentDetails,
                    paymentMethod,
                    source,
                    subdomain,
                    additionalProperties);
        }
    }
}
