/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.moneyouttypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import io.github.payabli.api.types.BillingData;
import io.github.payabli.api.types.Contacts;
import io.github.payabli.api.types.VendorPaymentMethod;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RequestOutAuthorizeVendorDataOld.Builder.class)
public final class RequestOutAuthorizeVendorDataOld {
    private final Optional<Map<String, Optional<Map<String, Object>>>> additionalData;

    private final Optional<String> address1;

    private final Optional<String> address2;

    private final Optional<BillingData> billingData;

    private final Optional<String> city;

    private final Optional<List<Contacts>> contacts;

    private final Optional<String> country;

    private final Optional<String> customerVendorAccount;

    private final Optional<String> customField1;

    private final Optional<String> customField2;

    private final Optional<String> ein;

    private final Optional<String> email;

    private final Optional<Long> internalReferenceId;

    private final Optional<String> locationCode;

    private final Optional<String> mcc;

    private final Optional<String> name1;

    private final Optional<String> name2;

    private final Optional<String> payeeName1;

    private final Optional<String> payeeName2;

    private final Optional<VendorPaymentMethod> paymentMethod;

    private final Optional<String> phone;

    private final Optional<String> remitAddress1;

    private final Optional<String> remitAddress2;

    private final Optional<String> remitCity;

    private final Optional<String> remitCountry;

    private final Optional<String> remitState;

    private final Optional<String> remitZip;

    private final Optional<String> state;

    private final Optional<Integer> vendorId;

    private final Optional<String> vendorNumber;

    private final Optional<Integer> vendorStatus;

    private final Optional<String> zip;

    private final Map<String, Object> additionalProperties;

    private RequestOutAuthorizeVendorDataOld(
            Optional<Map<String, Optional<Map<String, Object>>>> additionalData,
            Optional<String> address1,
            Optional<String> address2,
            Optional<BillingData> billingData,
            Optional<String> city,
            Optional<List<Contacts>> contacts,
            Optional<String> country,
            Optional<String> customerVendorAccount,
            Optional<String> customField1,
            Optional<String> customField2,
            Optional<String> ein,
            Optional<String> email,
            Optional<Long> internalReferenceId,
            Optional<String> locationCode,
            Optional<String> mcc,
            Optional<String> name1,
            Optional<String> name2,
            Optional<String> payeeName1,
            Optional<String> payeeName2,
            Optional<VendorPaymentMethod> paymentMethod,
            Optional<String> phone,
            Optional<String> remitAddress1,
            Optional<String> remitAddress2,
            Optional<String> remitCity,
            Optional<String> remitCountry,
            Optional<String> remitState,
            Optional<String> remitZip,
            Optional<String> state,
            Optional<Integer> vendorId,
            Optional<String> vendorNumber,
            Optional<Integer> vendorStatus,
            Optional<String> zip,
            Map<String, Object> additionalProperties) {
        this.additionalData = additionalData;
        this.address1 = address1;
        this.address2 = address2;
        this.billingData = billingData;
        this.city = city;
        this.contacts = contacts;
        this.country = country;
        this.customerVendorAccount = customerVendorAccount;
        this.customField1 = customField1;
        this.customField2 = customField2;
        this.ein = ein;
        this.email = email;
        this.internalReferenceId = internalReferenceId;
        this.locationCode = locationCode;
        this.mcc = mcc;
        this.name1 = name1;
        this.name2 = name2;
        this.payeeName1 = payeeName1;
        this.payeeName2 = payeeName2;
        this.paymentMethod = paymentMethod;
        this.phone = phone;
        this.remitAddress1 = remitAddress1;
        this.remitAddress2 = remitAddress2;
        this.remitCity = remitCity;
        this.remitCountry = remitCountry;
        this.remitState = remitState;
        this.remitZip = remitZip;
        this.state = state;
        this.vendorId = vendorId;
        this.vendorNumber = vendorNumber;
        this.vendorStatus = vendorStatus;
        this.zip = zip;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("additionalData")
    public Optional<Map<String, Optional<Map<String, Object>>>> getAdditionalData() {
        return additionalData;
    }

    /**
     * @return Vendor's address
     */
    @JsonProperty("address1")
    public Optional<String> getAddress1() {
        return address1;
    }

    /**
     * @return Additional line for vendor's address.
     */
    @JsonProperty("address2")
    public Optional<String> getAddress2() {
        return address2;
    }

    /**
     * @return Object containing vendor's bank information.
     */
    @JsonProperty("billingData")
    public Optional<BillingData> getBillingData() {
        return billingData;
    }

    /**
     * @return Vendor's city.
     */
    @JsonProperty("city")
    public Optional<String> getCity() {
        return city;
    }

    /**
     * @return Array of objects describing the vendor's contacts.
     */
    @JsonProperty("contacts")
    public Optional<List<Contacts>> getContacts() {
        return contacts;
    }

    /**
     * @return Vendor's country.
     */
    @JsonProperty("country")
    public Optional<String> getCountry() {
        return country;
    }

    /**
     * @return Account number of paypoint in the vendor side.
     */
    @JsonProperty("customerVendorAccount")
    public Optional<String> getCustomerVendorAccount() {
        return customerVendorAccount;
    }

    @JsonProperty("customField1")
    public Optional<String> getCustomField1() {
        return customField1;
    }

    @JsonProperty("customField2")
    public Optional<String> getCustomField2() {
        return customField2;
    }

    @JsonProperty("ein")
    public Optional<String> getEin() {
        return ein;
    }

    /**
     * @return Vendor's email address. Required for vCard.
     */
    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    /**
     * @return Internal identifier for global vendor account.
     */
    @JsonProperty("internalReferenceId")
    public Optional<Long> getInternalReferenceId() {
        return internalReferenceId;
    }

    @JsonProperty("locationCode")
    public Optional<String> getLocationCode() {
        return locationCode;
    }

    @JsonProperty("mcc")
    public Optional<String> getMcc() {
        return mcc;
    }

    @JsonProperty("name1")
    public Optional<String> getName1() {
        return name1;
    }

    @JsonProperty("name2")
    public Optional<String> getName2() {
        return name2;
    }

    @JsonProperty("payeeName1")
    public Optional<String> getPayeeName1() {
        return payeeName1;
    }

    @JsonProperty("payeeName2")
    public Optional<String> getPayeeName2() {
        return payeeName2;
    }

    @JsonProperty("paymentMethod")
    public Optional<VendorPaymentMethod> getPaymentMethod() {
        return paymentMethod;
    }

    @JsonProperty("phone")
    public Optional<String> getPhone() {
        return phone;
    }

    @JsonProperty("remitAddress1")
    public Optional<String> getRemitAddress1() {
        return remitAddress1;
    }

    @JsonProperty("remitAddress2")
    public Optional<String> getRemitAddress2() {
        return remitAddress2;
    }

    @JsonProperty("remitCity")
    public Optional<String> getRemitCity() {
        return remitCity;
    }

    @JsonProperty("remitCountry")
    public Optional<String> getRemitCountry() {
        return remitCountry;
    }

    @JsonProperty("remitState")
    public Optional<String> getRemitState() {
        return remitState;
    }

    @JsonProperty("remitZip")
    public Optional<String> getRemitZip() {
        return remitZip;
    }

    /**
     * @return Vendor's state. Must be a 2 character state code.
     */
    @JsonProperty("state")
    public Optional<String> getState() {
        return state;
    }

    /**
     * @return Payabli identifier for vendor record. Required when <code>vendorNumber</code> isn't included.
     */
    @JsonProperty("vendorId")
    public Optional<Integer> getVendorId() {
        return vendorId;
    }

    @JsonProperty("vendorNumber")
    public Optional<String> getVendorNumber() {
        return vendorNumber;
    }

    @JsonProperty("vendorStatus")
    public Optional<Integer> getVendorStatus() {
        return vendorStatus;
    }

    /**
     * @return Vendor's postal code.
     */
    @JsonProperty("zip")
    public Optional<String> getZip() {
        return zip;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RequestOutAuthorizeVendorDataOld && equalTo((RequestOutAuthorizeVendorDataOld) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RequestOutAuthorizeVendorDataOld other) {
        return additionalData.equals(other.additionalData)
                && address1.equals(other.address1)
                && address2.equals(other.address2)
                && billingData.equals(other.billingData)
                && city.equals(other.city)
                && contacts.equals(other.contacts)
                && country.equals(other.country)
                && customerVendorAccount.equals(other.customerVendorAccount)
                && customField1.equals(other.customField1)
                && customField2.equals(other.customField2)
                && ein.equals(other.ein)
                && email.equals(other.email)
                && internalReferenceId.equals(other.internalReferenceId)
                && locationCode.equals(other.locationCode)
                && mcc.equals(other.mcc)
                && name1.equals(other.name1)
                && name2.equals(other.name2)
                && payeeName1.equals(other.payeeName1)
                && payeeName2.equals(other.payeeName2)
                && paymentMethod.equals(other.paymentMethod)
                && phone.equals(other.phone)
                && remitAddress1.equals(other.remitAddress1)
                && remitAddress2.equals(other.remitAddress2)
                && remitCity.equals(other.remitCity)
                && remitCountry.equals(other.remitCountry)
                && remitState.equals(other.remitState)
                && remitZip.equals(other.remitZip)
                && state.equals(other.state)
                && vendorId.equals(other.vendorId)
                && vendorNumber.equals(other.vendorNumber)
                && vendorStatus.equals(other.vendorStatus)
                && zip.equals(other.zip);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.additionalData,
                this.address1,
                this.address2,
                this.billingData,
                this.city,
                this.contacts,
                this.country,
                this.customerVendorAccount,
                this.customField1,
                this.customField2,
                this.ein,
                this.email,
                this.internalReferenceId,
                this.locationCode,
                this.mcc,
                this.name1,
                this.name2,
                this.payeeName1,
                this.payeeName2,
                this.paymentMethod,
                this.phone,
                this.remitAddress1,
                this.remitAddress2,
                this.remitCity,
                this.remitCountry,
                this.remitState,
                this.remitZip,
                this.state,
                this.vendorId,
                this.vendorNumber,
                this.vendorStatus,
                this.zip);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, Optional<Map<String, Object>>>> additionalData = Optional.empty();

        private Optional<String> address1 = Optional.empty();

        private Optional<String> address2 = Optional.empty();

        private Optional<BillingData> billingData = Optional.empty();

        private Optional<String> city = Optional.empty();

        private Optional<List<Contacts>> contacts = Optional.empty();

        private Optional<String> country = Optional.empty();

        private Optional<String> customerVendorAccount = Optional.empty();

        private Optional<String> customField1 = Optional.empty();

        private Optional<String> customField2 = Optional.empty();

        private Optional<String> ein = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<Long> internalReferenceId = Optional.empty();

        private Optional<String> locationCode = Optional.empty();

        private Optional<String> mcc = Optional.empty();

        private Optional<String> name1 = Optional.empty();

        private Optional<String> name2 = Optional.empty();

        private Optional<String> payeeName1 = Optional.empty();

        private Optional<String> payeeName2 = Optional.empty();

        private Optional<VendorPaymentMethod> paymentMethod = Optional.empty();

        private Optional<String> phone = Optional.empty();

        private Optional<String> remitAddress1 = Optional.empty();

        private Optional<String> remitAddress2 = Optional.empty();

        private Optional<String> remitCity = Optional.empty();

        private Optional<String> remitCountry = Optional.empty();

        private Optional<String> remitState = Optional.empty();

        private Optional<String> remitZip = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<Integer> vendorId = Optional.empty();

        private Optional<String> vendorNumber = Optional.empty();

        private Optional<Integer> vendorStatus = Optional.empty();

        private Optional<String> zip = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RequestOutAuthorizeVendorDataOld other) {
            additionalData(other.getAdditionalData());
            address1(other.getAddress1());
            address2(other.getAddress2());
            billingData(other.getBillingData());
            city(other.getCity());
            contacts(other.getContacts());
            country(other.getCountry());
            customerVendorAccount(other.getCustomerVendorAccount());
            customField1(other.getCustomField1());
            customField2(other.getCustomField2());
            ein(other.getEin());
            email(other.getEmail());
            internalReferenceId(other.getInternalReferenceId());
            locationCode(other.getLocationCode());
            mcc(other.getMcc());
            name1(other.getName1());
            name2(other.getName2());
            payeeName1(other.getPayeeName1());
            payeeName2(other.getPayeeName2());
            paymentMethod(other.getPaymentMethod());
            phone(other.getPhone());
            remitAddress1(other.getRemitAddress1());
            remitAddress2(other.getRemitAddress2());
            remitCity(other.getRemitCity());
            remitCountry(other.getRemitCountry());
            remitState(other.getRemitState());
            remitZip(other.getRemitZip());
            state(other.getState());
            vendorId(other.getVendorId());
            vendorNumber(other.getVendorNumber());
            vendorStatus(other.getVendorStatus());
            zip(other.getZip());
            return this;
        }

        @JsonSetter(value = "additionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<Map<String, Optional<Map<String, Object>>>> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(Map<String, Optional<Map<String, Object>>> additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        /**
         * <p>Vendor's address</p>
         */
        @JsonSetter(value = "address1", nulls = Nulls.SKIP)
        public Builder address1(Optional<String> address1) {
            this.address1 = address1;
            return this;
        }

        public Builder address1(String address1) {
            this.address1 = Optional.ofNullable(address1);
            return this;
        }

        /**
         * <p>Additional line for vendor's address.</p>
         */
        @JsonSetter(value = "address2", nulls = Nulls.SKIP)
        public Builder address2(Optional<String> address2) {
            this.address2 = address2;
            return this;
        }

        public Builder address2(String address2) {
            this.address2 = Optional.ofNullable(address2);
            return this;
        }

        /**
         * <p>Object containing vendor's bank information.</p>
         */
        @JsonSetter(value = "billingData", nulls = Nulls.SKIP)
        public Builder billingData(Optional<BillingData> billingData) {
            this.billingData = billingData;
            return this;
        }

        public Builder billingData(BillingData billingData) {
            this.billingData = Optional.ofNullable(billingData);
            return this;
        }

        /**
         * <p>Vendor's city.</p>
         */
        @JsonSetter(value = "city", nulls = Nulls.SKIP)
        public Builder city(Optional<String> city) {
            this.city = city;
            return this;
        }

        public Builder city(String city) {
            this.city = Optional.ofNullable(city);
            return this;
        }

        /**
         * <p>Array of objects describing the vendor's contacts.</p>
         */
        @JsonSetter(value = "contacts", nulls = Nulls.SKIP)
        public Builder contacts(Optional<List<Contacts>> contacts) {
            this.contacts = contacts;
            return this;
        }

        public Builder contacts(List<Contacts> contacts) {
            this.contacts = Optional.ofNullable(contacts);
            return this;
        }

        /**
         * <p>Vendor's country.</p>
         */
        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public Builder country(Optional<String> country) {
            this.country = country;
            return this;
        }

        public Builder country(String country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * <p>Account number of paypoint in the vendor side.</p>
         */
        @JsonSetter(value = "customerVendorAccount", nulls = Nulls.SKIP)
        public Builder customerVendorAccount(Optional<String> customerVendorAccount) {
            this.customerVendorAccount = customerVendorAccount;
            return this;
        }

        public Builder customerVendorAccount(String customerVendorAccount) {
            this.customerVendorAccount = Optional.ofNullable(customerVendorAccount);
            return this;
        }

        @JsonSetter(value = "customField1", nulls = Nulls.SKIP)
        public Builder customField1(Optional<String> customField1) {
            this.customField1 = customField1;
            return this;
        }

        public Builder customField1(String customField1) {
            this.customField1 = Optional.ofNullable(customField1);
            return this;
        }

        @JsonSetter(value = "customField2", nulls = Nulls.SKIP)
        public Builder customField2(Optional<String> customField2) {
            this.customField2 = customField2;
            return this;
        }

        public Builder customField2(String customField2) {
            this.customField2 = Optional.ofNullable(customField2);
            return this;
        }

        @JsonSetter(value = "ein", nulls = Nulls.SKIP)
        public Builder ein(Optional<String> ein) {
            this.ein = ein;
            return this;
        }

        public Builder ein(String ein) {
            this.ein = Optional.ofNullable(ein);
            return this;
        }

        /**
         * <p>Vendor's email address. Required for vCard.</p>
         */
        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * <p>Internal identifier for global vendor account.</p>
         */
        @JsonSetter(value = "internalReferenceId", nulls = Nulls.SKIP)
        public Builder internalReferenceId(Optional<Long> internalReferenceId) {
            this.internalReferenceId = internalReferenceId;
            return this;
        }

        public Builder internalReferenceId(Long internalReferenceId) {
            this.internalReferenceId = Optional.ofNullable(internalReferenceId);
            return this;
        }

        @JsonSetter(value = "locationCode", nulls = Nulls.SKIP)
        public Builder locationCode(Optional<String> locationCode) {
            this.locationCode = locationCode;
            return this;
        }

        public Builder locationCode(String locationCode) {
            this.locationCode = Optional.ofNullable(locationCode);
            return this;
        }

        @JsonSetter(value = "mcc", nulls = Nulls.SKIP)
        public Builder mcc(Optional<String> mcc) {
            this.mcc = mcc;
            return this;
        }

        public Builder mcc(String mcc) {
            this.mcc = Optional.ofNullable(mcc);
            return this;
        }

        @JsonSetter(value = "name1", nulls = Nulls.SKIP)
        public Builder name1(Optional<String> name1) {
            this.name1 = name1;
            return this;
        }

        public Builder name1(String name1) {
            this.name1 = Optional.ofNullable(name1);
            return this;
        }

        @JsonSetter(value = "name2", nulls = Nulls.SKIP)
        public Builder name2(Optional<String> name2) {
            this.name2 = name2;
            return this;
        }

        public Builder name2(String name2) {
            this.name2 = Optional.ofNullable(name2);
            return this;
        }

        @JsonSetter(value = "payeeName1", nulls = Nulls.SKIP)
        public Builder payeeName1(Optional<String> payeeName1) {
            this.payeeName1 = payeeName1;
            return this;
        }

        public Builder payeeName1(String payeeName1) {
            this.payeeName1 = Optional.ofNullable(payeeName1);
            return this;
        }

        @JsonSetter(value = "payeeName2", nulls = Nulls.SKIP)
        public Builder payeeName2(Optional<String> payeeName2) {
            this.payeeName2 = payeeName2;
            return this;
        }

        public Builder payeeName2(String payeeName2) {
            this.payeeName2 = Optional.ofNullable(payeeName2);
            return this;
        }

        @JsonSetter(value = "paymentMethod", nulls = Nulls.SKIP)
        public Builder paymentMethod(Optional<VendorPaymentMethod> paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }

        public Builder paymentMethod(VendorPaymentMethod paymentMethod) {
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        @JsonSetter(value = "phone", nulls = Nulls.SKIP)
        public Builder phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        @JsonSetter(value = "remitAddress1", nulls = Nulls.SKIP)
        public Builder remitAddress1(Optional<String> remitAddress1) {
            this.remitAddress1 = remitAddress1;
            return this;
        }

        public Builder remitAddress1(String remitAddress1) {
            this.remitAddress1 = Optional.ofNullable(remitAddress1);
            return this;
        }

        @JsonSetter(value = "remitAddress2", nulls = Nulls.SKIP)
        public Builder remitAddress2(Optional<String> remitAddress2) {
            this.remitAddress2 = remitAddress2;
            return this;
        }

        public Builder remitAddress2(String remitAddress2) {
            this.remitAddress2 = Optional.ofNullable(remitAddress2);
            return this;
        }

        @JsonSetter(value = "remitCity", nulls = Nulls.SKIP)
        public Builder remitCity(Optional<String> remitCity) {
            this.remitCity = remitCity;
            return this;
        }

        public Builder remitCity(String remitCity) {
            this.remitCity = Optional.ofNullable(remitCity);
            return this;
        }

        @JsonSetter(value = "remitCountry", nulls = Nulls.SKIP)
        public Builder remitCountry(Optional<String> remitCountry) {
            this.remitCountry = remitCountry;
            return this;
        }

        public Builder remitCountry(String remitCountry) {
            this.remitCountry = Optional.ofNullable(remitCountry);
            return this;
        }

        @JsonSetter(value = "remitState", nulls = Nulls.SKIP)
        public Builder remitState(Optional<String> remitState) {
            this.remitState = remitState;
            return this;
        }

        public Builder remitState(String remitState) {
            this.remitState = Optional.ofNullable(remitState);
            return this;
        }

        @JsonSetter(value = "remitZip", nulls = Nulls.SKIP)
        public Builder remitZip(Optional<String> remitZip) {
            this.remitZip = remitZip;
            return this;
        }

        public Builder remitZip(String remitZip) {
            this.remitZip = Optional.ofNullable(remitZip);
            return this;
        }

        /**
         * <p>Vendor's state. Must be a 2 character state code.</p>
         */
        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<String> state) {
            this.state = state;
            return this;
        }

        public Builder state(String state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * <p>Payabli identifier for vendor record. Required when <code>vendorNumber</code> isn't included.</p>
         */
        @JsonSetter(value = "vendorId", nulls = Nulls.SKIP)
        public Builder vendorId(Optional<Integer> vendorId) {
            this.vendorId = vendorId;
            return this;
        }

        public Builder vendorId(Integer vendorId) {
            this.vendorId = Optional.ofNullable(vendorId);
            return this;
        }

        @JsonSetter(value = "vendorNumber", nulls = Nulls.SKIP)
        public Builder vendorNumber(Optional<String> vendorNumber) {
            this.vendorNumber = vendorNumber;
            return this;
        }

        public Builder vendorNumber(String vendorNumber) {
            this.vendorNumber = Optional.ofNullable(vendorNumber);
            return this;
        }

        @JsonSetter(value = "vendorStatus", nulls = Nulls.SKIP)
        public Builder vendorStatus(Optional<Integer> vendorStatus) {
            this.vendorStatus = vendorStatus;
            return this;
        }

        public Builder vendorStatus(Integer vendorStatus) {
            this.vendorStatus = Optional.ofNullable(vendorStatus);
            return this;
        }

        /**
         * <p>Vendor's postal code.</p>
         */
        @JsonSetter(value = "zip", nulls = Nulls.SKIP)
        public Builder zip(Optional<String> zip) {
            this.zip = zip;
            return this;
        }

        public Builder zip(String zip) {
            this.zip = Optional.ofNullable(zip);
            return this;
        }

        public RequestOutAuthorizeVendorDataOld build() {
            return new RequestOutAuthorizeVendorDataOld(
                    additionalData,
                    address1,
                    address2,
                    billingData,
                    city,
                    contacts,
                    country,
                    customerVendorAccount,
                    customField1,
                    customField2,
                    ein,
                    email,
                    internalReferenceId,
                    locationCode,
                    mcc,
                    name1,
                    name2,
                    payeeName1,
                    payeeName2,
                    paymentMethod,
                    phone,
                    remitAddress1,
                    remitAddress2,
                    remitCity,
                    remitCountry,
                    remitState,
                    remitZip,
                    state,
                    vendorId,
                    vendorNumber,
                    vendorStatus,
                    zip,
                    additionalProperties);
        }
    }
}
