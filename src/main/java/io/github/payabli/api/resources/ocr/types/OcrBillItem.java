/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.ocr.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OcrBillItem.Builder.class)
public final class OcrBillItem {
    private final Optional<Double> itemTotalAmount;

    private final Optional<Double> itemTaxAmount;

    private final Optional<Double> itemTaxRate;

    private final Optional<String> itemProductCode;

    private final Optional<String> itemProductName;

    private final Optional<String> itemDescription;

    private final Optional<String> itemCommodityCode;

    private final Optional<String> itemUnitOfMeasure;

    private final Optional<Double> itemCost;

    private final Optional<Integer> itemQty;

    private final Optional<Integer> itemMode;

    private final Optional<List<String>> itemCategories;

    private final Map<String, Object> additionalProperties;

    private OcrBillItem(
            Optional<Double> itemTotalAmount,
            Optional<Double> itemTaxAmount,
            Optional<Double> itemTaxRate,
            Optional<String> itemProductCode,
            Optional<String> itemProductName,
            Optional<String> itemDescription,
            Optional<String> itemCommodityCode,
            Optional<String> itemUnitOfMeasure,
            Optional<Double> itemCost,
            Optional<Integer> itemQty,
            Optional<Integer> itemMode,
            Optional<List<String>> itemCategories,
            Map<String, Object> additionalProperties) {
        this.itemTotalAmount = itemTotalAmount;
        this.itemTaxAmount = itemTaxAmount;
        this.itemTaxRate = itemTaxRate;
        this.itemProductCode = itemProductCode;
        this.itemProductName = itemProductName;
        this.itemDescription = itemDescription;
        this.itemCommodityCode = itemCommodityCode;
        this.itemUnitOfMeasure = itemUnitOfMeasure;
        this.itemCost = itemCost;
        this.itemQty = itemQty;
        this.itemMode = itemMode;
        this.itemCategories = itemCategories;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("itemTotalAmount")
    public Optional<Double> getItemTotalAmount() {
        return itemTotalAmount;
    }

    @JsonProperty("itemTaxAmount")
    public Optional<Double> getItemTaxAmount() {
        return itemTaxAmount;
    }

    @JsonProperty("itemTaxRate")
    public Optional<Double> getItemTaxRate() {
        return itemTaxRate;
    }

    @JsonProperty("itemProductCode")
    public Optional<String> getItemProductCode() {
        return itemProductCode;
    }

    @JsonProperty("itemProductName")
    public Optional<String> getItemProductName() {
        return itemProductName;
    }

    @JsonProperty("itemDescription")
    public Optional<String> getItemDescription() {
        return itemDescription;
    }

    @JsonProperty("itemCommodityCode")
    public Optional<String> getItemCommodityCode() {
        return itemCommodityCode;
    }

    @JsonProperty("itemUnitOfMeasure")
    public Optional<String> getItemUnitOfMeasure() {
        return itemUnitOfMeasure;
    }

    @JsonProperty("itemCost")
    public Optional<Double> getItemCost() {
        return itemCost;
    }

    @JsonProperty("itemQty")
    public Optional<Integer> getItemQty() {
        return itemQty;
    }

    @JsonProperty("itemMode")
    public Optional<Integer> getItemMode() {
        return itemMode;
    }

    @JsonProperty("itemCategories")
    public Optional<List<String>> getItemCategories() {
        return itemCategories;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OcrBillItem && equalTo((OcrBillItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OcrBillItem other) {
        return itemTotalAmount.equals(other.itemTotalAmount)
                && itemTaxAmount.equals(other.itemTaxAmount)
                && itemTaxRate.equals(other.itemTaxRate)
                && itemProductCode.equals(other.itemProductCode)
                && itemProductName.equals(other.itemProductName)
                && itemDescription.equals(other.itemDescription)
                && itemCommodityCode.equals(other.itemCommodityCode)
                && itemUnitOfMeasure.equals(other.itemUnitOfMeasure)
                && itemCost.equals(other.itemCost)
                && itemQty.equals(other.itemQty)
                && itemMode.equals(other.itemMode)
                && itemCategories.equals(other.itemCategories);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.itemTotalAmount,
                this.itemTaxAmount,
                this.itemTaxRate,
                this.itemProductCode,
                this.itemProductName,
                this.itemDescription,
                this.itemCommodityCode,
                this.itemUnitOfMeasure,
                this.itemCost,
                this.itemQty,
                this.itemMode,
                this.itemCategories);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> itemTotalAmount = Optional.empty();

        private Optional<Double> itemTaxAmount = Optional.empty();

        private Optional<Double> itemTaxRate = Optional.empty();

        private Optional<String> itemProductCode = Optional.empty();

        private Optional<String> itemProductName = Optional.empty();

        private Optional<String> itemDescription = Optional.empty();

        private Optional<String> itemCommodityCode = Optional.empty();

        private Optional<String> itemUnitOfMeasure = Optional.empty();

        private Optional<Double> itemCost = Optional.empty();

        private Optional<Integer> itemQty = Optional.empty();

        private Optional<Integer> itemMode = Optional.empty();

        private Optional<List<String>> itemCategories = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OcrBillItem other) {
            itemTotalAmount(other.getItemTotalAmount());
            itemTaxAmount(other.getItemTaxAmount());
            itemTaxRate(other.getItemTaxRate());
            itemProductCode(other.getItemProductCode());
            itemProductName(other.getItemProductName());
            itemDescription(other.getItemDescription());
            itemCommodityCode(other.getItemCommodityCode());
            itemUnitOfMeasure(other.getItemUnitOfMeasure());
            itemCost(other.getItemCost());
            itemQty(other.getItemQty());
            itemMode(other.getItemMode());
            itemCategories(other.getItemCategories());
            return this;
        }

        @JsonSetter(value = "itemTotalAmount", nulls = Nulls.SKIP)
        public Builder itemTotalAmount(Optional<Double> itemTotalAmount) {
            this.itemTotalAmount = itemTotalAmount;
            return this;
        }

        public Builder itemTotalAmount(Double itemTotalAmount) {
            this.itemTotalAmount = Optional.ofNullable(itemTotalAmount);
            return this;
        }

        @JsonSetter(value = "itemTaxAmount", nulls = Nulls.SKIP)
        public Builder itemTaxAmount(Optional<Double> itemTaxAmount) {
            this.itemTaxAmount = itemTaxAmount;
            return this;
        }

        public Builder itemTaxAmount(Double itemTaxAmount) {
            this.itemTaxAmount = Optional.ofNullable(itemTaxAmount);
            return this;
        }

        @JsonSetter(value = "itemTaxRate", nulls = Nulls.SKIP)
        public Builder itemTaxRate(Optional<Double> itemTaxRate) {
            this.itemTaxRate = itemTaxRate;
            return this;
        }

        public Builder itemTaxRate(Double itemTaxRate) {
            this.itemTaxRate = Optional.ofNullable(itemTaxRate);
            return this;
        }

        @JsonSetter(value = "itemProductCode", nulls = Nulls.SKIP)
        public Builder itemProductCode(Optional<String> itemProductCode) {
            this.itemProductCode = itemProductCode;
            return this;
        }

        public Builder itemProductCode(String itemProductCode) {
            this.itemProductCode = Optional.ofNullable(itemProductCode);
            return this;
        }

        @JsonSetter(value = "itemProductName", nulls = Nulls.SKIP)
        public Builder itemProductName(Optional<String> itemProductName) {
            this.itemProductName = itemProductName;
            return this;
        }

        public Builder itemProductName(String itemProductName) {
            this.itemProductName = Optional.ofNullable(itemProductName);
            return this;
        }

        @JsonSetter(value = "itemDescription", nulls = Nulls.SKIP)
        public Builder itemDescription(Optional<String> itemDescription) {
            this.itemDescription = itemDescription;
            return this;
        }

        public Builder itemDescription(String itemDescription) {
            this.itemDescription = Optional.ofNullable(itemDescription);
            return this;
        }

        @JsonSetter(value = "itemCommodityCode", nulls = Nulls.SKIP)
        public Builder itemCommodityCode(Optional<String> itemCommodityCode) {
            this.itemCommodityCode = itemCommodityCode;
            return this;
        }

        public Builder itemCommodityCode(String itemCommodityCode) {
            this.itemCommodityCode = Optional.ofNullable(itemCommodityCode);
            return this;
        }

        @JsonSetter(value = "itemUnitOfMeasure", nulls = Nulls.SKIP)
        public Builder itemUnitOfMeasure(Optional<String> itemUnitOfMeasure) {
            this.itemUnitOfMeasure = itemUnitOfMeasure;
            return this;
        }

        public Builder itemUnitOfMeasure(String itemUnitOfMeasure) {
            this.itemUnitOfMeasure = Optional.ofNullable(itemUnitOfMeasure);
            return this;
        }

        @JsonSetter(value = "itemCost", nulls = Nulls.SKIP)
        public Builder itemCost(Optional<Double> itemCost) {
            this.itemCost = itemCost;
            return this;
        }

        public Builder itemCost(Double itemCost) {
            this.itemCost = Optional.ofNullable(itemCost);
            return this;
        }

        @JsonSetter(value = "itemQty", nulls = Nulls.SKIP)
        public Builder itemQty(Optional<Integer> itemQty) {
            this.itemQty = itemQty;
            return this;
        }

        public Builder itemQty(Integer itemQty) {
            this.itemQty = Optional.ofNullable(itemQty);
            return this;
        }

        @JsonSetter(value = "itemMode", nulls = Nulls.SKIP)
        public Builder itemMode(Optional<Integer> itemMode) {
            this.itemMode = itemMode;
            return this;
        }

        public Builder itemMode(Integer itemMode) {
            this.itemMode = Optional.ofNullable(itemMode);
            return this;
        }

        @JsonSetter(value = "itemCategories", nulls = Nulls.SKIP)
        public Builder itemCategories(Optional<List<String>> itemCategories) {
            this.itemCategories = itemCategories;
            return this;
        }

        public Builder itemCategories(List<String> itemCategories) {
            this.itemCategories = Optional.ofNullable(itemCategories);
            return this;
        }

        public OcrBillItem build() {
            return new OcrBillItem(
                    itemTotalAmount,
                    itemTaxAmount,
                    itemTaxRate,
                    itemProductCode,
                    itemProductName,
                    itemDescription,
                    itemCommodityCode,
                    itemUnitOfMeasure,
                    itemCost,
                    itemQty,
                    itemMode,
                    itemCategories,
                    additionalProperties);
        }
    }
}
