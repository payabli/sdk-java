/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.moneyout;

import io.github.payabli.api.core.ClientOptions;
import io.github.payabli.api.core.RequestOptions;
import io.github.payabli.api.resources.moneyout.requests.CaptureAllOutRequest;
import io.github.payabli.api.resources.moneyout.requests.CaptureOutRequest;
import io.github.payabli.api.resources.moneyout.requests.MoneyOutTypesRequestOutAuthorize;
import io.github.payabli.api.resources.moneyout.requests.SendVCardLinkRequest;
import io.github.payabli.api.resources.moneyouttypes.types.AuthCapturePayoutResponse;
import io.github.payabli.api.resources.moneyouttypes.types.CaptureAllOutResponse;
import io.github.payabli.api.resources.moneyouttypes.types.OperationResult;
import io.github.payabli.api.resources.moneyouttypes.types.VCardGetResponse;
import io.github.payabli.api.types.BillDetailResponse;
import io.github.payabli.api.types.PayabliApiResponse0000;
import java.util.List;

public class MoneyOutClient {
    protected final ClientOptions clientOptions;

    private final RawMoneyOutClient rawClient;

    public MoneyOutClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawMoneyOutClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawMoneyOutClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Authorizes transaction for payout. Authorized transactions aren't flagged for settlement until captured. Use <code>referenceId</code> returned in the response to capture the transaction.
     */
    public AuthCapturePayoutResponse authorizeOut(MoneyOutTypesRequestOutAuthorize request) {
        return this.rawClient.authorizeOut(request).body();
    }

    /**
     * Authorizes transaction for payout. Authorized transactions aren't flagged for settlement until captured. Use <code>referenceId</code> returned in the response to capture the transaction.
     */
    public AuthCapturePayoutResponse authorizeOut(
            MoneyOutTypesRequestOutAuthorize request, RequestOptions requestOptions) {
        return this.rawClient.authorizeOut(request, requestOptions).body();
    }

    /**
     * Cancels an array of payout transactions.
     */
    public CaptureAllOutResponse cancelAllOut(List<String> request) {
        return this.rawClient.cancelAllOut(request).body();
    }

    /**
     * Cancels an array of payout transactions.
     */
    public CaptureAllOutResponse cancelAllOut(List<String> request, RequestOptions requestOptions) {
        return this.rawClient.cancelAllOut(request, requestOptions).body();
    }

    /**
     * Cancel a payout transaction by ID.
     */
    public PayabliApiResponse0000 cancelOut(String referenceId) {
        return this.rawClient.cancelOut(referenceId).body();
    }

    /**
     * Cancel a payout transaction by ID.
     */
    public PayabliApiResponse0000 cancelOut(String referenceId, RequestOptions requestOptions) {
        return this.rawClient.cancelOut(referenceId, requestOptions).body();
    }

    /**
     * Captures an array of authorized payout transactions for settlement.
     */
    public CaptureAllOutResponse captureAllOut(CaptureAllOutRequest request) {
        return this.rawClient.captureAllOut(request).body();
    }

    /**
     * Captures an array of authorized payout transactions for settlement.
     */
    public CaptureAllOutResponse captureAllOut(CaptureAllOutRequest request, RequestOptions requestOptions) {
        return this.rawClient.captureAllOut(request, requestOptions).body();
    }

    /**
     * Captures a single authorized payout transaction by ID.
     */
    public AuthCapturePayoutResponse captureOut(String referenceId) {
        return this.rawClient.captureOut(referenceId).body();
    }

    /**
     * Captures a single authorized payout transaction by ID.
     */
    public AuthCapturePayoutResponse captureOut(String referenceId, CaptureOutRequest request) {
        return this.rawClient.captureOut(referenceId, request).body();
    }

    /**
     * Captures a single authorized payout transaction by ID.
     */
    public AuthCapturePayoutResponse captureOut(
            String referenceId, CaptureOutRequest request, RequestOptions requestOptions) {
        return this.rawClient.captureOut(referenceId, request, requestOptions).body();
    }

    /**
     * Returns details for a processed money out transaction.
     */
    public BillDetailResponse payoutDetails(String transId) {
        return this.rawClient.payoutDetails(transId).body();
    }

    /**
     * Returns details for a processed money out transaction.
     */
    public BillDetailResponse payoutDetails(String transId, RequestOptions requestOptions) {
        return this.rawClient.payoutDetails(transId, requestOptions).body();
    }

    /**
     * Retrieves vCard details for a single card in an entrypoint.
     */
    public VCardGetResponse vCardGet(String cardToken) {
        return this.rawClient.vCardGet(cardToken).body();
    }

    /**
     * Retrieves vCard details for a single card in an entrypoint.
     */
    public VCardGetResponse vCardGet(String cardToken, RequestOptions requestOptions) {
        return this.rawClient.vCardGet(cardToken, requestOptions).body();
    }

    /**
     * Sends a virtual card link via email to the vendor associated with the <code>transId</code>.
     */
    public OperationResult sendVCardLink(SendVCardLinkRequest request) {
        return this.rawClient.sendVCardLink(request).body();
    }

    /**
     * Sends a virtual card link via email to the vendor associated with the <code>transId</code>.
     */
    public OperationResult sendVCardLink(SendVCardLinkRequest request, RequestOptions requestOptions) {
        return this.rawClient.sendVCardLink(request, requestOptions).body();
    }

    /**
     * Retrieve the image of a check associated with a processed transaction.
     * The check image is returned in the response body as a base64-encoded string.
     * The check image is only available for payouts that have been processed.
     */
    public String getCheckImage(String assetName) {
        return this.rawClient.getCheckImage(assetName).body();
    }

    /**
     * Retrieve the image of a check associated with a processed transaction.
     * The check image is returned in the response body as a base64-encoded string.
     * The check image is only available for payouts that have been processed.
     */
    public String getCheckImage(String assetName, RequestOptions requestOptions) {
        return this.rawClient.getCheckImage(assetName, requestOptions).body();
    }
}
