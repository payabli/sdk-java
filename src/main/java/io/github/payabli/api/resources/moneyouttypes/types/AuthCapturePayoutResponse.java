/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.moneyouttypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.Nullable;
import io.github.payabli.api.core.NullableNonemptyFilter;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AuthCapturePayoutResponse.Builder.class)
public final class AuthCapturePayoutResponse {
    private final int responseCode;

    private final Optional<String> pageIdentifier;

    private final long roomId;

    private final boolean isSuccess;

    private final String responseText;

    private final AuthCapturePayoutResponseData responseData;

    private final Map<String, Object> additionalProperties;

    private AuthCapturePayoutResponse(
            int responseCode,
            Optional<String> pageIdentifier,
            long roomId,
            boolean isSuccess,
            String responseText,
            AuthCapturePayoutResponseData responseData,
            Map<String, Object> additionalProperties) {
        this.responseCode = responseCode;
        this.pageIdentifier = pageIdentifier;
        this.roomId = roomId;
        this.isSuccess = isSuccess;
        this.responseText = responseText;
        this.responseData = responseData;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("responseCode")
    public int getResponseCode() {
        return responseCode;
    }

    @JsonIgnore
    public Optional<String> getPageIdentifier() {
        if (pageIdentifier == null) {
            return Optional.empty();
        }
        return pageIdentifier;
    }

    @JsonProperty("roomId")
    public long getRoomId() {
        return roomId;
    }

    @JsonProperty("isSuccess")
    public boolean getIsSuccess() {
        return isSuccess;
    }

    @JsonProperty("responseText")
    public String getResponseText() {
        return responseText;
    }

    @JsonProperty("responseData")
    public AuthCapturePayoutResponseData getResponseData() {
        return responseData;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("pageIdentifier")
    private Optional<String> _getPageIdentifier() {
        return pageIdentifier;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AuthCapturePayoutResponse && equalTo((AuthCapturePayoutResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AuthCapturePayoutResponse other) {
        return responseCode == other.responseCode
                && pageIdentifier.equals(other.pageIdentifier)
                && roomId == other.roomId
                && isSuccess == other.isSuccess
                && responseText.equals(other.responseText)
                && responseData.equals(other.responseData);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.responseCode,
                this.pageIdentifier,
                this.roomId,
                this.isSuccess,
                this.responseText,
                this.responseData);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ResponseCodeStage builder() {
        return new Builder();
    }

    public interface ResponseCodeStage {
        RoomIdStage responseCode(int responseCode);

        Builder from(AuthCapturePayoutResponse other);
    }

    public interface RoomIdStage {
        IsSuccessStage roomId(long roomId);
    }

    public interface IsSuccessStage {
        ResponseTextStage isSuccess(boolean isSuccess);
    }

    public interface ResponseTextStage {
        ResponseDataStage responseText(@NotNull String responseText);
    }

    public interface ResponseDataStage {
        _FinalStage responseData(@NotNull AuthCapturePayoutResponseData responseData);
    }

    public interface _FinalStage {
        AuthCapturePayoutResponse build();

        _FinalStage pageIdentifier(Optional<String> pageIdentifier);

        _FinalStage pageIdentifier(String pageIdentifier);

        _FinalStage pageIdentifier(Nullable<String> pageIdentifier);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements ResponseCodeStage,
                    RoomIdStage,
                    IsSuccessStage,
                    ResponseTextStage,
                    ResponseDataStage,
                    _FinalStage {
        private int responseCode;

        private long roomId;

        private boolean isSuccess;

        private String responseText;

        private AuthCapturePayoutResponseData responseData;

        private Optional<String> pageIdentifier = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AuthCapturePayoutResponse other) {
            responseCode(other.getResponseCode());
            pageIdentifier(other.getPageIdentifier());
            roomId(other.getRoomId());
            isSuccess(other.getIsSuccess());
            responseText(other.getResponseText());
            responseData(other.getResponseData());
            return this;
        }

        @java.lang.Override
        @JsonSetter("responseCode")
        public RoomIdStage responseCode(int responseCode) {
            this.responseCode = responseCode;
            return this;
        }

        @java.lang.Override
        @JsonSetter("roomId")
        public IsSuccessStage roomId(long roomId) {
            this.roomId = roomId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("isSuccess")
        public ResponseTextStage isSuccess(boolean isSuccess) {
            this.isSuccess = isSuccess;
            return this;
        }

        @java.lang.Override
        @JsonSetter("responseText")
        public ResponseDataStage responseText(@NotNull String responseText) {
            this.responseText = Objects.requireNonNull(responseText, "responseText must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("responseData")
        public _FinalStage responseData(@NotNull AuthCapturePayoutResponseData responseData) {
            this.responseData = Objects.requireNonNull(responseData, "responseData must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage pageIdentifier(Nullable<String> pageIdentifier) {
            if (pageIdentifier.isNull()) {
                this.pageIdentifier = null;
            } else if (pageIdentifier.isEmpty()) {
                this.pageIdentifier = Optional.empty();
            } else {
                this.pageIdentifier = Optional.of(pageIdentifier.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage pageIdentifier(String pageIdentifier) {
            this.pageIdentifier = Optional.ofNullable(pageIdentifier);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "pageIdentifier", nulls = Nulls.SKIP)
        public _FinalStage pageIdentifier(Optional<String> pageIdentifier) {
            this.pageIdentifier = pageIdentifier;
            return this;
        }

        @java.lang.Override
        public AuthCapturePayoutResponse build() {
            return new AuthCapturePayoutResponse(
                    responseCode, pageIdentifier, roomId, isSuccess, responseText, responseData, additionalProperties);
        }
    }
}
