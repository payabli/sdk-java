/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.import_;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.github.payabli.api.core.ClientOptions;
import io.github.payabli.api.core.ObjectMappers;
import io.github.payabli.api.core.PayabliApiApiException;
import io.github.payabli.api.core.PayabliApiException;
import io.github.payabli.api.core.PayabliApiHttpResponse;
import io.github.payabli.api.core.QueryStringMapper;
import io.github.payabli.api.core.RequestOptions;
import io.github.payabli.api.errors.BadRequestError;
import io.github.payabli.api.errors.InternalServerError;
import io.github.payabli.api.errors.ServiceUnavailableError;
import io.github.payabli.api.errors.UnauthorizedError;
import io.github.payabli.api.resources.import_.requests.ImportBillsRequest;
import io.github.payabli.api.resources.import_.requests.ImportCustomerRequest;
import io.github.payabli.api.resources.import_.requests.ImportVendorRequest;
import io.github.payabli.api.types.PayabliApiResponse;
import io.github.payabli.api.types.PayabliApiResponseImport;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawImportClient {
    protected final ClientOptions clientOptions;

    public RawImportClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Import a list of bills from a CSV file. See the <a href="/developers/developer-guides/bills-add#import-bills">Import Guide</a> for more help and an example file.
     */
    public PayabliApiHttpResponse<PayabliApiResponseImport> importBills(
            String entry, File file, ImportBillsRequest request) {
        return importBills(entry, file, request, null);
    }

    /**
     * Import a list of bills from a CSV file. See the <a href="/developers/developer-guides/bills-add#import-bills">Import Guide</a> for more help and an example file.
     */
    public PayabliApiHttpResponse<PayabliApiResponseImport> importBills(
            String entry, File file, ImportBillsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Import/billsForm")
                .addPathSegment(entry)
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(file, fileMimeTypeMediaType));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), PayabliApiResponseImport.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Import a list of customers from a CSV file. See the <a href="/developers/developer-guides/entities-customers#import-customers">Import Guide</a> for more help and example files.
     */
    public PayabliApiHttpResponse<PayabliApiResponseImport> importCustomer(
            String entry, File file, ImportCustomerRequest request) {
        return importCustomer(entry, file, request, null);
    }

    /**
     * Import a list of customers from a CSV file. See the <a href="/developers/developer-guides/entities-customers#import-customers">Import Guide</a> for more help and example files.
     */
    public PayabliApiHttpResponse<PayabliApiResponseImport> importCustomer(
            String entry, File file, ImportCustomerRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Import/customersForm")
                .addPathSegment(entry);
        if (request.getReplaceExisting().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "replaceExisting", request.getReplaceExisting().get(), false);
        }
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(file, fileMimeTypeMediaType));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), PayabliApiResponseImport.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Import a list of vendors from a CSV file. See the <a href="/developers/developer-guides/entities-vendors#import-vendors">Import Guide</a> for more help and example files.
     */
    public PayabliApiHttpResponse<PayabliApiResponseImport> importVendor(
            String entry, File file, ImportVendorRequest request) {
        return importVendor(entry, file, request, null);
    }

    /**
     * Import a list of vendors from a CSV file. See the <a href="/developers/developer-guides/entities-vendors#import-vendors">Import Guide</a> for more help and example files.
     */
    public PayabliApiHttpResponse<PayabliApiResponseImport> importVendor(
            String entry, File file, ImportVendorRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Import/vendorsForm")
                .addPathSegment(entry)
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(file, fileMimeTypeMediaType));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), PayabliApiResponseImport.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }
}
