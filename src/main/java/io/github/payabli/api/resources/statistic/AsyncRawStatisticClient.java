/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.statistic;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import io.github.payabli.api.core.ClientOptions;
import io.github.payabli.api.core.ObjectMappers;
import io.github.payabli.api.core.PayabliApiApiException;
import io.github.payabli.api.core.PayabliApiException;
import io.github.payabli.api.core.PayabliApiHttpResponse;
import io.github.payabli.api.core.QueryStringMapper;
import io.github.payabli.api.core.RequestOptions;
import io.github.payabli.api.errors.BadRequestError;
import io.github.payabli.api.errors.InternalServerError;
import io.github.payabli.api.errors.ServiceUnavailableError;
import io.github.payabli.api.errors.UnauthorizedError;
import io.github.payabli.api.resources.statistic.requests.BasicStatsRequest;
import io.github.payabli.api.resources.statistic.requests.CustomerBasicStatsRequest;
import io.github.payabli.api.resources.statistic.requests.SubStatsRequest;
import io.github.payabli.api.resources.statistic.requests.VendorBasicStatsRequest;
import io.github.payabli.api.resources.statistic.types.StatBasicQueryRecord;
import io.github.payabli.api.resources.statistic.types.StatisticsVendorQueryRecord;
import io.github.payabli.api.resources.statistic.types.SubscriptionStatsQueryRecord;
import io.github.payabli.api.types.PayabliApiResponse;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawStatisticClient {
    protected final ClientOptions clientOptions;

    public AsyncRawStatisticClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Retrieves the basic statistics for an organization or a paypoint, for a given time period, grouped by a particular frequency.
     */
    public CompletableFuture<PayabliApiHttpResponse<List<StatBasicQueryRecord>>> basicStats(
            long entryId, String freq, int level, String mode) {
        return basicStats(
                entryId, freq, level, mode, BasicStatsRequest.builder().build());
    }

    /**
     * Retrieves the basic statistics for an organization or a paypoint, for a given time period, grouped by a particular frequency.
     */
    public CompletableFuture<PayabliApiHttpResponse<List<StatBasicQueryRecord>>> basicStats(
            long entryId, String freq, int level, String mode, BasicStatsRequest request) {
        return basicStats(entryId, freq, level, mode, request, null);
    }

    /**
     * Retrieves the basic statistics for an organization or a paypoint, for a given time period, grouped by a particular frequency.
     */
    public CompletableFuture<PayabliApiHttpResponse<List<StatBasicQueryRecord>>> basicStats(
            long entryId,
            String freq,
            int level,
            String mode,
            BasicStatsRequest request,
            RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Statistic/basic")
                .addPathSegment(mode)
                .addPathSegment(freq)
                .addPathSegment(Integer.toString(level))
                .addPathSegment(Long.toString(entryId));
        if (request.getEndDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "endDate", request.getEndDate().get(), false);
        }
        if (request.getParameters().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "parameters", request.getParameters().get(), false);
        }
        if (request.getStartDate().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "startDate", request.getStartDate().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<List<StatBasicQueryRecord>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), new TypeReference<List<StatBasicQueryRecord>>() {}),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Retrieves the basic statistics for a customer for a specific time period, grouped by a selected frequency.
     */
    public CompletableFuture<PayabliApiHttpResponse<List<SubscriptionStatsQueryRecord>>> customerBasicStats(
            int customerId, String freq, String mode) {
        return customerBasicStats(
                customerId, freq, mode, CustomerBasicStatsRequest.builder().build());
    }

    /**
     * Retrieves the basic statistics for a customer for a specific time period, grouped by a selected frequency.
     */
    public CompletableFuture<PayabliApiHttpResponse<List<SubscriptionStatsQueryRecord>>> customerBasicStats(
            int customerId, String freq, String mode, CustomerBasicStatsRequest request) {
        return customerBasicStats(customerId, freq, mode, request, null);
    }

    /**
     * Retrieves the basic statistics for a customer for a specific time period, grouped by a selected frequency.
     */
    public CompletableFuture<PayabliApiHttpResponse<List<SubscriptionStatsQueryRecord>>> customerBasicStats(
            int customerId,
            String freq,
            String mode,
            CustomerBasicStatsRequest request,
            RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Statistic/customerbasic")
                .addPathSegment(mode)
                .addPathSegment(freq)
                .addPathSegment(Integer.toString(customerId));
        if (request.getParameters().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "parameters", request.getParameters().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<List<SubscriptionStatsQueryRecord>>> future =
                new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(),
                                        new TypeReference<List<SubscriptionStatsQueryRecord>>() {}),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Retrieves the subscription statistics for a given interval for a paypoint or organization.
     */
    public CompletableFuture<PayabliApiHttpResponse<List<StatBasicQueryRecord>>> subStats(
            long entryId, String interval, int level) {
        return subStats(entryId, interval, level, SubStatsRequest.builder().build());
    }

    /**
     * Retrieves the subscription statistics for a given interval for a paypoint or organization.
     */
    public CompletableFuture<PayabliApiHttpResponse<List<StatBasicQueryRecord>>> subStats(
            long entryId, String interval, int level, SubStatsRequest request) {
        return subStats(entryId, interval, level, request, null);
    }

    /**
     * Retrieves the subscription statistics for a given interval for a paypoint or organization.
     */
    public CompletableFuture<PayabliApiHttpResponse<List<StatBasicQueryRecord>>> subStats(
            long entryId, String interval, int level, SubStatsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Statistic/subscriptions")
                .addPathSegment(interval)
                .addPathSegment(Integer.toString(level))
                .addPathSegment(Long.toString(entryId));
        if (request.getParameters().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "parameters", request.getParameters().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<List<StatBasicQueryRecord>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), new TypeReference<List<StatBasicQueryRecord>>() {}),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Retrieve the basic statistics about a vendor for a given time period, grouped by frequency.
     */
    public CompletableFuture<PayabliApiHttpResponse<List<StatisticsVendorQueryRecord>>> vendorBasicStats(
            String freq, int idVendor, String mode) {
        return vendorBasicStats(
                freq, idVendor, mode, VendorBasicStatsRequest.builder().build());
    }

    /**
     * Retrieve the basic statistics about a vendor for a given time period, grouped by frequency.
     */
    public CompletableFuture<PayabliApiHttpResponse<List<StatisticsVendorQueryRecord>>> vendorBasicStats(
            String freq, int idVendor, String mode, VendorBasicStatsRequest request) {
        return vendorBasicStats(freq, idVendor, mode, request, null);
    }

    /**
     * Retrieve the basic statistics about a vendor for a given time period, grouped by frequency.
     */
    public CompletableFuture<PayabliApiHttpResponse<List<StatisticsVendorQueryRecord>>> vendorBasicStats(
            String freq, int idVendor, String mode, VendorBasicStatsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Statistic/vendorbasic")
                .addPathSegment(mode)
                .addPathSegment(freq)
                .addPathSegment(Integer.toString(idVendor));
        if (request.getParameters().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "parameters", request.getParameters().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<List<StatisticsVendorQueryRecord>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(),
                                        new TypeReference<List<StatisticsVendorQueryRecord>>() {}),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
