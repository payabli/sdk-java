/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.querytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.Nullable;
import io.github.payabli.api.core.NullableNonemptyFilter;
import io.github.payabli.api.core.ObjectMappers;
import io.github.payabli.api.types.AchHolderType;
import io.github.payabli.api.types.BillData;
import io.github.payabli.api.types.BillingFeeDetail;
import io.github.payabli.api.types.QueryCFeeTransaction;
import io.github.payabli.api.types.QueryPaymentData;
import io.github.payabli.api.types.QueryResponseData;
import io.github.payabli.api.types.QueryTransactionEvents;
import io.github.payabli.api.types.QueryTransactionPayorData;
import io.github.payabli.api.types.SplitFundingContent;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransferDetailRecord.Builder.class)
public final class TransferDetailRecord {
    private final Optional<Integer> transferDetailId;

    private final Optional<Integer> transferId;

    private final Optional<String> transactionId;

    private final Optional<String> transactionNumber;

    private final Optional<String> type;

    private final Optional<String> category;

    private final Optional<Double> grossAmount;

    private final Optional<Double> chargeBackAmount;

    private final Optional<Double> returnedAmount;

    private final Optional<Double> refundAmount;

    private final Optional<Double> holdAmount;

    private final Optional<Double> releasedAmount;

    private final Optional<Double> billingFeesAmount;

    private final Optional<Double> thirdPartyPaidAmount;

    private final Optional<Double> adjustmentsAmount;

    private final Optional<Double> netTransferAmount;

    private final Optional<Double> splitFundingAmount;

    private final Optional<List<BillingFeeDetail>> billingFeesDetails;

    private final Optional<String> parentOrgName;

    private final Optional<String> paypointDbaname;

    private final Optional<String> paypointLegalname;

    private final Optional<String> paypointEntryname;

    private final Optional<String> paymentTransId;

    private final Optional<String> connectorName;

    private final Optional<String> externalProcessorInformation;

    private final Optional<String> gatewayTransId;

    private final Optional<String> orderId;

    private final Optional<String> method;

    private final Optional<String> batchNumber;

    private final Optional<Double> batchAmount;

    private final Optional<Long> payorId;

    private final Optional<QueryPaymentData> paymentData;

    private final Optional<Integer> transStatus;

    private final Optional<Long> paypointId;

    private final Optional<Double> totalAmount;

    private final Optional<Double> netAmount;

    private final Optional<Double> feeAmount;

    private final Optional<Integer> settlementStatus;

    private final Optional<String> operation;

    private final Optional<QueryResponseData> responseData;

    private final Optional<String> source;

    private final Optional<Integer> scheduleReference;

    private final Optional<Long> orgId;

    private final Optional<Long> refundId;

    private final Optional<Long> returnedId;

    private final Optional<Long> chargebackId;

    private final Optional<Long> retrievalId;

    private final Optional<Object> transAdditionalData;

    private final Optional<BillData> invoiceData;

    private final Optional<Long> entrypageId;

    private final Optional<String> externalPaypointId;

    private final Optional<Boolean> isValidatedAch;

    private final Optional<OffsetDateTime> transactionTime;

    private final Optional<QueryTransactionPayorData> customer;

    private final Optional<List<SplitFundingContent>> splitFundingInstructions;

    private final Optional<List<QueryCFeeTransaction>> cfeeTransactions;

    private final Optional<List<QueryTransactionEvents>> transactionEvents;

    private final Optional<Double> pendingFeeAmount;

    private final Optional<Boolean> riskFlagged;

    private final Optional<OffsetDateTime> riskFlaggedOn;

    private final Optional<String> riskStatus;

    private final Optional<String> riskReason;

    private final Optional<String> riskAction;

    private final Optional<Integer> riskActionCode;

    private final Optional<String> deviceId;

    private final Optional<String> achSecCode;

    private final Optional<AchHolderType> achHolderType;

    private final Optional<String> ipAddress;

    private final Optional<Boolean> isSameDayAch;

    private final Optional<String> walletType;

    private final Map<String, Object> additionalProperties;

    private TransferDetailRecord(
            Optional<Integer> transferDetailId,
            Optional<Integer> transferId,
            Optional<String> transactionId,
            Optional<String> transactionNumber,
            Optional<String> type,
            Optional<String> category,
            Optional<Double> grossAmount,
            Optional<Double> chargeBackAmount,
            Optional<Double> returnedAmount,
            Optional<Double> refundAmount,
            Optional<Double> holdAmount,
            Optional<Double> releasedAmount,
            Optional<Double> billingFeesAmount,
            Optional<Double> thirdPartyPaidAmount,
            Optional<Double> adjustmentsAmount,
            Optional<Double> netTransferAmount,
            Optional<Double> splitFundingAmount,
            Optional<List<BillingFeeDetail>> billingFeesDetails,
            Optional<String> parentOrgName,
            Optional<String> paypointDbaname,
            Optional<String> paypointLegalname,
            Optional<String> paypointEntryname,
            Optional<String> paymentTransId,
            Optional<String> connectorName,
            Optional<String> externalProcessorInformation,
            Optional<String> gatewayTransId,
            Optional<String> orderId,
            Optional<String> method,
            Optional<String> batchNumber,
            Optional<Double> batchAmount,
            Optional<Long> payorId,
            Optional<QueryPaymentData> paymentData,
            Optional<Integer> transStatus,
            Optional<Long> paypointId,
            Optional<Double> totalAmount,
            Optional<Double> netAmount,
            Optional<Double> feeAmount,
            Optional<Integer> settlementStatus,
            Optional<String> operation,
            Optional<QueryResponseData> responseData,
            Optional<String> source,
            Optional<Integer> scheduleReference,
            Optional<Long> orgId,
            Optional<Long> refundId,
            Optional<Long> returnedId,
            Optional<Long> chargebackId,
            Optional<Long> retrievalId,
            Optional<Object> transAdditionalData,
            Optional<BillData> invoiceData,
            Optional<Long> entrypageId,
            Optional<String> externalPaypointId,
            Optional<Boolean> isValidatedAch,
            Optional<OffsetDateTime> transactionTime,
            Optional<QueryTransactionPayorData> customer,
            Optional<List<SplitFundingContent>> splitFundingInstructions,
            Optional<List<QueryCFeeTransaction>> cfeeTransactions,
            Optional<List<QueryTransactionEvents>> transactionEvents,
            Optional<Double> pendingFeeAmount,
            Optional<Boolean> riskFlagged,
            Optional<OffsetDateTime> riskFlaggedOn,
            Optional<String> riskStatus,
            Optional<String> riskReason,
            Optional<String> riskAction,
            Optional<Integer> riskActionCode,
            Optional<String> deviceId,
            Optional<String> achSecCode,
            Optional<AchHolderType> achHolderType,
            Optional<String> ipAddress,
            Optional<Boolean> isSameDayAch,
            Optional<String> walletType,
            Map<String, Object> additionalProperties) {
        this.transferDetailId = transferDetailId;
        this.transferId = transferId;
        this.transactionId = transactionId;
        this.transactionNumber = transactionNumber;
        this.type = type;
        this.category = category;
        this.grossAmount = grossAmount;
        this.chargeBackAmount = chargeBackAmount;
        this.returnedAmount = returnedAmount;
        this.refundAmount = refundAmount;
        this.holdAmount = holdAmount;
        this.releasedAmount = releasedAmount;
        this.billingFeesAmount = billingFeesAmount;
        this.thirdPartyPaidAmount = thirdPartyPaidAmount;
        this.adjustmentsAmount = adjustmentsAmount;
        this.netTransferAmount = netTransferAmount;
        this.splitFundingAmount = splitFundingAmount;
        this.billingFeesDetails = billingFeesDetails;
        this.parentOrgName = parentOrgName;
        this.paypointDbaname = paypointDbaname;
        this.paypointLegalname = paypointLegalname;
        this.paypointEntryname = paypointEntryname;
        this.paymentTransId = paymentTransId;
        this.connectorName = connectorName;
        this.externalProcessorInformation = externalProcessorInformation;
        this.gatewayTransId = gatewayTransId;
        this.orderId = orderId;
        this.method = method;
        this.batchNumber = batchNumber;
        this.batchAmount = batchAmount;
        this.payorId = payorId;
        this.paymentData = paymentData;
        this.transStatus = transStatus;
        this.paypointId = paypointId;
        this.totalAmount = totalAmount;
        this.netAmount = netAmount;
        this.feeAmount = feeAmount;
        this.settlementStatus = settlementStatus;
        this.operation = operation;
        this.responseData = responseData;
        this.source = source;
        this.scheduleReference = scheduleReference;
        this.orgId = orgId;
        this.refundId = refundId;
        this.returnedId = returnedId;
        this.chargebackId = chargebackId;
        this.retrievalId = retrievalId;
        this.transAdditionalData = transAdditionalData;
        this.invoiceData = invoiceData;
        this.entrypageId = entrypageId;
        this.externalPaypointId = externalPaypointId;
        this.isValidatedAch = isValidatedAch;
        this.transactionTime = transactionTime;
        this.customer = customer;
        this.splitFundingInstructions = splitFundingInstructions;
        this.cfeeTransactions = cfeeTransactions;
        this.transactionEvents = transactionEvents;
        this.pendingFeeAmount = pendingFeeAmount;
        this.riskFlagged = riskFlagged;
        this.riskFlaggedOn = riskFlaggedOn;
        this.riskStatus = riskStatus;
        this.riskReason = riskReason;
        this.riskAction = riskAction;
        this.riskActionCode = riskActionCode;
        this.deviceId = deviceId;
        this.achSecCode = achSecCode;
        this.achHolderType = achHolderType;
        this.ipAddress = ipAddress;
        this.isSameDayAch = isSameDayAch;
        this.walletType = walletType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique identifier for the transfer detail record
     */
    @JsonIgnore
    public Optional<Integer> getTransferDetailId() {
        if (transferDetailId == null) {
            return Optional.empty();
        }
        return transferDetailId;
    }

    /**
     * @return The ID of the transfer this detail belongs to
     */
    @JsonIgnore
    public Optional<Integer> getTransferId() {
        if (transferId == null) {
            return Optional.empty();
        }
        return transferId;
    }

    /**
     * @return The transaction ID in Payabli's system
     */
    @JsonIgnore
    public Optional<String> getTransactionId() {
        if (transactionId == null) {
            return Optional.empty();
        }
        return transactionId;
    }

    /**
     * @return External transaction reference number
     */
    @JsonIgnore
    public Optional<String> getTransactionNumber() {
        if (transactionNumber == null) {
            return Optional.empty();
        }
        return transactionNumber;
    }

    /**
     * @return The transaction type (credit or debit)
     */
    @JsonIgnore
    public Optional<String> getType() {
        if (type == null) {
            return Optional.empty();
        }
        return type;
    }

    /**
     * @return A field used to categorize the transaction details. Values include: auth, decline, refund, adj, cb, split
     */
    @JsonIgnore
    public Optional<String> getCategory() {
        if (category == null) {
            return Optional.empty();
        }
        return category;
    }

    /**
     * @return The gross amount of the transaction
     */
    @JsonIgnore
    public Optional<Double> getGrossAmount() {
        if (grossAmount == null) {
            return Optional.empty();
        }
        return grossAmount;
    }

    /**
     * @return Chargeback amount deducted from transaction
     */
    @JsonIgnore
    public Optional<Double> getChargeBackAmount() {
        if (chargeBackAmount == null) {
            return Optional.empty();
        }
        return chargeBackAmount;
    }

    /**
     * @return ACH return amount deducted from transaction
     */
    @JsonIgnore
    public Optional<Double> getReturnedAmount() {
        if (returnedAmount == null) {
            return Optional.empty();
        }
        return returnedAmount;
    }

    /**
     * @return Refund amount deducted from transaction
     */
    @JsonIgnore
    public Optional<Double> getRefundAmount() {
        if (refundAmount == null) {
            return Optional.empty();
        }
        return refundAmount;
    }

    /**
     * @return Amount being held for fraud or risk concerns
     */
    @JsonIgnore
    public Optional<Double> getHoldAmount() {
        if (holdAmount == null) {
            return Optional.empty();
        }
        return holdAmount;
    }

    /**
     * @return Previously held funds that have been released after a risk review
     */
    @JsonIgnore
    public Optional<Double> getReleasedAmount() {
        if (releasedAmount == null) {
            return Optional.empty();
        }
        return releasedAmount;
    }

    /**
     * @return Charges applied for transactions and services
     */
    @JsonIgnore
    public Optional<Double> getBillingFeesAmount() {
        if (billingFeesAmount == null) {
            return Optional.empty();
        }
        return billingFeesAmount;
    }

    /**
     * @return Payments captured in the batch cycle that are deposited separately. For example,  checks or cash payments recorded in the batch but not deposited via Payabli,  or card brands making a direct transfer in certain situations.
     */
    @JsonIgnore
    public Optional<Double> getThirdPartyPaidAmount() {
        if (thirdPartyPaidAmount == null) {
            return Optional.empty();
        }
        return thirdPartyPaidAmount;
    }

    /**
     * @return Corrections applied to Billing &amp; Fees charges
     */
    @JsonIgnore
    public Optional<Double> getAdjustmentsAmount() {
        if (adjustmentsAmount == null) {
            return Optional.empty();
        }
        return adjustmentsAmount;
    }

    /**
     * @return The net amount after all deductions
     */
    @JsonIgnore
    public Optional<Double> getNetTransferAmount() {
        if (netTransferAmount == null) {
            return Optional.empty();
        }
        return netTransferAmount;
    }

    /**
     * @return Total amount directed to split funding destinations
     */
    @JsonIgnore
    public Optional<Double> getSplitFundingAmount() {
        if (splitFundingAmount == null) {
            return Optional.empty();
        }
        return splitFundingAmount;
    }

    @JsonIgnore
    public Optional<List<BillingFeeDetail>> getBillingFeesDetails() {
        if (billingFeesDetails == null) {
            return Optional.empty();
        }
        return billingFeesDetails;
    }

    @JsonIgnore
    public Optional<String> getParentOrgName() {
        if (parentOrgName == null) {
            return Optional.empty();
        }
        return parentOrgName;
    }

    @JsonIgnore
    public Optional<String> getPaypointDbaname() {
        if (paypointDbaname == null) {
            return Optional.empty();
        }
        return paypointDbaname;
    }

    @JsonIgnore
    public Optional<String> getPaypointLegalname() {
        if (paypointLegalname == null) {
            return Optional.empty();
        }
        return paypointLegalname;
    }

    /**
     * @return The paypoint's entryname
     */
    @JsonIgnore
    public Optional<String> getPaypointEntryname() {
        if (paypointEntryname == null) {
            return Optional.empty();
        }
        return paypointEntryname;
    }

    /**
     * @return The transaction ID for the payment
     */
    @JsonIgnore
    public Optional<String> getPaymentTransId() {
        if (paymentTransId == null) {
            return Optional.empty();
        }
        return paymentTransId;
    }

    /**
     * @return The payment connector used to process the transaction
     */
    @JsonIgnore
    public Optional<String> getConnectorName() {
        if (connectorName == null) {
            return Optional.empty();
        }
        return connectorName;
    }

    @JsonIgnore
    public Optional<String> getExternalProcessorInformation() {
        if (externalProcessorInformation == null) {
            return Optional.empty();
        }
        return externalProcessorInformation;
    }

    /**
     * @return Internal identifier used for processing
     */
    @JsonIgnore
    public Optional<String> getGatewayTransId() {
        if (gatewayTransId == null) {
            return Optional.empty();
        }
        return gatewayTransId;
    }

    @JsonIgnore
    public Optional<String> getOrderId() {
        if (orderId == null) {
            return Optional.empty();
        }
        return orderId;
    }

    /**
     * @return Payment method used: card, ach, or wallet
     */
    @JsonIgnore
    public Optional<String> getMethod() {
        if (method == null) {
            return Optional.empty();
        }
        return method;
    }

    @JsonIgnore
    public Optional<String> getBatchNumber() {
        if (batchNumber == null) {
            return Optional.empty();
        }
        return batchNumber;
    }

    /**
     * @return The amount of the batch
     */
    @JsonIgnore
    public Optional<Double> getBatchAmount() {
        if (batchAmount == null) {
            return Optional.empty();
        }
        return batchAmount;
    }

    /**
     * @return Unique ID for customer linked to the transaction
     */
    @JsonIgnore
    public Optional<Long> getPayorId() {
        if (payorId == null) {
            return Optional.empty();
        }
        return payorId;
    }

    @JsonIgnore
    public Optional<QueryPaymentData> getPaymentData() {
        if (paymentData == null) {
            return Optional.empty();
        }
        return paymentData;
    }

    /**
     * @return Status of transaction. See <a href="/developers/references/money-in-statuses#money-in-transaction-status">the
     * docs</a> for a
     * full reference.
     */
    @JsonIgnore
    public Optional<Integer> getTransStatus() {
        if (transStatus == null) {
            return Optional.empty();
        }
        return transStatus;
    }

    @JsonIgnore
    public Optional<Long> getPaypointId() {
        if (paypointId == null) {
            return Optional.empty();
        }
        return paypointId;
    }

    /**
     * @return Transaction total amount (including service fee or sub-charge)
     */
    @JsonIgnore
    public Optional<Double> getTotalAmount() {
        if (totalAmount == null) {
            return Optional.empty();
        }
        return totalAmount;
    }

    /**
     * @return Net amount paid
     */
    @JsonIgnore
    public Optional<Double> getNetAmount() {
        if (netAmount == null) {
            return Optional.empty();
        }
        return netAmount;
    }

    @JsonIgnore
    public Optional<Double> getFeeAmount() {
        if (feeAmount == null) {
            return Optional.empty();
        }
        return feeAmount;
    }

    /**
     * @return Settlement status for transaction. See <a href="/developers/references/money-in-statuses#payment-funding-status">the docs</a> for a full reference.
     */
    @JsonIgnore
    public Optional<Integer> getSettlementStatus() {
        if (settlementStatus == null) {
            return Optional.empty();
        }
        return settlementStatus;
    }

    @JsonIgnore
    public Optional<String> getOperation() {
        if (operation == null) {
            return Optional.empty();
        }
        return operation;
    }

    @JsonIgnore
    public Optional<QueryResponseData> getResponseData() {
        if (responseData == null) {
            return Optional.empty();
        }
        return responseData;
    }

    @JsonIgnore
    public Optional<String> getSource() {
        if (source == null) {
            return Optional.empty();
        }
        return source;
    }

    /**
     * @return Reference to the subscription or schedule that originated the transaction
     */
    @JsonIgnore
    public Optional<Integer> getScheduleReference() {
        if (scheduleReference == null) {
            return Optional.empty();
        }
        return scheduleReference;
    }

    @JsonIgnore
    public Optional<Long> getOrgId() {
        if (orgId == null) {
            return Optional.empty();
        }
        return orgId;
    }

    @JsonIgnore
    public Optional<Long> getRefundId() {
        if (refundId == null) {
            return Optional.empty();
        }
        return refundId;
    }

    @JsonIgnore
    public Optional<Long> getReturnedId() {
        if (returnedId == null) {
            return Optional.empty();
        }
        return returnedId;
    }

    @JsonIgnore
    public Optional<Long> getChargebackId() {
        if (chargebackId == null) {
            return Optional.empty();
        }
        return chargebackId;
    }

    @JsonIgnore
    public Optional<Long> getRetrievalId() {
        if (retrievalId == null) {
            return Optional.empty();
        }
        return retrievalId;
    }

    /**
     * @return Additional transaction data
     */
    @JsonIgnore
    public Optional<Object> getTransAdditionalData() {
        if (transAdditionalData == null) {
            return Optional.empty();
        }
        return transAdditionalData;
    }

    /**
     * @return Associated invoice data
     */
    @JsonIgnore
    public Optional<BillData> getInvoiceData() {
        if (invoiceData == null) {
            return Optional.empty();
        }
        return invoiceData;
    }

    @JsonIgnore
    public Optional<Long> getEntrypageId() {
        if (entrypageId == null) {
            return Optional.empty();
        }
        return entrypageId;
    }

    @JsonIgnore
    public Optional<String> getExternalPaypointId() {
        if (externalPaypointId == null) {
            return Optional.empty();
        }
        return externalPaypointId;
    }

    /**
     * @return Indicates whether the ACH account has been validated
     */
    @JsonIgnore
    public Optional<Boolean> getIsValidatedAch() {
        if (isValidatedAch == null) {
            return Optional.empty();
        }
        return isValidatedAch;
    }

    /**
     * @return Transaction date and time, in UTC
     */
    @JsonIgnore
    public Optional<OffsetDateTime> getTransactionTime() {
        if (transactionTime == null) {
            return Optional.empty();
        }
        return transactionTime;
    }

    @JsonIgnore
    public Optional<QueryTransactionPayorData> getCustomer() {
        if (customer == null) {
            return Optional.empty();
        }
        return customer;
    }

    @JsonIgnore
    public Optional<List<SplitFundingContent>> getSplitFundingInstructions() {
        if (splitFundingInstructions == null) {
            return Optional.empty();
        }
        return splitFundingInstructions;
    }

    @JsonIgnore
    public Optional<List<QueryCFeeTransaction>> getCfeeTransactions() {
        if (cfeeTransactions == null) {
            return Optional.empty();
        }
        return cfeeTransactions;
    }

    @JsonIgnore
    public Optional<List<QueryTransactionEvents>> getTransactionEvents() {
        if (transactionEvents == null) {
            return Optional.empty();
        }
        return transactionEvents;
    }

    @JsonIgnore
    public Optional<Double> getPendingFeeAmount() {
        if (pendingFeeAmount == null) {
            return Optional.empty();
        }
        return pendingFeeAmount;
    }

    @JsonIgnore
    public Optional<Boolean> getRiskFlagged() {
        if (riskFlagged == null) {
            return Optional.empty();
        }
        return riskFlagged;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> getRiskFlaggedOn() {
        if (riskFlaggedOn == null) {
            return Optional.empty();
        }
        return riskFlaggedOn;
    }

    @JsonIgnore
    public Optional<String> getRiskStatus() {
        if (riskStatus == null) {
            return Optional.empty();
        }
        return riskStatus;
    }

    @JsonIgnore
    public Optional<String> getRiskReason() {
        if (riskReason == null) {
            return Optional.empty();
        }
        return riskReason;
    }

    @JsonIgnore
    public Optional<String> getRiskAction() {
        if (riskAction == null) {
            return Optional.empty();
        }
        return riskAction;
    }

    @JsonIgnore
    public Optional<Integer> getRiskActionCode() {
        if (riskActionCode == null) {
            return Optional.empty();
        }
        return riskActionCode;
    }

    @JsonIgnore
    public Optional<String> getDeviceId() {
        if (deviceId == null) {
            return Optional.empty();
        }
        return deviceId;
    }

    @JsonIgnore
    public Optional<String> getAchSecCode() {
        if (achSecCode == null) {
            return Optional.empty();
        }
        return achSecCode;
    }

    @JsonIgnore
    public Optional<AchHolderType> getAchHolderType() {
        if (achHolderType == null) {
            return Optional.empty();
        }
        return achHolderType;
    }

    @JsonIgnore
    public Optional<String> getIpAddress() {
        if (ipAddress == null) {
            return Optional.empty();
        }
        return ipAddress;
    }

    /**
     * @return Indicates if this was a same-day ACH transaction.
     */
    @JsonIgnore
    public Optional<Boolean> getIsSameDayAch() {
        if (isSameDayAch == null) {
            return Optional.empty();
        }
        return isSameDayAch;
    }

    /**
     * @return Type of wallet used for the transaction (if applicable)
     */
    @JsonIgnore
    public Optional<String> getWalletType() {
        if (walletType == null) {
            return Optional.empty();
        }
        return walletType;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("transferDetailId")
    private Optional<Integer> _getTransferDetailId() {
        return transferDetailId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("transferId")
    private Optional<Integer> _getTransferId() {
        return transferId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("transactionId")
    private Optional<String> _getTransactionId() {
        return transactionId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("transactionNumber")
    private Optional<String> _getTransactionNumber() {
        return transactionNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("type")
    private Optional<String> _getType() {
        return type;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("category")
    private Optional<String> _getCategory() {
        return category;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("grossAmount")
    private Optional<Double> _getGrossAmount() {
        return grossAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("chargeBackAmount")
    private Optional<Double> _getChargeBackAmount() {
        return chargeBackAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("returnedAmount")
    private Optional<Double> _getReturnedAmount() {
        return returnedAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("refundAmount")
    private Optional<Double> _getRefundAmount() {
        return refundAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("holdAmount")
    private Optional<Double> _getHoldAmount() {
        return holdAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("releasedAmount")
    private Optional<Double> _getReleasedAmount() {
        return releasedAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("billingFeesAmount")
    private Optional<Double> _getBillingFeesAmount() {
        return billingFeesAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("thirdPartyPaidAmount")
    private Optional<Double> _getThirdPartyPaidAmount() {
        return thirdPartyPaidAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("adjustmentsAmount")
    private Optional<Double> _getAdjustmentsAmount() {
        return adjustmentsAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("netTransferAmount")
    private Optional<Double> _getNetTransferAmount() {
        return netTransferAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("splitFundingAmount")
    private Optional<Double> _getSplitFundingAmount() {
        return splitFundingAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("billingFeesDetails")
    private Optional<List<BillingFeeDetail>> _getBillingFeesDetails() {
        return billingFeesDetails;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ParentOrgName")
    private Optional<String> _getParentOrgName() {
        return parentOrgName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PaypointDbaname")
    private Optional<String> _getPaypointDbaname() {
        return paypointDbaname;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PaypointLegalname")
    private Optional<String> _getPaypointLegalname() {
        return paypointLegalname;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PaypointEntryname")
    private Optional<String> _getPaypointEntryname() {
        return paypointEntryname;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PaymentTransId")
    private Optional<String> _getPaymentTransId() {
        return paymentTransId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ConnectorName")
    private Optional<String> _getConnectorName() {
        return connectorName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ExternalProcessorInformation")
    private Optional<String> _getExternalProcessorInformation() {
        return externalProcessorInformation;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("GatewayTransId")
    private Optional<String> _getGatewayTransId() {
        return gatewayTransId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("OrderId")
    private Optional<String> _getOrderId() {
        return orderId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("Method")
    private Optional<String> _getMethod() {
        return method;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BatchNumber")
    private Optional<String> _getBatchNumber() {
        return batchNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BatchAmount")
    private Optional<Double> _getBatchAmount() {
        return batchAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PayorId")
    private Optional<Long> _getPayorId() {
        return payorId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PaymentData")
    private Optional<QueryPaymentData> _getPaymentData() {
        return paymentData;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("TransStatus")
    private Optional<Integer> _getTransStatus() {
        return transStatus;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PaypointId")
    private Optional<Long> _getPaypointId() {
        return paypointId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("TotalAmount")
    private Optional<Double> _getTotalAmount() {
        return totalAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("NetAmount")
    private Optional<Double> _getNetAmount() {
        return netAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("FeeAmount")
    private Optional<Double> _getFeeAmount() {
        return feeAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("SettlementStatus")
    private Optional<Integer> _getSettlementStatus() {
        return settlementStatus;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("Operation")
    private Optional<String> _getOperation() {
        return operation;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ResponseData")
    private Optional<QueryResponseData> _getResponseData() {
        return responseData;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("Source")
    private Optional<String> _getSource() {
        return source;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ScheduleReference")
    private Optional<Integer> _getScheduleReference() {
        return scheduleReference;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("OrgId")
    private Optional<Long> _getOrgId() {
        return orgId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("RefundId")
    private Optional<Long> _getRefundId() {
        return refundId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ReturnedId")
    private Optional<Long> _getReturnedId() {
        return returnedId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ChargebackId")
    private Optional<Long> _getChargebackId() {
        return chargebackId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("RetrievalId")
    private Optional<Long> _getRetrievalId() {
        return retrievalId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("TransAdditionalData")
    private Optional<Object> _getTransAdditionalData() {
        return transAdditionalData;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("invoiceData")
    private Optional<BillData> _getInvoiceData() {
        return invoiceData;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("EntrypageId")
    private Optional<Long> _getEntrypageId() {
        return entrypageId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("externalPaypointID")
    private Optional<String> _getExternalPaypointId() {
        return externalPaypointId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("IsValidatedACH")
    private Optional<Boolean> _getIsValidatedAch() {
        return isValidatedAch;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("TransactionTime")
    private Optional<OffsetDateTime> _getTransactionTime() {
        return transactionTime;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("Customer")
    private Optional<QueryTransactionPayorData> _getCustomer() {
        return customer;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("splitFundingInstructions")
    private Optional<List<SplitFundingContent>> _getSplitFundingInstructions() {
        return splitFundingInstructions;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("CfeeTransactions")
    private Optional<List<QueryCFeeTransaction>> _getCfeeTransactions() {
        return cfeeTransactions;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("TransactionEvents")
    private Optional<List<QueryTransactionEvents>> _getTransactionEvents() {
        return transactionEvents;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PendingFeeAmount")
    private Optional<Double> _getPendingFeeAmount() {
        return pendingFeeAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("RiskFlagged")
    private Optional<Boolean> _getRiskFlagged() {
        return riskFlagged;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("RiskFlaggedOn")
    private Optional<OffsetDateTime> _getRiskFlaggedOn() {
        return riskFlaggedOn;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("RiskStatus")
    private Optional<String> _getRiskStatus() {
        return riskStatus;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("RiskReason")
    private Optional<String> _getRiskReason() {
        return riskReason;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("RiskAction")
    private Optional<String> _getRiskAction() {
        return riskAction;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("RiskActionCode")
    private Optional<Integer> _getRiskActionCode() {
        return riskActionCode;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("DeviceId")
    private Optional<String> _getDeviceId() {
        return deviceId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("AchSecCode")
    private Optional<String> _getAchSecCode() {
        return achSecCode;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("AchHolderType")
    private Optional<AchHolderType> _getAchHolderType() {
        return achHolderType;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("IpAddress")
    private Optional<String> _getIpAddress() {
        return ipAddress;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("IsSameDayACH")
    private Optional<Boolean> _getIsSameDayAch() {
        return isSameDayAch;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("WalletType")
    private Optional<String> _getWalletType() {
        return walletType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransferDetailRecord && equalTo((TransferDetailRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransferDetailRecord other) {
        return transferDetailId.equals(other.transferDetailId)
                && transferId.equals(other.transferId)
                && transactionId.equals(other.transactionId)
                && transactionNumber.equals(other.transactionNumber)
                && type.equals(other.type)
                && category.equals(other.category)
                && grossAmount.equals(other.grossAmount)
                && chargeBackAmount.equals(other.chargeBackAmount)
                && returnedAmount.equals(other.returnedAmount)
                && refundAmount.equals(other.refundAmount)
                && holdAmount.equals(other.holdAmount)
                && releasedAmount.equals(other.releasedAmount)
                && billingFeesAmount.equals(other.billingFeesAmount)
                && thirdPartyPaidAmount.equals(other.thirdPartyPaidAmount)
                && adjustmentsAmount.equals(other.adjustmentsAmount)
                && netTransferAmount.equals(other.netTransferAmount)
                && splitFundingAmount.equals(other.splitFundingAmount)
                && billingFeesDetails.equals(other.billingFeesDetails)
                && parentOrgName.equals(other.parentOrgName)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointLegalname.equals(other.paypointLegalname)
                && paypointEntryname.equals(other.paypointEntryname)
                && paymentTransId.equals(other.paymentTransId)
                && connectorName.equals(other.connectorName)
                && externalProcessorInformation.equals(other.externalProcessorInformation)
                && gatewayTransId.equals(other.gatewayTransId)
                && orderId.equals(other.orderId)
                && method.equals(other.method)
                && batchNumber.equals(other.batchNumber)
                && batchAmount.equals(other.batchAmount)
                && payorId.equals(other.payorId)
                && paymentData.equals(other.paymentData)
                && transStatus.equals(other.transStatus)
                && paypointId.equals(other.paypointId)
                && totalAmount.equals(other.totalAmount)
                && netAmount.equals(other.netAmount)
                && feeAmount.equals(other.feeAmount)
                && settlementStatus.equals(other.settlementStatus)
                && operation.equals(other.operation)
                && responseData.equals(other.responseData)
                && source.equals(other.source)
                && scheduleReference.equals(other.scheduleReference)
                && orgId.equals(other.orgId)
                && refundId.equals(other.refundId)
                && returnedId.equals(other.returnedId)
                && chargebackId.equals(other.chargebackId)
                && retrievalId.equals(other.retrievalId)
                && transAdditionalData.equals(other.transAdditionalData)
                && invoiceData.equals(other.invoiceData)
                && entrypageId.equals(other.entrypageId)
                && externalPaypointId.equals(other.externalPaypointId)
                && isValidatedAch.equals(other.isValidatedAch)
                && transactionTime.equals(other.transactionTime)
                && customer.equals(other.customer)
                && splitFundingInstructions.equals(other.splitFundingInstructions)
                && cfeeTransactions.equals(other.cfeeTransactions)
                && transactionEvents.equals(other.transactionEvents)
                && pendingFeeAmount.equals(other.pendingFeeAmount)
                && riskFlagged.equals(other.riskFlagged)
                && riskFlaggedOn.equals(other.riskFlaggedOn)
                && riskStatus.equals(other.riskStatus)
                && riskReason.equals(other.riskReason)
                && riskAction.equals(other.riskAction)
                && riskActionCode.equals(other.riskActionCode)
                && deviceId.equals(other.deviceId)
                && achSecCode.equals(other.achSecCode)
                && achHolderType.equals(other.achHolderType)
                && ipAddress.equals(other.ipAddress)
                && isSameDayAch.equals(other.isSameDayAch)
                && walletType.equals(other.walletType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.transferDetailId,
                this.transferId,
                this.transactionId,
                this.transactionNumber,
                this.type,
                this.category,
                this.grossAmount,
                this.chargeBackAmount,
                this.returnedAmount,
                this.refundAmount,
                this.holdAmount,
                this.releasedAmount,
                this.billingFeesAmount,
                this.thirdPartyPaidAmount,
                this.adjustmentsAmount,
                this.netTransferAmount,
                this.splitFundingAmount,
                this.billingFeesDetails,
                this.parentOrgName,
                this.paypointDbaname,
                this.paypointLegalname,
                this.paypointEntryname,
                this.paymentTransId,
                this.connectorName,
                this.externalProcessorInformation,
                this.gatewayTransId,
                this.orderId,
                this.method,
                this.batchNumber,
                this.batchAmount,
                this.payorId,
                this.paymentData,
                this.transStatus,
                this.paypointId,
                this.totalAmount,
                this.netAmount,
                this.feeAmount,
                this.settlementStatus,
                this.operation,
                this.responseData,
                this.source,
                this.scheduleReference,
                this.orgId,
                this.refundId,
                this.returnedId,
                this.chargebackId,
                this.retrievalId,
                this.transAdditionalData,
                this.invoiceData,
                this.entrypageId,
                this.externalPaypointId,
                this.isValidatedAch,
                this.transactionTime,
                this.customer,
                this.splitFundingInstructions,
                this.cfeeTransactions,
                this.transactionEvents,
                this.pendingFeeAmount,
                this.riskFlagged,
                this.riskFlaggedOn,
                this.riskStatus,
                this.riskReason,
                this.riskAction,
                this.riskActionCode,
                this.deviceId,
                this.achSecCode,
                this.achHolderType,
                this.ipAddress,
                this.isSameDayAch,
                this.walletType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> transferDetailId = Optional.empty();

        private Optional<Integer> transferId = Optional.empty();

        private Optional<String> transactionId = Optional.empty();

        private Optional<String> transactionNumber = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<String> category = Optional.empty();

        private Optional<Double> grossAmount = Optional.empty();

        private Optional<Double> chargeBackAmount = Optional.empty();

        private Optional<Double> returnedAmount = Optional.empty();

        private Optional<Double> refundAmount = Optional.empty();

        private Optional<Double> holdAmount = Optional.empty();

        private Optional<Double> releasedAmount = Optional.empty();

        private Optional<Double> billingFeesAmount = Optional.empty();

        private Optional<Double> thirdPartyPaidAmount = Optional.empty();

        private Optional<Double> adjustmentsAmount = Optional.empty();

        private Optional<Double> netTransferAmount = Optional.empty();

        private Optional<Double> splitFundingAmount = Optional.empty();

        private Optional<List<BillingFeeDetail>> billingFeesDetails = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<String> paypointEntryname = Optional.empty();

        private Optional<String> paymentTransId = Optional.empty();

        private Optional<String> connectorName = Optional.empty();

        private Optional<String> externalProcessorInformation = Optional.empty();

        private Optional<String> gatewayTransId = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<String> method = Optional.empty();

        private Optional<String> batchNumber = Optional.empty();

        private Optional<Double> batchAmount = Optional.empty();

        private Optional<Long> payorId = Optional.empty();

        private Optional<QueryPaymentData> paymentData = Optional.empty();

        private Optional<Integer> transStatus = Optional.empty();

        private Optional<Long> paypointId = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<Double> netAmount = Optional.empty();

        private Optional<Double> feeAmount = Optional.empty();

        private Optional<Integer> settlementStatus = Optional.empty();

        private Optional<String> operation = Optional.empty();

        private Optional<QueryResponseData> responseData = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<Integer> scheduleReference = Optional.empty();

        private Optional<Long> orgId = Optional.empty();

        private Optional<Long> refundId = Optional.empty();

        private Optional<Long> returnedId = Optional.empty();

        private Optional<Long> chargebackId = Optional.empty();

        private Optional<Long> retrievalId = Optional.empty();

        private Optional<Object> transAdditionalData = Optional.empty();

        private Optional<BillData> invoiceData = Optional.empty();

        private Optional<Long> entrypageId = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<Boolean> isValidatedAch = Optional.empty();

        private Optional<OffsetDateTime> transactionTime = Optional.empty();

        private Optional<QueryTransactionPayorData> customer = Optional.empty();

        private Optional<List<SplitFundingContent>> splitFundingInstructions = Optional.empty();

        private Optional<List<QueryCFeeTransaction>> cfeeTransactions = Optional.empty();

        private Optional<List<QueryTransactionEvents>> transactionEvents = Optional.empty();

        private Optional<Double> pendingFeeAmount = Optional.empty();

        private Optional<Boolean> riskFlagged = Optional.empty();

        private Optional<OffsetDateTime> riskFlaggedOn = Optional.empty();

        private Optional<String> riskStatus = Optional.empty();

        private Optional<String> riskReason = Optional.empty();

        private Optional<String> riskAction = Optional.empty();

        private Optional<Integer> riskActionCode = Optional.empty();

        private Optional<String> deviceId = Optional.empty();

        private Optional<String> achSecCode = Optional.empty();

        private Optional<AchHolderType> achHolderType = Optional.empty();

        private Optional<String> ipAddress = Optional.empty();

        private Optional<Boolean> isSameDayAch = Optional.empty();

        private Optional<String> walletType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TransferDetailRecord other) {
            transferDetailId(other.getTransferDetailId());
            transferId(other.getTransferId());
            transactionId(other.getTransactionId());
            transactionNumber(other.getTransactionNumber());
            type(other.getType());
            category(other.getCategory());
            grossAmount(other.getGrossAmount());
            chargeBackAmount(other.getChargeBackAmount());
            returnedAmount(other.getReturnedAmount());
            refundAmount(other.getRefundAmount());
            holdAmount(other.getHoldAmount());
            releasedAmount(other.getReleasedAmount());
            billingFeesAmount(other.getBillingFeesAmount());
            thirdPartyPaidAmount(other.getThirdPartyPaidAmount());
            adjustmentsAmount(other.getAdjustmentsAmount());
            netTransferAmount(other.getNetTransferAmount());
            splitFundingAmount(other.getSplitFundingAmount());
            billingFeesDetails(other.getBillingFeesDetails());
            parentOrgName(other.getParentOrgName());
            paypointDbaname(other.getPaypointDbaname());
            paypointLegalname(other.getPaypointLegalname());
            paypointEntryname(other.getPaypointEntryname());
            paymentTransId(other.getPaymentTransId());
            connectorName(other.getConnectorName());
            externalProcessorInformation(other.getExternalProcessorInformation());
            gatewayTransId(other.getGatewayTransId());
            orderId(other.getOrderId());
            method(other.getMethod());
            batchNumber(other.getBatchNumber());
            batchAmount(other.getBatchAmount());
            payorId(other.getPayorId());
            paymentData(other.getPaymentData());
            transStatus(other.getTransStatus());
            paypointId(other.getPaypointId());
            totalAmount(other.getTotalAmount());
            netAmount(other.getNetAmount());
            feeAmount(other.getFeeAmount());
            settlementStatus(other.getSettlementStatus());
            operation(other.getOperation());
            responseData(other.getResponseData());
            source(other.getSource());
            scheduleReference(other.getScheduleReference());
            orgId(other.getOrgId());
            refundId(other.getRefundId());
            returnedId(other.getReturnedId());
            chargebackId(other.getChargebackId());
            retrievalId(other.getRetrievalId());
            transAdditionalData(other.getTransAdditionalData());
            invoiceData(other.getInvoiceData());
            entrypageId(other.getEntrypageId());
            externalPaypointId(other.getExternalPaypointId());
            isValidatedAch(other.getIsValidatedAch());
            transactionTime(other.getTransactionTime());
            customer(other.getCustomer());
            splitFundingInstructions(other.getSplitFundingInstructions());
            cfeeTransactions(other.getCfeeTransactions());
            transactionEvents(other.getTransactionEvents());
            pendingFeeAmount(other.getPendingFeeAmount());
            riskFlagged(other.getRiskFlagged());
            riskFlaggedOn(other.getRiskFlaggedOn());
            riskStatus(other.getRiskStatus());
            riskReason(other.getRiskReason());
            riskAction(other.getRiskAction());
            riskActionCode(other.getRiskActionCode());
            deviceId(other.getDeviceId());
            achSecCode(other.getAchSecCode());
            achHolderType(other.getAchHolderType());
            ipAddress(other.getIpAddress());
            isSameDayAch(other.getIsSameDayAch());
            walletType(other.getWalletType());
            return this;
        }

        /**
         * <p>Unique identifier for the transfer detail record</p>
         */
        @JsonSetter(value = "transferDetailId", nulls = Nulls.SKIP)
        public Builder transferDetailId(Optional<Integer> transferDetailId) {
            this.transferDetailId = transferDetailId;
            return this;
        }

        public Builder transferDetailId(Integer transferDetailId) {
            this.transferDetailId = Optional.ofNullable(transferDetailId);
            return this;
        }

        public Builder transferDetailId(Nullable<Integer> transferDetailId) {
            if (transferDetailId.isNull()) {
                this.transferDetailId = null;
            } else if (transferDetailId.isEmpty()) {
                this.transferDetailId = Optional.empty();
            } else {
                this.transferDetailId = Optional.of(transferDetailId.get());
            }
            return this;
        }

        /**
         * <p>The ID of the transfer this detail belongs to</p>
         */
        @JsonSetter(value = "transferId", nulls = Nulls.SKIP)
        public Builder transferId(Optional<Integer> transferId) {
            this.transferId = transferId;
            return this;
        }

        public Builder transferId(Integer transferId) {
            this.transferId = Optional.ofNullable(transferId);
            return this;
        }

        public Builder transferId(Nullable<Integer> transferId) {
            if (transferId.isNull()) {
                this.transferId = null;
            } else if (transferId.isEmpty()) {
                this.transferId = Optional.empty();
            } else {
                this.transferId = Optional.of(transferId.get());
            }
            return this;
        }

        /**
         * <p>The transaction ID in Payabli's system</p>
         */
        @JsonSetter(value = "transactionId", nulls = Nulls.SKIP)
        public Builder transactionId(Optional<String> transactionId) {
            this.transactionId = transactionId;
            return this;
        }

        public Builder transactionId(String transactionId) {
            this.transactionId = Optional.ofNullable(transactionId);
            return this;
        }

        public Builder transactionId(Nullable<String> transactionId) {
            if (transactionId.isNull()) {
                this.transactionId = null;
            } else if (transactionId.isEmpty()) {
                this.transactionId = Optional.empty();
            } else {
                this.transactionId = Optional.of(transactionId.get());
            }
            return this;
        }

        /**
         * <p>External transaction reference number</p>
         */
        @JsonSetter(value = "transactionNumber", nulls = Nulls.SKIP)
        public Builder transactionNumber(Optional<String> transactionNumber) {
            this.transactionNumber = transactionNumber;
            return this;
        }

        public Builder transactionNumber(String transactionNumber) {
            this.transactionNumber = Optional.ofNullable(transactionNumber);
            return this;
        }

        public Builder transactionNumber(Nullable<String> transactionNumber) {
            if (transactionNumber.isNull()) {
                this.transactionNumber = null;
            } else if (transactionNumber.isEmpty()) {
                this.transactionNumber = Optional.empty();
            } else {
                this.transactionNumber = Optional.of(transactionNumber.get());
            }
            return this;
        }

        /**
         * <p>The transaction type (credit or debit)</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Nullable<String> type) {
            if (type.isNull()) {
                this.type = null;
            } else if (type.isEmpty()) {
                this.type = Optional.empty();
            } else {
                this.type = Optional.of(type.get());
            }
            return this;
        }

        /**
         * <p>A field used to categorize the transaction details. Values include: auth, decline, refund, adj, cb, split</p>
         */
        @JsonSetter(value = "category", nulls = Nulls.SKIP)
        public Builder category(Optional<String> category) {
            this.category = category;
            return this;
        }

        public Builder category(String category) {
            this.category = Optional.ofNullable(category);
            return this;
        }

        public Builder category(Nullable<String> category) {
            if (category.isNull()) {
                this.category = null;
            } else if (category.isEmpty()) {
                this.category = Optional.empty();
            } else {
                this.category = Optional.of(category.get());
            }
            return this;
        }

        /**
         * <p>The gross amount of the transaction</p>
         */
        @JsonSetter(value = "grossAmount", nulls = Nulls.SKIP)
        public Builder grossAmount(Optional<Double> grossAmount) {
            this.grossAmount = grossAmount;
            return this;
        }

        public Builder grossAmount(Double grossAmount) {
            this.grossAmount = Optional.ofNullable(grossAmount);
            return this;
        }

        public Builder grossAmount(Nullable<Double> grossAmount) {
            if (grossAmount.isNull()) {
                this.grossAmount = null;
            } else if (grossAmount.isEmpty()) {
                this.grossAmount = Optional.empty();
            } else {
                this.grossAmount = Optional.of(grossAmount.get());
            }
            return this;
        }

        /**
         * <p>Chargeback amount deducted from transaction</p>
         */
        @JsonSetter(value = "chargeBackAmount", nulls = Nulls.SKIP)
        public Builder chargeBackAmount(Optional<Double> chargeBackAmount) {
            this.chargeBackAmount = chargeBackAmount;
            return this;
        }

        public Builder chargeBackAmount(Double chargeBackAmount) {
            this.chargeBackAmount = Optional.ofNullable(chargeBackAmount);
            return this;
        }

        public Builder chargeBackAmount(Nullable<Double> chargeBackAmount) {
            if (chargeBackAmount.isNull()) {
                this.chargeBackAmount = null;
            } else if (chargeBackAmount.isEmpty()) {
                this.chargeBackAmount = Optional.empty();
            } else {
                this.chargeBackAmount = Optional.of(chargeBackAmount.get());
            }
            return this;
        }

        /**
         * <p>ACH return amount deducted from transaction</p>
         */
        @JsonSetter(value = "returnedAmount", nulls = Nulls.SKIP)
        public Builder returnedAmount(Optional<Double> returnedAmount) {
            this.returnedAmount = returnedAmount;
            return this;
        }

        public Builder returnedAmount(Double returnedAmount) {
            this.returnedAmount = Optional.ofNullable(returnedAmount);
            return this;
        }

        public Builder returnedAmount(Nullable<Double> returnedAmount) {
            if (returnedAmount.isNull()) {
                this.returnedAmount = null;
            } else if (returnedAmount.isEmpty()) {
                this.returnedAmount = Optional.empty();
            } else {
                this.returnedAmount = Optional.of(returnedAmount.get());
            }
            return this;
        }

        /**
         * <p>Refund amount deducted from transaction</p>
         */
        @JsonSetter(value = "refundAmount", nulls = Nulls.SKIP)
        public Builder refundAmount(Optional<Double> refundAmount) {
            this.refundAmount = refundAmount;
            return this;
        }

        public Builder refundAmount(Double refundAmount) {
            this.refundAmount = Optional.ofNullable(refundAmount);
            return this;
        }

        public Builder refundAmount(Nullable<Double> refundAmount) {
            if (refundAmount.isNull()) {
                this.refundAmount = null;
            } else if (refundAmount.isEmpty()) {
                this.refundAmount = Optional.empty();
            } else {
                this.refundAmount = Optional.of(refundAmount.get());
            }
            return this;
        }

        /**
         * <p>Amount being held for fraud or risk concerns</p>
         */
        @JsonSetter(value = "holdAmount", nulls = Nulls.SKIP)
        public Builder holdAmount(Optional<Double> holdAmount) {
            this.holdAmount = holdAmount;
            return this;
        }

        public Builder holdAmount(Double holdAmount) {
            this.holdAmount = Optional.ofNullable(holdAmount);
            return this;
        }

        public Builder holdAmount(Nullable<Double> holdAmount) {
            if (holdAmount.isNull()) {
                this.holdAmount = null;
            } else if (holdAmount.isEmpty()) {
                this.holdAmount = Optional.empty();
            } else {
                this.holdAmount = Optional.of(holdAmount.get());
            }
            return this;
        }

        /**
         * <p>Previously held funds that have been released after a risk review</p>
         */
        @JsonSetter(value = "releasedAmount", nulls = Nulls.SKIP)
        public Builder releasedAmount(Optional<Double> releasedAmount) {
            this.releasedAmount = releasedAmount;
            return this;
        }

        public Builder releasedAmount(Double releasedAmount) {
            this.releasedAmount = Optional.ofNullable(releasedAmount);
            return this;
        }

        public Builder releasedAmount(Nullable<Double> releasedAmount) {
            if (releasedAmount.isNull()) {
                this.releasedAmount = null;
            } else if (releasedAmount.isEmpty()) {
                this.releasedAmount = Optional.empty();
            } else {
                this.releasedAmount = Optional.of(releasedAmount.get());
            }
            return this;
        }

        /**
         * <p>Charges applied for transactions and services</p>
         */
        @JsonSetter(value = "billingFeesAmount", nulls = Nulls.SKIP)
        public Builder billingFeesAmount(Optional<Double> billingFeesAmount) {
            this.billingFeesAmount = billingFeesAmount;
            return this;
        }

        public Builder billingFeesAmount(Double billingFeesAmount) {
            this.billingFeesAmount = Optional.ofNullable(billingFeesAmount);
            return this;
        }

        public Builder billingFeesAmount(Nullable<Double> billingFeesAmount) {
            if (billingFeesAmount.isNull()) {
                this.billingFeesAmount = null;
            } else if (billingFeesAmount.isEmpty()) {
                this.billingFeesAmount = Optional.empty();
            } else {
                this.billingFeesAmount = Optional.of(billingFeesAmount.get());
            }
            return this;
        }

        /**
         * <p>Payments captured in the batch cycle that are deposited separately. For example,  checks or cash payments recorded in the batch but not deposited via Payabli,  or card brands making a direct transfer in certain situations.</p>
         */
        @JsonSetter(value = "thirdPartyPaidAmount", nulls = Nulls.SKIP)
        public Builder thirdPartyPaidAmount(Optional<Double> thirdPartyPaidAmount) {
            this.thirdPartyPaidAmount = thirdPartyPaidAmount;
            return this;
        }

        public Builder thirdPartyPaidAmount(Double thirdPartyPaidAmount) {
            this.thirdPartyPaidAmount = Optional.ofNullable(thirdPartyPaidAmount);
            return this;
        }

        public Builder thirdPartyPaidAmount(Nullable<Double> thirdPartyPaidAmount) {
            if (thirdPartyPaidAmount.isNull()) {
                this.thirdPartyPaidAmount = null;
            } else if (thirdPartyPaidAmount.isEmpty()) {
                this.thirdPartyPaidAmount = Optional.empty();
            } else {
                this.thirdPartyPaidAmount = Optional.of(thirdPartyPaidAmount.get());
            }
            return this;
        }

        /**
         * <p>Corrections applied to Billing &amp; Fees charges</p>
         */
        @JsonSetter(value = "adjustmentsAmount", nulls = Nulls.SKIP)
        public Builder adjustmentsAmount(Optional<Double> adjustmentsAmount) {
            this.adjustmentsAmount = adjustmentsAmount;
            return this;
        }

        public Builder adjustmentsAmount(Double adjustmentsAmount) {
            this.adjustmentsAmount = Optional.ofNullable(adjustmentsAmount);
            return this;
        }

        public Builder adjustmentsAmount(Nullable<Double> adjustmentsAmount) {
            if (adjustmentsAmount.isNull()) {
                this.adjustmentsAmount = null;
            } else if (adjustmentsAmount.isEmpty()) {
                this.adjustmentsAmount = Optional.empty();
            } else {
                this.adjustmentsAmount = Optional.of(adjustmentsAmount.get());
            }
            return this;
        }

        /**
         * <p>The net amount after all deductions</p>
         */
        @JsonSetter(value = "netTransferAmount", nulls = Nulls.SKIP)
        public Builder netTransferAmount(Optional<Double> netTransferAmount) {
            this.netTransferAmount = netTransferAmount;
            return this;
        }

        public Builder netTransferAmount(Double netTransferAmount) {
            this.netTransferAmount = Optional.ofNullable(netTransferAmount);
            return this;
        }

        public Builder netTransferAmount(Nullable<Double> netTransferAmount) {
            if (netTransferAmount.isNull()) {
                this.netTransferAmount = null;
            } else if (netTransferAmount.isEmpty()) {
                this.netTransferAmount = Optional.empty();
            } else {
                this.netTransferAmount = Optional.of(netTransferAmount.get());
            }
            return this;
        }

        /**
         * <p>Total amount directed to split funding destinations</p>
         */
        @JsonSetter(value = "splitFundingAmount", nulls = Nulls.SKIP)
        public Builder splitFundingAmount(Optional<Double> splitFundingAmount) {
            this.splitFundingAmount = splitFundingAmount;
            return this;
        }

        public Builder splitFundingAmount(Double splitFundingAmount) {
            this.splitFundingAmount = Optional.ofNullable(splitFundingAmount);
            return this;
        }

        public Builder splitFundingAmount(Nullable<Double> splitFundingAmount) {
            if (splitFundingAmount.isNull()) {
                this.splitFundingAmount = null;
            } else if (splitFundingAmount.isEmpty()) {
                this.splitFundingAmount = Optional.empty();
            } else {
                this.splitFundingAmount = Optional.of(splitFundingAmount.get());
            }
            return this;
        }

        @JsonSetter(value = "billingFeesDetails", nulls = Nulls.SKIP)
        public Builder billingFeesDetails(Optional<List<BillingFeeDetail>> billingFeesDetails) {
            this.billingFeesDetails = billingFeesDetails;
            return this;
        }

        public Builder billingFeesDetails(List<BillingFeeDetail> billingFeesDetails) {
            this.billingFeesDetails = Optional.ofNullable(billingFeesDetails);
            return this;
        }

        public Builder billingFeesDetails(Nullable<List<BillingFeeDetail>> billingFeesDetails) {
            if (billingFeesDetails.isNull()) {
                this.billingFeesDetails = null;
            } else if (billingFeesDetails.isEmpty()) {
                this.billingFeesDetails = Optional.empty();
            } else {
                this.billingFeesDetails = Optional.of(billingFeesDetails.get());
            }
            return this;
        }

        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        public Builder parentOrgName(Nullable<String> parentOrgName) {
            if (parentOrgName.isNull()) {
                this.parentOrgName = null;
            } else if (parentOrgName.isEmpty()) {
                this.parentOrgName = Optional.empty();
            } else {
                this.parentOrgName = Optional.of(parentOrgName.get());
            }
            return this;
        }

        @JsonSetter(value = "PaypointDbaname", nulls = Nulls.SKIP)
        public Builder paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        public Builder paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        public Builder paypointDbaname(Nullable<String> paypointDbaname) {
            if (paypointDbaname.isNull()) {
                this.paypointDbaname = null;
            } else if (paypointDbaname.isEmpty()) {
                this.paypointDbaname = Optional.empty();
            } else {
                this.paypointDbaname = Optional.of(paypointDbaname.get());
            }
            return this;
        }

        @JsonSetter(value = "PaypointLegalname", nulls = Nulls.SKIP)
        public Builder paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        public Builder paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        public Builder paypointLegalname(Nullable<String> paypointLegalname) {
            if (paypointLegalname.isNull()) {
                this.paypointLegalname = null;
            } else if (paypointLegalname.isEmpty()) {
                this.paypointLegalname = Optional.empty();
            } else {
                this.paypointLegalname = Optional.of(paypointLegalname.get());
            }
            return this;
        }

        /**
         * <p>The paypoint's entryname</p>
         */
        @JsonSetter(value = "PaypointEntryname", nulls = Nulls.SKIP)
        public Builder paypointEntryname(Optional<String> paypointEntryname) {
            this.paypointEntryname = paypointEntryname;
            return this;
        }

        public Builder paypointEntryname(String paypointEntryname) {
            this.paypointEntryname = Optional.ofNullable(paypointEntryname);
            return this;
        }

        public Builder paypointEntryname(Nullable<String> paypointEntryname) {
            if (paypointEntryname.isNull()) {
                this.paypointEntryname = null;
            } else if (paypointEntryname.isEmpty()) {
                this.paypointEntryname = Optional.empty();
            } else {
                this.paypointEntryname = Optional.of(paypointEntryname.get());
            }
            return this;
        }

        /**
         * <p>The transaction ID for the payment</p>
         */
        @JsonSetter(value = "PaymentTransId", nulls = Nulls.SKIP)
        public Builder paymentTransId(Optional<String> paymentTransId) {
            this.paymentTransId = paymentTransId;
            return this;
        }

        public Builder paymentTransId(String paymentTransId) {
            this.paymentTransId = Optional.ofNullable(paymentTransId);
            return this;
        }

        public Builder paymentTransId(Nullable<String> paymentTransId) {
            if (paymentTransId.isNull()) {
                this.paymentTransId = null;
            } else if (paymentTransId.isEmpty()) {
                this.paymentTransId = Optional.empty();
            } else {
                this.paymentTransId = Optional.of(paymentTransId.get());
            }
            return this;
        }

        /**
         * <p>The payment connector used to process the transaction</p>
         */
        @JsonSetter(value = "ConnectorName", nulls = Nulls.SKIP)
        public Builder connectorName(Optional<String> connectorName) {
            this.connectorName = connectorName;
            return this;
        }

        public Builder connectorName(String connectorName) {
            this.connectorName = Optional.ofNullable(connectorName);
            return this;
        }

        public Builder connectorName(Nullable<String> connectorName) {
            if (connectorName.isNull()) {
                this.connectorName = null;
            } else if (connectorName.isEmpty()) {
                this.connectorName = Optional.empty();
            } else {
                this.connectorName = Optional.of(connectorName.get());
            }
            return this;
        }

        @JsonSetter(value = "ExternalProcessorInformation", nulls = Nulls.SKIP)
        public Builder externalProcessorInformation(Optional<String> externalProcessorInformation) {
            this.externalProcessorInformation = externalProcessorInformation;
            return this;
        }

        public Builder externalProcessorInformation(String externalProcessorInformation) {
            this.externalProcessorInformation = Optional.ofNullable(externalProcessorInformation);
            return this;
        }

        public Builder externalProcessorInformation(Nullable<String> externalProcessorInformation) {
            if (externalProcessorInformation.isNull()) {
                this.externalProcessorInformation = null;
            } else if (externalProcessorInformation.isEmpty()) {
                this.externalProcessorInformation = Optional.empty();
            } else {
                this.externalProcessorInformation = Optional.of(externalProcessorInformation.get());
            }
            return this;
        }

        /**
         * <p>Internal identifier used for processing</p>
         */
        @JsonSetter(value = "GatewayTransId", nulls = Nulls.SKIP)
        public Builder gatewayTransId(Optional<String> gatewayTransId) {
            this.gatewayTransId = gatewayTransId;
            return this;
        }

        public Builder gatewayTransId(String gatewayTransId) {
            this.gatewayTransId = Optional.ofNullable(gatewayTransId);
            return this;
        }

        public Builder gatewayTransId(Nullable<String> gatewayTransId) {
            if (gatewayTransId.isNull()) {
                this.gatewayTransId = null;
            } else if (gatewayTransId.isEmpty()) {
                this.gatewayTransId = Optional.empty();
            } else {
                this.gatewayTransId = Optional.of(gatewayTransId.get());
            }
            return this;
        }

        @JsonSetter(value = "OrderId", nulls = Nulls.SKIP)
        public Builder orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        public Builder orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        public Builder orderId(Nullable<String> orderId) {
            if (orderId.isNull()) {
                this.orderId = null;
            } else if (orderId.isEmpty()) {
                this.orderId = Optional.empty();
            } else {
                this.orderId = Optional.of(orderId.get());
            }
            return this;
        }

        /**
         * <p>Payment method used: card, ach, or wallet</p>
         */
        @JsonSetter(value = "Method", nulls = Nulls.SKIP)
        public Builder method(Optional<String> method) {
            this.method = method;
            return this;
        }

        public Builder method(String method) {
            this.method = Optional.ofNullable(method);
            return this;
        }

        public Builder method(Nullable<String> method) {
            if (method.isNull()) {
                this.method = null;
            } else if (method.isEmpty()) {
                this.method = Optional.empty();
            } else {
                this.method = Optional.of(method.get());
            }
            return this;
        }

        @JsonSetter(value = "BatchNumber", nulls = Nulls.SKIP)
        public Builder batchNumber(Optional<String> batchNumber) {
            this.batchNumber = batchNumber;
            return this;
        }

        public Builder batchNumber(String batchNumber) {
            this.batchNumber = Optional.ofNullable(batchNumber);
            return this;
        }

        public Builder batchNumber(Nullable<String> batchNumber) {
            if (batchNumber.isNull()) {
                this.batchNumber = null;
            } else if (batchNumber.isEmpty()) {
                this.batchNumber = Optional.empty();
            } else {
                this.batchNumber = Optional.of(batchNumber.get());
            }
            return this;
        }

        /**
         * <p>The amount of the batch</p>
         */
        @JsonSetter(value = "BatchAmount", nulls = Nulls.SKIP)
        public Builder batchAmount(Optional<Double> batchAmount) {
            this.batchAmount = batchAmount;
            return this;
        }

        public Builder batchAmount(Double batchAmount) {
            this.batchAmount = Optional.ofNullable(batchAmount);
            return this;
        }

        public Builder batchAmount(Nullable<Double> batchAmount) {
            if (batchAmount.isNull()) {
                this.batchAmount = null;
            } else if (batchAmount.isEmpty()) {
                this.batchAmount = Optional.empty();
            } else {
                this.batchAmount = Optional.of(batchAmount.get());
            }
            return this;
        }

        /**
         * <p>Unique ID for customer linked to the transaction</p>
         */
        @JsonSetter(value = "PayorId", nulls = Nulls.SKIP)
        public Builder payorId(Optional<Long> payorId) {
            this.payorId = payorId;
            return this;
        }

        public Builder payorId(Long payorId) {
            this.payorId = Optional.ofNullable(payorId);
            return this;
        }

        public Builder payorId(Nullable<Long> payorId) {
            if (payorId.isNull()) {
                this.payorId = null;
            } else if (payorId.isEmpty()) {
                this.payorId = Optional.empty();
            } else {
                this.payorId = Optional.of(payorId.get());
            }
            return this;
        }

        @JsonSetter(value = "PaymentData", nulls = Nulls.SKIP)
        public Builder paymentData(Optional<QueryPaymentData> paymentData) {
            this.paymentData = paymentData;
            return this;
        }

        public Builder paymentData(QueryPaymentData paymentData) {
            this.paymentData = Optional.ofNullable(paymentData);
            return this;
        }

        public Builder paymentData(Nullable<QueryPaymentData> paymentData) {
            if (paymentData.isNull()) {
                this.paymentData = null;
            } else if (paymentData.isEmpty()) {
                this.paymentData = Optional.empty();
            } else {
                this.paymentData = Optional.of(paymentData.get());
            }
            return this;
        }

        /**
         * <p>Status of transaction. See <a href="/developers/references/money-in-statuses#money-in-transaction-status">the
         * docs</a> for a
         * full reference.</p>
         */
        @JsonSetter(value = "TransStatus", nulls = Nulls.SKIP)
        public Builder transStatus(Optional<Integer> transStatus) {
            this.transStatus = transStatus;
            return this;
        }

        public Builder transStatus(Integer transStatus) {
            this.transStatus = Optional.ofNullable(transStatus);
            return this;
        }

        public Builder transStatus(Nullable<Integer> transStatus) {
            if (transStatus.isNull()) {
                this.transStatus = null;
            } else if (transStatus.isEmpty()) {
                this.transStatus = Optional.empty();
            } else {
                this.transStatus = Optional.of(transStatus.get());
            }
            return this;
        }

        @JsonSetter(value = "PaypointId", nulls = Nulls.SKIP)
        public Builder paypointId(Optional<Long> paypointId) {
            this.paypointId = paypointId;
            return this;
        }

        public Builder paypointId(Long paypointId) {
            this.paypointId = Optional.ofNullable(paypointId);
            return this;
        }

        public Builder paypointId(Nullable<Long> paypointId) {
            if (paypointId.isNull()) {
                this.paypointId = null;
            } else if (paypointId.isEmpty()) {
                this.paypointId = Optional.empty();
            } else {
                this.paypointId = Optional.of(paypointId.get());
            }
            return this;
        }

        /**
         * <p>Transaction total amount (including service fee or sub-charge)</p>
         */
        @JsonSetter(value = "TotalAmount", nulls = Nulls.SKIP)
        public Builder totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        public Builder totalAmount(Nullable<Double> totalAmount) {
            if (totalAmount.isNull()) {
                this.totalAmount = null;
            } else if (totalAmount.isEmpty()) {
                this.totalAmount = Optional.empty();
            } else {
                this.totalAmount = Optional.of(totalAmount.get());
            }
            return this;
        }

        /**
         * <p>Net amount paid</p>
         */
        @JsonSetter(value = "NetAmount", nulls = Nulls.SKIP)
        public Builder netAmount(Optional<Double> netAmount) {
            this.netAmount = netAmount;
            return this;
        }

        public Builder netAmount(Double netAmount) {
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        public Builder netAmount(Nullable<Double> netAmount) {
            if (netAmount.isNull()) {
                this.netAmount = null;
            } else if (netAmount.isEmpty()) {
                this.netAmount = Optional.empty();
            } else {
                this.netAmount = Optional.of(netAmount.get());
            }
            return this;
        }

        @JsonSetter(value = "FeeAmount", nulls = Nulls.SKIP)
        public Builder feeAmount(Optional<Double> feeAmount) {
            this.feeAmount = feeAmount;
            return this;
        }

        public Builder feeAmount(Double feeAmount) {
            this.feeAmount = Optional.ofNullable(feeAmount);
            return this;
        }

        public Builder feeAmount(Nullable<Double> feeAmount) {
            if (feeAmount.isNull()) {
                this.feeAmount = null;
            } else if (feeAmount.isEmpty()) {
                this.feeAmount = Optional.empty();
            } else {
                this.feeAmount = Optional.of(feeAmount.get());
            }
            return this;
        }

        /**
         * <p>Settlement status for transaction. See <a href="/developers/references/money-in-statuses#payment-funding-status">the docs</a> for a full reference.</p>
         */
        @JsonSetter(value = "SettlementStatus", nulls = Nulls.SKIP)
        public Builder settlementStatus(Optional<Integer> settlementStatus) {
            this.settlementStatus = settlementStatus;
            return this;
        }

        public Builder settlementStatus(Integer settlementStatus) {
            this.settlementStatus = Optional.ofNullable(settlementStatus);
            return this;
        }

        public Builder settlementStatus(Nullable<Integer> settlementStatus) {
            if (settlementStatus.isNull()) {
                this.settlementStatus = null;
            } else if (settlementStatus.isEmpty()) {
                this.settlementStatus = Optional.empty();
            } else {
                this.settlementStatus = Optional.of(settlementStatus.get());
            }
            return this;
        }

        @JsonSetter(value = "Operation", nulls = Nulls.SKIP)
        public Builder operation(Optional<String> operation) {
            this.operation = operation;
            return this;
        }

        public Builder operation(String operation) {
            this.operation = Optional.ofNullable(operation);
            return this;
        }

        public Builder operation(Nullable<String> operation) {
            if (operation.isNull()) {
                this.operation = null;
            } else if (operation.isEmpty()) {
                this.operation = Optional.empty();
            } else {
                this.operation = Optional.of(operation.get());
            }
            return this;
        }

        @JsonSetter(value = "ResponseData", nulls = Nulls.SKIP)
        public Builder responseData(Optional<QueryResponseData> responseData) {
            this.responseData = responseData;
            return this;
        }

        public Builder responseData(QueryResponseData responseData) {
            this.responseData = Optional.ofNullable(responseData);
            return this;
        }

        public Builder responseData(Nullable<QueryResponseData> responseData) {
            if (responseData.isNull()) {
                this.responseData = null;
            } else if (responseData.isEmpty()) {
                this.responseData = Optional.empty();
            } else {
                this.responseData = Optional.of(responseData.get());
            }
            return this;
        }

        @JsonSetter(value = "Source", nulls = Nulls.SKIP)
        public Builder source(Optional<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        public Builder source(Nullable<String> source) {
            if (source.isNull()) {
                this.source = null;
            } else if (source.isEmpty()) {
                this.source = Optional.empty();
            } else {
                this.source = Optional.of(source.get());
            }
            return this;
        }

        /**
         * <p>Reference to the subscription or schedule that originated the transaction</p>
         */
        @JsonSetter(value = "ScheduleReference", nulls = Nulls.SKIP)
        public Builder scheduleReference(Optional<Integer> scheduleReference) {
            this.scheduleReference = scheduleReference;
            return this;
        }

        public Builder scheduleReference(Integer scheduleReference) {
            this.scheduleReference = Optional.ofNullable(scheduleReference);
            return this;
        }

        public Builder scheduleReference(Nullable<Integer> scheduleReference) {
            if (scheduleReference.isNull()) {
                this.scheduleReference = null;
            } else if (scheduleReference.isEmpty()) {
                this.scheduleReference = Optional.empty();
            } else {
                this.scheduleReference = Optional.of(scheduleReference.get());
            }
            return this;
        }

        @JsonSetter(value = "OrgId", nulls = Nulls.SKIP)
        public Builder orgId(Optional<Long> orgId) {
            this.orgId = orgId;
            return this;
        }

        public Builder orgId(Long orgId) {
            this.orgId = Optional.ofNullable(orgId);
            return this;
        }

        public Builder orgId(Nullable<Long> orgId) {
            if (orgId.isNull()) {
                this.orgId = null;
            } else if (orgId.isEmpty()) {
                this.orgId = Optional.empty();
            } else {
                this.orgId = Optional.of(orgId.get());
            }
            return this;
        }

        @JsonSetter(value = "RefundId", nulls = Nulls.SKIP)
        public Builder refundId(Optional<Long> refundId) {
            this.refundId = refundId;
            return this;
        }

        public Builder refundId(Long refundId) {
            this.refundId = Optional.ofNullable(refundId);
            return this;
        }

        public Builder refundId(Nullable<Long> refundId) {
            if (refundId.isNull()) {
                this.refundId = null;
            } else if (refundId.isEmpty()) {
                this.refundId = Optional.empty();
            } else {
                this.refundId = Optional.of(refundId.get());
            }
            return this;
        }

        @JsonSetter(value = "ReturnedId", nulls = Nulls.SKIP)
        public Builder returnedId(Optional<Long> returnedId) {
            this.returnedId = returnedId;
            return this;
        }

        public Builder returnedId(Long returnedId) {
            this.returnedId = Optional.ofNullable(returnedId);
            return this;
        }

        public Builder returnedId(Nullable<Long> returnedId) {
            if (returnedId.isNull()) {
                this.returnedId = null;
            } else if (returnedId.isEmpty()) {
                this.returnedId = Optional.empty();
            } else {
                this.returnedId = Optional.of(returnedId.get());
            }
            return this;
        }

        @JsonSetter(value = "ChargebackId", nulls = Nulls.SKIP)
        public Builder chargebackId(Optional<Long> chargebackId) {
            this.chargebackId = chargebackId;
            return this;
        }

        public Builder chargebackId(Long chargebackId) {
            this.chargebackId = Optional.ofNullable(chargebackId);
            return this;
        }

        public Builder chargebackId(Nullable<Long> chargebackId) {
            if (chargebackId.isNull()) {
                this.chargebackId = null;
            } else if (chargebackId.isEmpty()) {
                this.chargebackId = Optional.empty();
            } else {
                this.chargebackId = Optional.of(chargebackId.get());
            }
            return this;
        }

        @JsonSetter(value = "RetrievalId", nulls = Nulls.SKIP)
        public Builder retrievalId(Optional<Long> retrievalId) {
            this.retrievalId = retrievalId;
            return this;
        }

        public Builder retrievalId(Long retrievalId) {
            this.retrievalId = Optional.ofNullable(retrievalId);
            return this;
        }

        public Builder retrievalId(Nullable<Long> retrievalId) {
            if (retrievalId.isNull()) {
                this.retrievalId = null;
            } else if (retrievalId.isEmpty()) {
                this.retrievalId = Optional.empty();
            } else {
                this.retrievalId = Optional.of(retrievalId.get());
            }
            return this;
        }

        /**
         * <p>Additional transaction data</p>
         */
        @JsonSetter(value = "TransAdditionalData", nulls = Nulls.SKIP)
        public Builder transAdditionalData(Optional<Object> transAdditionalData) {
            this.transAdditionalData = transAdditionalData;
            return this;
        }

        public Builder transAdditionalData(Object transAdditionalData) {
            this.transAdditionalData = Optional.ofNullable(transAdditionalData);
            return this;
        }

        public Builder transAdditionalData(Nullable<Object> transAdditionalData) {
            if (transAdditionalData.isNull()) {
                this.transAdditionalData = null;
            } else if (transAdditionalData.isEmpty()) {
                this.transAdditionalData = Optional.empty();
            } else {
                this.transAdditionalData = Optional.of(transAdditionalData.get());
            }
            return this;
        }

        /**
         * <p>Associated invoice data</p>
         */
        @JsonSetter(value = "invoiceData", nulls = Nulls.SKIP)
        public Builder invoiceData(Optional<BillData> invoiceData) {
            this.invoiceData = invoiceData;
            return this;
        }

        public Builder invoiceData(BillData invoiceData) {
            this.invoiceData = Optional.ofNullable(invoiceData);
            return this;
        }

        public Builder invoiceData(Nullable<BillData> invoiceData) {
            if (invoiceData.isNull()) {
                this.invoiceData = null;
            } else if (invoiceData.isEmpty()) {
                this.invoiceData = Optional.empty();
            } else {
                this.invoiceData = Optional.of(invoiceData.get());
            }
            return this;
        }

        @JsonSetter(value = "EntrypageId", nulls = Nulls.SKIP)
        public Builder entrypageId(Optional<Long> entrypageId) {
            this.entrypageId = entrypageId;
            return this;
        }

        public Builder entrypageId(Long entrypageId) {
            this.entrypageId = Optional.ofNullable(entrypageId);
            return this;
        }

        public Builder entrypageId(Nullable<Long> entrypageId) {
            if (entrypageId.isNull()) {
                this.entrypageId = null;
            } else if (entrypageId.isEmpty()) {
                this.entrypageId = Optional.empty();
            } else {
                this.entrypageId = Optional.of(entrypageId.get());
            }
            return this;
        }

        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        public Builder externalPaypointId(Nullable<String> externalPaypointId) {
            if (externalPaypointId.isNull()) {
                this.externalPaypointId = null;
            } else if (externalPaypointId.isEmpty()) {
                this.externalPaypointId = Optional.empty();
            } else {
                this.externalPaypointId = Optional.of(externalPaypointId.get());
            }
            return this;
        }

        /**
         * <p>Indicates whether the ACH account has been validated</p>
         */
        @JsonSetter(value = "IsValidatedACH", nulls = Nulls.SKIP)
        public Builder isValidatedAch(Optional<Boolean> isValidatedAch) {
            this.isValidatedAch = isValidatedAch;
            return this;
        }

        public Builder isValidatedAch(Boolean isValidatedAch) {
            this.isValidatedAch = Optional.ofNullable(isValidatedAch);
            return this;
        }

        public Builder isValidatedAch(Nullable<Boolean> isValidatedAch) {
            if (isValidatedAch.isNull()) {
                this.isValidatedAch = null;
            } else if (isValidatedAch.isEmpty()) {
                this.isValidatedAch = Optional.empty();
            } else {
                this.isValidatedAch = Optional.of(isValidatedAch.get());
            }
            return this;
        }

        /**
         * <p>Transaction date and time, in UTC</p>
         */
        @JsonSetter(value = "TransactionTime", nulls = Nulls.SKIP)
        public Builder transactionTime(Optional<OffsetDateTime> transactionTime) {
            this.transactionTime = transactionTime;
            return this;
        }

        public Builder transactionTime(OffsetDateTime transactionTime) {
            this.transactionTime = Optional.ofNullable(transactionTime);
            return this;
        }

        public Builder transactionTime(Nullable<OffsetDateTime> transactionTime) {
            if (transactionTime.isNull()) {
                this.transactionTime = null;
            } else if (transactionTime.isEmpty()) {
                this.transactionTime = Optional.empty();
            } else {
                this.transactionTime = Optional.of(transactionTime.get());
            }
            return this;
        }

        @JsonSetter(value = "Customer", nulls = Nulls.SKIP)
        public Builder customer(Optional<QueryTransactionPayorData> customer) {
            this.customer = customer;
            return this;
        }

        public Builder customer(QueryTransactionPayorData customer) {
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        public Builder customer(Nullable<QueryTransactionPayorData> customer) {
            if (customer.isNull()) {
                this.customer = null;
            } else if (customer.isEmpty()) {
                this.customer = Optional.empty();
            } else {
                this.customer = Optional.of(customer.get());
            }
            return this;
        }

        @JsonSetter(value = "splitFundingInstructions", nulls = Nulls.SKIP)
        public Builder splitFundingInstructions(Optional<List<SplitFundingContent>> splitFundingInstructions) {
            this.splitFundingInstructions = splitFundingInstructions;
            return this;
        }

        public Builder splitFundingInstructions(List<SplitFundingContent> splitFundingInstructions) {
            this.splitFundingInstructions = Optional.ofNullable(splitFundingInstructions);
            return this;
        }

        public Builder splitFundingInstructions(Nullable<List<SplitFundingContent>> splitFundingInstructions) {
            if (splitFundingInstructions.isNull()) {
                this.splitFundingInstructions = null;
            } else if (splitFundingInstructions.isEmpty()) {
                this.splitFundingInstructions = Optional.empty();
            } else {
                this.splitFundingInstructions = Optional.of(splitFundingInstructions.get());
            }
            return this;
        }

        @JsonSetter(value = "CfeeTransactions", nulls = Nulls.SKIP)
        public Builder cfeeTransactions(Optional<List<QueryCFeeTransaction>> cfeeTransactions) {
            this.cfeeTransactions = cfeeTransactions;
            return this;
        }

        public Builder cfeeTransactions(List<QueryCFeeTransaction> cfeeTransactions) {
            this.cfeeTransactions = Optional.ofNullable(cfeeTransactions);
            return this;
        }

        public Builder cfeeTransactions(Nullable<List<QueryCFeeTransaction>> cfeeTransactions) {
            if (cfeeTransactions.isNull()) {
                this.cfeeTransactions = null;
            } else if (cfeeTransactions.isEmpty()) {
                this.cfeeTransactions = Optional.empty();
            } else {
                this.cfeeTransactions = Optional.of(cfeeTransactions.get());
            }
            return this;
        }

        @JsonSetter(value = "TransactionEvents", nulls = Nulls.SKIP)
        public Builder transactionEvents(Optional<List<QueryTransactionEvents>> transactionEvents) {
            this.transactionEvents = transactionEvents;
            return this;
        }

        public Builder transactionEvents(List<QueryTransactionEvents> transactionEvents) {
            this.transactionEvents = Optional.ofNullable(transactionEvents);
            return this;
        }

        public Builder transactionEvents(Nullable<List<QueryTransactionEvents>> transactionEvents) {
            if (transactionEvents.isNull()) {
                this.transactionEvents = null;
            } else if (transactionEvents.isEmpty()) {
                this.transactionEvents = Optional.empty();
            } else {
                this.transactionEvents = Optional.of(transactionEvents.get());
            }
            return this;
        }

        @JsonSetter(value = "PendingFeeAmount", nulls = Nulls.SKIP)
        public Builder pendingFeeAmount(Optional<Double> pendingFeeAmount) {
            this.pendingFeeAmount = pendingFeeAmount;
            return this;
        }

        public Builder pendingFeeAmount(Double pendingFeeAmount) {
            this.pendingFeeAmount = Optional.ofNullable(pendingFeeAmount);
            return this;
        }

        public Builder pendingFeeAmount(Nullable<Double> pendingFeeAmount) {
            if (pendingFeeAmount.isNull()) {
                this.pendingFeeAmount = null;
            } else if (pendingFeeAmount.isEmpty()) {
                this.pendingFeeAmount = Optional.empty();
            } else {
                this.pendingFeeAmount = Optional.of(pendingFeeAmount.get());
            }
            return this;
        }

        @JsonSetter(value = "RiskFlagged", nulls = Nulls.SKIP)
        public Builder riskFlagged(Optional<Boolean> riskFlagged) {
            this.riskFlagged = riskFlagged;
            return this;
        }

        public Builder riskFlagged(Boolean riskFlagged) {
            this.riskFlagged = Optional.ofNullable(riskFlagged);
            return this;
        }

        public Builder riskFlagged(Nullable<Boolean> riskFlagged) {
            if (riskFlagged.isNull()) {
                this.riskFlagged = null;
            } else if (riskFlagged.isEmpty()) {
                this.riskFlagged = Optional.empty();
            } else {
                this.riskFlagged = Optional.of(riskFlagged.get());
            }
            return this;
        }

        @JsonSetter(value = "RiskFlaggedOn", nulls = Nulls.SKIP)
        public Builder riskFlaggedOn(Optional<OffsetDateTime> riskFlaggedOn) {
            this.riskFlaggedOn = riskFlaggedOn;
            return this;
        }

        public Builder riskFlaggedOn(OffsetDateTime riskFlaggedOn) {
            this.riskFlaggedOn = Optional.ofNullable(riskFlaggedOn);
            return this;
        }

        public Builder riskFlaggedOn(Nullable<OffsetDateTime> riskFlaggedOn) {
            if (riskFlaggedOn.isNull()) {
                this.riskFlaggedOn = null;
            } else if (riskFlaggedOn.isEmpty()) {
                this.riskFlaggedOn = Optional.empty();
            } else {
                this.riskFlaggedOn = Optional.of(riskFlaggedOn.get());
            }
            return this;
        }

        @JsonSetter(value = "RiskStatus", nulls = Nulls.SKIP)
        public Builder riskStatus(Optional<String> riskStatus) {
            this.riskStatus = riskStatus;
            return this;
        }

        public Builder riskStatus(String riskStatus) {
            this.riskStatus = Optional.ofNullable(riskStatus);
            return this;
        }

        public Builder riskStatus(Nullable<String> riskStatus) {
            if (riskStatus.isNull()) {
                this.riskStatus = null;
            } else if (riskStatus.isEmpty()) {
                this.riskStatus = Optional.empty();
            } else {
                this.riskStatus = Optional.of(riskStatus.get());
            }
            return this;
        }

        @JsonSetter(value = "RiskReason", nulls = Nulls.SKIP)
        public Builder riskReason(Optional<String> riskReason) {
            this.riskReason = riskReason;
            return this;
        }

        public Builder riskReason(String riskReason) {
            this.riskReason = Optional.ofNullable(riskReason);
            return this;
        }

        public Builder riskReason(Nullable<String> riskReason) {
            if (riskReason.isNull()) {
                this.riskReason = null;
            } else if (riskReason.isEmpty()) {
                this.riskReason = Optional.empty();
            } else {
                this.riskReason = Optional.of(riskReason.get());
            }
            return this;
        }

        @JsonSetter(value = "RiskAction", nulls = Nulls.SKIP)
        public Builder riskAction(Optional<String> riskAction) {
            this.riskAction = riskAction;
            return this;
        }

        public Builder riskAction(String riskAction) {
            this.riskAction = Optional.ofNullable(riskAction);
            return this;
        }

        public Builder riskAction(Nullable<String> riskAction) {
            if (riskAction.isNull()) {
                this.riskAction = null;
            } else if (riskAction.isEmpty()) {
                this.riskAction = Optional.empty();
            } else {
                this.riskAction = Optional.of(riskAction.get());
            }
            return this;
        }

        @JsonSetter(value = "RiskActionCode", nulls = Nulls.SKIP)
        public Builder riskActionCode(Optional<Integer> riskActionCode) {
            this.riskActionCode = riskActionCode;
            return this;
        }

        public Builder riskActionCode(Integer riskActionCode) {
            this.riskActionCode = Optional.ofNullable(riskActionCode);
            return this;
        }

        public Builder riskActionCode(Nullable<Integer> riskActionCode) {
            if (riskActionCode.isNull()) {
                this.riskActionCode = null;
            } else if (riskActionCode.isEmpty()) {
                this.riskActionCode = Optional.empty();
            } else {
                this.riskActionCode = Optional.of(riskActionCode.get());
            }
            return this;
        }

        @JsonSetter(value = "DeviceId", nulls = Nulls.SKIP)
        public Builder deviceId(Optional<String> deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        public Builder deviceId(String deviceId) {
            this.deviceId = Optional.ofNullable(deviceId);
            return this;
        }

        public Builder deviceId(Nullable<String> deviceId) {
            if (deviceId.isNull()) {
                this.deviceId = null;
            } else if (deviceId.isEmpty()) {
                this.deviceId = Optional.empty();
            } else {
                this.deviceId = Optional.of(deviceId.get());
            }
            return this;
        }

        @JsonSetter(value = "AchSecCode", nulls = Nulls.SKIP)
        public Builder achSecCode(Optional<String> achSecCode) {
            this.achSecCode = achSecCode;
            return this;
        }

        public Builder achSecCode(String achSecCode) {
            this.achSecCode = Optional.ofNullable(achSecCode);
            return this;
        }

        public Builder achSecCode(Nullable<String> achSecCode) {
            if (achSecCode.isNull()) {
                this.achSecCode = null;
            } else if (achSecCode.isEmpty()) {
                this.achSecCode = Optional.empty();
            } else {
                this.achSecCode = Optional.of(achSecCode.get());
            }
            return this;
        }

        @JsonSetter(value = "AchHolderType", nulls = Nulls.SKIP)
        public Builder achHolderType(Optional<AchHolderType> achHolderType) {
            this.achHolderType = achHolderType;
            return this;
        }

        public Builder achHolderType(AchHolderType achHolderType) {
            this.achHolderType = Optional.ofNullable(achHolderType);
            return this;
        }

        public Builder achHolderType(Nullable<AchHolderType> achHolderType) {
            if (achHolderType.isNull()) {
                this.achHolderType = null;
            } else if (achHolderType.isEmpty()) {
                this.achHolderType = Optional.empty();
            } else {
                this.achHolderType = Optional.of(achHolderType.get());
            }
            return this;
        }

        @JsonSetter(value = "IpAddress", nulls = Nulls.SKIP)
        public Builder ipAddress(Optional<String> ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Optional.ofNullable(ipAddress);
            return this;
        }

        public Builder ipAddress(Nullable<String> ipAddress) {
            if (ipAddress.isNull()) {
                this.ipAddress = null;
            } else if (ipAddress.isEmpty()) {
                this.ipAddress = Optional.empty();
            } else {
                this.ipAddress = Optional.of(ipAddress.get());
            }
            return this;
        }

        /**
         * <p>Indicates if this was a same-day ACH transaction.</p>
         */
        @JsonSetter(value = "IsSameDayACH", nulls = Nulls.SKIP)
        public Builder isSameDayAch(Optional<Boolean> isSameDayAch) {
            this.isSameDayAch = isSameDayAch;
            return this;
        }

        public Builder isSameDayAch(Boolean isSameDayAch) {
            this.isSameDayAch = Optional.ofNullable(isSameDayAch);
            return this;
        }

        public Builder isSameDayAch(Nullable<Boolean> isSameDayAch) {
            if (isSameDayAch.isNull()) {
                this.isSameDayAch = null;
            } else if (isSameDayAch.isEmpty()) {
                this.isSameDayAch = Optional.empty();
            } else {
                this.isSameDayAch = Optional.of(isSameDayAch.get());
            }
            return this;
        }

        /**
         * <p>Type of wallet used for the transaction (if applicable)</p>
         */
        @JsonSetter(value = "WalletType", nulls = Nulls.SKIP)
        public Builder walletType(Optional<String> walletType) {
            this.walletType = walletType;
            return this;
        }

        public Builder walletType(String walletType) {
            this.walletType = Optional.ofNullable(walletType);
            return this;
        }

        public Builder walletType(Nullable<String> walletType) {
            if (walletType.isNull()) {
                this.walletType = null;
            } else if (walletType.isEmpty()) {
                this.walletType = Optional.empty();
            } else {
                this.walletType = Optional.of(walletType.get());
            }
            return this;
        }

        public TransferDetailRecord build() {
            return new TransferDetailRecord(
                    transferDetailId,
                    transferId,
                    transactionId,
                    transactionNumber,
                    type,
                    category,
                    grossAmount,
                    chargeBackAmount,
                    returnedAmount,
                    refundAmount,
                    holdAmount,
                    releasedAmount,
                    billingFeesAmount,
                    thirdPartyPaidAmount,
                    adjustmentsAmount,
                    netTransferAmount,
                    splitFundingAmount,
                    billingFeesDetails,
                    parentOrgName,
                    paypointDbaname,
                    paypointLegalname,
                    paypointEntryname,
                    paymentTransId,
                    connectorName,
                    externalProcessorInformation,
                    gatewayTransId,
                    orderId,
                    method,
                    batchNumber,
                    batchAmount,
                    payorId,
                    paymentData,
                    transStatus,
                    paypointId,
                    totalAmount,
                    netAmount,
                    feeAmount,
                    settlementStatus,
                    operation,
                    responseData,
                    source,
                    scheduleReference,
                    orgId,
                    refundId,
                    returnedId,
                    chargebackId,
                    retrievalId,
                    transAdditionalData,
                    invoiceData,
                    entrypageId,
                    externalPaypointId,
                    isValidatedAch,
                    transactionTime,
                    customer,
                    splitFundingInstructions,
                    cfeeTransactions,
                    transactionEvents,
                    pendingFeeAmount,
                    riskFlagged,
                    riskFlaggedOn,
                    riskStatus,
                    riskReason,
                    riskAction,
                    riskActionCode,
                    deviceId,
                    achSecCode,
                    achHolderType,
                    ipAddress,
                    isSameDayAch,
                    walletType,
                    additionalProperties);
        }
    }
}
