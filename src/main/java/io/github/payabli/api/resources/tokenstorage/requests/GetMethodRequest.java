/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.tokenstorage.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetMethodRequest.Builder.class)
public final class GetMethodRequest {
    private final Optional<Integer> cardExpirationFormat;

    private final Optional<Boolean> includeTemporary;

    private final Map<String, Object> additionalProperties;

    private GetMethodRequest(
            Optional<Integer> cardExpirationFormat,
            Optional<Boolean> includeTemporary,
            Map<String, Object> additionalProperties) {
        this.cardExpirationFormat = cardExpirationFormat;
        this.includeTemporary = includeTemporary;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Format for card expiration dates in the response.
     * <p>Accepted values:</p>
     * <ul>
     * <li>
     * <p>0: default, no formatting. Expiration dates are returned in the format they're saved in.</p>
     * </li>
     * <li>
     * <p>1: MMYY</p>
     * </li>
     * <li>
     * <p>2: MM/YY</p>
     * </li>
     * </ul>
     */
    @JsonProperty("cardExpirationFormat")
    public Optional<Integer> getCardExpirationFormat() {
        return cardExpirationFormat;
    }

    /**
     * @return When <code>true</code>, the request will include temporary tokens in the search and return details for a matching temporary token. The default behavior searches only for permanent tokens.
     */
    @JsonProperty("includeTemporary")
    public Optional<Boolean> getIncludeTemporary() {
        return includeTemporary;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetMethodRequest && equalTo((GetMethodRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetMethodRequest other) {
        return cardExpirationFormat.equals(other.cardExpirationFormat)
                && includeTemporary.equals(other.includeTemporary);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.cardExpirationFormat, this.includeTemporary);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> cardExpirationFormat = Optional.empty();

        private Optional<Boolean> includeTemporary = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetMethodRequest other) {
            cardExpirationFormat(other.getCardExpirationFormat());
            includeTemporary(other.getIncludeTemporary());
            return this;
        }

        /**
         * <p>Format for card expiration dates in the response.</p>
         * <p>Accepted values:</p>
         * <ul>
         * <li>
         * <p>0: default, no formatting. Expiration dates are returned in the format they're saved in.</p>
         * </li>
         * <li>
         * <p>1: MMYY</p>
         * </li>
         * <li>
         * <p>2: MM/YY</p>
         * </li>
         * </ul>
         */
        @JsonSetter(value = "cardExpirationFormat", nulls = Nulls.SKIP)
        public Builder cardExpirationFormat(Optional<Integer> cardExpirationFormat) {
            this.cardExpirationFormat = cardExpirationFormat;
            return this;
        }

        public Builder cardExpirationFormat(Integer cardExpirationFormat) {
            this.cardExpirationFormat = Optional.ofNullable(cardExpirationFormat);
            return this;
        }

        /**
         * <p>When <code>true</code>, the request will include temporary tokens in the search and return details for a matching temporary token. The default behavior searches only for permanent tokens.</p>
         */
        @JsonSetter(value = "includeTemporary", nulls = Nulls.SKIP)
        public Builder includeTemporary(Optional<Boolean> includeTemporary) {
            this.includeTemporary = includeTemporary;
            return this;
        }

        public Builder includeTemporary(Boolean includeTemporary) {
            this.includeTemporary = Optional.ofNullable(includeTemporary);
            return this;
        }

        public GetMethodRequest build() {
            return new GetMethodRequest(cardExpirationFormat, includeTemporary, additionalProperties);
        }
    }
}
