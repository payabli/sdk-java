/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.paymentmethoddomain;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.github.payabli.api.core.ClientOptions;
import io.github.payabli.api.core.MediaTypes;
import io.github.payabli.api.core.ObjectMappers;
import io.github.payabli.api.core.PayabliApiApiException;
import io.github.payabli.api.core.PayabliApiException;
import io.github.payabli.api.core.PayabliApiHttpResponse;
import io.github.payabli.api.core.QueryStringMapper;
import io.github.payabli.api.core.RequestOptions;
import io.github.payabli.api.errors.BadRequestError;
import io.github.payabli.api.errors.InternalServerError;
import io.github.payabli.api.errors.ServiceUnavailableError;
import io.github.payabli.api.errors.UnauthorizedError;
import io.github.payabli.api.resources.paymentmethoddomain.requests.AddPaymentMethodDomainRequest;
import io.github.payabli.api.resources.paymentmethoddomain.requests.ListPaymentMethodDomainsRequest;
import io.github.payabli.api.resources.paymentmethoddomain.requests.UpdatePaymentMethodDomainRequest;
import io.github.payabli.api.resources.paymentmethoddomain.types.DeletePaymentMethodDomainResponse;
import io.github.payabli.api.resources.paymentmethoddomain.types.ListPaymentMethodDomainsResponse;
import io.github.payabli.api.types.AddPaymentMethodDomainApiResponse;
import io.github.payabli.api.types.PayabliApiResponse;
import io.github.payabli.api.types.PaymentMethodDomainApiResponse;
import io.github.payabli.api.types.PaymentMethodDomainGeneralResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawPaymentMethodDomainClient {
    protected final ClientOptions clientOptions;

    public RawPaymentMethodDomainClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Add a payment method domain to an organization or paypoint.
     */
    public PayabliApiHttpResponse<AddPaymentMethodDomainApiResponse> addPaymentMethodDomain() {
        return addPaymentMethodDomain(AddPaymentMethodDomainRequest.builder().build());
    }

    /**
     * Add a payment method domain to an organization or paypoint.
     */
    public PayabliApiHttpResponse<AddPaymentMethodDomainApiResponse> addPaymentMethodDomain(
            AddPaymentMethodDomainRequest request) {
        return addPaymentMethodDomain(request, null);
    }

    /**
     * Add a payment method domain to an organization or paypoint.
     */
    public PayabliApiHttpResponse<AddPaymentMethodDomainApiResponse> addPaymentMethodDomain(
            AddPaymentMethodDomainRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("PaymentMethodDomain")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new PayabliApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), AddPaymentMethodDomainApiResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Cascades a payment method domain to all child entities. All paypoints and suborganization under this parent will inherit this domain and its settings.
     */
    public PayabliApiHttpResponse<PaymentMethodDomainGeneralResponse> cascadePaymentMethodDomain(String domainId) {
        return cascadePaymentMethodDomain(domainId, null);
    }

    /**
     * Cascades a payment method domain to all child entities. All paypoints and suborganization under this parent will inherit this domain and its settings.
     */
    public PayabliApiHttpResponse<PaymentMethodDomainGeneralResponse> cascadePaymentMethodDomain(
            String domainId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("PaymentMethodDomain")
                .addPathSegment(domainId)
                .addPathSegments("cascade")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", RequestBody.create("", null))
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PaymentMethodDomainGeneralResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Delete a payment method domain. You can't delete an inherited domain, you must delete a domain at the organization level.
     */
    public PayabliApiHttpResponse<DeletePaymentMethodDomainResponse> deletePaymentMethodDomain(String domainId) {
        return deletePaymentMethodDomain(domainId, null);
    }

    /**
     * Delete a payment method domain. You can't delete an inherited domain, you must delete a domain at the organization level.
     */
    public PayabliApiHttpResponse<DeletePaymentMethodDomainResponse> deletePaymentMethodDomain(
            String domainId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("PaymentMethodDomain")
                .addPathSegment(domainId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), DeletePaymentMethodDomainResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Get the details for a payment method domain.
     */
    public PayabliApiHttpResponse<PaymentMethodDomainApiResponse> getPaymentMethodDomain(String domainId) {
        return getPaymentMethodDomain(domainId, null);
    }

    /**
     * Get the details for a payment method domain.
     */
    public PayabliApiHttpResponse<PaymentMethodDomainApiResponse> getPaymentMethodDomain(
            String domainId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("PaymentMethodDomain")
                .addPathSegment(domainId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PaymentMethodDomainApiResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Get a list of payment method domains that belong to a PSP, organization, or paypoint.
     */
    public PayabliApiHttpResponse<ListPaymentMethodDomainsResponse> listPaymentMethodDomains() {
        return listPaymentMethodDomains(
                ListPaymentMethodDomainsRequest.builder().build());
    }

    /**
     * Get a list of payment method domains that belong to a PSP, organization, or paypoint.
     */
    public PayabliApiHttpResponse<ListPaymentMethodDomainsResponse> listPaymentMethodDomains(
            ListPaymentMethodDomainsRequest request) {
        return listPaymentMethodDomains(request, null);
    }

    /**
     * Get a list of payment method domains that belong to a PSP, organization, or paypoint.
     */
    public PayabliApiHttpResponse<ListPaymentMethodDomainsResponse> listPaymentMethodDomains(
            ListPaymentMethodDomainsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("PaymentMethodDomain/list");
        if (request.getEntityId().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "entityId", request.getEntityId().get(), false);
        }
        if (request.getEntityType().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "entityType", request.getEntityType().get(), false);
        }
        if (request.getFromRecord().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "fromRecord", request.getFromRecord().get(), false);
        }
        if (request.getLimitRecord().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limitRecord", request.getLimitRecord().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ListPaymentMethodDomainsResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Update a payment method domain's configuration values.
     */
    public PayabliApiHttpResponse<PaymentMethodDomainGeneralResponse> updatePaymentMethodDomain(String domainId) {
        return updatePaymentMethodDomain(
                domainId, UpdatePaymentMethodDomainRequest.builder().build());
    }

    /**
     * Update a payment method domain's configuration values.
     */
    public PayabliApiHttpResponse<PaymentMethodDomainGeneralResponse> updatePaymentMethodDomain(
            String domainId, UpdatePaymentMethodDomainRequest request) {
        return updatePaymentMethodDomain(domainId, request, null);
    }

    /**
     * Update a payment method domain's configuration values.
     */
    public PayabliApiHttpResponse<PaymentMethodDomainGeneralResponse> updatePaymentMethodDomain(
            String domainId, UpdatePaymentMethodDomainRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("PaymentMethodDomain")
                .addPathSegment(domainId)
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new PayabliApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("PATCH", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PaymentMethodDomainGeneralResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Verify a new payment method domain. If verification is successful, Apple Pay is automatically activated for the domain.
     */
    public PayabliApiHttpResponse<PaymentMethodDomainGeneralResponse> verifyPaymentMethodDomain(String domainId) {
        return verifyPaymentMethodDomain(domainId, null);
    }

    /**
     * Verify a new payment method domain. If verification is successful, Apple Pay is automatically activated for the domain.
     */
    public PayabliApiHttpResponse<PaymentMethodDomainGeneralResponse> verifyPaymentMethodDomain(
            String domainId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("PaymentMethodDomain")
                .addPathSegment(domainId)
                .addPathSegments("verify")
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", RequestBody.create("", null))
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), PaymentMethodDomainGeneralResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }
}
