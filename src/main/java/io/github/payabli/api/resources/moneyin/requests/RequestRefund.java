/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.moneyin.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import io.github.payabli.api.types.RefundDetail;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RequestRefund.Builder.class)
public final class RequestRefund {
    private final Optional<String> idempotencyKey;

    private final Optional<Double> amount;

    private final Optional<String> ipaddress;

    private final Optional<String> orderDescription;

    private final Optional<String> orderId;

    private final Optional<RefundDetail> refundDetails;

    private final Optional<String> source;

    private final Map<String, Object> additionalProperties;

    private RequestRefund(
            Optional<String> idempotencyKey,
            Optional<Double> amount,
            Optional<String> ipaddress,
            Optional<String> orderDescription,
            Optional<String> orderId,
            Optional<RefundDetail> refundDetails,
            Optional<String> source,
            Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.amount = amount;
        this.ipaddress = ipaddress;
        this.orderDescription = orderDescription;
        this.orderId = orderId;
        this.refundDetails = refundDetails;
        this.source = source;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("idempotencyKey")
    public Optional<String> getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return Amount to refund from original transaction, minus any service fees charged on the original transaction.
     * <p>The amount provided can't be greater than the original total amount of the transaction, minus service fees. For example, if a transaction was $90 plus a $10 service fee, you can refund up to $90.</p>
     * <p>An amount equal to zero will refund the total amount authorized minus any service fee.</p>
     */
    @JsonProperty("amount")
    public Optional<Double> getAmount() {
        return amount;
    }

    @JsonProperty("ipaddress")
    public Optional<String> getIpaddress() {
        return ipaddress;
    }

    @JsonProperty("orderDescription")
    public Optional<String> getOrderDescription() {
        return orderDescription;
    }

    @JsonProperty("orderId")
    public Optional<String> getOrderId() {
        return orderId;
    }

    @JsonProperty("refundDetails")
    public Optional<RefundDetail> getRefundDetails() {
        return refundDetails;
    }

    @JsonProperty("source")
    public Optional<String> getSource() {
        return source;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RequestRefund && equalTo((RequestRefund) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RequestRefund other) {
        return idempotencyKey.equals(other.idempotencyKey)
                && amount.equals(other.amount)
                && ipaddress.equals(other.ipaddress)
                && orderDescription.equals(other.orderDescription)
                && orderId.equals(other.orderId)
                && refundDetails.equals(other.refundDetails)
                && source.equals(other.source);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.idempotencyKey,
                this.amount,
                this.ipaddress,
                this.orderDescription,
                this.orderId,
                this.refundDetails,
                this.source);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> idempotencyKey = Optional.empty();

        private Optional<Double> amount = Optional.empty();

        private Optional<String> ipaddress = Optional.empty();

        private Optional<String> orderDescription = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<RefundDetail> refundDetails = Optional.empty();

        private Optional<String> source = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RequestRefund other) {
            idempotencyKey(other.getIdempotencyKey());
            amount(other.getAmount());
            ipaddress(other.getIpaddress());
            orderDescription(other.getOrderDescription());
            orderId(other.getOrderId());
            refundDetails(other.getRefundDetails());
            source(other.getSource());
            return this;
        }

        @JsonSetter(value = "idempotencyKey", nulls = Nulls.SKIP)
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public Builder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * <p>Amount to refund from original transaction, minus any service fees charged on the original transaction.</p>
         * <p>The amount provided can't be greater than the original total amount of the transaction, minus service fees. For example, if a transaction was $90 plus a $10 service fee, you can refund up to $90.</p>
         * <p>An amount equal to zero will refund the total amount authorized minus any service fee.</p>
         */
        @JsonSetter(value = "amount", nulls = Nulls.SKIP)
        public Builder amount(Optional<Double> amount) {
            this.amount = amount;
            return this;
        }

        public Builder amount(Double amount) {
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        @JsonSetter(value = "ipaddress", nulls = Nulls.SKIP)
        public Builder ipaddress(Optional<String> ipaddress) {
            this.ipaddress = ipaddress;
            return this;
        }

        public Builder ipaddress(String ipaddress) {
            this.ipaddress = Optional.ofNullable(ipaddress);
            return this;
        }

        @JsonSetter(value = "orderDescription", nulls = Nulls.SKIP)
        public Builder orderDescription(Optional<String> orderDescription) {
            this.orderDescription = orderDescription;
            return this;
        }

        public Builder orderDescription(String orderDescription) {
            this.orderDescription = Optional.ofNullable(orderDescription);
            return this;
        }

        @JsonSetter(value = "orderId", nulls = Nulls.SKIP)
        public Builder orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        public Builder orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        @JsonSetter(value = "refundDetails", nulls = Nulls.SKIP)
        public Builder refundDetails(Optional<RefundDetail> refundDetails) {
            this.refundDetails = refundDetails;
            return this;
        }

        public Builder refundDetails(RefundDetail refundDetails) {
            this.refundDetails = Optional.ofNullable(refundDetails);
            return this;
        }

        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public Builder source(Optional<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        public RequestRefund build() {
            return new RequestRefund(
                    idempotencyKey,
                    amount,
                    ipaddress,
                    orderDescription,
                    orderId,
                    refundDetails,
                    source,
                    additionalProperties);
        }
    }
}
