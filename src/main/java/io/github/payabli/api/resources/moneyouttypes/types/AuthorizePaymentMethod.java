/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.moneyouttypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import io.github.payabli.api.types.AchHolderType;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AuthorizePaymentMethod.Builder.class)
public final class AuthorizePaymentMethod {
    private final String method;

    private final Optional<String> achHolder;

    private final Optional<String> achRouting;

    private final Optional<String> achAccount;

    private final Optional<String> achAccountType;

    private final Optional<String> achCode;

    private final Optional<AchHolderType> achHolderType;

    private final Optional<String> storedMethodId;

    private final Optional<String> initiator;

    private final Optional<String> storedMethodUsageType;

    private final Map<String, Object> additionalProperties;

    private AuthorizePaymentMethod(
            String method,
            Optional<String> achHolder,
            Optional<String> achRouting,
            Optional<String> achAccount,
            Optional<String> achAccountType,
            Optional<String> achCode,
            Optional<AchHolderType> achHolderType,
            Optional<String> storedMethodId,
            Optional<String> initiator,
            Optional<String> storedMethodUsageType,
            Map<String, Object> additionalProperties) {
        this.method = method;
        this.achHolder = achHolder;
        this.achRouting = achRouting;
        this.achAccount = achAccount;
        this.achAccountType = achAccountType;
        this.achCode = achCode;
        this.achHolderType = achHolderType;
        this.storedMethodId = storedMethodId;
        this.initiator = initiator;
        this.storedMethodUsageType = storedMethodUsageType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Payment method type - &quot;managed&quot;, &quot;vcard&quot;, &quot;check&quot;, or &quot;ach&quot;
     */
    @JsonProperty("method")
    public String getMethod() {
        return method;
    }

    /**
     * @return Account holder name for ACH payments. Required when method is &quot;ach&quot; and not using <code>storedMethodId</code>.
     */
    @JsonProperty("achHolder")
    public Optional<String> getAchHolder() {
        return achHolder;
    }

    /**
     * @return Bank routing number for ACH payments. Required when method is &quot;ach&quot; and not using <code>storedMethodId</code>.
     */
    @JsonProperty("achRouting")
    public Optional<String> getAchRouting() {
        return achRouting;
    }

    /**
     * @return Bank account number for ACH payments. Required when method is &quot;ach&quot; and not using <code>storedMethodId</code>.
     */
    @JsonProperty("achAccount")
    public Optional<String> getAchAccount() {
        return achAccount;
    }

    /**
     * @return Account type for ACH payments (&quot;checking&quot; or &quot;savings&quot;). Required when method is &quot;ach&quot; and not using <code>storedMethodId</code>.
     */
    @JsonProperty("achAccountType")
    public Optional<String> getAchAccountType() {
        return achAccountType;
    }

    @JsonProperty("achCode")
    public Optional<String> getAchCode() {
        return achCode;
    }

    @JsonProperty("achHolderType")
    public Optional<AchHolderType> getAchHolderType() {
        return achHolderType;
    }

    /**
     * @return ID of the stored ACH payment method. Only applicable when method is <code>ach</code>. Use this to reference a previously saved ACH method instead of providing bank details directly.
     */
    @JsonProperty("storedMethodId")
    public Optional<String> getStoredMethodId() {
        return storedMethodId;
    }

    @JsonProperty("initiator")
    public Optional<String> getInitiator() {
        return initiator;
    }

    @JsonProperty("storedMethodUsageType")
    public Optional<String> getStoredMethodUsageType() {
        return storedMethodUsageType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AuthorizePaymentMethod && equalTo((AuthorizePaymentMethod) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AuthorizePaymentMethod other) {
        return method.equals(other.method)
                && achHolder.equals(other.achHolder)
                && achRouting.equals(other.achRouting)
                && achAccount.equals(other.achAccount)
                && achAccountType.equals(other.achAccountType)
                && achCode.equals(other.achCode)
                && achHolderType.equals(other.achHolderType)
                && storedMethodId.equals(other.storedMethodId)
                && initiator.equals(other.initiator)
                && storedMethodUsageType.equals(other.storedMethodUsageType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.method,
                this.achHolder,
                this.achRouting,
                this.achAccount,
                this.achAccountType,
                this.achCode,
                this.achHolderType,
                this.storedMethodId,
                this.initiator,
                this.storedMethodUsageType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MethodStage builder() {
        return new Builder();
    }

    public interface MethodStage {
        /**
         * <p>Payment method type - &quot;managed&quot;, &quot;vcard&quot;, &quot;check&quot;, or &quot;ach&quot;</p>
         */
        _FinalStage method(@NotNull String method);

        Builder from(AuthorizePaymentMethod other);
    }

    public interface _FinalStage {
        AuthorizePaymentMethod build();

        /**
         * <p>Account holder name for ACH payments. Required when method is &quot;ach&quot; and not using <code>storedMethodId</code>.</p>
         */
        _FinalStage achHolder(Optional<String> achHolder);

        _FinalStage achHolder(String achHolder);

        /**
         * <p>Bank routing number for ACH payments. Required when method is &quot;ach&quot; and not using <code>storedMethodId</code>.</p>
         */
        _FinalStage achRouting(Optional<String> achRouting);

        _FinalStage achRouting(String achRouting);

        /**
         * <p>Bank account number for ACH payments. Required when method is &quot;ach&quot; and not using <code>storedMethodId</code>.</p>
         */
        _FinalStage achAccount(Optional<String> achAccount);

        _FinalStage achAccount(String achAccount);

        /**
         * <p>Account type for ACH payments (&quot;checking&quot; or &quot;savings&quot;). Required when method is &quot;ach&quot; and not using <code>storedMethodId</code>.</p>
         */
        _FinalStage achAccountType(Optional<String> achAccountType);

        _FinalStage achAccountType(String achAccountType);

        _FinalStage achCode(Optional<String> achCode);

        _FinalStage achCode(String achCode);

        _FinalStage achHolderType(Optional<AchHolderType> achHolderType);

        _FinalStage achHolderType(AchHolderType achHolderType);

        /**
         * <p>ID of the stored ACH payment method. Only applicable when method is <code>ach</code>. Use this to reference a previously saved ACH method instead of providing bank details directly.</p>
         */
        _FinalStage storedMethodId(Optional<String> storedMethodId);

        _FinalStage storedMethodId(String storedMethodId);

        _FinalStage initiator(Optional<String> initiator);

        _FinalStage initiator(String initiator);

        _FinalStage storedMethodUsageType(Optional<String> storedMethodUsageType);

        _FinalStage storedMethodUsageType(String storedMethodUsageType);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements MethodStage, _FinalStage {
        private String method;

        private Optional<String> storedMethodUsageType = Optional.empty();

        private Optional<String> initiator = Optional.empty();

        private Optional<String> storedMethodId = Optional.empty();

        private Optional<AchHolderType> achHolderType = Optional.empty();

        private Optional<String> achCode = Optional.empty();

        private Optional<String> achAccountType = Optional.empty();

        private Optional<String> achAccount = Optional.empty();

        private Optional<String> achRouting = Optional.empty();

        private Optional<String> achHolder = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AuthorizePaymentMethod other) {
            method(other.getMethod());
            achHolder(other.getAchHolder());
            achRouting(other.getAchRouting());
            achAccount(other.getAchAccount());
            achAccountType(other.getAchAccountType());
            achCode(other.getAchCode());
            achHolderType(other.getAchHolderType());
            storedMethodId(other.getStoredMethodId());
            initiator(other.getInitiator());
            storedMethodUsageType(other.getStoredMethodUsageType());
            return this;
        }

        /**
         * <p>Payment method type - &quot;managed&quot;, &quot;vcard&quot;, &quot;check&quot;, or &quot;ach&quot;</p>
         * <p>Payment method type - &quot;managed&quot;, &quot;vcard&quot;, &quot;check&quot;, or &quot;ach&quot;</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("method")
        public _FinalStage method(@NotNull String method) {
            this.method = Objects.requireNonNull(method, "method must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage storedMethodUsageType(String storedMethodUsageType) {
            this.storedMethodUsageType = Optional.ofNullable(storedMethodUsageType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "storedMethodUsageType", nulls = Nulls.SKIP)
        public _FinalStage storedMethodUsageType(Optional<String> storedMethodUsageType) {
            this.storedMethodUsageType = storedMethodUsageType;
            return this;
        }

        @java.lang.Override
        public _FinalStage initiator(String initiator) {
            this.initiator = Optional.ofNullable(initiator);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "initiator", nulls = Nulls.SKIP)
        public _FinalStage initiator(Optional<String> initiator) {
            this.initiator = initiator;
            return this;
        }

        /**
         * <p>ID of the stored ACH payment method. Only applicable when method is <code>ach</code>. Use this to reference a previously saved ACH method instead of providing bank details directly.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage storedMethodId(String storedMethodId) {
            this.storedMethodId = Optional.ofNullable(storedMethodId);
            return this;
        }

        /**
         * <p>ID of the stored ACH payment method. Only applicable when method is <code>ach</code>. Use this to reference a previously saved ACH method instead of providing bank details directly.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "storedMethodId", nulls = Nulls.SKIP)
        public _FinalStage storedMethodId(Optional<String> storedMethodId) {
            this.storedMethodId = storedMethodId;
            return this;
        }

        @java.lang.Override
        public _FinalStage achHolderType(AchHolderType achHolderType) {
            this.achHolderType = Optional.ofNullable(achHolderType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "achHolderType", nulls = Nulls.SKIP)
        public _FinalStage achHolderType(Optional<AchHolderType> achHolderType) {
            this.achHolderType = achHolderType;
            return this;
        }

        @java.lang.Override
        public _FinalStage achCode(String achCode) {
            this.achCode = Optional.ofNullable(achCode);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "achCode", nulls = Nulls.SKIP)
        public _FinalStage achCode(Optional<String> achCode) {
            this.achCode = achCode;
            return this;
        }

        /**
         * <p>Account type for ACH payments (&quot;checking&quot; or &quot;savings&quot;). Required when method is &quot;ach&quot; and not using <code>storedMethodId</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage achAccountType(String achAccountType) {
            this.achAccountType = Optional.ofNullable(achAccountType);
            return this;
        }

        /**
         * <p>Account type for ACH payments (&quot;checking&quot; or &quot;savings&quot;). Required when method is &quot;ach&quot; and not using <code>storedMethodId</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "achAccountType", nulls = Nulls.SKIP)
        public _FinalStage achAccountType(Optional<String> achAccountType) {
            this.achAccountType = achAccountType;
            return this;
        }

        /**
         * <p>Bank account number for ACH payments. Required when method is &quot;ach&quot; and not using <code>storedMethodId</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage achAccount(String achAccount) {
            this.achAccount = Optional.ofNullable(achAccount);
            return this;
        }

        /**
         * <p>Bank account number for ACH payments. Required when method is &quot;ach&quot; and not using <code>storedMethodId</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "achAccount", nulls = Nulls.SKIP)
        public _FinalStage achAccount(Optional<String> achAccount) {
            this.achAccount = achAccount;
            return this;
        }

        /**
         * <p>Bank routing number for ACH payments. Required when method is &quot;ach&quot; and not using <code>storedMethodId</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage achRouting(String achRouting) {
            this.achRouting = Optional.ofNullable(achRouting);
            return this;
        }

        /**
         * <p>Bank routing number for ACH payments. Required when method is &quot;ach&quot; and not using <code>storedMethodId</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "achRouting", nulls = Nulls.SKIP)
        public _FinalStage achRouting(Optional<String> achRouting) {
            this.achRouting = achRouting;
            return this;
        }

        /**
         * <p>Account holder name for ACH payments. Required when method is &quot;ach&quot; and not using <code>storedMethodId</code>.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage achHolder(String achHolder) {
            this.achHolder = Optional.ofNullable(achHolder);
            return this;
        }

        /**
         * <p>Account holder name for ACH payments. Required when method is &quot;ach&quot; and not using <code>storedMethodId</code>.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "achHolder", nulls = Nulls.SKIP)
        public _FinalStage achHolder(Optional<String> achHolder) {
            this.achHolder = achHolder;
            return this;
        }

        @java.lang.Override
        public AuthorizePaymentMethod build() {
            return new AuthorizePaymentMethod(
                    method,
                    achHolder,
                    achRouting,
                    achAccount,
                    achAccountType,
                    achCode,
                    achHolderType,
                    storedMethodId,
                    initiator,
                    storedMethodUsageType,
                    additionalProperties);
        }
    }
}
