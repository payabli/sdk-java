/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.subscription.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import io.github.payabli.api.types.BillData;
import io.github.payabli.api.types.PaymentDetail;
import io.github.payabli.api.types.PayorDataRequest;
import io.github.payabli.api.types.ScheduleDetail;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SubscriptionRequestBody.Builder.class)
public final class SubscriptionRequestBody {
    private final Optional<PayorDataRequest> customerData;

    private final Optional<String> entryPoint;

    private final Optional<BillData> invoiceData;

    private final Optional<PaymentDetail> paymentDetails;

    private final Optional<RequestSchedulePaymentMethod> paymentMethod;

    private final Optional<ScheduleDetail> scheduleDetails;

    private final Optional<Boolean> setPause;

    private final Optional<String> source;

    private final Optional<String> subdomain;

    private final Map<String, Object> additionalProperties;

    private SubscriptionRequestBody(
            Optional<PayorDataRequest> customerData,
            Optional<String> entryPoint,
            Optional<BillData> invoiceData,
            Optional<PaymentDetail> paymentDetails,
            Optional<RequestSchedulePaymentMethod> paymentMethod,
            Optional<ScheduleDetail> scheduleDetails,
            Optional<Boolean> setPause,
            Optional<String> source,
            Optional<String> subdomain,
            Map<String, Object> additionalProperties) {
        this.customerData = customerData;
        this.entryPoint = entryPoint;
        this.invoiceData = invoiceData;
        this.paymentDetails = paymentDetails;
        this.paymentMethod = paymentMethod;
        this.scheduleDetails = scheduleDetails;
        this.setPause = setPause;
        this.source = source;
        this.subdomain = subdomain;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Object describing the customer/payor.
     */
    @JsonProperty("customerData")
    public Optional<PayorDataRequest> getCustomerData() {
        return customerData;
    }

    @JsonProperty("entryPoint")
    public Optional<String> getEntryPoint() {
        return entryPoint;
    }

    /**
     * @return Object describing an Invoice linked to the subscription.
     */
    @JsonProperty("invoiceData")
    public Optional<BillData> getInvoiceData() {
        return invoiceData;
    }

    /**
     * @return Object describing details of the payment. To skip the payment, set the <code>totalAmount</code> to 0. Payments will be paused until the amount is updated to a non-zero value. When <code>totalAmount</code> is set to 0, the <code>serviceFee</code> must also be set to 0.
     */
    @JsonProperty("paymentDetails")
    public Optional<PaymentDetail> getPaymentDetails() {
        return paymentDetails;
    }

    /**
     * @return Information about the payment method for the transaction. Required and recommended fields for each payment method type are described in each schema below.
     */
    @JsonProperty("paymentMethod")
    public Optional<RequestSchedulePaymentMethod> getPaymentMethod() {
        return paymentMethod;
    }

    /**
     * @return Object describing the schedule for subscription.
     */
    @JsonProperty("scheduleDetails")
    public Optional<ScheduleDetail> getScheduleDetails() {
        return scheduleDetails;
    }

    @JsonProperty("setPause")
    public Optional<Boolean> getSetPause() {
        return setPause;
    }

    @JsonProperty("source")
    public Optional<String> getSource() {
        return source;
    }

    @JsonProperty("subdomain")
    public Optional<String> getSubdomain() {
        return subdomain;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SubscriptionRequestBody && equalTo((SubscriptionRequestBody) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SubscriptionRequestBody other) {
        return customerData.equals(other.customerData)
                && entryPoint.equals(other.entryPoint)
                && invoiceData.equals(other.invoiceData)
                && paymentDetails.equals(other.paymentDetails)
                && paymentMethod.equals(other.paymentMethod)
                && scheduleDetails.equals(other.scheduleDetails)
                && setPause.equals(other.setPause)
                && source.equals(other.source)
                && subdomain.equals(other.subdomain);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.customerData,
                this.entryPoint,
                this.invoiceData,
                this.paymentDetails,
                this.paymentMethod,
                this.scheduleDetails,
                this.setPause,
                this.source,
                this.subdomain);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<PayorDataRequest> customerData = Optional.empty();

        private Optional<String> entryPoint = Optional.empty();

        private Optional<BillData> invoiceData = Optional.empty();

        private Optional<PaymentDetail> paymentDetails = Optional.empty();

        private Optional<RequestSchedulePaymentMethod> paymentMethod = Optional.empty();

        private Optional<ScheduleDetail> scheduleDetails = Optional.empty();

        private Optional<Boolean> setPause = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<String> subdomain = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SubscriptionRequestBody other) {
            customerData(other.getCustomerData());
            entryPoint(other.getEntryPoint());
            invoiceData(other.getInvoiceData());
            paymentDetails(other.getPaymentDetails());
            paymentMethod(other.getPaymentMethod());
            scheduleDetails(other.getScheduleDetails());
            setPause(other.getSetPause());
            source(other.getSource());
            subdomain(other.getSubdomain());
            return this;
        }

        /**
         * <p>Object describing the customer/payor.</p>
         */
        @JsonSetter(value = "customerData", nulls = Nulls.SKIP)
        public Builder customerData(Optional<PayorDataRequest> customerData) {
            this.customerData = customerData;
            return this;
        }

        public Builder customerData(PayorDataRequest customerData) {
            this.customerData = Optional.ofNullable(customerData);
            return this;
        }

        @JsonSetter(value = "entryPoint", nulls = Nulls.SKIP)
        public Builder entryPoint(Optional<String> entryPoint) {
            this.entryPoint = entryPoint;
            return this;
        }

        public Builder entryPoint(String entryPoint) {
            this.entryPoint = Optional.ofNullable(entryPoint);
            return this;
        }

        /**
         * <p>Object describing an Invoice linked to the subscription.</p>
         */
        @JsonSetter(value = "invoiceData", nulls = Nulls.SKIP)
        public Builder invoiceData(Optional<BillData> invoiceData) {
            this.invoiceData = invoiceData;
            return this;
        }

        public Builder invoiceData(BillData invoiceData) {
            this.invoiceData = Optional.ofNullable(invoiceData);
            return this;
        }

        /**
         * <p>Object describing details of the payment. To skip the payment, set the <code>totalAmount</code> to 0. Payments will be paused until the amount is updated to a non-zero value. When <code>totalAmount</code> is set to 0, the <code>serviceFee</code> must also be set to 0.</p>
         */
        @JsonSetter(value = "paymentDetails", nulls = Nulls.SKIP)
        public Builder paymentDetails(Optional<PaymentDetail> paymentDetails) {
            this.paymentDetails = paymentDetails;
            return this;
        }

        public Builder paymentDetails(PaymentDetail paymentDetails) {
            this.paymentDetails = Optional.ofNullable(paymentDetails);
            return this;
        }

        /**
         * <p>Information about the payment method for the transaction. Required and recommended fields for each payment method type are described in each schema below.</p>
         */
        @JsonSetter(value = "paymentMethod", nulls = Nulls.SKIP)
        public Builder paymentMethod(Optional<RequestSchedulePaymentMethod> paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }

        public Builder paymentMethod(RequestSchedulePaymentMethod paymentMethod) {
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        /**
         * <p>Object describing the schedule for subscription.</p>
         */
        @JsonSetter(value = "scheduleDetails", nulls = Nulls.SKIP)
        public Builder scheduleDetails(Optional<ScheduleDetail> scheduleDetails) {
            this.scheduleDetails = scheduleDetails;
            return this;
        }

        public Builder scheduleDetails(ScheduleDetail scheduleDetails) {
            this.scheduleDetails = Optional.ofNullable(scheduleDetails);
            return this;
        }

        @JsonSetter(value = "setPause", nulls = Nulls.SKIP)
        public Builder setPause(Optional<Boolean> setPause) {
            this.setPause = setPause;
            return this;
        }

        public Builder setPause(Boolean setPause) {
            this.setPause = Optional.ofNullable(setPause);
            return this;
        }

        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public Builder source(Optional<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        @JsonSetter(value = "subdomain", nulls = Nulls.SKIP)
        public Builder subdomain(Optional<String> subdomain) {
            this.subdomain = subdomain;
            return this;
        }

        public Builder subdomain(String subdomain) {
            this.subdomain = Optional.ofNullable(subdomain);
            return this;
        }

        public SubscriptionRequestBody build() {
            return new SubscriptionRequestBody(
                    customerData,
                    entryPoint,
                    invoiceData,
                    paymentDetails,
                    paymentMethod,
                    scheduleDetails,
                    setPause,
                    source,
                    subdomain,
                    additionalProperties);
        }
    }
}
