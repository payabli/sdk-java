/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.moneyouttypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import io.github.payabli.api.types.Contacts;
import io.github.payabli.api.types.VendorPaymentMethod;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RequestOutAuthorizeVendorData.Builder.class)
public final class RequestOutAuthorizeVendorData {
    private final Optional<String> vendorNumber;

    private final Optional<String> name1;

    private final Optional<String> name2;

    private final Optional<String> ein;

    private final Optional<String> phone;

    private final Optional<String> email;

    private final Optional<String> address1;

    private final Optional<String> city;

    private final Optional<String> state;

    private final Optional<String> zip;

    private final Optional<String> country;

    private final Optional<String> mcc;

    private final Optional<List<Contacts>> contacts;

    private final Optional<RequestOutAuthorizeVendorBillingData> billingData;

    private final Optional<Integer> vendorStatus;

    private final Optional<String> remitAddress1;

    private final Optional<String> remitAddress2;

    private final Optional<String> remitCity;

    private final Optional<String> remitState;

    private final Optional<String> remitZip;

    private final Optional<String> remitCountry;

    private final Optional<String> customerVendorAccount;

    private final Optional<String> customField1;

    private final Optional<String> customField2;

    private final Optional<Map<String, Optional<Map<String, Object>>>> additionalData;

    private final Optional<String> address2;

    private final Optional<Long> internalReferenceId;

    private final Optional<String> locationCode;

    private final Optional<String> payeeName1;

    private final Optional<String> payeeName2;

    private final Optional<VendorPaymentMethod> paymentMethod;

    private final Optional<Integer> vendorId;

    private final Map<String, Object> additionalProperties;

    private RequestOutAuthorizeVendorData(
            Optional<String> vendorNumber,
            Optional<String> name1,
            Optional<String> name2,
            Optional<String> ein,
            Optional<String> phone,
            Optional<String> email,
            Optional<String> address1,
            Optional<String> city,
            Optional<String> state,
            Optional<String> zip,
            Optional<String> country,
            Optional<String> mcc,
            Optional<List<Contacts>> contacts,
            Optional<RequestOutAuthorizeVendorBillingData> billingData,
            Optional<Integer> vendorStatus,
            Optional<String> remitAddress1,
            Optional<String> remitAddress2,
            Optional<String> remitCity,
            Optional<String> remitState,
            Optional<String> remitZip,
            Optional<String> remitCountry,
            Optional<String> customerVendorAccount,
            Optional<String> customField1,
            Optional<String> customField2,
            Optional<Map<String, Optional<Map<String, Object>>>> additionalData,
            Optional<String> address2,
            Optional<Long> internalReferenceId,
            Optional<String> locationCode,
            Optional<String> payeeName1,
            Optional<String> payeeName2,
            Optional<VendorPaymentMethod> paymentMethod,
            Optional<Integer> vendorId,
            Map<String, Object> additionalProperties) {
        this.vendorNumber = vendorNumber;
        this.name1 = name1;
        this.name2 = name2;
        this.ein = ein;
        this.phone = phone;
        this.email = email;
        this.address1 = address1;
        this.city = city;
        this.state = state;
        this.zip = zip;
        this.country = country;
        this.mcc = mcc;
        this.contacts = contacts;
        this.billingData = billingData;
        this.vendorStatus = vendorStatus;
        this.remitAddress1 = remitAddress1;
        this.remitAddress2 = remitAddress2;
        this.remitCity = remitCity;
        this.remitState = remitState;
        this.remitZip = remitZip;
        this.remitCountry = remitCountry;
        this.customerVendorAccount = customerVendorAccount;
        this.customField1 = customField1;
        this.customField2 = customField2;
        this.additionalData = additionalData;
        this.address2 = address2;
        this.internalReferenceId = internalReferenceId;
        this.locationCode = locationCode;
        this.payeeName1 = payeeName1;
        this.payeeName2 = payeeName2;
        this.paymentMethod = paymentMethod;
        this.vendorId = vendorId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("vendorNumber")
    public Optional<String> getVendorNumber() {
        return vendorNumber;
    }

    @JsonProperty("name1")
    public Optional<String> getName1() {
        return name1;
    }

    @JsonProperty("name2")
    public Optional<String> getName2() {
        return name2;
    }

    @JsonProperty("ein")
    public Optional<String> getEin() {
        return ein;
    }

    @JsonProperty("phone")
    public Optional<String> getPhone() {
        return phone;
    }

    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    @JsonProperty("address1")
    public Optional<String> getAddress1() {
        return address1;
    }

    @JsonProperty("city")
    public Optional<String> getCity() {
        return city;
    }

    @JsonProperty("state")
    public Optional<String> getState() {
        return state;
    }

    @JsonProperty("zip")
    public Optional<String> getZip() {
        return zip;
    }

    @JsonProperty("country")
    public Optional<String> getCountry() {
        return country;
    }

    @JsonProperty("mcc")
    public Optional<String> getMcc() {
        return mcc;
    }

    @JsonProperty("contacts")
    public Optional<List<Contacts>> getContacts() {
        return contacts;
    }

    @JsonProperty("billingData")
    public Optional<RequestOutAuthorizeVendorBillingData> getBillingData() {
        return billingData;
    }

    @JsonProperty("vendorStatus")
    public Optional<Integer> getVendorStatus() {
        return vendorStatus;
    }

    @JsonProperty("remitAddress1")
    public Optional<String> getRemitAddress1() {
        return remitAddress1;
    }

    @JsonProperty("remitAddress2")
    public Optional<String> getRemitAddress2() {
        return remitAddress2;
    }

    @JsonProperty("remitCity")
    public Optional<String> getRemitCity() {
        return remitCity;
    }

    @JsonProperty("remitState")
    public Optional<String> getRemitState() {
        return remitState;
    }

    @JsonProperty("remitZip")
    public Optional<String> getRemitZip() {
        return remitZip;
    }

    @JsonProperty("remitCountry")
    public Optional<String> getRemitCountry() {
        return remitCountry;
    }

    @JsonProperty("customerVendorAccount")
    public Optional<String> getCustomerVendorAccount() {
        return customerVendorAccount;
    }

    @JsonProperty("customField1")
    public Optional<String> getCustomField1() {
        return customField1;
    }

    @JsonProperty("customField2")
    public Optional<String> getCustomField2() {
        return customField2;
    }

    @JsonProperty("additionalData")
    public Optional<Map<String, Optional<Map<String, Object>>>> getAdditionalData() {
        return additionalData;
    }

    @JsonProperty("address2")
    public Optional<String> getAddress2() {
        return address2;
    }

    @JsonProperty("internalReferenceId")
    public Optional<Long> getInternalReferenceId() {
        return internalReferenceId;
    }

    @JsonProperty("locationCode")
    public Optional<String> getLocationCode() {
        return locationCode;
    }

    @JsonProperty("payeeName1")
    public Optional<String> getPayeeName1() {
        return payeeName1;
    }

    @JsonProperty("payeeName2")
    public Optional<String> getPayeeName2() {
        return payeeName2;
    }

    @JsonProperty("paymentMethod")
    public Optional<VendorPaymentMethod> getPaymentMethod() {
        return paymentMethod;
    }

    @JsonProperty("vendorId")
    public Optional<Integer> getVendorId() {
        return vendorId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RequestOutAuthorizeVendorData && equalTo((RequestOutAuthorizeVendorData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RequestOutAuthorizeVendorData other) {
        return vendorNumber.equals(other.vendorNumber)
                && name1.equals(other.name1)
                && name2.equals(other.name2)
                && ein.equals(other.ein)
                && phone.equals(other.phone)
                && email.equals(other.email)
                && address1.equals(other.address1)
                && city.equals(other.city)
                && state.equals(other.state)
                && zip.equals(other.zip)
                && country.equals(other.country)
                && mcc.equals(other.mcc)
                && contacts.equals(other.contacts)
                && billingData.equals(other.billingData)
                && vendorStatus.equals(other.vendorStatus)
                && remitAddress1.equals(other.remitAddress1)
                && remitAddress2.equals(other.remitAddress2)
                && remitCity.equals(other.remitCity)
                && remitState.equals(other.remitState)
                && remitZip.equals(other.remitZip)
                && remitCountry.equals(other.remitCountry)
                && customerVendorAccount.equals(other.customerVendorAccount)
                && customField1.equals(other.customField1)
                && customField2.equals(other.customField2)
                && additionalData.equals(other.additionalData)
                && address2.equals(other.address2)
                && internalReferenceId.equals(other.internalReferenceId)
                && locationCode.equals(other.locationCode)
                && payeeName1.equals(other.payeeName1)
                && payeeName2.equals(other.payeeName2)
                && paymentMethod.equals(other.paymentMethod)
                && vendorId.equals(other.vendorId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.vendorNumber,
                this.name1,
                this.name2,
                this.ein,
                this.phone,
                this.email,
                this.address1,
                this.city,
                this.state,
                this.zip,
                this.country,
                this.mcc,
                this.contacts,
                this.billingData,
                this.vendorStatus,
                this.remitAddress1,
                this.remitAddress2,
                this.remitCity,
                this.remitState,
                this.remitZip,
                this.remitCountry,
                this.customerVendorAccount,
                this.customField1,
                this.customField2,
                this.additionalData,
                this.address2,
                this.internalReferenceId,
                this.locationCode,
                this.payeeName1,
                this.payeeName2,
                this.paymentMethod,
                this.vendorId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> vendorNumber = Optional.empty();

        private Optional<String> name1 = Optional.empty();

        private Optional<String> name2 = Optional.empty();

        private Optional<String> ein = Optional.empty();

        private Optional<String> phone = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> address1 = Optional.empty();

        private Optional<String> city = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<String> zip = Optional.empty();

        private Optional<String> country = Optional.empty();

        private Optional<String> mcc = Optional.empty();

        private Optional<List<Contacts>> contacts = Optional.empty();

        private Optional<RequestOutAuthorizeVendorBillingData> billingData = Optional.empty();

        private Optional<Integer> vendorStatus = Optional.empty();

        private Optional<String> remitAddress1 = Optional.empty();

        private Optional<String> remitAddress2 = Optional.empty();

        private Optional<String> remitCity = Optional.empty();

        private Optional<String> remitState = Optional.empty();

        private Optional<String> remitZip = Optional.empty();

        private Optional<String> remitCountry = Optional.empty();

        private Optional<String> customerVendorAccount = Optional.empty();

        private Optional<String> customField1 = Optional.empty();

        private Optional<String> customField2 = Optional.empty();

        private Optional<Map<String, Optional<Map<String, Object>>>> additionalData = Optional.empty();

        private Optional<String> address2 = Optional.empty();

        private Optional<Long> internalReferenceId = Optional.empty();

        private Optional<String> locationCode = Optional.empty();

        private Optional<String> payeeName1 = Optional.empty();

        private Optional<String> payeeName2 = Optional.empty();

        private Optional<VendorPaymentMethod> paymentMethod = Optional.empty();

        private Optional<Integer> vendorId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RequestOutAuthorizeVendorData other) {
            vendorNumber(other.getVendorNumber());
            name1(other.getName1());
            name2(other.getName2());
            ein(other.getEin());
            phone(other.getPhone());
            email(other.getEmail());
            address1(other.getAddress1());
            city(other.getCity());
            state(other.getState());
            zip(other.getZip());
            country(other.getCountry());
            mcc(other.getMcc());
            contacts(other.getContacts());
            billingData(other.getBillingData());
            vendorStatus(other.getVendorStatus());
            remitAddress1(other.getRemitAddress1());
            remitAddress2(other.getRemitAddress2());
            remitCity(other.getRemitCity());
            remitState(other.getRemitState());
            remitZip(other.getRemitZip());
            remitCountry(other.getRemitCountry());
            customerVendorAccount(other.getCustomerVendorAccount());
            customField1(other.getCustomField1());
            customField2(other.getCustomField2());
            additionalData(other.getAdditionalData());
            address2(other.getAddress2());
            internalReferenceId(other.getInternalReferenceId());
            locationCode(other.getLocationCode());
            payeeName1(other.getPayeeName1());
            payeeName2(other.getPayeeName2());
            paymentMethod(other.getPaymentMethod());
            vendorId(other.getVendorId());
            return this;
        }

        @JsonSetter(value = "vendorNumber", nulls = Nulls.SKIP)
        public Builder vendorNumber(Optional<String> vendorNumber) {
            this.vendorNumber = vendorNumber;
            return this;
        }

        public Builder vendorNumber(String vendorNumber) {
            this.vendorNumber = Optional.ofNullable(vendorNumber);
            return this;
        }

        @JsonSetter(value = "name1", nulls = Nulls.SKIP)
        public Builder name1(Optional<String> name1) {
            this.name1 = name1;
            return this;
        }

        public Builder name1(String name1) {
            this.name1 = Optional.ofNullable(name1);
            return this;
        }

        @JsonSetter(value = "name2", nulls = Nulls.SKIP)
        public Builder name2(Optional<String> name2) {
            this.name2 = name2;
            return this;
        }

        public Builder name2(String name2) {
            this.name2 = Optional.ofNullable(name2);
            return this;
        }

        @JsonSetter(value = "ein", nulls = Nulls.SKIP)
        public Builder ein(Optional<String> ein) {
            this.ein = ein;
            return this;
        }

        public Builder ein(String ein) {
            this.ein = Optional.ofNullable(ein);
            return this;
        }

        @JsonSetter(value = "phone", nulls = Nulls.SKIP)
        public Builder phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        @JsonSetter(value = "address1", nulls = Nulls.SKIP)
        public Builder address1(Optional<String> address1) {
            this.address1 = address1;
            return this;
        }

        public Builder address1(String address1) {
            this.address1 = Optional.ofNullable(address1);
            return this;
        }

        @JsonSetter(value = "city", nulls = Nulls.SKIP)
        public Builder city(Optional<String> city) {
            this.city = city;
            return this;
        }

        public Builder city(String city) {
            this.city = Optional.ofNullable(city);
            return this;
        }

        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<String> state) {
            this.state = state;
            return this;
        }

        public Builder state(String state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        @JsonSetter(value = "zip", nulls = Nulls.SKIP)
        public Builder zip(Optional<String> zip) {
            this.zip = zip;
            return this;
        }

        public Builder zip(String zip) {
            this.zip = Optional.ofNullable(zip);
            return this;
        }

        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public Builder country(Optional<String> country) {
            this.country = country;
            return this;
        }

        public Builder country(String country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        @JsonSetter(value = "mcc", nulls = Nulls.SKIP)
        public Builder mcc(Optional<String> mcc) {
            this.mcc = mcc;
            return this;
        }

        public Builder mcc(String mcc) {
            this.mcc = Optional.ofNullable(mcc);
            return this;
        }

        @JsonSetter(value = "contacts", nulls = Nulls.SKIP)
        public Builder contacts(Optional<List<Contacts>> contacts) {
            this.contacts = contacts;
            return this;
        }

        public Builder contacts(List<Contacts> contacts) {
            this.contacts = Optional.ofNullable(contacts);
            return this;
        }

        @JsonSetter(value = "billingData", nulls = Nulls.SKIP)
        public Builder billingData(Optional<RequestOutAuthorizeVendorBillingData> billingData) {
            this.billingData = billingData;
            return this;
        }

        public Builder billingData(RequestOutAuthorizeVendorBillingData billingData) {
            this.billingData = Optional.ofNullable(billingData);
            return this;
        }

        @JsonSetter(value = "vendorStatus", nulls = Nulls.SKIP)
        public Builder vendorStatus(Optional<Integer> vendorStatus) {
            this.vendorStatus = vendorStatus;
            return this;
        }

        public Builder vendorStatus(Integer vendorStatus) {
            this.vendorStatus = Optional.ofNullable(vendorStatus);
            return this;
        }

        @JsonSetter(value = "remitAddress1", nulls = Nulls.SKIP)
        public Builder remitAddress1(Optional<String> remitAddress1) {
            this.remitAddress1 = remitAddress1;
            return this;
        }

        public Builder remitAddress1(String remitAddress1) {
            this.remitAddress1 = Optional.ofNullable(remitAddress1);
            return this;
        }

        @JsonSetter(value = "remitAddress2", nulls = Nulls.SKIP)
        public Builder remitAddress2(Optional<String> remitAddress2) {
            this.remitAddress2 = remitAddress2;
            return this;
        }

        public Builder remitAddress2(String remitAddress2) {
            this.remitAddress2 = Optional.ofNullable(remitAddress2);
            return this;
        }

        @JsonSetter(value = "remitCity", nulls = Nulls.SKIP)
        public Builder remitCity(Optional<String> remitCity) {
            this.remitCity = remitCity;
            return this;
        }

        public Builder remitCity(String remitCity) {
            this.remitCity = Optional.ofNullable(remitCity);
            return this;
        }

        @JsonSetter(value = "remitState", nulls = Nulls.SKIP)
        public Builder remitState(Optional<String> remitState) {
            this.remitState = remitState;
            return this;
        }

        public Builder remitState(String remitState) {
            this.remitState = Optional.ofNullable(remitState);
            return this;
        }

        @JsonSetter(value = "remitZip", nulls = Nulls.SKIP)
        public Builder remitZip(Optional<String> remitZip) {
            this.remitZip = remitZip;
            return this;
        }

        public Builder remitZip(String remitZip) {
            this.remitZip = Optional.ofNullable(remitZip);
            return this;
        }

        @JsonSetter(value = "remitCountry", nulls = Nulls.SKIP)
        public Builder remitCountry(Optional<String> remitCountry) {
            this.remitCountry = remitCountry;
            return this;
        }

        public Builder remitCountry(String remitCountry) {
            this.remitCountry = Optional.ofNullable(remitCountry);
            return this;
        }

        @JsonSetter(value = "customerVendorAccount", nulls = Nulls.SKIP)
        public Builder customerVendorAccount(Optional<String> customerVendorAccount) {
            this.customerVendorAccount = customerVendorAccount;
            return this;
        }

        public Builder customerVendorAccount(String customerVendorAccount) {
            this.customerVendorAccount = Optional.ofNullable(customerVendorAccount);
            return this;
        }

        @JsonSetter(value = "customField1", nulls = Nulls.SKIP)
        public Builder customField1(Optional<String> customField1) {
            this.customField1 = customField1;
            return this;
        }

        public Builder customField1(String customField1) {
            this.customField1 = Optional.ofNullable(customField1);
            return this;
        }

        @JsonSetter(value = "customField2", nulls = Nulls.SKIP)
        public Builder customField2(Optional<String> customField2) {
            this.customField2 = customField2;
            return this;
        }

        public Builder customField2(String customField2) {
            this.customField2 = Optional.ofNullable(customField2);
            return this;
        }

        @JsonSetter(value = "additionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<Map<String, Optional<Map<String, Object>>>> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(Map<String, Optional<Map<String, Object>>> additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        @JsonSetter(value = "address2", nulls = Nulls.SKIP)
        public Builder address2(Optional<String> address2) {
            this.address2 = address2;
            return this;
        }

        public Builder address2(String address2) {
            this.address2 = Optional.ofNullable(address2);
            return this;
        }

        @JsonSetter(value = "internalReferenceId", nulls = Nulls.SKIP)
        public Builder internalReferenceId(Optional<Long> internalReferenceId) {
            this.internalReferenceId = internalReferenceId;
            return this;
        }

        public Builder internalReferenceId(Long internalReferenceId) {
            this.internalReferenceId = Optional.ofNullable(internalReferenceId);
            return this;
        }

        @JsonSetter(value = "locationCode", nulls = Nulls.SKIP)
        public Builder locationCode(Optional<String> locationCode) {
            this.locationCode = locationCode;
            return this;
        }

        public Builder locationCode(String locationCode) {
            this.locationCode = Optional.ofNullable(locationCode);
            return this;
        }

        @JsonSetter(value = "payeeName1", nulls = Nulls.SKIP)
        public Builder payeeName1(Optional<String> payeeName1) {
            this.payeeName1 = payeeName1;
            return this;
        }

        public Builder payeeName1(String payeeName1) {
            this.payeeName1 = Optional.ofNullable(payeeName1);
            return this;
        }

        @JsonSetter(value = "payeeName2", nulls = Nulls.SKIP)
        public Builder payeeName2(Optional<String> payeeName2) {
            this.payeeName2 = payeeName2;
            return this;
        }

        public Builder payeeName2(String payeeName2) {
            this.payeeName2 = Optional.ofNullable(payeeName2);
            return this;
        }

        @JsonSetter(value = "paymentMethod", nulls = Nulls.SKIP)
        public Builder paymentMethod(Optional<VendorPaymentMethod> paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }

        public Builder paymentMethod(VendorPaymentMethod paymentMethod) {
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        @JsonSetter(value = "vendorId", nulls = Nulls.SKIP)
        public Builder vendorId(Optional<Integer> vendorId) {
            this.vendorId = vendorId;
            return this;
        }

        public Builder vendorId(Integer vendorId) {
            this.vendorId = Optional.ofNullable(vendorId);
            return this;
        }

        public RequestOutAuthorizeVendorData build() {
            return new RequestOutAuthorizeVendorData(
                    vendorNumber,
                    name1,
                    name2,
                    ein,
                    phone,
                    email,
                    address1,
                    city,
                    state,
                    zip,
                    country,
                    mcc,
                    contacts,
                    billingData,
                    vendorStatus,
                    remitAddress1,
                    remitAddress2,
                    remitCity,
                    remitState,
                    remitZip,
                    remitCountry,
                    customerVendorAccount,
                    customField1,
                    customField2,
                    additionalData,
                    address2,
                    internalReferenceId,
                    locationCode,
                    payeeName1,
                    payeeName2,
                    paymentMethod,
                    vendorId,
                    additionalProperties);
        }
    }
}
