/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.checkcapture.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CheckCaptureRequestBody.Builder.class)
public final class CheckCaptureRequestBody {
    private final String entryPoint;

    private final String frontImage;

    private final String rearImage;

    private final int checkAmount;

    private final Map<String, Object> additionalProperties;

    private CheckCaptureRequestBody(
            String entryPoint,
            String frontImage,
            String rearImage,
            int checkAmount,
            Map<String, Object> additionalProperties) {
        this.entryPoint = entryPoint;
        this.frontImage = frontImage;
        this.rearImage = rearImage;
        this.checkAmount = checkAmount;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("entryPoint")
    public String getEntryPoint() {
        return entryPoint;
    }

    /**
     * @return Base64-encoded front check image. Must be JPEG or PNG format and less than 1MB. Image must show the entire check clearly with no partial, blurry, or illegible portions.
     */
    @JsonProperty("frontImage")
    public String getFrontImage() {
        return frontImage;
    }

    /**
     * @return Base64-encoded rear check image. Must be JPEG or PNG format and less than 1MB. Image must show the entire check clearly with no partial, blurry, or illegible portions.
     */
    @JsonProperty("rearImage")
    public String getRearImage() {
        return rearImage;
    }

    /**
     * @return Check amount in cents (maximum 32-bit integer value).
     */
    @JsonProperty("checkAmount")
    public int getCheckAmount() {
        return checkAmount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CheckCaptureRequestBody && equalTo((CheckCaptureRequestBody) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CheckCaptureRequestBody other) {
        return entryPoint.equals(other.entryPoint)
                && frontImage.equals(other.frontImage)
                && rearImage.equals(other.rearImage)
                && checkAmount == other.checkAmount;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.entryPoint, this.frontImage, this.rearImage, this.checkAmount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EntryPointStage builder() {
        return new Builder();
    }

    public interface EntryPointStage {
        FrontImageStage entryPoint(@NotNull String entryPoint);

        Builder from(CheckCaptureRequestBody other);
    }

    public interface FrontImageStage {
        /**
         * <p>Base64-encoded front check image. Must be JPEG or PNG format and less than 1MB. Image must show the entire check clearly with no partial, blurry, or illegible portions.</p>
         */
        RearImageStage frontImage(@NotNull String frontImage);
    }

    public interface RearImageStage {
        /**
         * <p>Base64-encoded rear check image. Must be JPEG or PNG format and less than 1MB. Image must show the entire check clearly with no partial, blurry, or illegible portions.</p>
         */
        CheckAmountStage rearImage(@NotNull String rearImage);
    }

    public interface CheckAmountStage {
        /**
         * <p>Check amount in cents (maximum 32-bit integer value).</p>
         */
        _FinalStage checkAmount(int checkAmount);
    }

    public interface _FinalStage {
        CheckCaptureRequestBody build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements EntryPointStage, FrontImageStage, RearImageStage, CheckAmountStage, _FinalStage {
        private String entryPoint;

        private String frontImage;

        private String rearImage;

        private int checkAmount;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CheckCaptureRequestBody other) {
            entryPoint(other.getEntryPoint());
            frontImage(other.getFrontImage());
            rearImage(other.getRearImage());
            checkAmount(other.getCheckAmount());
            return this;
        }

        @java.lang.Override
        @JsonSetter("entryPoint")
        public FrontImageStage entryPoint(@NotNull String entryPoint) {
            this.entryPoint = Objects.requireNonNull(entryPoint, "entryPoint must not be null");
            return this;
        }

        /**
         * <p>Base64-encoded front check image. Must be JPEG or PNG format and less than 1MB. Image must show the entire check clearly with no partial, blurry, or illegible portions.</p>
         * <p>Base64-encoded front check image. Must be JPEG or PNG format and less than 1MB. Image must show the entire check clearly with no partial, blurry, or illegible portions.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("frontImage")
        public RearImageStage frontImage(@NotNull String frontImage) {
            this.frontImage = Objects.requireNonNull(frontImage, "frontImage must not be null");
            return this;
        }

        /**
         * <p>Base64-encoded rear check image. Must be JPEG or PNG format and less than 1MB. Image must show the entire check clearly with no partial, blurry, or illegible portions.</p>
         * <p>Base64-encoded rear check image. Must be JPEG or PNG format and less than 1MB. Image must show the entire check clearly with no partial, blurry, or illegible portions.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("rearImage")
        public CheckAmountStage rearImage(@NotNull String rearImage) {
            this.rearImage = Objects.requireNonNull(rearImage, "rearImage must not be null");
            return this;
        }

        /**
         * <p>Check amount in cents (maximum 32-bit integer value).</p>
         * <p>Check amount in cents (maximum 32-bit integer value).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("checkAmount")
        public _FinalStage checkAmount(int checkAmount) {
            this.checkAmount = checkAmount;
            return this;
        }

        @java.lang.Override
        public CheckCaptureRequestBody build() {
            return new CheckCaptureRequestBody(entryPoint, frontImage, rearImage, checkAmount, additionalProperties);
        }
    }
}
