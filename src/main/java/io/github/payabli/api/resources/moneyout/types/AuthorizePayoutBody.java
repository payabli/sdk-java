/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.resources.moneyout.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import io.github.payabli.api.types.BillPayOutDataRequest;
import io.github.payabli.api.types.VendorPaymentMethod;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AuthorizePayoutBody.Builder.class)
public final class AuthorizePayoutBody {
    private final Optional<String> accountId;

    private final String entryPoint;

    private final Optional<List<BillPayOutDataRequest>> invoiceData;

    private final Optional<String> orderDescription;

    private final Optional<String> orderId;

    private final RequestOutAuthorizePaymentDetails paymentDetails;

    private final Optional<VendorPaymentMethod> paymentMethod;

    private final Optional<String> source;

    private final Optional<String> subdomain;

    private final Optional<Long> subscriptionId;

    private final RequestOutAuthorizeVendorData vendorData;

    private final Map<String, Object> additionalProperties;

    private AuthorizePayoutBody(
            Optional<String> accountId,
            String entryPoint,
            Optional<List<BillPayOutDataRequest>> invoiceData,
            Optional<String> orderDescription,
            Optional<String> orderId,
            RequestOutAuthorizePaymentDetails paymentDetails,
            Optional<VendorPaymentMethod> paymentMethod,
            Optional<String> source,
            Optional<String> subdomain,
            Optional<Long> subscriptionId,
            RequestOutAuthorizeVendorData vendorData,
            Map<String, Object> additionalProperties) {
        this.accountId = accountId;
        this.entryPoint = entryPoint;
        this.invoiceData = invoiceData;
        this.orderDescription = orderDescription;
        this.orderId = orderId;
        this.paymentDetails = paymentDetails;
        this.paymentMethod = paymentMethod;
        this.source = source;
        this.subdomain = subdomain;
        this.subscriptionId = subscriptionId;
        this.vendorData = vendorData;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("accountId")
    public Optional<String> getAccountId() {
        return accountId;
    }

    @JsonProperty("entryPoint")
    public String getEntryPoint() {
        return entryPoint;
    }

    /**
     * @return Array of bills associated to the transaction
     */
    @JsonProperty("invoiceData")
    public Optional<List<BillPayOutDataRequest>> getInvoiceData() {
        return invoiceData;
    }

    @JsonProperty("orderDescription")
    public Optional<String> getOrderDescription() {
        return orderDescription;
    }

    @JsonProperty("orderId")
    public Optional<String> getOrderId() {
        return orderId;
    }

    /**
     * @return Object containing payment details.
     */
    @JsonProperty("paymentDetails")
    public RequestOutAuthorizePaymentDetails getPaymentDetails() {
        return paymentDetails;
    }

    @JsonProperty("paymentMethod")
    public Optional<VendorPaymentMethod> getPaymentMethod() {
        return paymentMethod;
    }

    @JsonProperty("source")
    public Optional<String> getSource() {
        return source;
    }

    @JsonProperty("subdomain")
    public Optional<String> getSubdomain() {
        return subdomain;
    }

    @JsonProperty("subscriptionId")
    public Optional<Long> getSubscriptionId() {
        return subscriptionId;
    }

    /**
     * @return Object containing vendor data.
     */
    @JsonProperty("vendorData")
    public RequestOutAuthorizeVendorData getVendorData() {
        return vendorData;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AuthorizePayoutBody && equalTo((AuthorizePayoutBody) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AuthorizePayoutBody other) {
        return accountId.equals(other.accountId)
                && entryPoint.equals(other.entryPoint)
                && invoiceData.equals(other.invoiceData)
                && orderDescription.equals(other.orderDescription)
                && orderId.equals(other.orderId)
                && paymentDetails.equals(other.paymentDetails)
                && paymentMethod.equals(other.paymentMethod)
                && source.equals(other.source)
                && subdomain.equals(other.subdomain)
                && subscriptionId.equals(other.subscriptionId)
                && vendorData.equals(other.vendorData);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accountId,
                this.entryPoint,
                this.invoiceData,
                this.orderDescription,
                this.orderId,
                this.paymentDetails,
                this.paymentMethod,
                this.source,
                this.subdomain,
                this.subscriptionId,
                this.vendorData);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EntryPointStage builder() {
        return new Builder();
    }

    public interface EntryPointStage {
        PaymentDetailsStage entryPoint(@NotNull String entryPoint);

        Builder from(AuthorizePayoutBody other);
    }

    public interface PaymentDetailsStage {
        /**
         * <p>Object containing payment details.</p>
         */
        VendorDataStage paymentDetails(@NotNull RequestOutAuthorizePaymentDetails paymentDetails);
    }

    public interface VendorDataStage {
        /**
         * <p>Object containing vendor data.</p>
         */
        _FinalStage vendorData(@NotNull RequestOutAuthorizeVendorData vendorData);
    }

    public interface _FinalStage {
        AuthorizePayoutBody build();

        _FinalStage accountId(Optional<String> accountId);

        _FinalStage accountId(String accountId);

        /**
         * <p>Array of bills associated to the transaction</p>
         */
        _FinalStage invoiceData(Optional<List<BillPayOutDataRequest>> invoiceData);

        _FinalStage invoiceData(List<BillPayOutDataRequest> invoiceData);

        _FinalStage orderDescription(Optional<String> orderDescription);

        _FinalStage orderDescription(String orderDescription);

        _FinalStage orderId(Optional<String> orderId);

        _FinalStage orderId(String orderId);

        _FinalStage paymentMethod(Optional<VendorPaymentMethod> paymentMethod);

        _FinalStage paymentMethod(VendorPaymentMethod paymentMethod);

        _FinalStage source(Optional<String> source);

        _FinalStage source(String source);

        _FinalStage subdomain(Optional<String> subdomain);

        _FinalStage subdomain(String subdomain);

        _FinalStage subscriptionId(Optional<Long> subscriptionId);

        _FinalStage subscriptionId(Long subscriptionId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements EntryPointStage, PaymentDetailsStage, VendorDataStage, _FinalStage {
        private String entryPoint;

        private RequestOutAuthorizePaymentDetails paymentDetails;

        private RequestOutAuthorizeVendorData vendorData;

        private Optional<Long> subscriptionId = Optional.empty();

        private Optional<String> subdomain = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<VendorPaymentMethod> paymentMethod = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<String> orderDescription = Optional.empty();

        private Optional<List<BillPayOutDataRequest>> invoiceData = Optional.empty();

        private Optional<String> accountId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(AuthorizePayoutBody other) {
            accountId(other.getAccountId());
            entryPoint(other.getEntryPoint());
            invoiceData(other.getInvoiceData());
            orderDescription(other.getOrderDescription());
            orderId(other.getOrderId());
            paymentDetails(other.getPaymentDetails());
            paymentMethod(other.getPaymentMethod());
            source(other.getSource());
            subdomain(other.getSubdomain());
            subscriptionId(other.getSubscriptionId());
            vendorData(other.getVendorData());
            return this;
        }

        @java.lang.Override
        @JsonSetter("entryPoint")
        public PaymentDetailsStage entryPoint(@NotNull String entryPoint) {
            this.entryPoint = Objects.requireNonNull(entryPoint, "entryPoint must not be null");
            return this;
        }

        /**
         * <p>Object containing payment details.</p>
         * <p>Object containing payment details.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("paymentDetails")
        public VendorDataStage paymentDetails(@NotNull RequestOutAuthorizePaymentDetails paymentDetails) {
            this.paymentDetails = Objects.requireNonNull(paymentDetails, "paymentDetails must not be null");
            return this;
        }

        /**
         * <p>Object containing vendor data.</p>
         * <p>Object containing vendor data.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("vendorData")
        public _FinalStage vendorData(@NotNull RequestOutAuthorizeVendorData vendorData) {
            this.vendorData = Objects.requireNonNull(vendorData, "vendorData must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage subscriptionId(Long subscriptionId) {
            this.subscriptionId = Optional.ofNullable(subscriptionId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "subscriptionId", nulls = Nulls.SKIP)
        public _FinalStage subscriptionId(Optional<Long> subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }

        @java.lang.Override
        public _FinalStage subdomain(String subdomain) {
            this.subdomain = Optional.ofNullable(subdomain);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "subdomain", nulls = Nulls.SKIP)
        public _FinalStage subdomain(Optional<String> subdomain) {
            this.subdomain = subdomain;
            return this;
        }

        @java.lang.Override
        public _FinalStage source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public _FinalStage source(Optional<String> source) {
            this.source = source;
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentMethod(VendorPaymentMethod paymentMethod) {
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "paymentMethod", nulls = Nulls.SKIP)
        public _FinalStage paymentMethod(Optional<VendorPaymentMethod> paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }

        @java.lang.Override
        public _FinalStage orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "orderId", nulls = Nulls.SKIP)
        public _FinalStage orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        @java.lang.Override
        public _FinalStage orderDescription(String orderDescription) {
            this.orderDescription = Optional.ofNullable(orderDescription);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "orderDescription", nulls = Nulls.SKIP)
        public _FinalStage orderDescription(Optional<String> orderDescription) {
            this.orderDescription = orderDescription;
            return this;
        }

        /**
         * <p>Array of bills associated to the transaction</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage invoiceData(List<BillPayOutDataRequest> invoiceData) {
            this.invoiceData = Optional.ofNullable(invoiceData);
            return this;
        }

        /**
         * <p>Array of bills associated to the transaction</p>
         */
        @java.lang.Override
        @JsonSetter(value = "invoiceData", nulls = Nulls.SKIP)
        public _FinalStage invoiceData(Optional<List<BillPayOutDataRequest>> invoiceData) {
            this.invoiceData = invoiceData;
            return this;
        }

        @java.lang.Override
        public _FinalStage accountId(String accountId) {
            this.accountId = Optional.ofNullable(accountId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "accountId", nulls = Nulls.SKIP)
        public _FinalStage accountId(Optional<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        @java.lang.Override
        public AuthorizePayoutBody build() {
            return new AuthorizePayoutBody(
                    accountId,
                    entryPoint,
                    invoiceData,
                    orderDescription,
                    orderId,
                    paymentDetails,
                    paymentMethod,
                    source,
                    subdomain,
                    subscriptionId,
                    vendorData,
                    additionalProperties);
        }
    }
}
