/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryPayoutTransactionRecordsItemPaymentData.Builder.class)
public final class QueryPayoutTransactionRecordsItemPaymentData {
    private final Optional<String> accountExp;

    private final Optional<String> accountId;

    private final Optional<String> accountType;

    private final Optional<String> accountZip;

    private final Optional<String> bankAccount;

    private final Optional<BinData> binData;

    private final Optional<String> cloudSignatureData;

    private final Optional<String> cloudSignatureFormat;

    private final Optional<PayoutGatewayConnector> gatewayConnector;

    private final Optional<String> holderName;

    private final Optional<String> initiator;

    private final Optional<String> maskedAccount;

    private final Optional<String> orderDescription;

    private final Optional<PaymentDetail> paymentDetails;

    private final Optional<String> payorData;

    private final Optional<String> sequence;

    private final Optional<String> storedId;

    private final Optional<String> storedMethodUsageType;

    private final Map<String, Object> additionalProperties;

    private QueryPayoutTransactionRecordsItemPaymentData(
            Optional<String> accountExp,
            Optional<String> accountId,
            Optional<String> accountType,
            Optional<String> accountZip,
            Optional<String> bankAccount,
            Optional<BinData> binData,
            Optional<String> cloudSignatureData,
            Optional<String> cloudSignatureFormat,
            Optional<PayoutGatewayConnector> gatewayConnector,
            Optional<String> holderName,
            Optional<String> initiator,
            Optional<String> maskedAccount,
            Optional<String> orderDescription,
            Optional<PaymentDetail> paymentDetails,
            Optional<String> payorData,
            Optional<String> sequence,
            Optional<String> storedId,
            Optional<String> storedMethodUsageType,
            Map<String, Object> additionalProperties) {
        this.accountExp = accountExp;
        this.accountId = accountId;
        this.accountType = accountType;
        this.accountZip = accountZip;
        this.bankAccount = bankAccount;
        this.binData = binData;
        this.cloudSignatureData = cloudSignatureData;
        this.cloudSignatureFormat = cloudSignatureFormat;
        this.gatewayConnector = gatewayConnector;
        this.holderName = holderName;
        this.initiator = initiator;
        this.maskedAccount = maskedAccount;
        this.orderDescription = orderDescription;
        this.paymentDetails = paymentDetails;
        this.payorData = payorData;
        this.sequence = sequence;
        this.storedId = storedId;
        this.storedMethodUsageType = storedMethodUsageType;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("AccountExp")
    public Optional<String> getAccountExp() {
        return accountExp;
    }

    @JsonProperty("accountId")
    public Optional<String> getAccountId() {
        return accountId;
    }

    @JsonProperty("AccountType")
    public Optional<String> getAccountType() {
        return accountType;
    }

    @JsonProperty("AccountZip")
    public Optional<String> getAccountZip() {
        return accountZip;
    }

    @JsonProperty("bankAccount")
    public Optional<String> getBankAccount() {
        return bankAccount;
    }

    @JsonProperty("binData")
    public Optional<BinData> getBinData() {
        return binData;
    }

    @JsonProperty("cloudSignatureData")
    public Optional<String> getCloudSignatureData() {
        return cloudSignatureData;
    }

    @JsonProperty("cloudSignatureFormat")
    public Optional<String> getCloudSignatureFormat() {
        return cloudSignatureFormat;
    }

    @JsonProperty("gatewayConnector")
    public Optional<PayoutGatewayConnector> getGatewayConnector() {
        return gatewayConnector;
    }

    /**
     * @return Card or bank account holder name.
     */
    @JsonProperty("HolderName")
    public Optional<String> getHolderName() {
        return holderName;
    }

    @JsonProperty("Initiator")
    public Optional<String> getInitiator() {
        return initiator;
    }

    @JsonProperty("MaskedAccount")
    public Optional<String> getMaskedAccount() {
        return maskedAccount;
    }

    @JsonProperty("orderDescription")
    public Optional<String> getOrderDescription() {
        return orderDescription;
    }

    @JsonProperty("paymentDetails")
    public Optional<PaymentDetail> getPaymentDetails() {
        return paymentDetails;
    }

    @JsonProperty("payorData")
    public Optional<String> getPayorData() {
        return payorData;
    }

    @JsonProperty("Sequence")
    public Optional<String> getSequence() {
        return sequence;
    }

    /**
     * @return Identifier of stored payment method used in transaction.
     */
    @JsonProperty("StoredId")
    public Optional<String> getStoredId() {
        return storedId;
    }

    @JsonProperty("StoredMethodUsageType")
    public Optional<String> getStoredMethodUsageType() {
        return storedMethodUsageType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryPayoutTransactionRecordsItemPaymentData
                && equalTo((QueryPayoutTransactionRecordsItemPaymentData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryPayoutTransactionRecordsItemPaymentData other) {
        return accountExp.equals(other.accountExp)
                && accountId.equals(other.accountId)
                && accountType.equals(other.accountType)
                && accountZip.equals(other.accountZip)
                && bankAccount.equals(other.bankAccount)
                && binData.equals(other.binData)
                && cloudSignatureData.equals(other.cloudSignatureData)
                && cloudSignatureFormat.equals(other.cloudSignatureFormat)
                && gatewayConnector.equals(other.gatewayConnector)
                && holderName.equals(other.holderName)
                && initiator.equals(other.initiator)
                && maskedAccount.equals(other.maskedAccount)
                && orderDescription.equals(other.orderDescription)
                && paymentDetails.equals(other.paymentDetails)
                && payorData.equals(other.payorData)
                && sequence.equals(other.sequence)
                && storedId.equals(other.storedId)
                && storedMethodUsageType.equals(other.storedMethodUsageType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accountExp,
                this.accountId,
                this.accountType,
                this.accountZip,
                this.bankAccount,
                this.binData,
                this.cloudSignatureData,
                this.cloudSignatureFormat,
                this.gatewayConnector,
                this.holderName,
                this.initiator,
                this.maskedAccount,
                this.orderDescription,
                this.paymentDetails,
                this.payorData,
                this.sequence,
                this.storedId,
                this.storedMethodUsageType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> accountExp = Optional.empty();

        private Optional<String> accountId = Optional.empty();

        private Optional<String> accountType = Optional.empty();

        private Optional<String> accountZip = Optional.empty();

        private Optional<String> bankAccount = Optional.empty();

        private Optional<BinData> binData = Optional.empty();

        private Optional<String> cloudSignatureData = Optional.empty();

        private Optional<String> cloudSignatureFormat = Optional.empty();

        private Optional<PayoutGatewayConnector> gatewayConnector = Optional.empty();

        private Optional<String> holderName = Optional.empty();

        private Optional<String> initiator = Optional.empty();

        private Optional<String> maskedAccount = Optional.empty();

        private Optional<String> orderDescription = Optional.empty();

        private Optional<PaymentDetail> paymentDetails = Optional.empty();

        private Optional<String> payorData = Optional.empty();

        private Optional<String> sequence = Optional.empty();

        private Optional<String> storedId = Optional.empty();

        private Optional<String> storedMethodUsageType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryPayoutTransactionRecordsItemPaymentData other) {
            accountExp(other.getAccountExp());
            accountId(other.getAccountId());
            accountType(other.getAccountType());
            accountZip(other.getAccountZip());
            bankAccount(other.getBankAccount());
            binData(other.getBinData());
            cloudSignatureData(other.getCloudSignatureData());
            cloudSignatureFormat(other.getCloudSignatureFormat());
            gatewayConnector(other.getGatewayConnector());
            holderName(other.getHolderName());
            initiator(other.getInitiator());
            maskedAccount(other.getMaskedAccount());
            orderDescription(other.getOrderDescription());
            paymentDetails(other.getPaymentDetails());
            payorData(other.getPayorData());
            sequence(other.getSequence());
            storedId(other.getStoredId());
            storedMethodUsageType(other.getStoredMethodUsageType());
            return this;
        }

        @JsonSetter(value = "AccountExp", nulls = Nulls.SKIP)
        public Builder accountExp(Optional<String> accountExp) {
            this.accountExp = accountExp;
            return this;
        }

        public Builder accountExp(String accountExp) {
            this.accountExp = Optional.ofNullable(accountExp);
            return this;
        }

        @JsonSetter(value = "accountId", nulls = Nulls.SKIP)
        public Builder accountId(Optional<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        public Builder accountId(String accountId) {
            this.accountId = Optional.ofNullable(accountId);
            return this;
        }

        @JsonSetter(value = "AccountType", nulls = Nulls.SKIP)
        public Builder accountType(Optional<String> accountType) {
            this.accountType = accountType;
            return this;
        }

        public Builder accountType(String accountType) {
            this.accountType = Optional.ofNullable(accountType);
            return this;
        }

        @JsonSetter(value = "AccountZip", nulls = Nulls.SKIP)
        public Builder accountZip(Optional<String> accountZip) {
            this.accountZip = accountZip;
            return this;
        }

        public Builder accountZip(String accountZip) {
            this.accountZip = Optional.ofNullable(accountZip);
            return this;
        }

        @JsonSetter(value = "bankAccount", nulls = Nulls.SKIP)
        public Builder bankAccount(Optional<String> bankAccount) {
            this.bankAccount = bankAccount;
            return this;
        }

        public Builder bankAccount(String bankAccount) {
            this.bankAccount = Optional.ofNullable(bankAccount);
            return this;
        }

        @JsonSetter(value = "binData", nulls = Nulls.SKIP)
        public Builder binData(Optional<BinData> binData) {
            this.binData = binData;
            return this;
        }

        public Builder binData(BinData binData) {
            this.binData = Optional.ofNullable(binData);
            return this;
        }

        @JsonSetter(value = "cloudSignatureData", nulls = Nulls.SKIP)
        public Builder cloudSignatureData(Optional<String> cloudSignatureData) {
            this.cloudSignatureData = cloudSignatureData;
            return this;
        }

        public Builder cloudSignatureData(String cloudSignatureData) {
            this.cloudSignatureData = Optional.ofNullable(cloudSignatureData);
            return this;
        }

        @JsonSetter(value = "cloudSignatureFormat", nulls = Nulls.SKIP)
        public Builder cloudSignatureFormat(Optional<String> cloudSignatureFormat) {
            this.cloudSignatureFormat = cloudSignatureFormat;
            return this;
        }

        public Builder cloudSignatureFormat(String cloudSignatureFormat) {
            this.cloudSignatureFormat = Optional.ofNullable(cloudSignatureFormat);
            return this;
        }

        @JsonSetter(value = "gatewayConnector", nulls = Nulls.SKIP)
        public Builder gatewayConnector(Optional<PayoutGatewayConnector> gatewayConnector) {
            this.gatewayConnector = gatewayConnector;
            return this;
        }

        public Builder gatewayConnector(PayoutGatewayConnector gatewayConnector) {
            this.gatewayConnector = Optional.ofNullable(gatewayConnector);
            return this;
        }

        /**
         * <p>Card or bank account holder name.</p>
         */
        @JsonSetter(value = "HolderName", nulls = Nulls.SKIP)
        public Builder holderName(Optional<String> holderName) {
            this.holderName = holderName;
            return this;
        }

        public Builder holderName(String holderName) {
            this.holderName = Optional.ofNullable(holderName);
            return this;
        }

        @JsonSetter(value = "Initiator", nulls = Nulls.SKIP)
        public Builder initiator(Optional<String> initiator) {
            this.initiator = initiator;
            return this;
        }

        public Builder initiator(String initiator) {
            this.initiator = Optional.ofNullable(initiator);
            return this;
        }

        @JsonSetter(value = "MaskedAccount", nulls = Nulls.SKIP)
        public Builder maskedAccount(Optional<String> maskedAccount) {
            this.maskedAccount = maskedAccount;
            return this;
        }

        public Builder maskedAccount(String maskedAccount) {
            this.maskedAccount = Optional.ofNullable(maskedAccount);
            return this;
        }

        @JsonSetter(value = "orderDescription", nulls = Nulls.SKIP)
        public Builder orderDescription(Optional<String> orderDescription) {
            this.orderDescription = orderDescription;
            return this;
        }

        public Builder orderDescription(String orderDescription) {
            this.orderDescription = Optional.ofNullable(orderDescription);
            return this;
        }

        @JsonSetter(value = "paymentDetails", nulls = Nulls.SKIP)
        public Builder paymentDetails(Optional<PaymentDetail> paymentDetails) {
            this.paymentDetails = paymentDetails;
            return this;
        }

        public Builder paymentDetails(PaymentDetail paymentDetails) {
            this.paymentDetails = Optional.ofNullable(paymentDetails);
            return this;
        }

        @JsonSetter(value = "payorData", nulls = Nulls.SKIP)
        public Builder payorData(Optional<String> payorData) {
            this.payorData = payorData;
            return this;
        }

        public Builder payorData(String payorData) {
            this.payorData = Optional.ofNullable(payorData);
            return this;
        }

        @JsonSetter(value = "Sequence", nulls = Nulls.SKIP)
        public Builder sequence(Optional<String> sequence) {
            this.sequence = sequence;
            return this;
        }

        public Builder sequence(String sequence) {
            this.sequence = Optional.ofNullable(sequence);
            return this;
        }

        /**
         * <p>Identifier of stored payment method used in transaction.</p>
         */
        @JsonSetter(value = "StoredId", nulls = Nulls.SKIP)
        public Builder storedId(Optional<String> storedId) {
            this.storedId = storedId;
            return this;
        }

        public Builder storedId(String storedId) {
            this.storedId = Optional.ofNullable(storedId);
            return this;
        }

        @JsonSetter(value = "StoredMethodUsageType", nulls = Nulls.SKIP)
        public Builder storedMethodUsageType(Optional<String> storedMethodUsageType) {
            this.storedMethodUsageType = storedMethodUsageType;
            return this;
        }

        public Builder storedMethodUsageType(String storedMethodUsageType) {
            this.storedMethodUsageType = Optional.ofNullable(storedMethodUsageType);
            return this;
        }

        public QueryPayoutTransactionRecordsItemPaymentData build() {
            return new QueryPayoutTransactionRecordsItemPaymentData(
                    accountExp,
                    accountId,
                    accountType,
                    accountZip,
                    bankAccount,
                    binData,
                    cloudSignatureData,
                    cloudSignatureFormat,
                    gatewayConnector,
                    holderName,
                    initiator,
                    maskedAccount,
                    orderDescription,
                    paymentDetails,
                    payorData,
                    sequence,
                    storedId,
                    storedMethodUsageType,
                    additionalProperties);
        }
    }
}
