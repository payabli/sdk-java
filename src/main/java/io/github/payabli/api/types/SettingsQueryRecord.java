/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SettingsQueryRecord.Builder.class)
public final class SettingsQueryRecord {
    private final Optional<List<KeyValue>> customFields;

    private final Optional<List<KeyValue>> forInvoices;

    private final Optional<List<KeyValue>> forPayOuts;

    private final Optional<List<KeyValue>> forWallets;

    private final Optional<List<KeyValue>> general;

    private final Optional<List<KeyValue>> identifiers;

    private final Map<String, Object> additionalProperties;

    private SettingsQueryRecord(
            Optional<List<KeyValue>> customFields,
            Optional<List<KeyValue>> forInvoices,
            Optional<List<KeyValue>> forPayOuts,
            Optional<List<KeyValue>> forWallets,
            Optional<List<KeyValue>> general,
            Optional<List<KeyValue>> identifiers,
            Map<String, Object> additionalProperties) {
        this.customFields = customFields;
        this.forInvoices = forInvoices;
        this.forPayOuts = forPayOuts;
        this.forWallets = forWallets;
        this.general = general;
        this.identifiers = identifiers;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Any custom fields defined for the org.
     */
    @JsonProperty("customFields")
    public Optional<List<KeyValue>> getCustomFields() {
        return customFields;
    }

    @JsonProperty("forInvoices")
    public Optional<List<KeyValue>> getForInvoices() {
        return forInvoices;
    }

    @JsonProperty("forPayOuts")
    public Optional<List<KeyValue>> getForPayOuts() {
        return forPayOuts;
    }

    /**
     * @return Information about digital wallet settings for the entity. Available values are <code>isApplePayEnabled</code> and <code>isGooglePayEnabled</code>.
     */
    @JsonProperty("forWallets")
    public Optional<List<KeyValue>> getForWallets() {
        return forWallets;
    }

    /**
     * @return
     */
    @JsonProperty("general")
    public Optional<List<KeyValue>> getGeneral() {
        return general;
    }

    @JsonProperty("identifiers")
    public Optional<List<KeyValue>> getIdentifiers() {
        return identifiers;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SettingsQueryRecord && equalTo((SettingsQueryRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SettingsQueryRecord other) {
        return customFields.equals(other.customFields)
                && forInvoices.equals(other.forInvoices)
                && forPayOuts.equals(other.forPayOuts)
                && forWallets.equals(other.forWallets)
                && general.equals(other.general)
                && identifiers.equals(other.identifiers);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.customFields, this.forInvoices, this.forPayOuts, this.forWallets, this.general, this.identifiers);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<KeyValue>> customFields = Optional.empty();

        private Optional<List<KeyValue>> forInvoices = Optional.empty();

        private Optional<List<KeyValue>> forPayOuts = Optional.empty();

        private Optional<List<KeyValue>> forWallets = Optional.empty();

        private Optional<List<KeyValue>> general = Optional.empty();

        private Optional<List<KeyValue>> identifiers = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SettingsQueryRecord other) {
            customFields(other.getCustomFields());
            forInvoices(other.getForInvoices());
            forPayOuts(other.getForPayOuts());
            forWallets(other.getForWallets());
            general(other.getGeneral());
            identifiers(other.getIdentifiers());
            return this;
        }

        /**
         * <p>Any custom fields defined for the org.</p>
         */
        @JsonSetter(value = "customFields", nulls = Nulls.SKIP)
        public Builder customFields(Optional<List<KeyValue>> customFields) {
            this.customFields = customFields;
            return this;
        }

        public Builder customFields(List<KeyValue> customFields) {
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        @JsonSetter(value = "forInvoices", nulls = Nulls.SKIP)
        public Builder forInvoices(Optional<List<KeyValue>> forInvoices) {
            this.forInvoices = forInvoices;
            return this;
        }

        public Builder forInvoices(List<KeyValue> forInvoices) {
            this.forInvoices = Optional.ofNullable(forInvoices);
            return this;
        }

        @JsonSetter(value = "forPayOuts", nulls = Nulls.SKIP)
        public Builder forPayOuts(Optional<List<KeyValue>> forPayOuts) {
            this.forPayOuts = forPayOuts;
            return this;
        }

        public Builder forPayOuts(List<KeyValue> forPayOuts) {
            this.forPayOuts = Optional.ofNullable(forPayOuts);
            return this;
        }

        /**
         * <p>Information about digital wallet settings for the entity. Available values are <code>isApplePayEnabled</code> and <code>isGooglePayEnabled</code>.</p>
         */
        @JsonSetter(value = "forWallets", nulls = Nulls.SKIP)
        public Builder forWallets(Optional<List<KeyValue>> forWallets) {
            this.forWallets = forWallets;
            return this;
        }

        public Builder forWallets(List<KeyValue> forWallets) {
            this.forWallets = Optional.ofNullable(forWallets);
            return this;
        }

        @JsonSetter(value = "general", nulls = Nulls.SKIP)
        public Builder general(Optional<List<KeyValue>> general) {
            this.general = general;
            return this;
        }

        public Builder general(List<KeyValue> general) {
            this.general = Optional.ofNullable(general);
            return this;
        }

        @JsonSetter(value = "identifiers", nulls = Nulls.SKIP)
        public Builder identifiers(Optional<List<KeyValue>> identifiers) {
            this.identifiers = identifiers;
            return this;
        }

        public Builder identifiers(List<KeyValue> identifiers) {
            this.identifiers = Optional.ofNullable(identifiers);
            return this;
        }

        public SettingsQueryRecord build() {
            return new SettingsQueryRecord(
                    customFields, forInvoices, forPayOuts, forWallets, general, identifiers, additionalProperties);
        }
    }
}
