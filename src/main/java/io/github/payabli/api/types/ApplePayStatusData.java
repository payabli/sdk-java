/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApplePayStatusData.Builder.class)
public final class ApplePayStatusData {
    private final Optional<String> errorMessage;

    private final Optional<ApplePayMetadata> metadata;

    private final Map<String, Object> additionalProperties;

    private ApplePayStatusData(
            Optional<String> errorMessage,
            Optional<ApplePayMetadata> metadata,
            Map<String, Object> additionalProperties) {
        this.errorMessage = errorMessage;
        this.metadata = metadata;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Any error message related to Apple Pay's activation status.
     */
    @JsonProperty("errorMessage")
    public Optional<String> getErrorMessage() {
        return errorMessage;
    }

    @JsonProperty("metadata")
    public Optional<ApplePayMetadata> getMetadata() {
        return metadata;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApplePayStatusData && equalTo((ApplePayStatusData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApplePayStatusData other) {
        return errorMessage.equals(other.errorMessage) && metadata.equals(other.metadata);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.errorMessage, this.metadata);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> errorMessage = Optional.empty();

        private Optional<ApplePayMetadata> metadata = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ApplePayStatusData other) {
            errorMessage(other.getErrorMessage());
            metadata(other.getMetadata());
            return this;
        }

        /**
         * <p>Any error message related to Apple Pay's activation status.</p>
         */
        @JsonSetter(value = "errorMessage", nulls = Nulls.SKIP)
        public Builder errorMessage(Optional<String> errorMessage) {
            this.errorMessage = errorMessage;
            return this;
        }

        public Builder errorMessage(String errorMessage) {
            this.errorMessage = Optional.ofNullable(errorMessage);
            return this;
        }

        @JsonSetter(value = "metadata", nulls = Nulls.SKIP)
        public Builder metadata(Optional<ApplePayMetadata> metadata) {
            this.metadata = metadata;
            return this;
        }

        public Builder metadata(ApplePayMetadata metadata) {
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public ApplePayStatusData build() {
            return new ApplePayStatusData(errorMessage, metadata, additionalProperties);
        }
    }
}
