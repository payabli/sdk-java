/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BuilderData.Builder.class)
public final class BuilderData {
    private final Optional<SSection> services;

    private final Optional<ASection> attributes;

    private final Optional<DSection> banking;

    private final Optional<BSection> business;

    private final Optional<OSection> owners;

    private final Optional<PSection> processing;

    private final Map<String, Object> additionalProperties;

    private BuilderData(
            Optional<SSection> services,
            Optional<ASection> attributes,
            Optional<DSection> banking,
            Optional<BSection> business,
            Optional<OSection> owners,
            Optional<PSection> processing,
            Map<String, Object> additionalProperties) {
        this.services = services;
        this.attributes = attributes;
        this.banking = banking;
        this.business = business;
        this.owners = owners;
        this.processing = processing;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("services")
    public Optional<SSection> getServices() {
        return services;
    }

    @JsonProperty("attributes")
    public Optional<ASection> getAttributes() {
        return attributes;
    }

    @JsonProperty("banking")
    public Optional<DSection> getBanking() {
        return banking;
    }

    @JsonProperty("business")
    public Optional<BSection> getBusiness() {
        return business;
    }

    @JsonProperty("owners")
    public Optional<OSection> getOwners() {
        return owners;
    }

    @JsonProperty("processing")
    public Optional<PSection> getProcessing() {
        return processing;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BuilderData && equalTo((BuilderData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BuilderData other) {
        return services.equals(other.services)
                && attributes.equals(other.attributes)
                && banking.equals(other.banking)
                && business.equals(other.business)
                && owners.equals(other.owners)
                && processing.equals(other.processing);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.services, this.attributes, this.banking, this.business, this.owners, this.processing);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<SSection> services = Optional.empty();

        private Optional<ASection> attributes = Optional.empty();

        private Optional<DSection> banking = Optional.empty();

        private Optional<BSection> business = Optional.empty();

        private Optional<OSection> owners = Optional.empty();

        private Optional<PSection> processing = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BuilderData other) {
            services(other.getServices());
            attributes(other.getAttributes());
            banking(other.getBanking());
            business(other.getBusiness());
            owners(other.getOwners());
            processing(other.getProcessing());
            return this;
        }

        @JsonSetter(value = "services", nulls = Nulls.SKIP)
        public Builder services(Optional<SSection> services) {
            this.services = services;
            return this;
        }

        public Builder services(SSection services) {
            this.services = Optional.ofNullable(services);
            return this;
        }

        @JsonSetter(value = "attributes", nulls = Nulls.SKIP)
        public Builder attributes(Optional<ASection> attributes) {
            this.attributes = attributes;
            return this;
        }

        public Builder attributes(ASection attributes) {
            this.attributes = Optional.ofNullable(attributes);
            return this;
        }

        @JsonSetter(value = "banking", nulls = Nulls.SKIP)
        public Builder banking(Optional<DSection> banking) {
            this.banking = banking;
            return this;
        }

        public Builder banking(DSection banking) {
            this.banking = Optional.ofNullable(banking);
            return this;
        }

        @JsonSetter(value = "business", nulls = Nulls.SKIP)
        public Builder business(Optional<BSection> business) {
            this.business = business;
            return this;
        }

        public Builder business(BSection business) {
            this.business = Optional.ofNullable(business);
            return this;
        }

        @JsonSetter(value = "owners", nulls = Nulls.SKIP)
        public Builder owners(Optional<OSection> owners) {
            this.owners = owners;
            return this;
        }

        public Builder owners(OSection owners) {
            this.owners = Optional.ofNullable(owners);
            return this;
        }

        @JsonSetter(value = "processing", nulls = Nulls.SKIP)
        public Builder processing(Optional<PSection> processing) {
            this.processing = processing;
            return this;
        }

        public Builder processing(PSection processing) {
            this.processing = Optional.ofNullable(processing);
            return this;
        }

        public BuilderData build() {
            return new BuilderData(services, attributes, banking, business, owners, processing, additionalProperties);
        }
    }
}
