/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomerQueryRecords.Builder.class)
public final class CustomerQueryRecords {
    private final Optional<Long> customerId;

    private final Optional<String> customerNumber;

    private final Optional<String> customerUsername;

    private final Optional<Integer> customerStatus;

    private final Optional<String> company;

    private final Optional<String> firstname;

    private final Optional<String> lastname;

    private final Optional<String> phone;

    private final Optional<String> email;

    private final Optional<String> address;

    private final Optional<String> address1;

    private final Optional<String> city;

    private final Optional<String> state;

    private final Optional<String> zip;

    private final Optional<String> country;

    private final Optional<String> shippingAddress;

    private final Optional<String> shippingAddress1;

    private final Optional<String> shippingCity;

    private final Optional<String> shippingState;

    private final Optional<String> shippingZip;

    private final Optional<String> shippingCountry;

    private final Optional<Double> balance;

    private final Optional<Integer> timeZone;

    private final Optional<Boolean> mfa;

    private final Optional<Integer> mfaMode;

    private final Optional<String> snProvider;

    private final Optional<String> snIdentifier;

    private final Optional<String> snData;

    private final Optional<OffsetDateTime> lastUpdated;

    private final Optional<OffsetDateTime> created;

    private final Optional<Map<String, Optional<String>>> additionalFields;

    private final Optional<List<Optional<String>>> identifierFields;

    private final Optional<List<SubscriptionQueryRecords>> subscriptions;

    private final Optional<List<MethodQueryRecords>> storedMethods;

    private final Optional<CustomerSummaryRecord> customerSummary;

    private final Optional<String> paypointLegalname;

    private final Optional<String> paypointDbaname;

    private final Optional<String> parentOrgName;

    private final Optional<Long> parentOrgId;

    private final Optional<String> paypointEntryname;

    private final Optional<String> pageidentifier;

    private final Optional<String> externalPaypointId;

    private final Optional<CustomerQueryRecordsCustomerConsent> customerConsent;

    private final Map<String, Object> additionalProperties;

    private CustomerQueryRecords(
            Optional<Long> customerId,
            Optional<String> customerNumber,
            Optional<String> customerUsername,
            Optional<Integer> customerStatus,
            Optional<String> company,
            Optional<String> firstname,
            Optional<String> lastname,
            Optional<String> phone,
            Optional<String> email,
            Optional<String> address,
            Optional<String> address1,
            Optional<String> city,
            Optional<String> state,
            Optional<String> zip,
            Optional<String> country,
            Optional<String> shippingAddress,
            Optional<String> shippingAddress1,
            Optional<String> shippingCity,
            Optional<String> shippingState,
            Optional<String> shippingZip,
            Optional<String> shippingCountry,
            Optional<Double> balance,
            Optional<Integer> timeZone,
            Optional<Boolean> mfa,
            Optional<Integer> mfaMode,
            Optional<String> snProvider,
            Optional<String> snIdentifier,
            Optional<String> snData,
            Optional<OffsetDateTime> lastUpdated,
            Optional<OffsetDateTime> created,
            Optional<Map<String, Optional<String>>> additionalFields,
            Optional<List<Optional<String>>> identifierFields,
            Optional<List<SubscriptionQueryRecords>> subscriptions,
            Optional<List<MethodQueryRecords>> storedMethods,
            Optional<CustomerSummaryRecord> customerSummary,
            Optional<String> paypointLegalname,
            Optional<String> paypointDbaname,
            Optional<String> parentOrgName,
            Optional<Long> parentOrgId,
            Optional<String> paypointEntryname,
            Optional<String> pageidentifier,
            Optional<String> externalPaypointId,
            Optional<CustomerQueryRecordsCustomerConsent> customerConsent,
            Map<String, Object> additionalProperties) {
        this.customerId = customerId;
        this.customerNumber = customerNumber;
        this.customerUsername = customerUsername;
        this.customerStatus = customerStatus;
        this.company = company;
        this.firstname = firstname;
        this.lastname = lastname;
        this.phone = phone;
        this.email = email;
        this.address = address;
        this.address1 = address1;
        this.city = city;
        this.state = state;
        this.zip = zip;
        this.country = country;
        this.shippingAddress = shippingAddress;
        this.shippingAddress1 = shippingAddress1;
        this.shippingCity = shippingCity;
        this.shippingState = shippingState;
        this.shippingZip = shippingZip;
        this.shippingCountry = shippingCountry;
        this.balance = balance;
        this.timeZone = timeZone;
        this.mfa = mfa;
        this.mfaMode = mfaMode;
        this.snProvider = snProvider;
        this.snIdentifier = snIdentifier;
        this.snData = snData;
        this.lastUpdated = lastUpdated;
        this.created = created;
        this.additionalFields = additionalFields;
        this.identifierFields = identifierFields;
        this.subscriptions = subscriptions;
        this.storedMethods = storedMethods;
        this.customerSummary = customerSummary;
        this.paypointLegalname = paypointLegalname;
        this.paypointDbaname = paypointDbaname;
        this.parentOrgName = parentOrgName;
        this.parentOrgId = parentOrgId;
        this.paypointEntryname = paypointEntryname;
        this.pageidentifier = pageidentifier;
        this.externalPaypointId = externalPaypointId;
        this.customerConsent = customerConsent;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("customerId")
    public Optional<Long> getCustomerId() {
        return customerId;
    }

    @JsonProperty("customerNumber")
    public Optional<String> getCustomerNumber() {
        return customerNumber;
    }

    /**
     * @return Username for customer.
     */
    @JsonProperty("customerUsername")
    public Optional<String> getCustomerUsername() {
        return customerUsername;
    }

    @JsonProperty("customerStatus")
    public Optional<Integer> getCustomerStatus() {
        return customerStatus;
    }

    /**
     * @return Company name.
     */
    @JsonProperty("Company")
    public Optional<String> getCompany() {
        return company;
    }

    /**
     * @return Customer first name.
     */
    @JsonProperty("Firstname")
    public Optional<String> getFirstname() {
        return firstname;
    }

    /**
     * @return Customer last name.
     */
    @JsonProperty("Lastname")
    public Optional<String> getLastname() {
        return lastname;
    }

    /**
     * @return Customer phone number.
     */
    @JsonProperty("Phone")
    public Optional<String> getPhone() {
        return phone;
    }

    /**
     * @return Customer email address.
     */
    @JsonProperty("Email")
    public Optional<String> getEmail() {
        return email;
    }

    /**
     * @return Customer address.
     */
    @JsonProperty("Address")
    public Optional<String> getAddress() {
        return address;
    }

    /**
     * @return Additional line for customer address.
     */
    @JsonProperty("Address1")
    public Optional<String> getAddress1() {
        return address1;
    }

    /**
     * @return Customer city.
     */
    @JsonProperty("City")
    public Optional<String> getCity() {
        return city;
    }

    /**
     * @return Customer state.
     */
    @JsonProperty("State")
    public Optional<String> getState() {
        return state;
    }

    /**
     * @return Customer postal code.
     */
    @JsonProperty("Zip")
    public Optional<String> getZip() {
        return zip;
    }

    /**
     * @return Customer country.
     */
    @JsonProperty("Country")
    public Optional<String> getCountry() {
        return country;
    }

    @JsonProperty("ShippingAddress")
    public Optional<String> getShippingAddress() {
        return shippingAddress;
    }

    @JsonProperty("ShippingAddress1")
    public Optional<String> getShippingAddress1() {
        return shippingAddress1;
    }

    @JsonProperty("ShippingCity")
    public Optional<String> getShippingCity() {
        return shippingCity;
    }

    @JsonProperty("ShippingState")
    public Optional<String> getShippingState() {
        return shippingState;
    }

    @JsonProperty("ShippingZip")
    public Optional<String> getShippingZip() {
        return shippingZip;
    }

    @JsonProperty("ShippingCountry")
    public Optional<String> getShippingCountry() {
        return shippingCountry;
    }

    /**
     * @return Customer balance.
     */
    @JsonProperty("Balance")
    public Optional<Double> getBalance() {
        return balance;
    }

    @JsonProperty("TimeZone")
    public Optional<Integer> getTimeZone() {
        return timeZone;
    }

    @JsonProperty("MFA")
    public Optional<Boolean> getMfa() {
        return mfa;
    }

    @JsonProperty("MFAMode")
    public Optional<Integer> getMfaMode() {
        return mfaMode;
    }

    /**
     * @return Social network linked to customer. Possible values:
     * <ul>
     * <li>
     * <p><code>facebook</code></p>
     * </li>
     * <li>
     * <p><code>google</code></p>
     * </li>
     * <li>
     * <p><code>twitter</code></p>
     * </li>
     * <li>
     * <p><code>microsoft</code></p>
     * </li>
     * </ul>
     */
    @JsonProperty("snProvider")
    public Optional<String> getSnProvider() {
        return snProvider;
    }

    /**
     * @return Identifier or token for customer in linked social network.
     */
    @JsonProperty("snIdentifier")
    public Optional<String> getSnIdentifier() {
        return snIdentifier;
    }

    /**
     * @return Additional data provided by the social network related to the customer.
     */
    @JsonProperty("snData")
    public Optional<String> getSnData() {
        return snData;
    }

    /**
     * @return Date and time of last update.
     */
    @JsonProperty("LastUpdated")
    public Optional<OffsetDateTime> getLastUpdated() {
        return lastUpdated;
    }

    /**
     * @return Date and time created.
     */
    @JsonProperty("Created")
    public Optional<OffsetDateTime> getCreated() {
        return created;
    }

    /**
     * @return List of additional custom fields in format key:value.
     */
    @JsonProperty("AdditionalFields")
    public Optional<Map<String, Optional<String>>> getAdditionalFields() {
        return additionalFields;
    }

    @JsonProperty("IdentifierFields")
    public Optional<List<Optional<String>>> getIdentifierFields() {
        return identifierFields;
    }

    /**
     * @return List of subscriptions associated to the customer.
     */
    @JsonProperty("Subscriptions")
    public Optional<List<SubscriptionQueryRecords>> getSubscriptions() {
        return subscriptions;
    }

    /**
     * @return List of payment methods associated to the customer.
     */
    @JsonProperty("StoredMethods")
    public Optional<List<MethodQueryRecords>> getStoredMethods() {
        return storedMethods;
    }

    @JsonProperty("customerSummary")
    public Optional<CustomerSummaryRecord> getCustomerSummary() {
        return customerSummary;
    }

    /**
     * @return Paypoint legal name.
     */
    @JsonProperty("PaypointLegalname")
    public Optional<String> getPaypointLegalname() {
        return paypointLegalname;
    }

    /**
     * @return Paypoint DBA name.
     */
    @JsonProperty("PaypointDbaname")
    public Optional<String> getPaypointDbaname() {
        return paypointDbaname;
    }

    @JsonProperty("ParentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    @JsonProperty("ParentOrgId")
    public Optional<Long> getParentOrgId() {
        return parentOrgId;
    }

    @JsonProperty("PaypointEntryname")
    public Optional<String> getPaypointEntryname() {
        return paypointEntryname;
    }

    @JsonProperty("pageidentifier")
    public Optional<String> getPageidentifier() {
        return pageidentifier;
    }

    @JsonProperty("externalPaypointID")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    @JsonProperty("customerConsent")
    public Optional<CustomerQueryRecordsCustomerConsent> getCustomerConsent() {
        return customerConsent;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomerQueryRecords && equalTo((CustomerQueryRecords) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomerQueryRecords other) {
        return customerId.equals(other.customerId)
                && customerNumber.equals(other.customerNumber)
                && customerUsername.equals(other.customerUsername)
                && customerStatus.equals(other.customerStatus)
                && company.equals(other.company)
                && firstname.equals(other.firstname)
                && lastname.equals(other.lastname)
                && phone.equals(other.phone)
                && email.equals(other.email)
                && address.equals(other.address)
                && address1.equals(other.address1)
                && city.equals(other.city)
                && state.equals(other.state)
                && zip.equals(other.zip)
                && country.equals(other.country)
                && shippingAddress.equals(other.shippingAddress)
                && shippingAddress1.equals(other.shippingAddress1)
                && shippingCity.equals(other.shippingCity)
                && shippingState.equals(other.shippingState)
                && shippingZip.equals(other.shippingZip)
                && shippingCountry.equals(other.shippingCountry)
                && balance.equals(other.balance)
                && timeZone.equals(other.timeZone)
                && mfa.equals(other.mfa)
                && mfaMode.equals(other.mfaMode)
                && snProvider.equals(other.snProvider)
                && snIdentifier.equals(other.snIdentifier)
                && snData.equals(other.snData)
                && lastUpdated.equals(other.lastUpdated)
                && created.equals(other.created)
                && additionalFields.equals(other.additionalFields)
                && identifierFields.equals(other.identifierFields)
                && subscriptions.equals(other.subscriptions)
                && storedMethods.equals(other.storedMethods)
                && customerSummary.equals(other.customerSummary)
                && paypointLegalname.equals(other.paypointLegalname)
                && paypointDbaname.equals(other.paypointDbaname)
                && parentOrgName.equals(other.parentOrgName)
                && parentOrgId.equals(other.parentOrgId)
                && paypointEntryname.equals(other.paypointEntryname)
                && pageidentifier.equals(other.pageidentifier)
                && externalPaypointId.equals(other.externalPaypointId)
                && customerConsent.equals(other.customerConsent);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.customerId,
                this.customerNumber,
                this.customerUsername,
                this.customerStatus,
                this.company,
                this.firstname,
                this.lastname,
                this.phone,
                this.email,
                this.address,
                this.address1,
                this.city,
                this.state,
                this.zip,
                this.country,
                this.shippingAddress,
                this.shippingAddress1,
                this.shippingCity,
                this.shippingState,
                this.shippingZip,
                this.shippingCountry,
                this.balance,
                this.timeZone,
                this.mfa,
                this.mfaMode,
                this.snProvider,
                this.snIdentifier,
                this.snData,
                this.lastUpdated,
                this.created,
                this.additionalFields,
                this.identifierFields,
                this.subscriptions,
                this.storedMethods,
                this.customerSummary,
                this.paypointLegalname,
                this.paypointDbaname,
                this.parentOrgName,
                this.parentOrgId,
                this.paypointEntryname,
                this.pageidentifier,
                this.externalPaypointId,
                this.customerConsent);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Long> customerId = Optional.empty();

        private Optional<String> customerNumber = Optional.empty();

        private Optional<String> customerUsername = Optional.empty();

        private Optional<Integer> customerStatus = Optional.empty();

        private Optional<String> company = Optional.empty();

        private Optional<String> firstname = Optional.empty();

        private Optional<String> lastname = Optional.empty();

        private Optional<String> phone = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> address = Optional.empty();

        private Optional<String> address1 = Optional.empty();

        private Optional<String> city = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<String> zip = Optional.empty();

        private Optional<String> country = Optional.empty();

        private Optional<String> shippingAddress = Optional.empty();

        private Optional<String> shippingAddress1 = Optional.empty();

        private Optional<String> shippingCity = Optional.empty();

        private Optional<String> shippingState = Optional.empty();

        private Optional<String> shippingZip = Optional.empty();

        private Optional<String> shippingCountry = Optional.empty();

        private Optional<Double> balance = Optional.empty();

        private Optional<Integer> timeZone = Optional.empty();

        private Optional<Boolean> mfa = Optional.empty();

        private Optional<Integer> mfaMode = Optional.empty();

        private Optional<String> snProvider = Optional.empty();

        private Optional<String> snIdentifier = Optional.empty();

        private Optional<String> snData = Optional.empty();

        private Optional<OffsetDateTime> lastUpdated = Optional.empty();

        private Optional<OffsetDateTime> created = Optional.empty();

        private Optional<Map<String, Optional<String>>> additionalFields = Optional.empty();

        private Optional<List<Optional<String>>> identifierFields = Optional.empty();

        private Optional<List<SubscriptionQueryRecords>> subscriptions = Optional.empty();

        private Optional<List<MethodQueryRecords>> storedMethods = Optional.empty();

        private Optional<CustomerSummaryRecord> customerSummary = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<Long> parentOrgId = Optional.empty();

        private Optional<String> paypointEntryname = Optional.empty();

        private Optional<String> pageidentifier = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<CustomerQueryRecordsCustomerConsent> customerConsent = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CustomerQueryRecords other) {
            customerId(other.getCustomerId());
            customerNumber(other.getCustomerNumber());
            customerUsername(other.getCustomerUsername());
            customerStatus(other.getCustomerStatus());
            company(other.getCompany());
            firstname(other.getFirstname());
            lastname(other.getLastname());
            phone(other.getPhone());
            email(other.getEmail());
            address(other.getAddress());
            address1(other.getAddress1());
            city(other.getCity());
            state(other.getState());
            zip(other.getZip());
            country(other.getCountry());
            shippingAddress(other.getShippingAddress());
            shippingAddress1(other.getShippingAddress1());
            shippingCity(other.getShippingCity());
            shippingState(other.getShippingState());
            shippingZip(other.getShippingZip());
            shippingCountry(other.getShippingCountry());
            balance(other.getBalance());
            timeZone(other.getTimeZone());
            mfa(other.getMfa());
            mfaMode(other.getMfaMode());
            snProvider(other.getSnProvider());
            snIdentifier(other.getSnIdentifier());
            snData(other.getSnData());
            lastUpdated(other.getLastUpdated());
            created(other.getCreated());
            additionalFields(other.getAdditionalFields());
            identifierFields(other.getIdentifierFields());
            subscriptions(other.getSubscriptions());
            storedMethods(other.getStoredMethods());
            customerSummary(other.getCustomerSummary());
            paypointLegalname(other.getPaypointLegalname());
            paypointDbaname(other.getPaypointDbaname());
            parentOrgName(other.getParentOrgName());
            parentOrgId(other.getParentOrgId());
            paypointEntryname(other.getPaypointEntryname());
            pageidentifier(other.getPageidentifier());
            externalPaypointId(other.getExternalPaypointId());
            customerConsent(other.getCustomerConsent());
            return this;
        }

        @JsonSetter(value = "customerId", nulls = Nulls.SKIP)
        public Builder customerId(Optional<Long> customerId) {
            this.customerId = customerId;
            return this;
        }

        public Builder customerId(Long customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        @JsonSetter(value = "customerNumber", nulls = Nulls.SKIP)
        public Builder customerNumber(Optional<String> customerNumber) {
            this.customerNumber = customerNumber;
            return this;
        }

        public Builder customerNumber(String customerNumber) {
            this.customerNumber = Optional.ofNullable(customerNumber);
            return this;
        }

        /**
         * <p>Username for customer.</p>
         */
        @JsonSetter(value = "customerUsername", nulls = Nulls.SKIP)
        public Builder customerUsername(Optional<String> customerUsername) {
            this.customerUsername = customerUsername;
            return this;
        }

        public Builder customerUsername(String customerUsername) {
            this.customerUsername = Optional.ofNullable(customerUsername);
            return this;
        }

        @JsonSetter(value = "customerStatus", nulls = Nulls.SKIP)
        public Builder customerStatus(Optional<Integer> customerStatus) {
            this.customerStatus = customerStatus;
            return this;
        }

        public Builder customerStatus(Integer customerStatus) {
            this.customerStatus = Optional.ofNullable(customerStatus);
            return this;
        }

        /**
         * <p>Company name.</p>
         */
        @JsonSetter(value = "Company", nulls = Nulls.SKIP)
        public Builder company(Optional<String> company) {
            this.company = company;
            return this;
        }

        public Builder company(String company) {
            this.company = Optional.ofNullable(company);
            return this;
        }

        /**
         * <p>Customer first name.</p>
         */
        @JsonSetter(value = "Firstname", nulls = Nulls.SKIP)
        public Builder firstname(Optional<String> firstname) {
            this.firstname = firstname;
            return this;
        }

        public Builder firstname(String firstname) {
            this.firstname = Optional.ofNullable(firstname);
            return this;
        }

        /**
         * <p>Customer last name.</p>
         */
        @JsonSetter(value = "Lastname", nulls = Nulls.SKIP)
        public Builder lastname(Optional<String> lastname) {
            this.lastname = lastname;
            return this;
        }

        public Builder lastname(String lastname) {
            this.lastname = Optional.ofNullable(lastname);
            return this;
        }

        /**
         * <p>Customer phone number.</p>
         */
        @JsonSetter(value = "Phone", nulls = Nulls.SKIP)
        public Builder phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * <p>Customer email address.</p>
         */
        @JsonSetter(value = "Email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * <p>Customer address.</p>
         */
        @JsonSetter(value = "Address", nulls = Nulls.SKIP)
        public Builder address(Optional<String> address) {
            this.address = address;
            return this;
        }

        public Builder address(String address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        /**
         * <p>Additional line for customer address.</p>
         */
        @JsonSetter(value = "Address1", nulls = Nulls.SKIP)
        public Builder address1(Optional<String> address1) {
            this.address1 = address1;
            return this;
        }

        public Builder address1(String address1) {
            this.address1 = Optional.ofNullable(address1);
            return this;
        }

        /**
         * <p>Customer city.</p>
         */
        @JsonSetter(value = "City", nulls = Nulls.SKIP)
        public Builder city(Optional<String> city) {
            this.city = city;
            return this;
        }

        public Builder city(String city) {
            this.city = Optional.ofNullable(city);
            return this;
        }

        /**
         * <p>Customer state.</p>
         */
        @JsonSetter(value = "State", nulls = Nulls.SKIP)
        public Builder state(Optional<String> state) {
            this.state = state;
            return this;
        }

        public Builder state(String state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * <p>Customer postal code.</p>
         */
        @JsonSetter(value = "Zip", nulls = Nulls.SKIP)
        public Builder zip(Optional<String> zip) {
            this.zip = zip;
            return this;
        }

        public Builder zip(String zip) {
            this.zip = Optional.ofNullable(zip);
            return this;
        }

        /**
         * <p>Customer country.</p>
         */
        @JsonSetter(value = "Country", nulls = Nulls.SKIP)
        public Builder country(Optional<String> country) {
            this.country = country;
            return this;
        }

        public Builder country(String country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        @JsonSetter(value = "ShippingAddress", nulls = Nulls.SKIP)
        public Builder shippingAddress(Optional<String> shippingAddress) {
            this.shippingAddress = shippingAddress;
            return this;
        }

        public Builder shippingAddress(String shippingAddress) {
            this.shippingAddress = Optional.ofNullable(shippingAddress);
            return this;
        }

        @JsonSetter(value = "ShippingAddress1", nulls = Nulls.SKIP)
        public Builder shippingAddress1(Optional<String> shippingAddress1) {
            this.shippingAddress1 = shippingAddress1;
            return this;
        }

        public Builder shippingAddress1(String shippingAddress1) {
            this.shippingAddress1 = Optional.ofNullable(shippingAddress1);
            return this;
        }

        @JsonSetter(value = "ShippingCity", nulls = Nulls.SKIP)
        public Builder shippingCity(Optional<String> shippingCity) {
            this.shippingCity = shippingCity;
            return this;
        }

        public Builder shippingCity(String shippingCity) {
            this.shippingCity = Optional.ofNullable(shippingCity);
            return this;
        }

        @JsonSetter(value = "ShippingState", nulls = Nulls.SKIP)
        public Builder shippingState(Optional<String> shippingState) {
            this.shippingState = shippingState;
            return this;
        }

        public Builder shippingState(String shippingState) {
            this.shippingState = Optional.ofNullable(shippingState);
            return this;
        }

        @JsonSetter(value = "ShippingZip", nulls = Nulls.SKIP)
        public Builder shippingZip(Optional<String> shippingZip) {
            this.shippingZip = shippingZip;
            return this;
        }

        public Builder shippingZip(String shippingZip) {
            this.shippingZip = Optional.ofNullable(shippingZip);
            return this;
        }

        @JsonSetter(value = "ShippingCountry", nulls = Nulls.SKIP)
        public Builder shippingCountry(Optional<String> shippingCountry) {
            this.shippingCountry = shippingCountry;
            return this;
        }

        public Builder shippingCountry(String shippingCountry) {
            this.shippingCountry = Optional.ofNullable(shippingCountry);
            return this;
        }

        /**
         * <p>Customer balance.</p>
         */
        @JsonSetter(value = "Balance", nulls = Nulls.SKIP)
        public Builder balance(Optional<Double> balance) {
            this.balance = balance;
            return this;
        }

        public Builder balance(Double balance) {
            this.balance = Optional.ofNullable(balance);
            return this;
        }

        @JsonSetter(value = "TimeZone", nulls = Nulls.SKIP)
        public Builder timeZone(Optional<Integer> timeZone) {
            this.timeZone = timeZone;
            return this;
        }

        public Builder timeZone(Integer timeZone) {
            this.timeZone = Optional.ofNullable(timeZone);
            return this;
        }

        @JsonSetter(value = "MFA", nulls = Nulls.SKIP)
        public Builder mfa(Optional<Boolean> mfa) {
            this.mfa = mfa;
            return this;
        }

        public Builder mfa(Boolean mfa) {
            this.mfa = Optional.ofNullable(mfa);
            return this;
        }

        @JsonSetter(value = "MFAMode", nulls = Nulls.SKIP)
        public Builder mfaMode(Optional<Integer> mfaMode) {
            this.mfaMode = mfaMode;
            return this;
        }

        public Builder mfaMode(Integer mfaMode) {
            this.mfaMode = Optional.ofNullable(mfaMode);
            return this;
        }

        /**
         * <p>Social network linked to customer. Possible values:</p>
         * <ul>
         * <li>
         * <p><code>facebook</code></p>
         * </li>
         * <li>
         * <p><code>google</code></p>
         * </li>
         * <li>
         * <p><code>twitter</code></p>
         * </li>
         * <li>
         * <p><code>microsoft</code></p>
         * </li>
         * </ul>
         */
        @JsonSetter(value = "snProvider", nulls = Nulls.SKIP)
        public Builder snProvider(Optional<String> snProvider) {
            this.snProvider = snProvider;
            return this;
        }

        public Builder snProvider(String snProvider) {
            this.snProvider = Optional.ofNullable(snProvider);
            return this;
        }

        /**
         * <p>Identifier or token for customer in linked social network.</p>
         */
        @JsonSetter(value = "snIdentifier", nulls = Nulls.SKIP)
        public Builder snIdentifier(Optional<String> snIdentifier) {
            this.snIdentifier = snIdentifier;
            return this;
        }

        public Builder snIdentifier(String snIdentifier) {
            this.snIdentifier = Optional.ofNullable(snIdentifier);
            return this;
        }

        /**
         * <p>Additional data provided by the social network related to the customer.</p>
         */
        @JsonSetter(value = "snData", nulls = Nulls.SKIP)
        public Builder snData(Optional<String> snData) {
            this.snData = snData;
            return this;
        }

        public Builder snData(String snData) {
            this.snData = Optional.ofNullable(snData);
            return this;
        }

        /**
         * <p>Date and time of last update.</p>
         */
        @JsonSetter(value = "LastUpdated", nulls = Nulls.SKIP)
        public Builder lastUpdated(Optional<OffsetDateTime> lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }

        public Builder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = Optional.ofNullable(lastUpdated);
            return this;
        }

        /**
         * <p>Date and time created.</p>
         */
        @JsonSetter(value = "Created", nulls = Nulls.SKIP)
        public Builder created(Optional<OffsetDateTime> created) {
            this.created = created;
            return this;
        }

        public Builder created(OffsetDateTime created) {
            this.created = Optional.ofNullable(created);
            return this;
        }

        /**
         * <p>List of additional custom fields in format key:value.</p>
         */
        @JsonSetter(value = "AdditionalFields", nulls = Nulls.SKIP)
        public Builder additionalFields(Optional<Map<String, Optional<String>>> additionalFields) {
            this.additionalFields = additionalFields;
            return this;
        }

        public Builder additionalFields(Map<String, Optional<String>> additionalFields) {
            this.additionalFields = Optional.ofNullable(additionalFields);
            return this;
        }

        @JsonSetter(value = "IdentifierFields", nulls = Nulls.SKIP)
        public Builder identifierFields(Optional<List<Optional<String>>> identifierFields) {
            this.identifierFields = identifierFields;
            return this;
        }

        public Builder identifierFields(List<Optional<String>> identifierFields) {
            this.identifierFields = Optional.ofNullable(identifierFields);
            return this;
        }

        /**
         * <p>List of subscriptions associated to the customer.</p>
         */
        @JsonSetter(value = "Subscriptions", nulls = Nulls.SKIP)
        public Builder subscriptions(Optional<List<SubscriptionQueryRecords>> subscriptions) {
            this.subscriptions = subscriptions;
            return this;
        }

        public Builder subscriptions(List<SubscriptionQueryRecords> subscriptions) {
            this.subscriptions = Optional.ofNullable(subscriptions);
            return this;
        }

        /**
         * <p>List of payment methods associated to the customer.</p>
         */
        @JsonSetter(value = "StoredMethods", nulls = Nulls.SKIP)
        public Builder storedMethods(Optional<List<MethodQueryRecords>> storedMethods) {
            this.storedMethods = storedMethods;
            return this;
        }

        public Builder storedMethods(List<MethodQueryRecords> storedMethods) {
            this.storedMethods = Optional.ofNullable(storedMethods);
            return this;
        }

        @JsonSetter(value = "customerSummary", nulls = Nulls.SKIP)
        public Builder customerSummary(Optional<CustomerSummaryRecord> customerSummary) {
            this.customerSummary = customerSummary;
            return this;
        }

        public Builder customerSummary(CustomerSummaryRecord customerSummary) {
            this.customerSummary = Optional.ofNullable(customerSummary);
            return this;
        }

        /**
         * <p>Paypoint legal name.</p>
         */
        @JsonSetter(value = "PaypointLegalname", nulls = Nulls.SKIP)
        public Builder paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        public Builder paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        /**
         * <p>Paypoint DBA name.</p>
         */
        @JsonSetter(value = "PaypointDbaname", nulls = Nulls.SKIP)
        public Builder paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        public Builder paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        @JsonSetter(value = "ParentOrgId", nulls = Nulls.SKIP)
        public Builder parentOrgId(Optional<Long> parentOrgId) {
            this.parentOrgId = parentOrgId;
            return this;
        }

        public Builder parentOrgId(Long parentOrgId) {
            this.parentOrgId = Optional.ofNullable(parentOrgId);
            return this;
        }

        @JsonSetter(value = "PaypointEntryname", nulls = Nulls.SKIP)
        public Builder paypointEntryname(Optional<String> paypointEntryname) {
            this.paypointEntryname = paypointEntryname;
            return this;
        }

        public Builder paypointEntryname(String paypointEntryname) {
            this.paypointEntryname = Optional.ofNullable(paypointEntryname);
            return this;
        }

        @JsonSetter(value = "pageidentifier", nulls = Nulls.SKIP)
        public Builder pageidentifier(Optional<String> pageidentifier) {
            this.pageidentifier = pageidentifier;
            return this;
        }

        public Builder pageidentifier(String pageidentifier) {
            this.pageidentifier = Optional.ofNullable(pageidentifier);
            return this;
        }

        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        @JsonSetter(value = "customerConsent", nulls = Nulls.SKIP)
        public Builder customerConsent(Optional<CustomerQueryRecordsCustomerConsent> customerConsent) {
            this.customerConsent = customerConsent;
            return this;
        }

        public Builder customerConsent(CustomerQueryRecordsCustomerConsent customerConsent) {
            this.customerConsent = Optional.ofNullable(customerConsent);
            return this;
        }

        public CustomerQueryRecords build() {
            return new CustomerQueryRecords(
                    customerId,
                    customerNumber,
                    customerUsername,
                    customerStatus,
                    company,
                    firstname,
                    lastname,
                    phone,
                    email,
                    address,
                    address1,
                    city,
                    state,
                    zip,
                    country,
                    shippingAddress,
                    shippingAddress1,
                    shippingCity,
                    shippingState,
                    shippingZip,
                    shippingCountry,
                    balance,
                    timeZone,
                    mfa,
                    mfaMode,
                    snProvider,
                    snIdentifier,
                    snData,
                    lastUpdated,
                    created,
                    additionalFields,
                    identifierFields,
                    subscriptions,
                    storedMethods,
                    customerSummary,
                    paypointLegalname,
                    paypointDbaname,
                    parentOrgName,
                    parentOrgId,
                    paypointEntryname,
                    pageidentifier,
                    externalPaypointId,
                    customerConsent,
                    additionalProperties);
        }
    }
}
