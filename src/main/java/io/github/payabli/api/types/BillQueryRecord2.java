/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.Nullable;
import io.github.payabli.api.core.NullableNonemptyFilter;
import io.github.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BillQueryRecord2.Builder.class)
public final class BillQueryRecord2 {
    private final Optional<String> accountingField1;

    private final Optional<String> accountingField2;

    private final Optional<Map<String, String>> additionalData;

    private final Optional<String> batchNumber;

    private final Optional<List<BillQueryRecord2BillApprovalsItem>> billApprovals;

    private final Optional<String> billDate;

    private final Optional<List<GeneralEvents>> billEvents;

    private final Optional<List<BillItem>> billItems;

    private final Optional<String> billNumber;

    private final Optional<String> comments;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<Double> discount;

    private final Optional<String> documentsRef;

    private final Optional<String> dueDate;

    private final Optional<String> endDate;

    private final Optional<String> entityId;

    private final Optional<String> externalPaypointId;

    private final Optional<Frequency> frequency;

    private final Optional<Long> idBill;

    private final Optional<OffsetDateTime> lastUpdated;

    private final Optional<String> lotNumber;

    private final Optional<Integer> mode;

    private final Optional<Double> netAmount;

    private final Optional<Long> parentOrgId;

    private final Optional<String> parentOrgName;

    private final Optional<String> paymentId;

    private final Optional<BillQueryRecord2PaymentMethod> paymentMethod;

    private final Optional<String> paylinkId;

    private final Optional<String> paypointDbaname;

    private final Optional<String> paypointEntryname;

    private final Optional<String> paypointLegalname;

    private final Optional<String> source;

    private final Optional<Integer> status;

    private final Optional<String> terms;

    private final Optional<Double> totalAmount;

    private final Optional<TransactionOutQueryRecord> transaction;

    private final Optional<VendorOutData> vendor;

    private final Map<String, Object> additionalProperties;

    private BillQueryRecord2(
            Optional<String> accountingField1,
            Optional<String> accountingField2,
            Optional<Map<String, String>> additionalData,
            Optional<String> batchNumber,
            Optional<List<BillQueryRecord2BillApprovalsItem>> billApprovals,
            Optional<String> billDate,
            Optional<List<GeneralEvents>> billEvents,
            Optional<List<BillItem>> billItems,
            Optional<String> billNumber,
            Optional<String> comments,
            Optional<OffsetDateTime> createdAt,
            Optional<Double> discount,
            Optional<String> documentsRef,
            Optional<String> dueDate,
            Optional<String> endDate,
            Optional<String> entityId,
            Optional<String> externalPaypointId,
            Optional<Frequency> frequency,
            Optional<Long> idBill,
            Optional<OffsetDateTime> lastUpdated,
            Optional<String> lotNumber,
            Optional<Integer> mode,
            Optional<Double> netAmount,
            Optional<Long> parentOrgId,
            Optional<String> parentOrgName,
            Optional<String> paymentId,
            Optional<BillQueryRecord2PaymentMethod> paymentMethod,
            Optional<String> paylinkId,
            Optional<String> paypointDbaname,
            Optional<String> paypointEntryname,
            Optional<String> paypointLegalname,
            Optional<String> source,
            Optional<Integer> status,
            Optional<String> terms,
            Optional<Double> totalAmount,
            Optional<TransactionOutQueryRecord> transaction,
            Optional<VendorOutData> vendor,
            Map<String, Object> additionalProperties) {
        this.accountingField1 = accountingField1;
        this.accountingField2 = accountingField2;
        this.additionalData = additionalData;
        this.batchNumber = batchNumber;
        this.billApprovals = billApprovals;
        this.billDate = billDate;
        this.billEvents = billEvents;
        this.billItems = billItems;
        this.billNumber = billNumber;
        this.comments = comments;
        this.createdAt = createdAt;
        this.discount = discount;
        this.documentsRef = documentsRef;
        this.dueDate = dueDate;
        this.endDate = endDate;
        this.entityId = entityId;
        this.externalPaypointId = externalPaypointId;
        this.frequency = frequency;
        this.idBill = idBill;
        this.lastUpdated = lastUpdated;
        this.lotNumber = lotNumber;
        this.mode = mode;
        this.netAmount = netAmount;
        this.parentOrgId = parentOrgId;
        this.parentOrgName = parentOrgName;
        this.paymentId = paymentId;
        this.paymentMethod = paymentMethod;
        this.paylinkId = paylinkId;
        this.paypointDbaname = paypointDbaname;
        this.paypointEntryname = paypointEntryname;
        this.paypointLegalname = paypointLegalname;
        this.source = source;
        this.status = status;
        this.terms = terms;
        this.totalAmount = totalAmount;
        this.transaction = transaction;
        this.vendor = vendor;
        this.additionalProperties = additionalProperties;
    }

    @JsonIgnore
    public Optional<String> getAccountingField1() {
        if (accountingField1 == null) {
            return Optional.empty();
        }
        return accountingField1;
    }

    @JsonIgnore
    public Optional<String> getAccountingField2() {
        if (accountingField2 == null) {
            return Optional.empty();
        }
        return accountingField2;
    }

    /**
     * @return Additional data associated with the bill.
     */
    @JsonIgnore
    public Optional<Map<String, String>> getAdditionalData() {
        if (additionalData == null) {
            return Optional.empty();
        }
        return additionalData;
    }

    /**
     * @return Batch number associated with the bill.
     */
    @JsonIgnore
    public Optional<String> getBatchNumber() {
        if (batchNumber == null) {
            return Optional.empty();
        }
        return batchNumber;
    }

    @JsonIgnore
    public Optional<List<BillQueryRecord2BillApprovalsItem>> getBillApprovals() {
        if (billApprovals == null) {
            return Optional.empty();
        }
        return billApprovals;
    }

    /**
     * @return Bill creation date in one of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
     */
    @JsonIgnore
    public Optional<String> getBillDate() {
        if (billDate == null) {
            return Optional.empty();
        }
        return billDate;
    }

    /**
     * @return Events associated with the bill.
     */
    @JsonIgnore
    public Optional<List<GeneralEvents>> getBillEvents() {
        if (billEvents == null) {
            return Optional.empty();
        }
        return billEvents;
    }

    /**
     * @return Array of items included in the bill.
     */
    @JsonIgnore
    public Optional<List<BillItem>> getBillItems() {
        if (billItems == null) {
            return Optional.empty();
        }
        return billItems;
    }

    /**
     * @return Bill number.
     */
    @JsonIgnore
    public Optional<String> getBillNumber() {
        if (billNumber == null) {
            return Optional.empty();
        }
        return billNumber;
    }

    /**
     * @return Additional comments on the bill.
     */
    @JsonIgnore
    public Optional<String> getComments() {
        if (comments == null) {
            return Optional.empty();
        }
        return comments;
    }

    /**
     * @return Timestamp of when bill was created, in UTC.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> getCreatedAt() {
        if (createdAt == null) {
            return Optional.empty();
        }
        return createdAt;
    }

    /**
     * @return Discount amount applied to the bill.
     */
    @JsonIgnore
    public Optional<Double> getDiscount() {
        if (discount == null) {
            return Optional.empty();
        }
        return discount;
    }

    /**
     * @return Reference to documents associated with the bill.
     */
    @JsonIgnore
    public Optional<String> getDocumentsRef() {
        if (documentsRef == null) {
            return Optional.empty();
        }
        return documentsRef;
    }

    /**
     * @return Bill due date in one of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
     */
    @JsonIgnore
    public Optional<String> getDueDate() {
        if (dueDate == null) {
            return Optional.empty();
        }
        return dueDate;
    }

    /**
     * @return End date for the bill.
     */
    @JsonIgnore
    public Optional<String> getEndDate() {
        if (endDate == null) {
            return Optional.empty();
        }
        return endDate;
    }

    /**
     * @return Entity identifier associated with the bill.
     */
    @JsonIgnore
    public Optional<String> getEntityId() {
        if (entityId == null) {
            return Optional.empty();
        }
        return entityId;
    }

    @JsonIgnore
    public Optional<String> getExternalPaypointId() {
        if (externalPaypointId == null) {
            return Optional.empty();
        }
        return externalPaypointId;
    }

    /**
     * @return Frequency for scheduled bills. Applied only in <code>Mode</code> = 1.
     */
    @JsonIgnore
    public Optional<Frequency> getFrequency() {
        if (frequency == null) {
            return Optional.empty();
        }
        return frequency;
    }

    /**
     * @return Identifier of the bill.
     */
    @JsonIgnore
    public Optional<Long> getIdBill() {
        if (idBill == null) {
            return Optional.empty();
        }
        return idBill;
    }

    /**
     * @return Timestamp of when bill was last updated, in UTC.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> getLastUpdated() {
        if (lastUpdated == null) {
            return Optional.empty();
        }
        return lastUpdated;
    }

    /**
     * @return Lot number associated with the bill.
     */
    @JsonIgnore
    public Optional<String> getLotNumber() {
        if (lotNumber == null) {
            return Optional.empty();
        }
        return lotNumber;
    }

    /**
     * @return Bill mode: value <code>0</code> for single/one-time bills, <code>1</code> for scheduled bills.
     */
    @JsonIgnore
    public Optional<Integer> getMode() {
        if (mode == null) {
            return Optional.empty();
        }
        return mode;
    }

    /**
     * @return Net amount of the bill.
     */
    @JsonIgnore
    public Optional<Double> getNetAmount() {
        if (netAmount == null) {
            return Optional.empty();
        }
        return netAmount;
    }

    /**
     * @return Parent organization identifier.
     */
    @JsonIgnore
    public Optional<Long> getParentOrgId() {
        if (parentOrgId == null) {
            return Optional.empty();
        }
        return parentOrgId;
    }

    @JsonIgnore
    public Optional<String> getParentOrgName() {
        if (parentOrgName == null) {
            return Optional.empty();
        }
        return parentOrgName;
    }

    @JsonIgnore
    public Optional<String> getPaymentId() {
        if (paymentId == null) {
            return Optional.empty();
        }
        return paymentId;
    }

    /**
     * @return Preferred payment method used.
     */
    @JsonIgnore
    public Optional<BillQueryRecord2PaymentMethod> getPaymentMethod() {
        if (paymentMethod == null) {
            return Optional.empty();
        }
        return paymentMethod;
    }

    /**
     * @return Paylink identifier associated with the bill.
     */
    @JsonIgnore
    public Optional<String> getPaylinkId() {
        if (paylinkId == null) {
            return Optional.empty();
        }
        return paylinkId;
    }

    /**
     * @return The paypoint's DBA name.
     */
    @JsonIgnore
    public Optional<String> getPaypointDbaname() {
        if (paypointDbaname == null) {
            return Optional.empty();
        }
        return paypointDbaname;
    }

    /**
     * @return Entry name of the paypoint.
     */
    @JsonIgnore
    public Optional<String> getPaypointEntryname() {
        if (paypointEntryname == null) {
            return Optional.empty();
        }
        return paypointEntryname;
    }

    /**
     * @return The paypoint's legal name.
     */
    @JsonIgnore
    public Optional<String> getPaypointLegalname() {
        if (paypointLegalname == null) {
            return Optional.empty();
        }
        return paypointLegalname;
    }

    /**
     * @return Source of the bill.
     */
    @JsonIgnore
    public Optional<String> getSource() {
        if (source == null) {
            return Optional.empty();
        }
        return source;
    }

    @JsonIgnore
    public Optional<Integer> getStatus() {
        if (status == null) {
            return Optional.empty();
        }
        return status;
    }

    /**
     * @return The payment terms for invoice. If no terms were defined initially, then response data for this field will default to <code>N30</code>.
     */
    @JsonIgnore
    public Optional<String> getTerms() {
        if (terms == null) {
            return Optional.empty();
        }
        return terms;
    }

    /**
     * @return Total amount of the bill including taxes and fees.
     */
    @JsonIgnore
    public Optional<Double> getTotalAmount() {
        if (totalAmount == null) {
            return Optional.empty();
        }
        return totalAmount;
    }

    /**
     * @return MoneyOut transaction associated to the bill.
     */
    @JsonIgnore
    public Optional<TransactionOutQueryRecord> getTransaction() {
        if (transaction == null) {
            return Optional.empty();
        }
        return transaction;
    }

    @JsonIgnore
    public Optional<VendorOutData> getVendor() {
        if (vendor == null) {
            return Optional.empty();
        }
        return vendor;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("AccountingField1")
    private Optional<String> _getAccountingField1() {
        return accountingField1;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("AccountingField2")
    private Optional<String> _getAccountingField2() {
        return accountingField2;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("AdditionalData")
    private Optional<Map<String, String>> _getAdditionalData() {
        return additionalData;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BatchNumber")
    private Optional<String> _getBatchNumber() {
        return batchNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("billApprovals")
    private Optional<List<BillQueryRecord2BillApprovalsItem>> _getBillApprovals() {
        return billApprovals;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BillDate")
    private Optional<String> _getBillDate() {
        return billDate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("billEvents")
    private Optional<List<GeneralEvents>> _getBillEvents() {
        return billEvents;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BillItems")
    private Optional<List<BillItem>> _getBillItems() {
        return billItems;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BillNumber")
    private Optional<String> _getBillNumber() {
        return billNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("Comments")
    private Optional<String> _getComments() {
        return comments;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("CreatedAt")
    private Optional<OffsetDateTime> _getCreatedAt() {
        return createdAt;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("Discount")
    private Optional<Double> _getDiscount() {
        return discount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("DocumentsRef")
    private Optional<String> _getDocumentsRef() {
        return documentsRef;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("DueDate")
    private Optional<String> _getDueDate() {
        return dueDate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("EndDate")
    private Optional<String> _getEndDate() {
        return endDate;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("EntityID")
    private Optional<String> _getEntityId() {
        return entityId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("externalPaypointID")
    private Optional<String> _getExternalPaypointId() {
        return externalPaypointId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("Frequency")
    private Optional<Frequency> _getFrequency() {
        return frequency;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("IdBill")
    private Optional<Long> _getIdBill() {
        return idBill;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("LastUpdated")
    private Optional<OffsetDateTime> _getLastUpdated() {
        return lastUpdated;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("LotNumber")
    private Optional<String> _getLotNumber() {
        return lotNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("Mode")
    private Optional<Integer> _getMode() {
        return mode;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("NetAmount")
    private Optional<Double> _getNetAmount() {
        return netAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ParentOrgId")
    private Optional<Long> _getParentOrgId() {
        return parentOrgId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ParentOrgName")
    private Optional<String> _getParentOrgName() {
        return parentOrgName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PaymentId")
    private Optional<String> _getPaymentId() {
        return paymentId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PaymentMethod")
    private Optional<BillQueryRecord2PaymentMethod> _getPaymentMethod() {
        return paymentMethod;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("paylinkId")
    private Optional<String> _getPaylinkId() {
        return paylinkId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PaypointDbaname")
    private Optional<String> _getPaypointDbaname() {
        return paypointDbaname;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PaypointEntryname")
    private Optional<String> _getPaypointEntryname() {
        return paypointEntryname;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("PaypointLegalname")
    private Optional<String> _getPaypointLegalname() {
        return paypointLegalname;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("Source")
    private Optional<String> _getSource() {
        return source;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("Status")
    private Optional<Integer> _getStatus() {
        return status;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("Terms")
    private Optional<String> _getTerms() {
        return terms;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("TotalAmount")
    private Optional<Double> _getTotalAmount() {
        return totalAmount;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("Transaction")
    private Optional<TransactionOutQueryRecord> _getTransaction() {
        return transaction;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("Vendor")
    private Optional<VendorOutData> _getVendor() {
        return vendor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BillQueryRecord2 && equalTo((BillQueryRecord2) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BillQueryRecord2 other) {
        return accountingField1.equals(other.accountingField1)
                && accountingField2.equals(other.accountingField2)
                && additionalData.equals(other.additionalData)
                && batchNumber.equals(other.batchNumber)
                && billApprovals.equals(other.billApprovals)
                && billDate.equals(other.billDate)
                && billEvents.equals(other.billEvents)
                && billItems.equals(other.billItems)
                && billNumber.equals(other.billNumber)
                && comments.equals(other.comments)
                && createdAt.equals(other.createdAt)
                && discount.equals(other.discount)
                && documentsRef.equals(other.documentsRef)
                && dueDate.equals(other.dueDate)
                && endDate.equals(other.endDate)
                && entityId.equals(other.entityId)
                && externalPaypointId.equals(other.externalPaypointId)
                && frequency.equals(other.frequency)
                && idBill.equals(other.idBill)
                && lastUpdated.equals(other.lastUpdated)
                && lotNumber.equals(other.lotNumber)
                && mode.equals(other.mode)
                && netAmount.equals(other.netAmount)
                && parentOrgId.equals(other.parentOrgId)
                && parentOrgName.equals(other.parentOrgName)
                && paymentId.equals(other.paymentId)
                && paymentMethod.equals(other.paymentMethod)
                && paylinkId.equals(other.paylinkId)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointEntryname.equals(other.paypointEntryname)
                && paypointLegalname.equals(other.paypointLegalname)
                && source.equals(other.source)
                && status.equals(other.status)
                && terms.equals(other.terms)
                && totalAmount.equals(other.totalAmount)
                && transaction.equals(other.transaction)
                && vendor.equals(other.vendor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accountingField1,
                this.accountingField2,
                this.additionalData,
                this.batchNumber,
                this.billApprovals,
                this.billDate,
                this.billEvents,
                this.billItems,
                this.billNumber,
                this.comments,
                this.createdAt,
                this.discount,
                this.documentsRef,
                this.dueDate,
                this.endDate,
                this.entityId,
                this.externalPaypointId,
                this.frequency,
                this.idBill,
                this.lastUpdated,
                this.lotNumber,
                this.mode,
                this.netAmount,
                this.parentOrgId,
                this.parentOrgName,
                this.paymentId,
                this.paymentMethod,
                this.paylinkId,
                this.paypointDbaname,
                this.paypointEntryname,
                this.paypointLegalname,
                this.source,
                this.status,
                this.terms,
                this.totalAmount,
                this.transaction,
                this.vendor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> accountingField1 = Optional.empty();

        private Optional<String> accountingField2 = Optional.empty();

        private Optional<Map<String, String>> additionalData = Optional.empty();

        private Optional<String> batchNumber = Optional.empty();

        private Optional<List<BillQueryRecord2BillApprovalsItem>> billApprovals = Optional.empty();

        private Optional<String> billDate = Optional.empty();

        private Optional<List<GeneralEvents>> billEvents = Optional.empty();

        private Optional<List<BillItem>> billItems = Optional.empty();

        private Optional<String> billNumber = Optional.empty();

        private Optional<String> comments = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<Double> discount = Optional.empty();

        private Optional<String> documentsRef = Optional.empty();

        private Optional<String> dueDate = Optional.empty();

        private Optional<String> endDate = Optional.empty();

        private Optional<String> entityId = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<Frequency> frequency = Optional.empty();

        private Optional<Long> idBill = Optional.empty();

        private Optional<OffsetDateTime> lastUpdated = Optional.empty();

        private Optional<String> lotNumber = Optional.empty();

        private Optional<Integer> mode = Optional.empty();

        private Optional<Double> netAmount = Optional.empty();

        private Optional<Long> parentOrgId = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<String> paymentId = Optional.empty();

        private Optional<BillQueryRecord2PaymentMethod> paymentMethod = Optional.empty();

        private Optional<String> paylinkId = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> paypointEntryname = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<Integer> status = Optional.empty();

        private Optional<String> terms = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<TransactionOutQueryRecord> transaction = Optional.empty();

        private Optional<VendorOutData> vendor = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BillQueryRecord2 other) {
            accountingField1(other.getAccountingField1());
            accountingField2(other.getAccountingField2());
            additionalData(other.getAdditionalData());
            batchNumber(other.getBatchNumber());
            billApprovals(other.getBillApprovals());
            billDate(other.getBillDate());
            billEvents(other.getBillEvents());
            billItems(other.getBillItems());
            billNumber(other.getBillNumber());
            comments(other.getComments());
            createdAt(other.getCreatedAt());
            discount(other.getDiscount());
            documentsRef(other.getDocumentsRef());
            dueDate(other.getDueDate());
            endDate(other.getEndDate());
            entityId(other.getEntityId());
            externalPaypointId(other.getExternalPaypointId());
            frequency(other.getFrequency());
            idBill(other.getIdBill());
            lastUpdated(other.getLastUpdated());
            lotNumber(other.getLotNumber());
            mode(other.getMode());
            netAmount(other.getNetAmount());
            parentOrgId(other.getParentOrgId());
            parentOrgName(other.getParentOrgName());
            paymentId(other.getPaymentId());
            paymentMethod(other.getPaymentMethod());
            paylinkId(other.getPaylinkId());
            paypointDbaname(other.getPaypointDbaname());
            paypointEntryname(other.getPaypointEntryname());
            paypointLegalname(other.getPaypointLegalname());
            source(other.getSource());
            status(other.getStatus());
            terms(other.getTerms());
            totalAmount(other.getTotalAmount());
            transaction(other.getTransaction());
            vendor(other.getVendor());
            return this;
        }

        @JsonSetter(value = "AccountingField1", nulls = Nulls.SKIP)
        public Builder accountingField1(Optional<String> accountingField1) {
            this.accountingField1 = accountingField1;
            return this;
        }

        public Builder accountingField1(String accountingField1) {
            this.accountingField1 = Optional.ofNullable(accountingField1);
            return this;
        }

        public Builder accountingField1(Nullable<String> accountingField1) {
            if (accountingField1.isNull()) {
                this.accountingField1 = null;
            } else if (accountingField1.isEmpty()) {
                this.accountingField1 = Optional.empty();
            } else {
                this.accountingField1 = Optional.of(accountingField1.get());
            }
            return this;
        }

        @JsonSetter(value = "AccountingField2", nulls = Nulls.SKIP)
        public Builder accountingField2(Optional<String> accountingField2) {
            this.accountingField2 = accountingField2;
            return this;
        }

        public Builder accountingField2(String accountingField2) {
            this.accountingField2 = Optional.ofNullable(accountingField2);
            return this;
        }

        public Builder accountingField2(Nullable<String> accountingField2) {
            if (accountingField2.isNull()) {
                this.accountingField2 = null;
            } else if (accountingField2.isEmpty()) {
                this.accountingField2 = Optional.empty();
            } else {
                this.accountingField2 = Optional.of(accountingField2.get());
            }
            return this;
        }

        /**
         * <p>Additional data associated with the bill.</p>
         */
        @JsonSetter(value = "AdditionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<Map<String, String>> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(Map<String, String> additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        public Builder additionalData(Nullable<Map<String, String>> additionalData) {
            if (additionalData.isNull()) {
                this.additionalData = null;
            } else if (additionalData.isEmpty()) {
                this.additionalData = Optional.empty();
            } else {
                this.additionalData = Optional.of(additionalData.get());
            }
            return this;
        }

        /**
         * <p>Batch number associated with the bill.</p>
         */
        @JsonSetter(value = "BatchNumber", nulls = Nulls.SKIP)
        public Builder batchNumber(Optional<String> batchNumber) {
            this.batchNumber = batchNumber;
            return this;
        }

        public Builder batchNumber(String batchNumber) {
            this.batchNumber = Optional.ofNullable(batchNumber);
            return this;
        }

        public Builder batchNumber(Nullable<String> batchNumber) {
            if (batchNumber.isNull()) {
                this.batchNumber = null;
            } else if (batchNumber.isEmpty()) {
                this.batchNumber = Optional.empty();
            } else {
                this.batchNumber = Optional.of(batchNumber.get());
            }
            return this;
        }

        @JsonSetter(value = "billApprovals", nulls = Nulls.SKIP)
        public Builder billApprovals(Optional<List<BillQueryRecord2BillApprovalsItem>> billApprovals) {
            this.billApprovals = billApprovals;
            return this;
        }

        public Builder billApprovals(List<BillQueryRecord2BillApprovalsItem> billApprovals) {
            this.billApprovals = Optional.ofNullable(billApprovals);
            return this;
        }

        public Builder billApprovals(Nullable<List<BillQueryRecord2BillApprovalsItem>> billApprovals) {
            if (billApprovals.isNull()) {
                this.billApprovals = null;
            } else if (billApprovals.isEmpty()) {
                this.billApprovals = Optional.empty();
            } else {
                this.billApprovals = Optional.of(billApprovals.get());
            }
            return this;
        }

        /**
         * <p>Bill creation date in one of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         */
        @JsonSetter(value = "BillDate", nulls = Nulls.SKIP)
        public Builder billDate(Optional<String> billDate) {
            this.billDate = billDate;
            return this;
        }

        public Builder billDate(String billDate) {
            this.billDate = Optional.ofNullable(billDate);
            return this;
        }

        public Builder billDate(Nullable<String> billDate) {
            if (billDate.isNull()) {
                this.billDate = null;
            } else if (billDate.isEmpty()) {
                this.billDate = Optional.empty();
            } else {
                this.billDate = Optional.of(billDate.get());
            }
            return this;
        }

        /**
         * <p>Events associated with the bill.</p>
         */
        @JsonSetter(value = "billEvents", nulls = Nulls.SKIP)
        public Builder billEvents(Optional<List<GeneralEvents>> billEvents) {
            this.billEvents = billEvents;
            return this;
        }

        public Builder billEvents(List<GeneralEvents> billEvents) {
            this.billEvents = Optional.ofNullable(billEvents);
            return this;
        }

        public Builder billEvents(Nullable<List<GeneralEvents>> billEvents) {
            if (billEvents.isNull()) {
                this.billEvents = null;
            } else if (billEvents.isEmpty()) {
                this.billEvents = Optional.empty();
            } else {
                this.billEvents = Optional.of(billEvents.get());
            }
            return this;
        }

        /**
         * <p>Array of items included in the bill.</p>
         */
        @JsonSetter(value = "BillItems", nulls = Nulls.SKIP)
        public Builder billItems(Optional<List<BillItem>> billItems) {
            this.billItems = billItems;
            return this;
        }

        public Builder billItems(List<BillItem> billItems) {
            this.billItems = Optional.ofNullable(billItems);
            return this;
        }

        public Builder billItems(Nullable<List<BillItem>> billItems) {
            if (billItems.isNull()) {
                this.billItems = null;
            } else if (billItems.isEmpty()) {
                this.billItems = Optional.empty();
            } else {
                this.billItems = Optional.of(billItems.get());
            }
            return this;
        }

        /**
         * <p>Bill number.</p>
         */
        @JsonSetter(value = "BillNumber", nulls = Nulls.SKIP)
        public Builder billNumber(Optional<String> billNumber) {
            this.billNumber = billNumber;
            return this;
        }

        public Builder billNumber(String billNumber) {
            this.billNumber = Optional.ofNullable(billNumber);
            return this;
        }

        public Builder billNumber(Nullable<String> billNumber) {
            if (billNumber.isNull()) {
                this.billNumber = null;
            } else if (billNumber.isEmpty()) {
                this.billNumber = Optional.empty();
            } else {
                this.billNumber = Optional.of(billNumber.get());
            }
            return this;
        }

        /**
         * <p>Additional comments on the bill.</p>
         */
        @JsonSetter(value = "Comments", nulls = Nulls.SKIP)
        public Builder comments(Optional<String> comments) {
            this.comments = comments;
            return this;
        }

        public Builder comments(String comments) {
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        public Builder comments(Nullable<String> comments) {
            if (comments.isNull()) {
                this.comments = null;
            } else if (comments.isEmpty()) {
                this.comments = Optional.empty();
            } else {
                this.comments = Optional.of(comments.get());
            }
            return this;
        }

        /**
         * <p>Timestamp of when bill was created, in UTC.</p>
         */
        @JsonSetter(value = "CreatedAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Nullable<OffsetDateTime> createdAt) {
            if (createdAt.isNull()) {
                this.createdAt = null;
            } else if (createdAt.isEmpty()) {
                this.createdAt = Optional.empty();
            } else {
                this.createdAt = Optional.of(createdAt.get());
            }
            return this;
        }

        /**
         * <p>Discount amount applied to the bill.</p>
         */
        @JsonSetter(value = "Discount", nulls = Nulls.SKIP)
        public Builder discount(Optional<Double> discount) {
            this.discount = discount;
            return this;
        }

        public Builder discount(Double discount) {
            this.discount = Optional.ofNullable(discount);
            return this;
        }

        public Builder discount(Nullable<Double> discount) {
            if (discount.isNull()) {
                this.discount = null;
            } else if (discount.isEmpty()) {
                this.discount = Optional.empty();
            } else {
                this.discount = Optional.of(discount.get());
            }
            return this;
        }

        /**
         * <p>Reference to documents associated with the bill.</p>
         */
        @JsonSetter(value = "DocumentsRef", nulls = Nulls.SKIP)
        public Builder documentsRef(Optional<String> documentsRef) {
            this.documentsRef = documentsRef;
            return this;
        }

        public Builder documentsRef(String documentsRef) {
            this.documentsRef = Optional.ofNullable(documentsRef);
            return this;
        }

        public Builder documentsRef(Nullable<String> documentsRef) {
            if (documentsRef.isNull()) {
                this.documentsRef = null;
            } else if (documentsRef.isEmpty()) {
                this.documentsRef = Optional.empty();
            } else {
                this.documentsRef = Optional.of(documentsRef.get());
            }
            return this;
        }

        /**
         * <p>Bill due date in one of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         */
        @JsonSetter(value = "DueDate", nulls = Nulls.SKIP)
        public Builder dueDate(Optional<String> dueDate) {
            this.dueDate = dueDate;
            return this;
        }

        public Builder dueDate(String dueDate) {
            this.dueDate = Optional.ofNullable(dueDate);
            return this;
        }

        public Builder dueDate(Nullable<String> dueDate) {
            if (dueDate.isNull()) {
                this.dueDate = null;
            } else if (dueDate.isEmpty()) {
                this.dueDate = Optional.empty();
            } else {
                this.dueDate = Optional.of(dueDate.get());
            }
            return this;
        }

        /**
         * <p>End date for the bill.</p>
         */
        @JsonSetter(value = "EndDate", nulls = Nulls.SKIP)
        public Builder endDate(Optional<String> endDate) {
            this.endDate = endDate;
            return this;
        }

        public Builder endDate(String endDate) {
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        public Builder endDate(Nullable<String> endDate) {
            if (endDate.isNull()) {
                this.endDate = null;
            } else if (endDate.isEmpty()) {
                this.endDate = Optional.empty();
            } else {
                this.endDate = Optional.of(endDate.get());
            }
            return this;
        }

        /**
         * <p>Entity identifier associated with the bill.</p>
         */
        @JsonSetter(value = "EntityID", nulls = Nulls.SKIP)
        public Builder entityId(Optional<String> entityId) {
            this.entityId = entityId;
            return this;
        }

        public Builder entityId(String entityId) {
            this.entityId = Optional.ofNullable(entityId);
            return this;
        }

        public Builder entityId(Nullable<String> entityId) {
            if (entityId.isNull()) {
                this.entityId = null;
            } else if (entityId.isEmpty()) {
                this.entityId = Optional.empty();
            } else {
                this.entityId = Optional.of(entityId.get());
            }
            return this;
        }

        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        public Builder externalPaypointId(Nullable<String> externalPaypointId) {
            if (externalPaypointId.isNull()) {
                this.externalPaypointId = null;
            } else if (externalPaypointId.isEmpty()) {
                this.externalPaypointId = Optional.empty();
            } else {
                this.externalPaypointId = Optional.of(externalPaypointId.get());
            }
            return this;
        }

        /**
         * <p>Frequency for scheduled bills. Applied only in <code>Mode</code> = 1.</p>
         */
        @JsonSetter(value = "Frequency", nulls = Nulls.SKIP)
        public Builder frequency(Optional<Frequency> frequency) {
            this.frequency = frequency;
            return this;
        }

        public Builder frequency(Frequency frequency) {
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        public Builder frequency(Nullable<Frequency> frequency) {
            if (frequency.isNull()) {
                this.frequency = null;
            } else if (frequency.isEmpty()) {
                this.frequency = Optional.empty();
            } else {
                this.frequency = Optional.of(frequency.get());
            }
            return this;
        }

        /**
         * <p>Identifier of the bill.</p>
         */
        @JsonSetter(value = "IdBill", nulls = Nulls.SKIP)
        public Builder idBill(Optional<Long> idBill) {
            this.idBill = idBill;
            return this;
        }

        public Builder idBill(Long idBill) {
            this.idBill = Optional.ofNullable(idBill);
            return this;
        }

        public Builder idBill(Nullable<Long> idBill) {
            if (idBill.isNull()) {
                this.idBill = null;
            } else if (idBill.isEmpty()) {
                this.idBill = Optional.empty();
            } else {
                this.idBill = Optional.of(idBill.get());
            }
            return this;
        }

        /**
         * <p>Timestamp of when bill was last updated, in UTC.</p>
         */
        @JsonSetter(value = "LastUpdated", nulls = Nulls.SKIP)
        public Builder lastUpdated(Optional<OffsetDateTime> lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }

        public Builder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = Optional.ofNullable(lastUpdated);
            return this;
        }

        public Builder lastUpdated(Nullable<OffsetDateTime> lastUpdated) {
            if (lastUpdated.isNull()) {
                this.lastUpdated = null;
            } else if (lastUpdated.isEmpty()) {
                this.lastUpdated = Optional.empty();
            } else {
                this.lastUpdated = Optional.of(lastUpdated.get());
            }
            return this;
        }

        /**
         * <p>Lot number associated with the bill.</p>
         */
        @JsonSetter(value = "LotNumber", nulls = Nulls.SKIP)
        public Builder lotNumber(Optional<String> lotNumber) {
            this.lotNumber = lotNumber;
            return this;
        }

        public Builder lotNumber(String lotNumber) {
            this.lotNumber = Optional.ofNullable(lotNumber);
            return this;
        }

        public Builder lotNumber(Nullable<String> lotNumber) {
            if (lotNumber.isNull()) {
                this.lotNumber = null;
            } else if (lotNumber.isEmpty()) {
                this.lotNumber = Optional.empty();
            } else {
                this.lotNumber = Optional.of(lotNumber.get());
            }
            return this;
        }

        /**
         * <p>Bill mode: value <code>0</code> for single/one-time bills, <code>1</code> for scheduled bills.</p>
         */
        @JsonSetter(value = "Mode", nulls = Nulls.SKIP)
        public Builder mode(Optional<Integer> mode) {
            this.mode = mode;
            return this;
        }

        public Builder mode(Integer mode) {
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        public Builder mode(Nullable<Integer> mode) {
            if (mode.isNull()) {
                this.mode = null;
            } else if (mode.isEmpty()) {
                this.mode = Optional.empty();
            } else {
                this.mode = Optional.of(mode.get());
            }
            return this;
        }

        /**
         * <p>Net amount of the bill.</p>
         */
        @JsonSetter(value = "NetAmount", nulls = Nulls.SKIP)
        public Builder netAmount(Optional<Double> netAmount) {
            this.netAmount = netAmount;
            return this;
        }

        public Builder netAmount(Double netAmount) {
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        public Builder netAmount(Nullable<Double> netAmount) {
            if (netAmount.isNull()) {
                this.netAmount = null;
            } else if (netAmount.isEmpty()) {
                this.netAmount = Optional.empty();
            } else {
                this.netAmount = Optional.of(netAmount.get());
            }
            return this;
        }

        /**
         * <p>Parent organization identifier.</p>
         */
        @JsonSetter(value = "ParentOrgId", nulls = Nulls.SKIP)
        public Builder parentOrgId(Optional<Long> parentOrgId) {
            this.parentOrgId = parentOrgId;
            return this;
        }

        public Builder parentOrgId(Long parentOrgId) {
            this.parentOrgId = Optional.ofNullable(parentOrgId);
            return this;
        }

        public Builder parentOrgId(Nullable<Long> parentOrgId) {
            if (parentOrgId.isNull()) {
                this.parentOrgId = null;
            } else if (parentOrgId.isEmpty()) {
                this.parentOrgId = Optional.empty();
            } else {
                this.parentOrgId = Optional.of(parentOrgId.get());
            }
            return this;
        }

        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        public Builder parentOrgName(Nullable<String> parentOrgName) {
            if (parentOrgName.isNull()) {
                this.parentOrgName = null;
            } else if (parentOrgName.isEmpty()) {
                this.parentOrgName = Optional.empty();
            } else {
                this.parentOrgName = Optional.of(parentOrgName.get());
            }
            return this;
        }

        @JsonSetter(value = "PaymentId", nulls = Nulls.SKIP)
        public Builder paymentId(Optional<String> paymentId) {
            this.paymentId = paymentId;
            return this;
        }

        public Builder paymentId(String paymentId) {
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        public Builder paymentId(Nullable<String> paymentId) {
            if (paymentId.isNull()) {
                this.paymentId = null;
            } else if (paymentId.isEmpty()) {
                this.paymentId = Optional.empty();
            } else {
                this.paymentId = Optional.of(paymentId.get());
            }
            return this;
        }

        /**
         * <p>Preferred payment method used.</p>
         */
        @JsonSetter(value = "PaymentMethod", nulls = Nulls.SKIP)
        public Builder paymentMethod(Optional<BillQueryRecord2PaymentMethod> paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }

        public Builder paymentMethod(BillQueryRecord2PaymentMethod paymentMethod) {
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        public Builder paymentMethod(Nullable<BillQueryRecord2PaymentMethod> paymentMethod) {
            if (paymentMethod.isNull()) {
                this.paymentMethod = null;
            } else if (paymentMethod.isEmpty()) {
                this.paymentMethod = Optional.empty();
            } else {
                this.paymentMethod = Optional.of(paymentMethod.get());
            }
            return this;
        }

        /**
         * <p>Paylink identifier associated with the bill.</p>
         */
        @JsonSetter(value = "paylinkId", nulls = Nulls.SKIP)
        public Builder paylinkId(Optional<String> paylinkId) {
            this.paylinkId = paylinkId;
            return this;
        }

        public Builder paylinkId(String paylinkId) {
            this.paylinkId = Optional.ofNullable(paylinkId);
            return this;
        }

        public Builder paylinkId(Nullable<String> paylinkId) {
            if (paylinkId.isNull()) {
                this.paylinkId = null;
            } else if (paylinkId.isEmpty()) {
                this.paylinkId = Optional.empty();
            } else {
                this.paylinkId = Optional.of(paylinkId.get());
            }
            return this;
        }

        /**
         * <p>The paypoint's DBA name.</p>
         */
        @JsonSetter(value = "PaypointDbaname", nulls = Nulls.SKIP)
        public Builder paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        public Builder paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        public Builder paypointDbaname(Nullable<String> paypointDbaname) {
            if (paypointDbaname.isNull()) {
                this.paypointDbaname = null;
            } else if (paypointDbaname.isEmpty()) {
                this.paypointDbaname = Optional.empty();
            } else {
                this.paypointDbaname = Optional.of(paypointDbaname.get());
            }
            return this;
        }

        /**
         * <p>Entry name of the paypoint.</p>
         */
        @JsonSetter(value = "PaypointEntryname", nulls = Nulls.SKIP)
        public Builder paypointEntryname(Optional<String> paypointEntryname) {
            this.paypointEntryname = paypointEntryname;
            return this;
        }

        public Builder paypointEntryname(String paypointEntryname) {
            this.paypointEntryname = Optional.ofNullable(paypointEntryname);
            return this;
        }

        public Builder paypointEntryname(Nullable<String> paypointEntryname) {
            if (paypointEntryname.isNull()) {
                this.paypointEntryname = null;
            } else if (paypointEntryname.isEmpty()) {
                this.paypointEntryname = Optional.empty();
            } else {
                this.paypointEntryname = Optional.of(paypointEntryname.get());
            }
            return this;
        }

        /**
         * <p>The paypoint's legal name.</p>
         */
        @JsonSetter(value = "PaypointLegalname", nulls = Nulls.SKIP)
        public Builder paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        public Builder paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        public Builder paypointLegalname(Nullable<String> paypointLegalname) {
            if (paypointLegalname.isNull()) {
                this.paypointLegalname = null;
            } else if (paypointLegalname.isEmpty()) {
                this.paypointLegalname = Optional.empty();
            } else {
                this.paypointLegalname = Optional.of(paypointLegalname.get());
            }
            return this;
        }

        /**
         * <p>Source of the bill.</p>
         */
        @JsonSetter(value = "Source", nulls = Nulls.SKIP)
        public Builder source(Optional<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        public Builder source(Nullable<String> source) {
            if (source.isNull()) {
                this.source = null;
            } else if (source.isEmpty()) {
                this.source = Optional.empty();
            } else {
                this.source = Optional.of(source.get());
            }
            return this;
        }

        @JsonSetter(value = "Status", nulls = Nulls.SKIP)
        public Builder status(Optional<Integer> status) {
            this.status = status;
            return this;
        }

        public Builder status(Integer status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Nullable<Integer> status) {
            if (status.isNull()) {
                this.status = null;
            } else if (status.isEmpty()) {
                this.status = Optional.empty();
            } else {
                this.status = Optional.of(status.get());
            }
            return this;
        }

        /**
         * <p>The payment terms for invoice. If no terms were defined initially, then response data for this field will default to <code>N30</code>.</p>
         */
        @JsonSetter(value = "Terms", nulls = Nulls.SKIP)
        public Builder terms(Optional<String> terms) {
            this.terms = terms;
            return this;
        }

        public Builder terms(String terms) {
            this.terms = Optional.ofNullable(terms);
            return this;
        }

        public Builder terms(Nullable<String> terms) {
            if (terms.isNull()) {
                this.terms = null;
            } else if (terms.isEmpty()) {
                this.terms = Optional.empty();
            } else {
                this.terms = Optional.of(terms.get());
            }
            return this;
        }

        /**
         * <p>Total amount of the bill including taxes and fees.</p>
         */
        @JsonSetter(value = "TotalAmount", nulls = Nulls.SKIP)
        public Builder totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        public Builder totalAmount(Nullable<Double> totalAmount) {
            if (totalAmount.isNull()) {
                this.totalAmount = null;
            } else if (totalAmount.isEmpty()) {
                this.totalAmount = Optional.empty();
            } else {
                this.totalAmount = Optional.of(totalAmount.get());
            }
            return this;
        }

        /**
         * <p>MoneyOut transaction associated to the bill.</p>
         */
        @JsonSetter(value = "Transaction", nulls = Nulls.SKIP)
        public Builder transaction(Optional<TransactionOutQueryRecord> transaction) {
            this.transaction = transaction;
            return this;
        }

        public Builder transaction(TransactionOutQueryRecord transaction) {
            this.transaction = Optional.ofNullable(transaction);
            return this;
        }

        public Builder transaction(Nullable<TransactionOutQueryRecord> transaction) {
            if (transaction.isNull()) {
                this.transaction = null;
            } else if (transaction.isEmpty()) {
                this.transaction = Optional.empty();
            } else {
                this.transaction = Optional.of(transaction.get());
            }
            return this;
        }

        @JsonSetter(value = "Vendor", nulls = Nulls.SKIP)
        public Builder vendor(Optional<VendorOutData> vendor) {
            this.vendor = vendor;
            return this;
        }

        public Builder vendor(VendorOutData vendor) {
            this.vendor = Optional.ofNullable(vendor);
            return this;
        }

        public Builder vendor(Nullable<VendorOutData> vendor) {
            if (vendor.isNull()) {
                this.vendor = null;
            } else if (vendor.isEmpty()) {
                this.vendor = Optional.empty();
            } else {
                this.vendor = Optional.of(vendor.get());
            }
            return this;
        }

        public BillQueryRecord2 build() {
            return new BillQueryRecord2(
                    accountingField1,
                    accountingField2,
                    additionalData,
                    batchNumber,
                    billApprovals,
                    billDate,
                    billEvents,
                    billItems,
                    billNumber,
                    comments,
                    createdAt,
                    discount,
                    documentsRef,
                    dueDate,
                    endDate,
                    entityId,
                    externalPaypointId,
                    frequency,
                    idBill,
                    lastUpdated,
                    lotNumber,
                    mode,
                    netAmount,
                    parentOrgId,
                    parentOrgName,
                    paymentId,
                    paymentMethod,
                    paylinkId,
                    paypointDbaname,
                    paypointEntryname,
                    paypointLegalname,
                    source,
                    status,
                    terms,
                    totalAmount,
                    transaction,
                    vendor,
                    additionalProperties);
        }
    }
}
