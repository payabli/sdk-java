/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PayabliPages.Builder.class)
public final class PayabliPages implements IPayabliPages {
    private final Optional<Map<String, Optional<Map<String, Object>>>> additionalData;

    private final Optional<List<PayabliCredentials>> credentials;

    private final Optional<OffsetDateTime> lastAccess;

    private final Optional<PageContent> pageContent;

    private final Optional<String> pageIdentifier;

    private final Optional<PageSetting> pageSettings;

    private final Optional<Integer> published;

    private final Optional<ReceiptContent> receiptContent;

    private final Optional<String> subdomain;

    private final Optional<Double> totalAmount;

    private final Optional<String> validationCode;

    private final Map<String, Object> additionalProperties;

    private PayabliPages(
            Optional<Map<String, Optional<Map<String, Object>>>> additionalData,
            Optional<List<PayabliCredentials>> credentials,
            Optional<OffsetDateTime> lastAccess,
            Optional<PageContent> pageContent,
            Optional<String> pageIdentifier,
            Optional<PageSetting> pageSettings,
            Optional<Integer> published,
            Optional<ReceiptContent> receiptContent,
            Optional<String> subdomain,
            Optional<Double> totalAmount,
            Optional<String> validationCode,
            Map<String, Object> additionalProperties) {
        this.additionalData = additionalData;
        this.credentials = credentials;
        this.lastAccess = lastAccess;
        this.pageContent = pageContent;
        this.pageIdentifier = pageIdentifier;
        this.pageSettings = pageSettings;
        this.published = published;
        this.receiptContent = receiptContent;
        this.subdomain = subdomain;
        this.totalAmount = totalAmount;
        this.validationCode = validationCode;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("AdditionalData")
    @java.lang.Override
    public Optional<Map<String, Optional<Map<String, Object>>>> getAdditionalData() {
        return additionalData;
    }

    /**
     * @return Array of credential objects with active services for the page
     */
    @JsonProperty("credentials")
    @java.lang.Override
    public Optional<List<PayabliCredentials>> getCredentials() {
        return credentials;
    }

    /**
     * @return Timestamp of last access to page structure
     */
    @JsonProperty("lastAccess")
    @java.lang.Override
    public Optional<OffsetDateTime> getLastAccess() {
        return lastAccess;
    }

    /**
     * @return Sections of page
     */
    @JsonProperty("pageContent")
    @java.lang.Override
    public Optional<PageContent> getPageContent() {
        return pageContent;
    }

    @JsonProperty("pageIdentifier")
    @java.lang.Override
    public Optional<String> getPageIdentifier() {
        return pageIdentifier;
    }

    /**
     * @return Settings of page
     */
    @JsonProperty("pageSettings")
    @java.lang.Override
    public Optional<PageSetting> getPageSettings() {
        return pageSettings;
    }

    /**
     * @return Flag indicating if page is active to accept payments. <code>0</code> for false, <code>1</code> for true.
     */
    @JsonProperty("published")
    @java.lang.Override
    public Optional<Integer> getPublished() {
        return published;
    }

    /**
     * @return Sections of payment receipt
     */
    @JsonProperty("receiptContent")
    @java.lang.Override
    public Optional<ReceiptContent> getReceiptContent() {
        return receiptContent;
    }

    /**
     * @return Page identifier. Must be unique in platform.
     */
    @JsonProperty("subdomain")
    @java.lang.Override
    public Optional<String> getSubdomain() {
        return subdomain;
    }

    /**
     * @return Total amount to pay in this page
     */
    @JsonProperty("totalAmount")
    @java.lang.Override
    public Optional<Double> getTotalAmount() {
        return totalAmount;
    }

    /**
     * @return Base64 encoded image of CAPTCHA associated to this page load
     */
    @JsonProperty("validationCode")
    @java.lang.Override
    public Optional<String> getValidationCode() {
        return validationCode;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PayabliPages && equalTo((PayabliPages) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PayabliPages other) {
        return additionalData.equals(other.additionalData)
                && credentials.equals(other.credentials)
                && lastAccess.equals(other.lastAccess)
                && pageContent.equals(other.pageContent)
                && pageIdentifier.equals(other.pageIdentifier)
                && pageSettings.equals(other.pageSettings)
                && published.equals(other.published)
                && receiptContent.equals(other.receiptContent)
                && subdomain.equals(other.subdomain)
                && totalAmount.equals(other.totalAmount)
                && validationCode.equals(other.validationCode);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.additionalData,
                this.credentials,
                this.lastAccess,
                this.pageContent,
                this.pageIdentifier,
                this.pageSettings,
                this.published,
                this.receiptContent,
                this.subdomain,
                this.totalAmount,
                this.validationCode);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, Optional<Map<String, Object>>>> additionalData = Optional.empty();

        private Optional<List<PayabliCredentials>> credentials = Optional.empty();

        private Optional<OffsetDateTime> lastAccess = Optional.empty();

        private Optional<PageContent> pageContent = Optional.empty();

        private Optional<String> pageIdentifier = Optional.empty();

        private Optional<PageSetting> pageSettings = Optional.empty();

        private Optional<Integer> published = Optional.empty();

        private Optional<ReceiptContent> receiptContent = Optional.empty();

        private Optional<String> subdomain = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<String> validationCode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PayabliPages other) {
            additionalData(other.getAdditionalData());
            credentials(other.getCredentials());
            lastAccess(other.getLastAccess());
            pageContent(other.getPageContent());
            pageIdentifier(other.getPageIdentifier());
            pageSettings(other.getPageSettings());
            published(other.getPublished());
            receiptContent(other.getReceiptContent());
            subdomain(other.getSubdomain());
            totalAmount(other.getTotalAmount());
            validationCode(other.getValidationCode());
            return this;
        }

        @JsonSetter(value = "AdditionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<Map<String, Optional<Map<String, Object>>>> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(Map<String, Optional<Map<String, Object>>> additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        /**
         * <p>Array of credential objects with active services for the page</p>
         */
        @JsonSetter(value = "credentials", nulls = Nulls.SKIP)
        public Builder credentials(Optional<List<PayabliCredentials>> credentials) {
            this.credentials = credentials;
            return this;
        }

        public Builder credentials(List<PayabliCredentials> credentials) {
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        /**
         * <p>Timestamp of last access to page structure</p>
         */
        @JsonSetter(value = "lastAccess", nulls = Nulls.SKIP)
        public Builder lastAccess(Optional<OffsetDateTime> lastAccess) {
            this.lastAccess = lastAccess;
            return this;
        }

        public Builder lastAccess(OffsetDateTime lastAccess) {
            this.lastAccess = Optional.ofNullable(lastAccess);
            return this;
        }

        /**
         * <p>Sections of page</p>
         */
        @JsonSetter(value = "pageContent", nulls = Nulls.SKIP)
        public Builder pageContent(Optional<PageContent> pageContent) {
            this.pageContent = pageContent;
            return this;
        }

        public Builder pageContent(PageContent pageContent) {
            this.pageContent = Optional.ofNullable(pageContent);
            return this;
        }

        @JsonSetter(value = "pageIdentifier", nulls = Nulls.SKIP)
        public Builder pageIdentifier(Optional<String> pageIdentifier) {
            this.pageIdentifier = pageIdentifier;
            return this;
        }

        public Builder pageIdentifier(String pageIdentifier) {
            this.pageIdentifier = Optional.ofNullable(pageIdentifier);
            return this;
        }

        /**
         * <p>Settings of page</p>
         */
        @JsonSetter(value = "pageSettings", nulls = Nulls.SKIP)
        public Builder pageSettings(Optional<PageSetting> pageSettings) {
            this.pageSettings = pageSettings;
            return this;
        }

        public Builder pageSettings(PageSetting pageSettings) {
            this.pageSettings = Optional.ofNullable(pageSettings);
            return this;
        }

        /**
         * <p>Flag indicating if page is active to accept payments. <code>0</code> for false, <code>1</code> for true.</p>
         */
        @JsonSetter(value = "published", nulls = Nulls.SKIP)
        public Builder published(Optional<Integer> published) {
            this.published = published;
            return this;
        }

        public Builder published(Integer published) {
            this.published = Optional.ofNullable(published);
            return this;
        }

        /**
         * <p>Sections of payment receipt</p>
         */
        @JsonSetter(value = "receiptContent", nulls = Nulls.SKIP)
        public Builder receiptContent(Optional<ReceiptContent> receiptContent) {
            this.receiptContent = receiptContent;
            return this;
        }

        public Builder receiptContent(ReceiptContent receiptContent) {
            this.receiptContent = Optional.ofNullable(receiptContent);
            return this;
        }

        /**
         * <p>Page identifier. Must be unique in platform.</p>
         */
        @JsonSetter(value = "subdomain", nulls = Nulls.SKIP)
        public Builder subdomain(Optional<String> subdomain) {
            this.subdomain = subdomain;
            return this;
        }

        public Builder subdomain(String subdomain) {
            this.subdomain = Optional.ofNullable(subdomain);
            return this;
        }

        /**
         * <p>Total amount to pay in this page</p>
         */
        @JsonSetter(value = "totalAmount", nulls = Nulls.SKIP)
        public Builder totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * <p>Base64 encoded image of CAPTCHA associated to this page load</p>
         */
        @JsonSetter(value = "validationCode", nulls = Nulls.SKIP)
        public Builder validationCode(Optional<String> validationCode) {
            this.validationCode = validationCode;
            return this;
        }

        public Builder validationCode(String validationCode) {
            this.validationCode = Optional.ofNullable(validationCode);
            return this;
        }

        public PayabliPages build() {
            return new PayabliPages(
                    additionalData,
                    credentials,
                    lastAccess,
                    pageContent,
                    pageIdentifier,
                    pageSettings,
                    published,
                    receiptContent,
                    subdomain,
                    totalAmount,
                    validationCode,
                    additionalProperties);
        }
    }
}
