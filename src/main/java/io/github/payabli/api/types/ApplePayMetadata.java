/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApplePayMetadata.Builder.class)
public final class ApplePayMetadata {
    private final Optional<Boolean> isFileAvailable;

    private final Optional<Boolean> isFileContentValid;

    private final Optional<String> redirectDomainName;

    private final Optional<String> redirectUrl;

    private final Optional<Integer> statusCode;

    private final Map<String, Object> additionalProperties;

    private ApplePayMetadata(
            Optional<Boolean> isFileAvailable,
            Optional<Boolean> isFileContentValid,
            Optional<String> redirectDomainName,
            Optional<String> redirectUrl,
            Optional<Integer> statusCode,
            Map<String, Object> additionalProperties) {
        this.isFileAvailable = isFileAvailable;
        this.isFileContentValid = isFileContentValid;
        this.redirectDomainName = redirectDomainName;
        this.redirectUrl = redirectUrl;
        this.statusCode = statusCode;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return When <code>true</code>, indicates whether the domain verification file is available at the expected path. When <code>false</code>, Payabli was unable to find the file at the expected path. If the file is missing, make sure it's hosted at the correct path: <code>/.well-known/apple-developer-merchantid-domain-association</code>
     */
    @JsonProperty("isFileAvailable")
    public Optional<Boolean> getIsFileAvailable() {
        return isFileAvailable;
    }

    /**
     * @return Indicates whether the domain verification file content is valid. If the file is invalid, try downloading it and hosting it again.
     */
    @JsonProperty("isFileContentValid")
    public Optional<Boolean> getIsFileContentValid() {
        return isFileContentValid;
    }

    /**
     * @return The domain name if the domain verification URL returns a redirect.
     */
    @JsonProperty("redirectDomainName")
    public Optional<String> getRedirectDomainName() {
        return redirectDomainName;
    }

    /**
     * @return If the domain verification URL is redirected, this is the URL it's redirected to.
     * For example, www.partner.com could redirect to www.partners-new-home-page.com. In this case, you should add www.partners-new-home-page.com as a domain instead of www.partner.com.
     */
    @JsonProperty("redirectUrl")
    public Optional<String> getRedirectUrl() {
        return redirectUrl;
    }

    /**
     * @return The status code return by the domain verification URL.
     */
    @JsonProperty("statusCode")
    public Optional<Integer> getStatusCode() {
        return statusCode;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApplePayMetadata && equalTo((ApplePayMetadata) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApplePayMetadata other) {
        return isFileAvailable.equals(other.isFileAvailable)
                && isFileContentValid.equals(other.isFileContentValid)
                && redirectDomainName.equals(other.redirectDomainName)
                && redirectUrl.equals(other.redirectUrl)
                && statusCode.equals(other.statusCode);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.isFileAvailable,
                this.isFileContentValid,
                this.redirectDomainName,
                this.redirectUrl,
                this.statusCode);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> isFileAvailable = Optional.empty();

        private Optional<Boolean> isFileContentValid = Optional.empty();

        private Optional<String> redirectDomainName = Optional.empty();

        private Optional<String> redirectUrl = Optional.empty();

        private Optional<Integer> statusCode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ApplePayMetadata other) {
            isFileAvailable(other.getIsFileAvailable());
            isFileContentValid(other.getIsFileContentValid());
            redirectDomainName(other.getRedirectDomainName());
            redirectUrl(other.getRedirectUrl());
            statusCode(other.getStatusCode());
            return this;
        }

        /**
         * <p>When <code>true</code>, indicates whether the domain verification file is available at the expected path. When <code>false</code>, Payabli was unable to find the file at the expected path. If the file is missing, make sure it's hosted at the correct path: <code>/.well-known/apple-developer-merchantid-domain-association</code></p>
         */
        @JsonSetter(value = "isFileAvailable", nulls = Nulls.SKIP)
        public Builder isFileAvailable(Optional<Boolean> isFileAvailable) {
            this.isFileAvailable = isFileAvailable;
            return this;
        }

        public Builder isFileAvailable(Boolean isFileAvailable) {
            this.isFileAvailable = Optional.ofNullable(isFileAvailable);
            return this;
        }

        /**
         * <p>Indicates whether the domain verification file content is valid. If the file is invalid, try downloading it and hosting it again.</p>
         */
        @JsonSetter(value = "isFileContentValid", nulls = Nulls.SKIP)
        public Builder isFileContentValid(Optional<Boolean> isFileContentValid) {
            this.isFileContentValid = isFileContentValid;
            return this;
        }

        public Builder isFileContentValid(Boolean isFileContentValid) {
            this.isFileContentValid = Optional.ofNullable(isFileContentValid);
            return this;
        }

        /**
         * <p>The domain name if the domain verification URL returns a redirect.</p>
         */
        @JsonSetter(value = "redirectDomainName", nulls = Nulls.SKIP)
        public Builder redirectDomainName(Optional<String> redirectDomainName) {
            this.redirectDomainName = redirectDomainName;
            return this;
        }

        public Builder redirectDomainName(String redirectDomainName) {
            this.redirectDomainName = Optional.ofNullable(redirectDomainName);
            return this;
        }

        /**
         * <p>If the domain verification URL is redirected, this is the URL it's redirected to.
         * For example, www.partner.com could redirect to www.partners-new-home-page.com. In this case, you should add www.partners-new-home-page.com as a domain instead of www.partner.com.</p>
         */
        @JsonSetter(value = "redirectUrl", nulls = Nulls.SKIP)
        public Builder redirectUrl(Optional<String> redirectUrl) {
            this.redirectUrl = redirectUrl;
            return this;
        }

        public Builder redirectUrl(String redirectUrl) {
            this.redirectUrl = Optional.ofNullable(redirectUrl);
            return this;
        }

        /**
         * <p>The status code return by the domain verification URL.</p>
         */
        @JsonSetter(value = "statusCode", nulls = Nulls.SKIP)
        public Builder statusCode(Optional<Integer> statusCode) {
            this.statusCode = statusCode;
            return this;
        }

        public Builder statusCode(Integer statusCode) {
            this.statusCode = Optional.ofNullable(statusCode);
            return this;
        }

        public ApplePayMetadata build() {
            return new ApplePayMetadata(
                    isFileAvailable,
                    isFileContentValid,
                    redirectDomainName,
                    redirectUrl,
                    statusCode,
                    additionalProperties);
        }
    }
}
