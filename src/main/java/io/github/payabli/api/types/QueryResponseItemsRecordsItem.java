/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryResponseItemsRecordsItem.Builder.class)
public final class QueryResponseItemsRecordsItem {
    private final Optional<LineItem> lineItem;

    private final Optional<String> parentOrgName;

    private final Optional<String> paypointDbaname;

    private final Optional<String> paypointEntryname;

    private final Optional<String> paypointLegalname;

    private final Map<String, Object> additionalProperties;

    private QueryResponseItemsRecordsItem(
            Optional<LineItem> lineItem,
            Optional<String> parentOrgName,
            Optional<String> paypointDbaname,
            Optional<String> paypointEntryname,
            Optional<String> paypointLegalname,
            Map<String, Object> additionalProperties) {
        this.lineItem = lineItem;
        this.parentOrgName = parentOrgName;
        this.paypointDbaname = paypointDbaname;
        this.paypointEntryname = paypointEntryname;
        this.paypointLegalname = paypointLegalname;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("LineItem")
    public Optional<LineItem> getLineItem() {
        return lineItem;
    }

    @JsonProperty("ParentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    /**
     * @return The paypoint's DBA name.
     */
    @JsonProperty("PaypointDbaname")
    public Optional<String> getPaypointDbaname() {
        return paypointDbaname;
    }

    /**
     * @return The paypoint's entry name (entrypoint).
     */
    @JsonProperty("PaypointEntryname")
    public Optional<String> getPaypointEntryname() {
        return paypointEntryname;
    }

    /**
     * @return the Paypoint's legal name.
     */
    @JsonProperty("PaypointLegalname")
    public Optional<String> getPaypointLegalname() {
        return paypointLegalname;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryResponseItemsRecordsItem && equalTo((QueryResponseItemsRecordsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryResponseItemsRecordsItem other) {
        return lineItem.equals(other.lineItem)
                && parentOrgName.equals(other.parentOrgName)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointEntryname.equals(other.paypointEntryname)
                && paypointLegalname.equals(other.paypointLegalname);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.lineItem,
                this.parentOrgName,
                this.paypointDbaname,
                this.paypointEntryname,
                this.paypointLegalname);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<LineItem> lineItem = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> paypointEntryname = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryResponseItemsRecordsItem other) {
            lineItem(other.getLineItem());
            parentOrgName(other.getParentOrgName());
            paypointDbaname(other.getPaypointDbaname());
            paypointEntryname(other.getPaypointEntryname());
            paypointLegalname(other.getPaypointLegalname());
            return this;
        }

        @JsonSetter(value = "LineItem", nulls = Nulls.SKIP)
        public Builder lineItem(Optional<LineItem> lineItem) {
            this.lineItem = lineItem;
            return this;
        }

        public Builder lineItem(LineItem lineItem) {
            this.lineItem = Optional.ofNullable(lineItem);
            return this;
        }

        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        /**
         * <p>The paypoint's DBA name.</p>
         */
        @JsonSetter(value = "PaypointDbaname", nulls = Nulls.SKIP)
        public Builder paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        public Builder paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        /**
         * <p>The paypoint's entry name (entrypoint).</p>
         */
        @JsonSetter(value = "PaypointEntryname", nulls = Nulls.SKIP)
        public Builder paypointEntryname(Optional<String> paypointEntryname) {
            this.paypointEntryname = paypointEntryname;
            return this;
        }

        public Builder paypointEntryname(String paypointEntryname) {
            this.paypointEntryname = Optional.ofNullable(paypointEntryname);
            return this;
        }

        /**
         * <p>the Paypoint's legal name.</p>
         */
        @JsonSetter(value = "PaypointLegalname", nulls = Nulls.SKIP)
        public Builder paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        public Builder paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        public QueryResponseItemsRecordsItem build() {
            return new QueryResponseItemsRecordsItem(
                    lineItem,
                    parentOrgName,
                    paypointDbaname,
                    paypointEntryname,
                    paypointLegalname,
                    additionalProperties);
        }
    }
}
