/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryResponseSettlementsSummary.Builder.class)
public final class QueryResponseSettlementsSummary {
    private final Optional<Double> heldAmount;

    private final Optional<String> pageidentifier;

    private final Optional<Integer> pageSize;

    private final Optional<Double> refunds;

    private final Optional<Double> serviceFees;

    private final Optional<Double> totalAmount;

    private final Optional<Double> totalNetAmount;

    private final Optional<Integer> totalPages;

    private final Optional<Integer> totalRecords;

    private final Optional<Double> transferAmount;

    private final Map<String, Object> additionalProperties;

    private QueryResponseSettlementsSummary(
            Optional<Double> heldAmount,
            Optional<String> pageidentifier,
            Optional<Integer> pageSize,
            Optional<Double> refunds,
            Optional<Double> serviceFees,
            Optional<Double> totalAmount,
            Optional<Double> totalNetAmount,
            Optional<Integer> totalPages,
            Optional<Integer> totalRecords,
            Optional<Double> transferAmount,
            Map<String, Object> additionalProperties) {
        this.heldAmount = heldAmount;
        this.pageidentifier = pageidentifier;
        this.pageSize = pageSize;
        this.refunds = refunds;
        this.serviceFees = serviceFees;
        this.totalAmount = totalAmount;
        this.totalNetAmount = totalNetAmount;
        this.totalPages = totalPages;
        this.totalRecords = totalRecords;
        this.transferAmount = transferAmount;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Funds being held for fraud or risk concerns.
     */
    @JsonProperty("heldAmount")
    public Optional<Double> getHeldAmount() {
        return heldAmount;
    }

    @JsonProperty("pageidentifier")
    public Optional<String> getPageidentifier() {
        return pageidentifier;
    }

    /**
     * @return Number of records per page.
     */
    @JsonProperty("pageSize")
    public Optional<Integer> getPageSize() {
        return pageSize;
    }

    /**
     * @return Total refunds deducted from the transfer.
     */
    @JsonProperty("refunds")
    public Optional<Double> getRefunds() {
        return refunds;
    }

    /**
     * @return Service fees are any pass-through fees charged to the customer at the time of payment. These aren't transferred to the merchant when the batch is transferred and funded.
     */
    @JsonProperty("serviceFees")
    public Optional<Double> getServiceFees() {
        return serviceFees;
    }

    /**
     * @return The total sum of the settlements in the response.
     */
    @JsonProperty("totalAmount")
    public Optional<Double> getTotalAmount() {
        return totalAmount;
    }

    /**
     * @return The total sum of the settlements in the response.
     */
    @JsonProperty("totalNetAmount")
    public Optional<Double> getTotalNetAmount() {
        return totalNetAmount;
    }

    /**
     * @return Number of pages in the response.
     */
    @JsonProperty("totalPages")
    public Optional<Integer> getTotalPages() {
        return totalPages;
    }

    /**
     * @return Number of records in the response.
     */
    @JsonProperty("totalRecords")
    public Optional<Integer> getTotalRecords() {
        return totalRecords;
    }

    /**
     * @return The transfer amount is the net batch amount plus or minus any returns, refunds, billing and fees items, chargebacks, adjustments, and third party payments. This is the amount from the batch that's transferred to the merchant bank account.
     */
    @JsonProperty("transferAmount")
    public Optional<Double> getTransferAmount() {
        return transferAmount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryResponseSettlementsSummary && equalTo((QueryResponseSettlementsSummary) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryResponseSettlementsSummary other) {
        return heldAmount.equals(other.heldAmount)
                && pageidentifier.equals(other.pageidentifier)
                && pageSize.equals(other.pageSize)
                && refunds.equals(other.refunds)
                && serviceFees.equals(other.serviceFees)
                && totalAmount.equals(other.totalAmount)
                && totalNetAmount.equals(other.totalNetAmount)
                && totalPages.equals(other.totalPages)
                && totalRecords.equals(other.totalRecords)
                && transferAmount.equals(other.transferAmount);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.heldAmount,
                this.pageidentifier,
                this.pageSize,
                this.refunds,
                this.serviceFees,
                this.totalAmount,
                this.totalNetAmount,
                this.totalPages,
                this.totalRecords,
                this.transferAmount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Double> heldAmount = Optional.empty();

        private Optional<String> pageidentifier = Optional.empty();

        private Optional<Integer> pageSize = Optional.empty();

        private Optional<Double> refunds = Optional.empty();

        private Optional<Double> serviceFees = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<Double> totalNetAmount = Optional.empty();

        private Optional<Integer> totalPages = Optional.empty();

        private Optional<Integer> totalRecords = Optional.empty();

        private Optional<Double> transferAmount = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryResponseSettlementsSummary other) {
            heldAmount(other.getHeldAmount());
            pageidentifier(other.getPageidentifier());
            pageSize(other.getPageSize());
            refunds(other.getRefunds());
            serviceFees(other.getServiceFees());
            totalAmount(other.getTotalAmount());
            totalNetAmount(other.getTotalNetAmount());
            totalPages(other.getTotalPages());
            totalRecords(other.getTotalRecords());
            transferAmount(other.getTransferAmount());
            return this;
        }

        /**
         * <p>Funds being held for fraud or risk concerns.</p>
         */
        @JsonSetter(value = "heldAmount", nulls = Nulls.SKIP)
        public Builder heldAmount(Optional<Double> heldAmount) {
            this.heldAmount = heldAmount;
            return this;
        }

        public Builder heldAmount(Double heldAmount) {
            this.heldAmount = Optional.ofNullable(heldAmount);
            return this;
        }

        @JsonSetter(value = "pageidentifier", nulls = Nulls.SKIP)
        public Builder pageidentifier(Optional<String> pageidentifier) {
            this.pageidentifier = pageidentifier;
            return this;
        }

        public Builder pageidentifier(String pageidentifier) {
            this.pageidentifier = Optional.ofNullable(pageidentifier);
            return this;
        }

        /**
         * <p>Number of records per page.</p>
         */
        @JsonSetter(value = "pageSize", nulls = Nulls.SKIP)
        public Builder pageSize(Optional<Integer> pageSize) {
            this.pageSize = pageSize;
            return this;
        }

        public Builder pageSize(Integer pageSize) {
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * <p>Total refunds deducted from the transfer.</p>
         */
        @JsonSetter(value = "refunds", nulls = Nulls.SKIP)
        public Builder refunds(Optional<Double> refunds) {
            this.refunds = refunds;
            return this;
        }

        public Builder refunds(Double refunds) {
            this.refunds = Optional.ofNullable(refunds);
            return this;
        }

        /**
         * <p>Service fees are any pass-through fees charged to the customer at the time of payment. These aren't transferred to the merchant when the batch is transferred and funded.</p>
         */
        @JsonSetter(value = "serviceFees", nulls = Nulls.SKIP)
        public Builder serviceFees(Optional<Double> serviceFees) {
            this.serviceFees = serviceFees;
            return this;
        }

        public Builder serviceFees(Double serviceFees) {
            this.serviceFees = Optional.ofNullable(serviceFees);
            return this;
        }

        /**
         * <p>The total sum of the settlements in the response.</p>
         */
        @JsonSetter(value = "totalAmount", nulls = Nulls.SKIP)
        public Builder totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * <p>The total sum of the settlements in the response.</p>
         */
        @JsonSetter(value = "totalNetAmount", nulls = Nulls.SKIP)
        public Builder totalNetAmount(Optional<Double> totalNetAmount) {
            this.totalNetAmount = totalNetAmount;
            return this;
        }

        public Builder totalNetAmount(Double totalNetAmount) {
            this.totalNetAmount = Optional.ofNullable(totalNetAmount);
            return this;
        }

        /**
         * <p>Number of pages in the response.</p>
         */
        @JsonSetter(value = "totalPages", nulls = Nulls.SKIP)
        public Builder totalPages(Optional<Integer> totalPages) {
            this.totalPages = totalPages;
            return this;
        }

        public Builder totalPages(Integer totalPages) {
            this.totalPages = Optional.ofNullable(totalPages);
            return this;
        }

        /**
         * <p>Number of records in the response.</p>
         */
        @JsonSetter(value = "totalRecords", nulls = Nulls.SKIP)
        public Builder totalRecords(Optional<Integer> totalRecords) {
            this.totalRecords = totalRecords;
            return this;
        }

        public Builder totalRecords(Integer totalRecords) {
            this.totalRecords = Optional.ofNullable(totalRecords);
            return this;
        }

        /**
         * <p>The transfer amount is the net batch amount plus or minus any returns, refunds, billing and fees items, chargebacks, adjustments, and third party payments. This is the amount from the batch that's transferred to the merchant bank account.</p>
         */
        @JsonSetter(value = "transferAmount", nulls = Nulls.SKIP)
        public Builder transferAmount(Optional<Double> transferAmount) {
            this.transferAmount = transferAmount;
            return this;
        }

        public Builder transferAmount(Double transferAmount) {
            this.transferAmount = Optional.ofNullable(transferAmount);
            return this;
        }

        public QueryResponseSettlementsSummary build() {
            return new QueryResponseSettlementsSummary(
                    heldAmount,
                    pageidentifier,
                    pageSize,
                    refunds,
                    serviceFees,
                    totalAmount,
                    totalNetAmount,
                    totalPages,
                    totalRecords,
                    transferAmount,
                    additionalProperties);
        }
    }
}
