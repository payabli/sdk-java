/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PayMethodBodyAllFields.Builder.class)
public final class PayMethodBodyAllFields {
    private final String achAccount;

    private final Optional<Achaccounttype> achAccountType;

    private final Optional<String> achCode;

    private final String achHolder;

    private final String achRouting;

    private final Optional<String> cardcvv;

    private final Optional<String> cardexp;

    private final Optional<String> cardHolder;

    private final Optional<String> cardnumber;

    private final Optional<String> cardzip;

    private final Optional<String> device;

    private final Optional<String> initator;

    private final Optional<Methodall> method;

    private final Optional<Boolean> saveIfSuccess;

    private final Optional<String> storedMethodId;

    private final Optional<String> storedMethodUsageType;

    private final Map<String, Object> additionalProperties;

    private PayMethodBodyAllFields(
            String achAccount,
            Optional<Achaccounttype> achAccountType,
            Optional<String> achCode,
            String achHolder,
            String achRouting,
            Optional<String> cardcvv,
            Optional<String> cardexp,
            Optional<String> cardHolder,
            Optional<String> cardnumber,
            Optional<String> cardzip,
            Optional<String> device,
            Optional<String> initator,
            Optional<Methodall> method,
            Optional<Boolean> saveIfSuccess,
            Optional<String> storedMethodId,
            Optional<String> storedMethodUsageType,
            Map<String, Object> additionalProperties) {
        this.achAccount = achAccount;
        this.achAccountType = achAccountType;
        this.achCode = achCode;
        this.achHolder = achHolder;
        this.achRouting = achRouting;
        this.cardcvv = cardcvv;
        this.cardexp = cardexp;
        this.cardHolder = cardHolder;
        this.cardnumber = cardnumber;
        this.cardzip = cardzip;
        this.device = device;
        this.initator = initator;
        this.method = method;
        this.saveIfSuccess = saveIfSuccess;
        this.storedMethodId = storedMethodId;
        this.storedMethodUsageType = storedMethodUsageType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Bank account number. This field is <strong>required</strong> when method = 'ach'.
     */
    @JsonProperty("achAccount")
    public String getAchAccount() {
        return achAccount;
    }

    @JsonProperty("achAccountType")
    public Optional<Achaccounttype> getAchAccountType() {
        return achAccountType;
    }

    @JsonProperty("achCode")
    public Optional<String> getAchCode() {
        return achCode;
    }

    @JsonProperty("achHolder")
    public String getAchHolder() {
        return achHolder;
    }

    /**
     * @return ABA/routing number of Bank account. This field is <strong>required</strong> when method = 'ach'.
     */
    @JsonProperty("achRouting")
    public String getAchRouting() {
        return achRouting;
    }

    @JsonProperty("cardcvv")
    public Optional<String> getCardcvv() {
        return cardcvv;
    }

    @JsonProperty("cardexp")
    public Optional<String> getCardexp() {
        return cardexp;
    }

    @JsonProperty("cardHolder")
    public Optional<String> getCardHolder() {
        return cardHolder;
    }

    @JsonProperty("cardnumber")
    public Optional<String> getCardnumber() {
        return cardnumber;
    }

    @JsonProperty("cardzip")
    public Optional<String> getCardzip() {
        return cardzip;
    }

    @JsonProperty("device")
    public Optional<String> getDevice() {
        return device;
    }

    @JsonProperty("initator")
    public Optional<String> getInitator() {
        return initator;
    }

    @JsonProperty("method")
    public Optional<Methodall> getMethod() {
        return method;
    }

    @JsonProperty("saveIfSuccess")
    public Optional<Boolean> getSaveIfSuccess() {
        return saveIfSuccess;
    }

    @JsonProperty("storedMethodId")
    public Optional<String> getStoredMethodId() {
        return storedMethodId;
    }

    @JsonProperty("storedMethodUsageType")
    public Optional<String> getStoredMethodUsageType() {
        return storedMethodUsageType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PayMethodBodyAllFields && equalTo((PayMethodBodyAllFields) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PayMethodBodyAllFields other) {
        return achAccount.equals(other.achAccount)
                && achAccountType.equals(other.achAccountType)
                && achCode.equals(other.achCode)
                && achHolder.equals(other.achHolder)
                && achRouting.equals(other.achRouting)
                && cardcvv.equals(other.cardcvv)
                && cardexp.equals(other.cardexp)
                && cardHolder.equals(other.cardHolder)
                && cardnumber.equals(other.cardnumber)
                && cardzip.equals(other.cardzip)
                && device.equals(other.device)
                && initator.equals(other.initator)
                && method.equals(other.method)
                && saveIfSuccess.equals(other.saveIfSuccess)
                && storedMethodId.equals(other.storedMethodId)
                && storedMethodUsageType.equals(other.storedMethodUsageType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.achAccount,
                this.achAccountType,
                this.achCode,
                this.achHolder,
                this.achRouting,
                this.cardcvv,
                this.cardexp,
                this.cardHolder,
                this.cardnumber,
                this.cardzip,
                this.device,
                this.initator,
                this.method,
                this.saveIfSuccess,
                this.storedMethodId,
                this.storedMethodUsageType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AchAccountStage builder() {
        return new Builder();
    }

    public interface AchAccountStage {
        /**
         * <p>Bank account number. This field is <strong>required</strong> when method = 'ach'.</p>
         */
        AchHolderStage achAccount(@NotNull String achAccount);

        Builder from(PayMethodBodyAllFields other);
    }

    public interface AchHolderStage {
        AchRoutingStage achHolder(@NotNull String achHolder);
    }

    public interface AchRoutingStage {
        /**
         * <p>ABA/routing number of Bank account. This field is <strong>required</strong> when method = 'ach'.</p>
         */
        _FinalStage achRouting(@NotNull String achRouting);
    }

    public interface _FinalStage {
        PayMethodBodyAllFields build();

        _FinalStage achAccountType(Optional<Achaccounttype> achAccountType);

        _FinalStage achAccountType(Achaccounttype achAccountType);

        _FinalStage achCode(Optional<String> achCode);

        _FinalStage achCode(String achCode);

        _FinalStage cardcvv(Optional<String> cardcvv);

        _FinalStage cardcvv(String cardcvv);

        _FinalStage cardexp(Optional<String> cardexp);

        _FinalStage cardexp(String cardexp);

        _FinalStage cardHolder(Optional<String> cardHolder);

        _FinalStage cardHolder(String cardHolder);

        _FinalStage cardnumber(Optional<String> cardnumber);

        _FinalStage cardnumber(String cardnumber);

        _FinalStage cardzip(Optional<String> cardzip);

        _FinalStage cardzip(String cardzip);

        _FinalStage device(Optional<String> device);

        _FinalStage device(String device);

        _FinalStage initator(Optional<String> initator);

        _FinalStage initator(String initator);

        _FinalStage method(Optional<Methodall> method);

        _FinalStage method(Methodall method);

        _FinalStage saveIfSuccess(Optional<Boolean> saveIfSuccess);

        _FinalStage saveIfSuccess(Boolean saveIfSuccess);

        _FinalStage storedMethodId(Optional<String> storedMethodId);

        _FinalStage storedMethodId(String storedMethodId);

        _FinalStage storedMethodUsageType(Optional<String> storedMethodUsageType);

        _FinalStage storedMethodUsageType(String storedMethodUsageType);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AchAccountStage, AchHolderStage, AchRoutingStage, _FinalStage {
        private String achAccount;

        private String achHolder;

        private String achRouting;

        private Optional<String> storedMethodUsageType = Optional.empty();

        private Optional<String> storedMethodId = Optional.empty();

        private Optional<Boolean> saveIfSuccess = Optional.empty();

        private Optional<Methodall> method = Optional.empty();

        private Optional<String> initator = Optional.empty();

        private Optional<String> device = Optional.empty();

        private Optional<String> cardzip = Optional.empty();

        private Optional<String> cardnumber = Optional.empty();

        private Optional<String> cardHolder = Optional.empty();

        private Optional<String> cardexp = Optional.empty();

        private Optional<String> cardcvv = Optional.empty();

        private Optional<String> achCode = Optional.empty();

        private Optional<Achaccounttype> achAccountType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PayMethodBodyAllFields other) {
            achAccount(other.getAchAccount());
            achAccountType(other.getAchAccountType());
            achCode(other.getAchCode());
            achHolder(other.getAchHolder());
            achRouting(other.getAchRouting());
            cardcvv(other.getCardcvv());
            cardexp(other.getCardexp());
            cardHolder(other.getCardHolder());
            cardnumber(other.getCardnumber());
            cardzip(other.getCardzip());
            device(other.getDevice());
            initator(other.getInitator());
            method(other.getMethod());
            saveIfSuccess(other.getSaveIfSuccess());
            storedMethodId(other.getStoredMethodId());
            storedMethodUsageType(other.getStoredMethodUsageType());
            return this;
        }

        /**
         * <p>Bank account number. This field is <strong>required</strong> when method = 'ach'.</p>
         * <p>Bank account number. This field is <strong>required</strong> when method = 'ach'.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("achAccount")
        public AchHolderStage achAccount(@NotNull String achAccount) {
            this.achAccount = Objects.requireNonNull(achAccount, "achAccount must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("achHolder")
        public AchRoutingStage achHolder(@NotNull String achHolder) {
            this.achHolder = Objects.requireNonNull(achHolder, "achHolder must not be null");
            return this;
        }

        /**
         * <p>ABA/routing number of Bank account. This field is <strong>required</strong> when method = 'ach'.</p>
         * <p>ABA/routing number of Bank account. This field is <strong>required</strong> when method = 'ach'.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("achRouting")
        public _FinalStage achRouting(@NotNull String achRouting) {
            this.achRouting = Objects.requireNonNull(achRouting, "achRouting must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage storedMethodUsageType(String storedMethodUsageType) {
            this.storedMethodUsageType = Optional.ofNullable(storedMethodUsageType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "storedMethodUsageType", nulls = Nulls.SKIP)
        public _FinalStage storedMethodUsageType(Optional<String> storedMethodUsageType) {
            this.storedMethodUsageType = storedMethodUsageType;
            return this;
        }

        @java.lang.Override
        public _FinalStage storedMethodId(String storedMethodId) {
            this.storedMethodId = Optional.ofNullable(storedMethodId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "storedMethodId", nulls = Nulls.SKIP)
        public _FinalStage storedMethodId(Optional<String> storedMethodId) {
            this.storedMethodId = storedMethodId;
            return this;
        }

        @java.lang.Override
        public _FinalStage saveIfSuccess(Boolean saveIfSuccess) {
            this.saveIfSuccess = Optional.ofNullable(saveIfSuccess);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "saveIfSuccess", nulls = Nulls.SKIP)
        public _FinalStage saveIfSuccess(Optional<Boolean> saveIfSuccess) {
            this.saveIfSuccess = saveIfSuccess;
            return this;
        }

        @java.lang.Override
        public _FinalStage method(Methodall method) {
            this.method = Optional.ofNullable(method);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "method", nulls = Nulls.SKIP)
        public _FinalStage method(Optional<Methodall> method) {
            this.method = method;
            return this;
        }

        @java.lang.Override
        public _FinalStage initator(String initator) {
            this.initator = Optional.ofNullable(initator);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "initator", nulls = Nulls.SKIP)
        public _FinalStage initator(Optional<String> initator) {
            this.initator = initator;
            return this;
        }

        @java.lang.Override
        public _FinalStage device(String device) {
            this.device = Optional.ofNullable(device);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "device", nulls = Nulls.SKIP)
        public _FinalStage device(Optional<String> device) {
            this.device = device;
            return this;
        }

        @java.lang.Override
        public _FinalStage cardzip(String cardzip) {
            this.cardzip = Optional.ofNullable(cardzip);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "cardzip", nulls = Nulls.SKIP)
        public _FinalStage cardzip(Optional<String> cardzip) {
            this.cardzip = cardzip;
            return this;
        }

        @java.lang.Override
        public _FinalStage cardnumber(String cardnumber) {
            this.cardnumber = Optional.ofNullable(cardnumber);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "cardnumber", nulls = Nulls.SKIP)
        public _FinalStage cardnumber(Optional<String> cardnumber) {
            this.cardnumber = cardnumber;
            return this;
        }

        @java.lang.Override
        public _FinalStage cardHolder(String cardHolder) {
            this.cardHolder = Optional.ofNullable(cardHolder);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "cardHolder", nulls = Nulls.SKIP)
        public _FinalStage cardHolder(Optional<String> cardHolder) {
            this.cardHolder = cardHolder;
            return this;
        }

        @java.lang.Override
        public _FinalStage cardexp(String cardexp) {
            this.cardexp = Optional.ofNullable(cardexp);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "cardexp", nulls = Nulls.SKIP)
        public _FinalStage cardexp(Optional<String> cardexp) {
            this.cardexp = cardexp;
            return this;
        }

        @java.lang.Override
        public _FinalStage cardcvv(String cardcvv) {
            this.cardcvv = Optional.ofNullable(cardcvv);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "cardcvv", nulls = Nulls.SKIP)
        public _FinalStage cardcvv(Optional<String> cardcvv) {
            this.cardcvv = cardcvv;
            return this;
        }

        @java.lang.Override
        public _FinalStage achCode(String achCode) {
            this.achCode = Optional.ofNullable(achCode);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "achCode", nulls = Nulls.SKIP)
        public _FinalStage achCode(Optional<String> achCode) {
            this.achCode = achCode;
            return this;
        }

        @java.lang.Override
        public _FinalStage achAccountType(Achaccounttype achAccountType) {
            this.achAccountType = Optional.ofNullable(achAccountType);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "achAccountType", nulls = Nulls.SKIP)
        public _FinalStage achAccountType(Optional<Achaccounttype> achAccountType) {
            this.achAccountType = achAccountType;
            return this;
        }

        @java.lang.Override
        public PayMethodBodyAllFields build() {
            return new PayMethodBodyAllFields(
                    achAccount,
                    achAccountType,
                    achCode,
                    achHolder,
                    achRouting,
                    cardcvv,
                    cardexp,
                    cardHolder,
                    cardnumber,
                    cardzip,
                    device,
                    initator,
                    method,
                    saveIfSuccess,
                    storedMethodId,
                    storedMethodUsageType,
                    additionalProperties);
        }
    }
}
