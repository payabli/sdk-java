/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BillingFeeDetail.Builder.class)
public final class BillingFeeDetail {
    private final Optional<String> billableEvent;

    private final Optional<String> service;

    private final Optional<String> eventId;

    private final Optional<String> description;

    private final Optional<String> category;

    private final Optional<Double> fixPrice;

    private final Optional<Double> floatPrice;

    private final Optional<Double> billableAmount;

    private final Optional<Double> billAmount;

    private final Optional<String> frequency;

    private final Optional<String> serviceGroup;

    private final Map<String, Object> additionalProperties;

    private BillingFeeDetail(
            Optional<String> billableEvent,
            Optional<String> service,
            Optional<String> eventId,
            Optional<String> description,
            Optional<String> category,
            Optional<Double> fixPrice,
            Optional<Double> floatPrice,
            Optional<Double> billableAmount,
            Optional<Double> billAmount,
            Optional<String> frequency,
            Optional<String> serviceGroup,
            Map<String, Object> additionalProperties) {
        this.billableEvent = billableEvent;
        this.service = service;
        this.eventId = eventId;
        this.description = description;
        this.category = category;
        this.fixPrice = fixPrice;
        this.floatPrice = floatPrice;
        this.billableAmount = billableAmount;
        this.billAmount = billAmount;
        this.frequency = frequency;
        this.serviceGroup = serviceGroup;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("billableEvent")
    public Optional<String> getBillableEvent() {
        return billableEvent;
    }

    @JsonProperty("service")
    public Optional<String> getService() {
        return service;
    }

    @JsonProperty("eventId")
    public Optional<String> getEventId() {
        return eventId;
    }

    /**
     * @return Description of the billing fee
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return Category of the billing fee
     */
    @JsonProperty("category")
    public Optional<String> getCategory() {
        return category;
    }

    /**
     * @return Fixed price component of the fee
     */
    @JsonProperty("fixPrice")
    public Optional<Double> getFixPrice() {
        return fixPrice;
    }

    /**
     * @return Percentage component of the fee
     */
    @JsonProperty("floatPrice")
    public Optional<Double> getFloatPrice() {
        return floatPrice;
    }

    /**
     * @return Amount eligible for the fee
     */
    @JsonProperty("billableAmount")
    public Optional<Double> getBillableAmount() {
        return billableAmount;
    }

    /**
     * @return Total fee amount charged
     */
    @JsonProperty("billAmount")
    public Optional<Double> getBillAmount() {
        return billAmount;
    }

    @JsonProperty("frequency")
    public Optional<String> getFrequency() {
        return frequency;
    }

    @JsonProperty("serviceGroup")
    public Optional<String> getServiceGroup() {
        return serviceGroup;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BillingFeeDetail && equalTo((BillingFeeDetail) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BillingFeeDetail other) {
        return billableEvent.equals(other.billableEvent)
                && service.equals(other.service)
                && eventId.equals(other.eventId)
                && description.equals(other.description)
                && category.equals(other.category)
                && fixPrice.equals(other.fixPrice)
                && floatPrice.equals(other.floatPrice)
                && billableAmount.equals(other.billableAmount)
                && billAmount.equals(other.billAmount)
                && frequency.equals(other.frequency)
                && serviceGroup.equals(other.serviceGroup);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.billableEvent,
                this.service,
                this.eventId,
                this.description,
                this.category,
                this.fixPrice,
                this.floatPrice,
                this.billableAmount,
                this.billAmount,
                this.frequency,
                this.serviceGroup);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> billableEvent = Optional.empty();

        private Optional<String> service = Optional.empty();

        private Optional<String> eventId = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> category = Optional.empty();

        private Optional<Double> fixPrice = Optional.empty();

        private Optional<Double> floatPrice = Optional.empty();

        private Optional<Double> billableAmount = Optional.empty();

        private Optional<Double> billAmount = Optional.empty();

        private Optional<String> frequency = Optional.empty();

        private Optional<String> serviceGroup = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BillingFeeDetail other) {
            billableEvent(other.getBillableEvent());
            service(other.getService());
            eventId(other.getEventId());
            description(other.getDescription());
            category(other.getCategory());
            fixPrice(other.getFixPrice());
            floatPrice(other.getFloatPrice());
            billableAmount(other.getBillableAmount());
            billAmount(other.getBillAmount());
            frequency(other.getFrequency());
            serviceGroup(other.getServiceGroup());
            return this;
        }

        @JsonSetter(value = "billableEvent", nulls = Nulls.SKIP)
        public Builder billableEvent(Optional<String> billableEvent) {
            this.billableEvent = billableEvent;
            return this;
        }

        public Builder billableEvent(String billableEvent) {
            this.billableEvent = Optional.ofNullable(billableEvent);
            return this;
        }

        @JsonSetter(value = "service", nulls = Nulls.SKIP)
        public Builder service(Optional<String> service) {
            this.service = service;
            return this;
        }

        public Builder service(String service) {
            this.service = Optional.ofNullable(service);
            return this;
        }

        @JsonSetter(value = "eventId", nulls = Nulls.SKIP)
        public Builder eventId(Optional<String> eventId) {
            this.eventId = eventId;
            return this;
        }

        public Builder eventId(String eventId) {
            this.eventId = Optional.ofNullable(eventId);
            return this;
        }

        /**
         * <p>Description of the billing fee</p>
         */
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>Category of the billing fee</p>
         */
        @JsonSetter(value = "category", nulls = Nulls.SKIP)
        public Builder category(Optional<String> category) {
            this.category = category;
            return this;
        }

        public Builder category(String category) {
            this.category = Optional.ofNullable(category);
            return this;
        }

        /**
         * <p>Fixed price component of the fee</p>
         */
        @JsonSetter(value = "fixPrice", nulls = Nulls.SKIP)
        public Builder fixPrice(Optional<Double> fixPrice) {
            this.fixPrice = fixPrice;
            return this;
        }

        public Builder fixPrice(Double fixPrice) {
            this.fixPrice = Optional.ofNullable(fixPrice);
            return this;
        }

        /**
         * <p>Percentage component of the fee</p>
         */
        @JsonSetter(value = "floatPrice", nulls = Nulls.SKIP)
        public Builder floatPrice(Optional<Double> floatPrice) {
            this.floatPrice = floatPrice;
            return this;
        }

        public Builder floatPrice(Double floatPrice) {
            this.floatPrice = Optional.ofNullable(floatPrice);
            return this;
        }

        /**
         * <p>Amount eligible for the fee</p>
         */
        @JsonSetter(value = "billableAmount", nulls = Nulls.SKIP)
        public Builder billableAmount(Optional<Double> billableAmount) {
            this.billableAmount = billableAmount;
            return this;
        }

        public Builder billableAmount(Double billableAmount) {
            this.billableAmount = Optional.ofNullable(billableAmount);
            return this;
        }

        /**
         * <p>Total fee amount charged</p>
         */
        @JsonSetter(value = "billAmount", nulls = Nulls.SKIP)
        public Builder billAmount(Optional<Double> billAmount) {
            this.billAmount = billAmount;
            return this;
        }

        public Builder billAmount(Double billAmount) {
            this.billAmount = Optional.ofNullable(billAmount);
            return this;
        }

        @JsonSetter(value = "frequency", nulls = Nulls.SKIP)
        public Builder frequency(Optional<String> frequency) {
            this.frequency = frequency;
            return this;
        }

        public Builder frequency(String frequency) {
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        @JsonSetter(value = "serviceGroup", nulls = Nulls.SKIP)
        public Builder serviceGroup(Optional<String> serviceGroup) {
            this.serviceGroup = serviceGroup;
            return this;
        }

        public Builder serviceGroup(String serviceGroup) {
            this.serviceGroup = Optional.ofNullable(serviceGroup);
            return this;
        }

        public BillingFeeDetail build() {
            return new BillingFeeDetail(
                    billableEvent,
                    service,
                    eventId,
                    description,
                    category,
                    fixPrice,
                    floatPrice,
                    billableAmount,
                    billAmount,
                    frequency,
                    serviceGroup,
                    additionalProperties);
        }
    }
}
