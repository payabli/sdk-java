/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryBoardingLinksResponseRecordsItem.Builder.class)
public final class QueryBoardingLinksResponseRecordsItem {
    private final Optional<Boolean> acceptOauth;

    private final Optional<Boolean> acceptRegister;

    private final Optional<String> entryAttributes;

    private final Optional<Integer> id;

    private final Optional<OffsetDateTime> lastUpdated;

    private final Optional<String> orgParentName;

    private final Optional<String> referenceName;

    private final Optional<Long> referenceTemplateId;

    private final Optional<String> templateCode;

    private final Optional<String> templateName;

    private final Map<String, Object> additionalProperties;

    private QueryBoardingLinksResponseRecordsItem(
            Optional<Boolean> acceptOauth,
            Optional<Boolean> acceptRegister,
            Optional<String> entryAttributes,
            Optional<Integer> id,
            Optional<OffsetDateTime> lastUpdated,
            Optional<String> orgParentName,
            Optional<String> referenceName,
            Optional<Long> referenceTemplateId,
            Optional<String> templateCode,
            Optional<String> templateName,
            Map<String, Object> additionalProperties) {
        this.acceptOauth = acceptOauth;
        this.acceptRegister = acceptRegister;
        this.entryAttributes = entryAttributes;
        this.id = id;
        this.lastUpdated = lastUpdated;
        this.orgParentName = orgParentName;
        this.referenceName = referenceName;
        this.referenceTemplateId = referenceTemplateId;
        this.templateCode = templateCode;
        this.templateName = templateName;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("AcceptOauth")
    public Optional<Boolean> getAcceptOauth() {
        return acceptOauth;
    }

    @JsonProperty("AcceptRegister")
    public Optional<Boolean> getAcceptRegister() {
        return acceptRegister;
    }

    @JsonProperty("EntryAttributes")
    public Optional<String> getEntryAttributes() {
        return entryAttributes;
    }

    /**
     * @return The record ID.
     */
    @JsonProperty("Id")
    public Optional<Integer> getId() {
        return id;
    }

    @JsonProperty("LastUpdated")
    public Optional<OffsetDateTime> getLastUpdated() {
        return lastUpdated;
    }

    @JsonProperty("OrgParentName")
    public Optional<String> getOrgParentName() {
        return orgParentName;
    }

    @JsonProperty("ReferenceName")
    public Optional<String> getReferenceName() {
        return referenceName;
    }

    @JsonProperty("ReferenceTemplateId")
    public Optional<Long> getReferenceTemplateId() {
        return referenceTemplateId;
    }

    @JsonProperty("TemplateCode")
    public Optional<String> getTemplateCode() {
        return templateCode;
    }

    @JsonProperty("TemplateName")
    public Optional<String> getTemplateName() {
        return templateName;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryBoardingLinksResponseRecordsItem
                && equalTo((QueryBoardingLinksResponseRecordsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryBoardingLinksResponseRecordsItem other) {
        return acceptOauth.equals(other.acceptOauth)
                && acceptRegister.equals(other.acceptRegister)
                && entryAttributes.equals(other.entryAttributes)
                && id.equals(other.id)
                && lastUpdated.equals(other.lastUpdated)
                && orgParentName.equals(other.orgParentName)
                && referenceName.equals(other.referenceName)
                && referenceTemplateId.equals(other.referenceTemplateId)
                && templateCode.equals(other.templateCode)
                && templateName.equals(other.templateName);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.acceptOauth,
                this.acceptRegister,
                this.entryAttributes,
                this.id,
                this.lastUpdated,
                this.orgParentName,
                this.referenceName,
                this.referenceTemplateId,
                this.templateCode,
                this.templateName);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> acceptOauth = Optional.empty();

        private Optional<Boolean> acceptRegister = Optional.empty();

        private Optional<String> entryAttributes = Optional.empty();

        private Optional<Integer> id = Optional.empty();

        private Optional<OffsetDateTime> lastUpdated = Optional.empty();

        private Optional<String> orgParentName = Optional.empty();

        private Optional<String> referenceName = Optional.empty();

        private Optional<Long> referenceTemplateId = Optional.empty();

        private Optional<String> templateCode = Optional.empty();

        private Optional<String> templateName = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryBoardingLinksResponseRecordsItem other) {
            acceptOauth(other.getAcceptOauth());
            acceptRegister(other.getAcceptRegister());
            entryAttributes(other.getEntryAttributes());
            id(other.getId());
            lastUpdated(other.getLastUpdated());
            orgParentName(other.getOrgParentName());
            referenceName(other.getReferenceName());
            referenceTemplateId(other.getReferenceTemplateId());
            templateCode(other.getTemplateCode());
            templateName(other.getTemplateName());
            return this;
        }

        @JsonSetter(value = "AcceptOauth", nulls = Nulls.SKIP)
        public Builder acceptOauth(Optional<Boolean> acceptOauth) {
            this.acceptOauth = acceptOauth;
            return this;
        }

        public Builder acceptOauth(Boolean acceptOauth) {
            this.acceptOauth = Optional.ofNullable(acceptOauth);
            return this;
        }

        @JsonSetter(value = "AcceptRegister", nulls = Nulls.SKIP)
        public Builder acceptRegister(Optional<Boolean> acceptRegister) {
            this.acceptRegister = acceptRegister;
            return this;
        }

        public Builder acceptRegister(Boolean acceptRegister) {
            this.acceptRegister = Optional.ofNullable(acceptRegister);
            return this;
        }

        @JsonSetter(value = "EntryAttributes", nulls = Nulls.SKIP)
        public Builder entryAttributes(Optional<String> entryAttributes) {
            this.entryAttributes = entryAttributes;
            return this;
        }

        public Builder entryAttributes(String entryAttributes) {
            this.entryAttributes = Optional.ofNullable(entryAttributes);
            return this;
        }

        /**
         * <p>The record ID.</p>
         */
        @JsonSetter(value = "Id", nulls = Nulls.SKIP)
        public Builder id(Optional<Integer> id) {
            this.id = id;
            return this;
        }

        public Builder id(Integer id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "LastUpdated", nulls = Nulls.SKIP)
        public Builder lastUpdated(Optional<OffsetDateTime> lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }

        public Builder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = Optional.ofNullable(lastUpdated);
            return this;
        }

        @JsonSetter(value = "OrgParentName", nulls = Nulls.SKIP)
        public Builder orgParentName(Optional<String> orgParentName) {
            this.orgParentName = orgParentName;
            return this;
        }

        public Builder orgParentName(String orgParentName) {
            this.orgParentName = Optional.ofNullable(orgParentName);
            return this;
        }

        @JsonSetter(value = "ReferenceName", nulls = Nulls.SKIP)
        public Builder referenceName(Optional<String> referenceName) {
            this.referenceName = referenceName;
            return this;
        }

        public Builder referenceName(String referenceName) {
            this.referenceName = Optional.ofNullable(referenceName);
            return this;
        }

        @JsonSetter(value = "ReferenceTemplateId", nulls = Nulls.SKIP)
        public Builder referenceTemplateId(Optional<Long> referenceTemplateId) {
            this.referenceTemplateId = referenceTemplateId;
            return this;
        }

        public Builder referenceTemplateId(Long referenceTemplateId) {
            this.referenceTemplateId = Optional.ofNullable(referenceTemplateId);
            return this;
        }

        @JsonSetter(value = "TemplateCode", nulls = Nulls.SKIP)
        public Builder templateCode(Optional<String> templateCode) {
            this.templateCode = templateCode;
            return this;
        }

        public Builder templateCode(String templateCode) {
            this.templateCode = Optional.ofNullable(templateCode);
            return this;
        }

        @JsonSetter(value = "TemplateName", nulls = Nulls.SKIP)
        public Builder templateName(Optional<String> templateName) {
            this.templateName = templateName;
            return this;
        }

        public Builder templateName(String templateName) {
            this.templateName = Optional.ofNullable(templateName);
            return this;
        }

        public QueryBoardingLinksResponseRecordsItem build() {
            return new QueryBoardingLinksResponseRecordsItem(
                    acceptOauth,
                    acceptRegister,
                    entryAttributes,
                    id,
                    lastUpdated,
                    orgParentName,
                    referenceName,
                    referenceTemplateId,
                    templateCode,
                    templateName,
                    additionalProperties);
        }
    }
}
