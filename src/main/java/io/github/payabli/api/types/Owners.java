/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Owners.Builder.class)
public final class Owners implements IOwners {
    private final Optional<String> ownername;

    private final Optional<String> ownertitle;

    private final Optional<Integer> ownerpercent;

    private final Optional<String> ownerssn;

    private final Optional<String> ownerdob;

    private final Optional<String> ownerphone1;

    private final Optional<String> ownerphone2;

    private final Optional<String> owneremail;

    private final Optional<String> ownerdriver;

    private final Optional<String> oaddress;

    private final Optional<String> ocity;

    private final Optional<String> ocountry;

    private final Optional<String> odriverstate;

    private final Optional<String> ostate;

    private final Optional<String> ozip;

    private final Optional<String> additionalData;

    private final Map<String, Object> additionalProperties;

    private Owners(
            Optional<String> ownername,
            Optional<String> ownertitle,
            Optional<Integer> ownerpercent,
            Optional<String> ownerssn,
            Optional<String> ownerdob,
            Optional<String> ownerphone1,
            Optional<String> ownerphone2,
            Optional<String> owneremail,
            Optional<String> ownerdriver,
            Optional<String> oaddress,
            Optional<String> ocity,
            Optional<String> ocountry,
            Optional<String> odriverstate,
            Optional<String> ostate,
            Optional<String> ozip,
            Optional<String> additionalData,
            Map<String, Object> additionalProperties) {
        this.ownername = ownername;
        this.ownertitle = ownertitle;
        this.ownerpercent = ownerpercent;
        this.ownerssn = ownerssn;
        this.ownerdob = ownerdob;
        this.ownerphone1 = ownerphone1;
        this.ownerphone2 = ownerphone2;
        this.owneremail = owneremail;
        this.ownerdriver = ownerdriver;
        this.oaddress = oaddress;
        this.ocity = ocity;
        this.ocountry = ocountry;
        this.odriverstate = odriverstate;
        this.ostate = ostate;
        this.ozip = ozip;
        this.additionalData = additionalData;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Person who is registered as the beneficial owner of the business. This is a combination of first and last name.
     */
    @JsonProperty("ownername")
    @java.lang.Override
    public Optional<String> getOwnername() {
        return ownername;
    }

    /**
     * @return The job title of the person such as CEO or director.
     */
    @JsonProperty("ownertitle")
    @java.lang.Override
    public Optional<String> getOwnertitle() {
        return ownertitle;
    }

    /**
     * @return Percentage of ownership the person holds, in integer format.
     */
    @JsonProperty("ownerpercent")
    @java.lang.Override
    public Optional<Integer> getOwnerpercent() {
        return ownerpercent;
    }

    /**
     * @return The relevant identifier for the person such as a Social Security Number.
     */
    @JsonProperty("ownerssn")
    @java.lang.Override
    public Optional<String> getOwnerssn() {
        return ownerssn;
    }

    /**
     * @return Owner's date of birth.
     */
    @JsonProperty("ownerdob")
    @java.lang.Override
    public Optional<String> getOwnerdob() {
        return ownerdob;
    }

    /**
     * @return Owner phone 1.
     */
    @JsonProperty("ownerphone1")
    @java.lang.Override
    public Optional<String> getOwnerphone1() {
        return ownerphone1;
    }

    /**
     * @return Owner phone 2.
     */
    @JsonProperty("ownerphone2")
    @java.lang.Override
    public Optional<String> getOwnerphone2() {
        return ownerphone2;
    }

    /**
     * @return Owner email.
     */
    @JsonProperty("owneremail")
    @java.lang.Override
    public Optional<String> getOwneremail() {
        return owneremail;
    }

    /**
     * @return Owner driver's license ID number. Payabli strongly recommends including this.
     */
    @JsonProperty("ownerdriver")
    @java.lang.Override
    public Optional<String> getOwnerdriver() {
        return ownerdriver;
    }

    /**
     * @return Owner street address. This must be the physical address of the owner, not a P.O. box.
     */
    @JsonProperty("oaddress")
    @java.lang.Override
    public Optional<String> getOaddress() {
        return oaddress;
    }

    /**
     * @return Owner address city.
     */
    @JsonProperty("ocity")
    @java.lang.Override
    public Optional<String> getOcity() {
        return ocity;
    }

    /**
     * @return Owner address country in ISO-3166-1 alpha 2 format. Check out https://en.wikipedia.org/wiki/ISO_3166-1 for reference.
     */
    @JsonProperty("ocountry")
    @java.lang.Override
    public Optional<String> getOcountry() {
        return ocountry;
    }

    /**
     * @return Owner driver's license State. Payabli strongly recommends including this.
     */
    @JsonProperty("odriverstate")
    @java.lang.Override
    public Optional<String> getOdriverstate() {
        return odriverstate;
    }

    /**
     * @return Owner address state.
     */
    @JsonProperty("ostate")
    @java.lang.Override
    public Optional<String> getOstate() {
        return ostate;
    }

    /**
     * @return Owner address ZIP.
     */
    @JsonProperty("ozip")
    @java.lang.Override
    public Optional<String> getOzip() {
        return ozip;
    }

    @JsonProperty("additionalData")
    @java.lang.Override
    public Optional<String> getAdditionalData() {
        return additionalData;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Owners && equalTo((Owners) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Owners other) {
        return ownername.equals(other.ownername)
                && ownertitle.equals(other.ownertitle)
                && ownerpercent.equals(other.ownerpercent)
                && ownerssn.equals(other.ownerssn)
                && ownerdob.equals(other.ownerdob)
                && ownerphone1.equals(other.ownerphone1)
                && ownerphone2.equals(other.ownerphone2)
                && owneremail.equals(other.owneremail)
                && ownerdriver.equals(other.ownerdriver)
                && oaddress.equals(other.oaddress)
                && ocity.equals(other.ocity)
                && ocountry.equals(other.ocountry)
                && odriverstate.equals(other.odriverstate)
                && ostate.equals(other.ostate)
                && ozip.equals(other.ozip)
                && additionalData.equals(other.additionalData);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.ownername,
                this.ownertitle,
                this.ownerpercent,
                this.ownerssn,
                this.ownerdob,
                this.ownerphone1,
                this.ownerphone2,
                this.owneremail,
                this.ownerdriver,
                this.oaddress,
                this.ocity,
                this.ocountry,
                this.odriverstate,
                this.ostate,
                this.ozip,
                this.additionalData);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> ownername = Optional.empty();

        private Optional<String> ownertitle = Optional.empty();

        private Optional<Integer> ownerpercent = Optional.empty();

        private Optional<String> ownerssn = Optional.empty();

        private Optional<String> ownerdob = Optional.empty();

        private Optional<String> ownerphone1 = Optional.empty();

        private Optional<String> ownerphone2 = Optional.empty();

        private Optional<String> owneremail = Optional.empty();

        private Optional<String> ownerdriver = Optional.empty();

        private Optional<String> oaddress = Optional.empty();

        private Optional<String> ocity = Optional.empty();

        private Optional<String> ocountry = Optional.empty();

        private Optional<String> odriverstate = Optional.empty();

        private Optional<String> ostate = Optional.empty();

        private Optional<String> ozip = Optional.empty();

        private Optional<String> additionalData = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Owners other) {
            ownername(other.getOwnername());
            ownertitle(other.getOwnertitle());
            ownerpercent(other.getOwnerpercent());
            ownerssn(other.getOwnerssn());
            ownerdob(other.getOwnerdob());
            ownerphone1(other.getOwnerphone1());
            ownerphone2(other.getOwnerphone2());
            owneremail(other.getOwneremail());
            ownerdriver(other.getOwnerdriver());
            oaddress(other.getOaddress());
            ocity(other.getOcity());
            ocountry(other.getOcountry());
            odriverstate(other.getOdriverstate());
            ostate(other.getOstate());
            ozip(other.getOzip());
            additionalData(other.getAdditionalData());
            return this;
        }

        /**
         * <p>Person who is registered as the beneficial owner of the business. This is a combination of first and last name.</p>
         */
        @JsonSetter(value = "ownername", nulls = Nulls.SKIP)
        public Builder ownername(Optional<String> ownername) {
            this.ownername = ownername;
            return this;
        }

        public Builder ownername(String ownername) {
            this.ownername = Optional.ofNullable(ownername);
            return this;
        }

        /**
         * <p>The job title of the person such as CEO or director.</p>
         */
        @JsonSetter(value = "ownertitle", nulls = Nulls.SKIP)
        public Builder ownertitle(Optional<String> ownertitle) {
            this.ownertitle = ownertitle;
            return this;
        }

        public Builder ownertitle(String ownertitle) {
            this.ownertitle = Optional.ofNullable(ownertitle);
            return this;
        }

        /**
         * <p>Percentage of ownership the person holds, in integer format.</p>
         */
        @JsonSetter(value = "ownerpercent", nulls = Nulls.SKIP)
        public Builder ownerpercent(Optional<Integer> ownerpercent) {
            this.ownerpercent = ownerpercent;
            return this;
        }

        public Builder ownerpercent(Integer ownerpercent) {
            this.ownerpercent = Optional.ofNullable(ownerpercent);
            return this;
        }

        /**
         * <p>The relevant identifier for the person such as a Social Security Number.</p>
         */
        @JsonSetter(value = "ownerssn", nulls = Nulls.SKIP)
        public Builder ownerssn(Optional<String> ownerssn) {
            this.ownerssn = ownerssn;
            return this;
        }

        public Builder ownerssn(String ownerssn) {
            this.ownerssn = Optional.ofNullable(ownerssn);
            return this;
        }

        /**
         * <p>Owner's date of birth.</p>
         */
        @JsonSetter(value = "ownerdob", nulls = Nulls.SKIP)
        public Builder ownerdob(Optional<String> ownerdob) {
            this.ownerdob = ownerdob;
            return this;
        }

        public Builder ownerdob(String ownerdob) {
            this.ownerdob = Optional.ofNullable(ownerdob);
            return this;
        }

        /**
         * <p>Owner phone 1.</p>
         */
        @JsonSetter(value = "ownerphone1", nulls = Nulls.SKIP)
        public Builder ownerphone1(Optional<String> ownerphone1) {
            this.ownerphone1 = ownerphone1;
            return this;
        }

        public Builder ownerphone1(String ownerphone1) {
            this.ownerphone1 = Optional.ofNullable(ownerphone1);
            return this;
        }

        /**
         * <p>Owner phone 2.</p>
         */
        @JsonSetter(value = "ownerphone2", nulls = Nulls.SKIP)
        public Builder ownerphone2(Optional<String> ownerphone2) {
            this.ownerphone2 = ownerphone2;
            return this;
        }

        public Builder ownerphone2(String ownerphone2) {
            this.ownerphone2 = Optional.ofNullable(ownerphone2);
            return this;
        }

        /**
         * <p>Owner email.</p>
         */
        @JsonSetter(value = "owneremail", nulls = Nulls.SKIP)
        public Builder owneremail(Optional<String> owneremail) {
            this.owneremail = owneremail;
            return this;
        }

        public Builder owneremail(String owneremail) {
            this.owneremail = Optional.ofNullable(owneremail);
            return this;
        }

        /**
         * <p>Owner driver's license ID number. Payabli strongly recommends including this.</p>
         */
        @JsonSetter(value = "ownerdriver", nulls = Nulls.SKIP)
        public Builder ownerdriver(Optional<String> ownerdriver) {
            this.ownerdriver = ownerdriver;
            return this;
        }

        public Builder ownerdriver(String ownerdriver) {
            this.ownerdriver = Optional.ofNullable(ownerdriver);
            return this;
        }

        /**
         * <p>Owner street address. This must be the physical address of the owner, not a P.O. box.</p>
         */
        @JsonSetter(value = "oaddress", nulls = Nulls.SKIP)
        public Builder oaddress(Optional<String> oaddress) {
            this.oaddress = oaddress;
            return this;
        }

        public Builder oaddress(String oaddress) {
            this.oaddress = Optional.ofNullable(oaddress);
            return this;
        }

        /**
         * <p>Owner address city.</p>
         */
        @JsonSetter(value = "ocity", nulls = Nulls.SKIP)
        public Builder ocity(Optional<String> ocity) {
            this.ocity = ocity;
            return this;
        }

        public Builder ocity(String ocity) {
            this.ocity = Optional.ofNullable(ocity);
            return this;
        }

        /**
         * <p>Owner address country in ISO-3166-1 alpha 2 format. Check out https://en.wikipedia.org/wiki/ISO_3166-1 for reference.</p>
         */
        @JsonSetter(value = "ocountry", nulls = Nulls.SKIP)
        public Builder ocountry(Optional<String> ocountry) {
            this.ocountry = ocountry;
            return this;
        }

        public Builder ocountry(String ocountry) {
            this.ocountry = Optional.ofNullable(ocountry);
            return this;
        }

        /**
         * <p>Owner driver's license State. Payabli strongly recommends including this.</p>
         */
        @JsonSetter(value = "odriverstate", nulls = Nulls.SKIP)
        public Builder odriverstate(Optional<String> odriverstate) {
            this.odriverstate = odriverstate;
            return this;
        }

        public Builder odriverstate(String odriverstate) {
            this.odriverstate = Optional.ofNullable(odriverstate);
            return this;
        }

        /**
         * <p>Owner address state.</p>
         */
        @JsonSetter(value = "ostate", nulls = Nulls.SKIP)
        public Builder ostate(Optional<String> ostate) {
            this.ostate = ostate;
            return this;
        }

        public Builder ostate(String ostate) {
            this.ostate = Optional.ofNullable(ostate);
            return this;
        }

        /**
         * <p>Owner address ZIP.</p>
         */
        @JsonSetter(value = "ozip", nulls = Nulls.SKIP)
        public Builder ozip(Optional<String> ozip) {
            this.ozip = ozip;
            return this;
        }

        public Builder ozip(String ozip) {
            this.ozip = Optional.ofNullable(ozip);
            return this;
        }

        @JsonSetter(value = "additionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<String> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(String additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        public Owners build() {
            return new Owners(
                    ownername,
                    ownertitle,
                    ownerpercent,
                    ownerssn,
                    ownerdob,
                    ownerphone1,
                    ownerphone2,
                    owneremail,
                    ownerdriver,
                    oaddress,
                    ocity,
                    ocountry,
                    odriverstate,
                    ostate,
                    ozip,
                    additionalData,
                    additionalProperties);
        }
    }
}
