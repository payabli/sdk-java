/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Finishtype.Builder.class)
public final class Finishtype {
    private final Optional<Boolean> calendar;

    private final Optional<Boolean> untilCancelled;

    private final Map<String, Object> additionalProperties;

    private Finishtype(
            Optional<Boolean> calendar, Optional<Boolean> untilCancelled, Map<String, Object> additionalProperties) {
        this.calendar = calendar;
        this.untilCancelled = untilCancelled;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Flag to enable 'calendar' option
     */
    @JsonProperty("calendar")
    public Optional<Boolean> getCalendar() {
        return calendar;
    }

    /**
     * @return Flag to enable 'untilCancelled' option
     */
    @JsonProperty("untilCancelled")
    public Optional<Boolean> getUntilCancelled() {
        return untilCancelled;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Finishtype && equalTo((Finishtype) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Finishtype other) {
        return calendar.equals(other.calendar) && untilCancelled.equals(other.untilCancelled);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.calendar, this.untilCancelled);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> calendar = Optional.empty();

        private Optional<Boolean> untilCancelled = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Finishtype other) {
            calendar(other.getCalendar());
            untilCancelled(other.getUntilCancelled());
            return this;
        }

        /**
         * <p>Flag to enable 'calendar' option</p>
         */
        @JsonSetter(value = "calendar", nulls = Nulls.SKIP)
        public Builder calendar(Optional<Boolean> calendar) {
            this.calendar = calendar;
            return this;
        }

        public Builder calendar(Boolean calendar) {
            this.calendar = Optional.ofNullable(calendar);
            return this;
        }

        /**
         * <p>Flag to enable 'untilCancelled' option</p>
         */
        @JsonSetter(value = "untilCancelled", nulls = Nulls.SKIP)
        public Builder untilCancelled(Optional<Boolean> untilCancelled) {
            this.untilCancelled = untilCancelled;
            return this;
        }

        public Builder untilCancelled(Boolean untilCancelled) {
            this.untilCancelled = Optional.ofNullable(untilCancelled);
            return this;
        }

        public Finishtype build() {
            return new Finishtype(calendar, untilCancelled, additionalProperties);
        }
    }
}
