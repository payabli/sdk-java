/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PayorDataRequest.Builder.class)
public final class PayorDataRequest implements IPayorDataRequest {
    private final Optional<Map<String, Optional<Map<String, Object>>>> additionalData;

    private final Optional<String> billingAddress1;

    private final Optional<String> billingAddress2;

    private final Optional<String> billingCity;

    private final Optional<String> billingCountry;

    private final Optional<String> billingEmail;

    private final Optional<String> billingPhone;

    private final Optional<String> billingState;

    private final Optional<String> billingZip;

    private final Optional<String> company;

    private final Optional<Long> customerId;

    private final Optional<String> customerNumber;

    private final Optional<String> firstName;

    private final Optional<List<Optional<String>>> identifierFields;

    private final Optional<String> lastName;

    private final Optional<String> shippingAddress1;

    private final Optional<String> shippingAddress2;

    private final Optional<String> shippingCity;

    private final Optional<String> shippingCountry;

    private final Optional<String> shippingState;

    private final Optional<String> shippingZip;

    private final Map<String, Object> additionalProperties;

    private PayorDataRequest(
            Optional<Map<String, Optional<Map<String, Object>>>> additionalData,
            Optional<String> billingAddress1,
            Optional<String> billingAddress2,
            Optional<String> billingCity,
            Optional<String> billingCountry,
            Optional<String> billingEmail,
            Optional<String> billingPhone,
            Optional<String> billingState,
            Optional<String> billingZip,
            Optional<String> company,
            Optional<Long> customerId,
            Optional<String> customerNumber,
            Optional<String> firstName,
            Optional<List<Optional<String>>> identifierFields,
            Optional<String> lastName,
            Optional<String> shippingAddress1,
            Optional<String> shippingAddress2,
            Optional<String> shippingCity,
            Optional<String> shippingCountry,
            Optional<String> shippingState,
            Optional<String> shippingZip,
            Map<String, Object> additionalProperties) {
        this.additionalData = additionalData;
        this.billingAddress1 = billingAddress1;
        this.billingAddress2 = billingAddress2;
        this.billingCity = billingCity;
        this.billingCountry = billingCountry;
        this.billingEmail = billingEmail;
        this.billingPhone = billingPhone;
        this.billingState = billingState;
        this.billingZip = billingZip;
        this.company = company;
        this.customerId = customerId;
        this.customerNumber = customerNumber;
        this.firstName = firstName;
        this.identifierFields = identifierFields;
        this.lastName = lastName;
        this.shippingAddress1 = shippingAddress1;
        this.shippingAddress2 = shippingAddress2;
        this.shippingCity = shippingCity;
        this.shippingCountry = shippingCountry;
        this.shippingState = shippingState;
        this.shippingZip = shippingZip;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("additionalData")
    @java.lang.Override
    public Optional<Map<String, Optional<Map<String, Object>>>> getAdditionalData() {
        return additionalData;
    }

    @JsonProperty("billingAddress1")
    @java.lang.Override
    public Optional<String> getBillingAddress1() {
        return billingAddress1;
    }

    @JsonProperty("billingAddress2")
    @java.lang.Override
    public Optional<String> getBillingAddress2() {
        return billingAddress2;
    }

    @JsonProperty("billingCity")
    @java.lang.Override
    public Optional<String> getBillingCity() {
        return billingCity;
    }

    @JsonProperty("billingCountry")
    @java.lang.Override
    public Optional<String> getBillingCountry() {
        return billingCountry;
    }

    @JsonProperty("billingEmail")
    @java.lang.Override
    public Optional<String> getBillingEmail() {
        return billingEmail;
    }

    @JsonProperty("billingPhone")
    @java.lang.Override
    public Optional<String> getBillingPhone() {
        return billingPhone;
    }

    @JsonProperty("billingState")
    @java.lang.Override
    public Optional<String> getBillingState() {
        return billingState;
    }

    /**
     * @return Customer's billing ZIP code. For Pay In functions, this field supports 5-digit and 9-digit ZIP codes and alphanumeric Canadian postal codes. For example: &quot;37615-1234&quot; or &quot;37615&quot;.
     */
    @JsonProperty("billingZip")
    @java.lang.Override
    public Optional<String> getBillingZip() {
        return billingZip;
    }

    /**
     * @return Customer's company name.
     */
    @JsonProperty("company")
    @java.lang.Override
    public Optional<String> getCompany() {
        return company;
    }

    @JsonProperty("customerId")
    @java.lang.Override
    public Optional<Long> getCustomerId() {
        return customerId;
    }

    @JsonProperty("customerNumber")
    @java.lang.Override
    public Optional<String> getCustomerNumber() {
        return customerNumber;
    }

    /**
     * @return Customer/Payor first name.
     */
    @JsonProperty("firstName")
    @java.lang.Override
    public Optional<String> getFirstName() {
        return firstName;
    }

    @JsonProperty("identifierFields")
    @java.lang.Override
    public Optional<List<Optional<String>>> getIdentifierFields() {
        return identifierFields;
    }

    /**
     * @return Customer/Payor last name.
     */
    @JsonProperty("lastName")
    @java.lang.Override
    public Optional<String> getLastName() {
        return lastName;
    }

    @JsonProperty("shippingAddress1")
    @java.lang.Override
    public Optional<String> getShippingAddress1() {
        return shippingAddress1;
    }

    @JsonProperty("shippingAddress2")
    @java.lang.Override
    public Optional<String> getShippingAddress2() {
        return shippingAddress2;
    }

    @JsonProperty("shippingCity")
    @java.lang.Override
    public Optional<String> getShippingCity() {
        return shippingCity;
    }

    @JsonProperty("shippingCountry")
    @java.lang.Override
    public Optional<String> getShippingCountry() {
        return shippingCountry;
    }

    @JsonProperty("shippingState")
    @java.lang.Override
    public Optional<String> getShippingState() {
        return shippingState;
    }

    @JsonProperty("shippingZip")
    @java.lang.Override
    public Optional<String> getShippingZip() {
        return shippingZip;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PayorDataRequest && equalTo((PayorDataRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PayorDataRequest other) {
        return additionalData.equals(other.additionalData)
                && billingAddress1.equals(other.billingAddress1)
                && billingAddress2.equals(other.billingAddress2)
                && billingCity.equals(other.billingCity)
                && billingCountry.equals(other.billingCountry)
                && billingEmail.equals(other.billingEmail)
                && billingPhone.equals(other.billingPhone)
                && billingState.equals(other.billingState)
                && billingZip.equals(other.billingZip)
                && company.equals(other.company)
                && customerId.equals(other.customerId)
                && customerNumber.equals(other.customerNumber)
                && firstName.equals(other.firstName)
                && identifierFields.equals(other.identifierFields)
                && lastName.equals(other.lastName)
                && shippingAddress1.equals(other.shippingAddress1)
                && shippingAddress2.equals(other.shippingAddress2)
                && shippingCity.equals(other.shippingCity)
                && shippingCountry.equals(other.shippingCountry)
                && shippingState.equals(other.shippingState)
                && shippingZip.equals(other.shippingZip);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.additionalData,
                this.billingAddress1,
                this.billingAddress2,
                this.billingCity,
                this.billingCountry,
                this.billingEmail,
                this.billingPhone,
                this.billingState,
                this.billingZip,
                this.company,
                this.customerId,
                this.customerNumber,
                this.firstName,
                this.identifierFields,
                this.lastName,
                this.shippingAddress1,
                this.shippingAddress2,
                this.shippingCity,
                this.shippingCountry,
                this.shippingState,
                this.shippingZip);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, Optional<Map<String, Object>>>> additionalData = Optional.empty();

        private Optional<String> billingAddress1 = Optional.empty();

        private Optional<String> billingAddress2 = Optional.empty();

        private Optional<String> billingCity = Optional.empty();

        private Optional<String> billingCountry = Optional.empty();

        private Optional<String> billingEmail = Optional.empty();

        private Optional<String> billingPhone = Optional.empty();

        private Optional<String> billingState = Optional.empty();

        private Optional<String> billingZip = Optional.empty();

        private Optional<String> company = Optional.empty();

        private Optional<Long> customerId = Optional.empty();

        private Optional<String> customerNumber = Optional.empty();

        private Optional<String> firstName = Optional.empty();

        private Optional<List<Optional<String>>> identifierFields = Optional.empty();

        private Optional<String> lastName = Optional.empty();

        private Optional<String> shippingAddress1 = Optional.empty();

        private Optional<String> shippingAddress2 = Optional.empty();

        private Optional<String> shippingCity = Optional.empty();

        private Optional<String> shippingCountry = Optional.empty();

        private Optional<String> shippingState = Optional.empty();

        private Optional<String> shippingZip = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PayorDataRequest other) {
            additionalData(other.getAdditionalData());
            billingAddress1(other.getBillingAddress1());
            billingAddress2(other.getBillingAddress2());
            billingCity(other.getBillingCity());
            billingCountry(other.getBillingCountry());
            billingEmail(other.getBillingEmail());
            billingPhone(other.getBillingPhone());
            billingState(other.getBillingState());
            billingZip(other.getBillingZip());
            company(other.getCompany());
            customerId(other.getCustomerId());
            customerNumber(other.getCustomerNumber());
            firstName(other.getFirstName());
            identifierFields(other.getIdentifierFields());
            lastName(other.getLastName());
            shippingAddress1(other.getShippingAddress1());
            shippingAddress2(other.getShippingAddress2());
            shippingCity(other.getShippingCity());
            shippingCountry(other.getShippingCountry());
            shippingState(other.getShippingState());
            shippingZip(other.getShippingZip());
            return this;
        }

        @JsonSetter(value = "additionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<Map<String, Optional<Map<String, Object>>>> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(Map<String, Optional<Map<String, Object>>> additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        @JsonSetter(value = "billingAddress1", nulls = Nulls.SKIP)
        public Builder billingAddress1(Optional<String> billingAddress1) {
            this.billingAddress1 = billingAddress1;
            return this;
        }

        public Builder billingAddress1(String billingAddress1) {
            this.billingAddress1 = Optional.ofNullable(billingAddress1);
            return this;
        }

        @JsonSetter(value = "billingAddress2", nulls = Nulls.SKIP)
        public Builder billingAddress2(Optional<String> billingAddress2) {
            this.billingAddress2 = billingAddress2;
            return this;
        }

        public Builder billingAddress2(String billingAddress2) {
            this.billingAddress2 = Optional.ofNullable(billingAddress2);
            return this;
        }

        @JsonSetter(value = "billingCity", nulls = Nulls.SKIP)
        public Builder billingCity(Optional<String> billingCity) {
            this.billingCity = billingCity;
            return this;
        }

        public Builder billingCity(String billingCity) {
            this.billingCity = Optional.ofNullable(billingCity);
            return this;
        }

        @JsonSetter(value = "billingCountry", nulls = Nulls.SKIP)
        public Builder billingCountry(Optional<String> billingCountry) {
            this.billingCountry = billingCountry;
            return this;
        }

        public Builder billingCountry(String billingCountry) {
            this.billingCountry = Optional.ofNullable(billingCountry);
            return this;
        }

        @JsonSetter(value = "billingEmail", nulls = Nulls.SKIP)
        public Builder billingEmail(Optional<String> billingEmail) {
            this.billingEmail = billingEmail;
            return this;
        }

        public Builder billingEmail(String billingEmail) {
            this.billingEmail = Optional.ofNullable(billingEmail);
            return this;
        }

        @JsonSetter(value = "billingPhone", nulls = Nulls.SKIP)
        public Builder billingPhone(Optional<String> billingPhone) {
            this.billingPhone = billingPhone;
            return this;
        }

        public Builder billingPhone(String billingPhone) {
            this.billingPhone = Optional.ofNullable(billingPhone);
            return this;
        }

        @JsonSetter(value = "billingState", nulls = Nulls.SKIP)
        public Builder billingState(Optional<String> billingState) {
            this.billingState = billingState;
            return this;
        }

        public Builder billingState(String billingState) {
            this.billingState = Optional.ofNullable(billingState);
            return this;
        }

        /**
         * <p>Customer's billing ZIP code. For Pay In functions, this field supports 5-digit and 9-digit ZIP codes and alphanumeric Canadian postal codes. For example: &quot;37615-1234&quot; or &quot;37615&quot;.</p>
         */
        @JsonSetter(value = "billingZip", nulls = Nulls.SKIP)
        public Builder billingZip(Optional<String> billingZip) {
            this.billingZip = billingZip;
            return this;
        }

        public Builder billingZip(String billingZip) {
            this.billingZip = Optional.ofNullable(billingZip);
            return this;
        }

        /**
         * <p>Customer's company name.</p>
         */
        @JsonSetter(value = "company", nulls = Nulls.SKIP)
        public Builder company(Optional<String> company) {
            this.company = company;
            return this;
        }

        public Builder company(String company) {
            this.company = Optional.ofNullable(company);
            return this;
        }

        @JsonSetter(value = "customerId", nulls = Nulls.SKIP)
        public Builder customerId(Optional<Long> customerId) {
            this.customerId = customerId;
            return this;
        }

        public Builder customerId(Long customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        @JsonSetter(value = "customerNumber", nulls = Nulls.SKIP)
        public Builder customerNumber(Optional<String> customerNumber) {
            this.customerNumber = customerNumber;
            return this;
        }

        public Builder customerNumber(String customerNumber) {
            this.customerNumber = Optional.ofNullable(customerNumber);
            return this;
        }

        /**
         * <p>Customer/Payor first name.</p>
         */
        @JsonSetter(value = "firstName", nulls = Nulls.SKIP)
        public Builder firstName(Optional<String> firstName) {
            this.firstName = firstName;
            return this;
        }

        public Builder firstName(String firstName) {
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        @JsonSetter(value = "identifierFields", nulls = Nulls.SKIP)
        public Builder identifierFields(Optional<List<Optional<String>>> identifierFields) {
            this.identifierFields = identifierFields;
            return this;
        }

        public Builder identifierFields(List<Optional<String>> identifierFields) {
            this.identifierFields = Optional.ofNullable(identifierFields);
            return this;
        }

        /**
         * <p>Customer/Payor last name.</p>
         */
        @JsonSetter(value = "lastName", nulls = Nulls.SKIP)
        public Builder lastName(Optional<String> lastName) {
            this.lastName = lastName;
            return this;
        }

        public Builder lastName(String lastName) {
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        @JsonSetter(value = "shippingAddress1", nulls = Nulls.SKIP)
        public Builder shippingAddress1(Optional<String> shippingAddress1) {
            this.shippingAddress1 = shippingAddress1;
            return this;
        }

        public Builder shippingAddress1(String shippingAddress1) {
            this.shippingAddress1 = Optional.ofNullable(shippingAddress1);
            return this;
        }

        @JsonSetter(value = "shippingAddress2", nulls = Nulls.SKIP)
        public Builder shippingAddress2(Optional<String> shippingAddress2) {
            this.shippingAddress2 = shippingAddress2;
            return this;
        }

        public Builder shippingAddress2(String shippingAddress2) {
            this.shippingAddress2 = Optional.ofNullable(shippingAddress2);
            return this;
        }

        @JsonSetter(value = "shippingCity", nulls = Nulls.SKIP)
        public Builder shippingCity(Optional<String> shippingCity) {
            this.shippingCity = shippingCity;
            return this;
        }

        public Builder shippingCity(String shippingCity) {
            this.shippingCity = Optional.ofNullable(shippingCity);
            return this;
        }

        @JsonSetter(value = "shippingCountry", nulls = Nulls.SKIP)
        public Builder shippingCountry(Optional<String> shippingCountry) {
            this.shippingCountry = shippingCountry;
            return this;
        }

        public Builder shippingCountry(String shippingCountry) {
            this.shippingCountry = Optional.ofNullable(shippingCountry);
            return this;
        }

        @JsonSetter(value = "shippingState", nulls = Nulls.SKIP)
        public Builder shippingState(Optional<String> shippingState) {
            this.shippingState = shippingState;
            return this;
        }

        public Builder shippingState(String shippingState) {
            this.shippingState = Optional.ofNullable(shippingState);
            return this;
        }

        @JsonSetter(value = "shippingZip", nulls = Nulls.SKIP)
        public Builder shippingZip(Optional<String> shippingZip) {
            this.shippingZip = shippingZip;
            return this;
        }

        public Builder shippingZip(String shippingZip) {
            this.shippingZip = Optional.ofNullable(shippingZip);
            return this;
        }

        public PayorDataRequest build() {
            return new PayorDataRequest(
                    additionalData,
                    billingAddress1,
                    billingAddress2,
                    billingCity,
                    billingCountry,
                    billingEmail,
                    billingPhone,
                    billingState,
                    billingZip,
                    company,
                    customerId,
                    customerNumber,
                    firstName,
                    identifierFields,
                    lastName,
                    shippingAddress1,
                    shippingAddress2,
                    shippingCity,
                    shippingCountry,
                    shippingState,
                    shippingZip,
                    additionalProperties);
        }
    }
}
