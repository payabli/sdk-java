/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AutoElement.Builder.class)
public final class AutoElement {
    private final Optional<Boolean> enabled;

    private final Optional<Finishtype> finish;

    private final Optional<FrequencyList> frequency;

    private final Optional<String> frequencySelected;

    private final Optional<String> header;

    private final Optional<Integer> order;

    private final Optional<String> startDate;

    private final Map<String, Object> additionalProperties;

    private AutoElement(
            Optional<Boolean> enabled,
            Optional<Finishtype> finish,
            Optional<FrequencyList> frequency,
            Optional<String> frequencySelected,
            Optional<String> header,
            Optional<Integer> order,
            Optional<String> startDate,
            Map<String, Object> additionalProperties) {
        this.enabled = enabled;
        this.finish = finish;
        this.frequency = frequency;
        this.frequencySelected = frequencySelected;
        this.header = header;
        this.order = order;
        this.startDate = startDate;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("enabled")
    public Optional<Boolean> getEnabled() {
        return enabled;
    }

    /**
     * @return Type of end date
     */
    @JsonProperty("finish")
    public Optional<Finishtype> getFinish() {
        return finish;
    }

    /**
     * @return accepted frequencies for autopay
     */
    @JsonProperty("frequency")
    public Optional<FrequencyList> getFrequency() {
        return frequency;
    }

    /**
     * @return Value of pre-selected frequency
     */
    @JsonProperty("frequencySelected")
    public Optional<String> getFrequencySelected() {
        return frequencySelected;
    }

    /**
     * @return Header text for section
     */
    @JsonProperty("header")
    public Optional<String> getHeader() {
        return header;
    }

    @JsonProperty("order")
    public Optional<Integer> getOrder() {
        return order;
    }

    /**
     * @return Range of days enabled in calendar. Leave empty to enable all days.
     */
    @JsonProperty("startDate")
    public Optional<String> getStartDate() {
        return startDate;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AutoElement && equalTo((AutoElement) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AutoElement other) {
        return enabled.equals(other.enabled)
                && finish.equals(other.finish)
                && frequency.equals(other.frequency)
                && frequencySelected.equals(other.frequencySelected)
                && header.equals(other.header)
                && order.equals(other.order)
                && startDate.equals(other.startDate);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.enabled,
                this.finish,
                this.frequency,
                this.frequencySelected,
                this.header,
                this.order,
                this.startDate);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> enabled = Optional.empty();

        private Optional<Finishtype> finish = Optional.empty();

        private Optional<FrequencyList> frequency = Optional.empty();

        private Optional<String> frequencySelected = Optional.empty();

        private Optional<String> header = Optional.empty();

        private Optional<Integer> order = Optional.empty();

        private Optional<String> startDate = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AutoElement other) {
            enabled(other.getEnabled());
            finish(other.getFinish());
            frequency(other.getFrequency());
            frequencySelected(other.getFrequencySelected());
            header(other.getHeader());
            order(other.getOrder());
            startDate(other.getStartDate());
            return this;
        }

        @JsonSetter(value = "enabled", nulls = Nulls.SKIP)
        public Builder enabled(Optional<Boolean> enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder enabled(Boolean enabled) {
            this.enabled = Optional.ofNullable(enabled);
            return this;
        }

        /**
         * <p>Type of end date</p>
         */
        @JsonSetter(value = "finish", nulls = Nulls.SKIP)
        public Builder finish(Optional<Finishtype> finish) {
            this.finish = finish;
            return this;
        }

        public Builder finish(Finishtype finish) {
            this.finish = Optional.ofNullable(finish);
            return this;
        }

        /**
         * <p>accepted frequencies for autopay</p>
         */
        @JsonSetter(value = "frequency", nulls = Nulls.SKIP)
        public Builder frequency(Optional<FrequencyList> frequency) {
            this.frequency = frequency;
            return this;
        }

        public Builder frequency(FrequencyList frequency) {
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        /**
         * <p>Value of pre-selected frequency</p>
         */
        @JsonSetter(value = "frequencySelected", nulls = Nulls.SKIP)
        public Builder frequencySelected(Optional<String> frequencySelected) {
            this.frequencySelected = frequencySelected;
            return this;
        }

        public Builder frequencySelected(String frequencySelected) {
            this.frequencySelected = Optional.ofNullable(frequencySelected);
            return this;
        }

        /**
         * <p>Header text for section</p>
         */
        @JsonSetter(value = "header", nulls = Nulls.SKIP)
        public Builder header(Optional<String> header) {
            this.header = header;
            return this;
        }

        public Builder header(String header) {
            this.header = Optional.ofNullable(header);
            return this;
        }

        @JsonSetter(value = "order", nulls = Nulls.SKIP)
        public Builder order(Optional<Integer> order) {
            this.order = order;
            return this;
        }

        public Builder order(Integer order) {
            this.order = Optional.ofNullable(order);
            return this;
        }

        /**
         * <p>Range of days enabled in calendar. Leave empty to enable all days.</p>
         */
        @JsonSetter(value = "startDate", nulls = Nulls.SKIP)
        public Builder startDate(Optional<String> startDate) {
            this.startDate = startDate;
            return this;
        }

        public Builder startDate(String startDate) {
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        public AutoElement build() {
            return new AutoElement(
                    enabled, finish, frequency, frequencySelected, header, order, startDate, additionalProperties);
        }
    }
}
