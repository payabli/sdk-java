/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BSection.Builder.class)
public final class BSection {
    private final Optional<BAddress> address;

    private final Optional<BDetails> details;

    private final Map<String, Object> additionalProperties;

    private BSection(Optional<BAddress> address, Optional<BDetails> details, Map<String, Object> additionalProperties) {
        this.address = address;
        this.details = details;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("address")
    public Optional<BAddress> getAddress() {
        return address;
    }

    @JsonProperty("details")
    public Optional<BDetails> getDetails() {
        return details;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BSection && equalTo((BSection) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BSection other) {
        return address.equals(other.address) && details.equals(other.details);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.address, this.details);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<BAddress> address = Optional.empty();

        private Optional<BDetails> details = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BSection other) {
            address(other.getAddress());
            details(other.getDetails());
            return this;
        }

        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<BAddress> address) {
            this.address = address;
            return this;
        }

        public Builder address(BAddress address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        @JsonSetter(value = "details", nulls = Nulls.SKIP)
        public Builder details(Optional<BDetails> details) {
            this.details = details;
            return this;
        }

        public Builder details(BDetails details) {
            this.details = Optional.ofNullable(details);
            return this;
        }

        public BSection build() {
            return new BSection(address, details, additionalProperties);
        }
    }
}
