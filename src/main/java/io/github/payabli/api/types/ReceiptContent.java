/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ReceiptContent.Builder.class)
public final class ReceiptContent {
    private final Optional<Element> amount;

    private final Optional<Element> contactUs;

    private final Optional<Element> details;

    private final Optional<Element> logo;

    private final Optional<LabelElement> messageBeforeButton;

    private final Optional<PageElement> page;

    private final Optional<LabelElement> paymentButton;

    private final Optional<Element> paymentInformation;

    private final Optional<SettingElement> settings;

    private final Map<String, Object> additionalProperties;

    private ReceiptContent(
            Optional<Element> amount,
            Optional<Element> contactUs,
            Optional<Element> details,
            Optional<Element> logo,
            Optional<LabelElement> messageBeforeButton,
            Optional<PageElement> page,
            Optional<LabelElement> paymentButton,
            Optional<Element> paymentInformation,
            Optional<SettingElement> settings,
            Map<String, Object> additionalProperties) {
        this.amount = amount;
        this.contactUs = contactUs;
        this.details = details;
        this.logo = logo;
        this.messageBeforeButton = messageBeforeButton;
        this.page = page;
        this.paymentButton = paymentButton;
        this.paymentInformation = paymentInformation;
        this.settings = settings;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Section amount of payment receipt
     */
    @JsonProperty("amount")
    public Optional<Element> getAmount() {
        return amount;
    }

    /**
     * @return Section contactUs of payment receipt
     */
    @JsonProperty("contactUs")
    public Optional<Element> getContactUs() {
        return contactUs;
    }

    /**
     * @return Section payment details of payment receipt
     */
    @JsonProperty("details")
    public Optional<Element> getDetails() {
        return details;
    }

    /**
     * @return Section logo of payment receipt
     */
    @JsonProperty("logo")
    public Optional<Element> getLogo() {
        return logo;
    }

    /**
     * @return Section message of payment receipt
     */
    @JsonProperty("messageBeforeButton")
    public Optional<LabelElement> getMessageBeforeButton() {
        return messageBeforeButton;
    }

    /**
     * @return Section page of payment receipt
     */
    @JsonProperty("page")
    public Optional<PageElement> getPage() {
        return page;
    }

    /**
     * @return Section payment button of payment receipt
     */
    @JsonProperty("paymentButton")
    public Optional<LabelElement> getPaymentButton() {
        return paymentButton;
    }

    /**
     * @return Section payment information of payment receipt
     */
    @JsonProperty("paymentInformation")
    public Optional<Element> getPaymentInformation() {
        return paymentInformation;
    }

    /**
     * @return The receipt's settings.
     */
    @JsonProperty("settings")
    public Optional<SettingElement> getSettings() {
        return settings;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ReceiptContent && equalTo((ReceiptContent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ReceiptContent other) {
        return amount.equals(other.amount)
                && contactUs.equals(other.contactUs)
                && details.equals(other.details)
                && logo.equals(other.logo)
                && messageBeforeButton.equals(other.messageBeforeButton)
                && page.equals(other.page)
                && paymentButton.equals(other.paymentButton)
                && paymentInformation.equals(other.paymentInformation)
                && settings.equals(other.settings);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.amount,
                this.contactUs,
                this.details,
                this.logo,
                this.messageBeforeButton,
                this.page,
                this.paymentButton,
                this.paymentInformation,
                this.settings);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Element> amount = Optional.empty();

        private Optional<Element> contactUs = Optional.empty();

        private Optional<Element> details = Optional.empty();

        private Optional<Element> logo = Optional.empty();

        private Optional<LabelElement> messageBeforeButton = Optional.empty();

        private Optional<PageElement> page = Optional.empty();

        private Optional<LabelElement> paymentButton = Optional.empty();

        private Optional<Element> paymentInformation = Optional.empty();

        private Optional<SettingElement> settings = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ReceiptContent other) {
            amount(other.getAmount());
            contactUs(other.getContactUs());
            details(other.getDetails());
            logo(other.getLogo());
            messageBeforeButton(other.getMessageBeforeButton());
            page(other.getPage());
            paymentButton(other.getPaymentButton());
            paymentInformation(other.getPaymentInformation());
            settings(other.getSettings());
            return this;
        }

        /**
         * <p>Section amount of payment receipt</p>
         */
        @JsonSetter(value = "amount", nulls = Nulls.SKIP)
        public Builder amount(Optional<Element> amount) {
            this.amount = amount;
            return this;
        }

        public Builder amount(Element amount) {
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * <p>Section contactUs of payment receipt</p>
         */
        @JsonSetter(value = "contactUs", nulls = Nulls.SKIP)
        public Builder contactUs(Optional<Element> contactUs) {
            this.contactUs = contactUs;
            return this;
        }

        public Builder contactUs(Element contactUs) {
            this.contactUs = Optional.ofNullable(contactUs);
            return this;
        }

        /**
         * <p>Section payment details of payment receipt</p>
         */
        @JsonSetter(value = "details", nulls = Nulls.SKIP)
        public Builder details(Optional<Element> details) {
            this.details = details;
            return this;
        }

        public Builder details(Element details) {
            this.details = Optional.ofNullable(details);
            return this;
        }

        /**
         * <p>Section logo of payment receipt</p>
         */
        @JsonSetter(value = "logo", nulls = Nulls.SKIP)
        public Builder logo(Optional<Element> logo) {
            this.logo = logo;
            return this;
        }

        public Builder logo(Element logo) {
            this.logo = Optional.ofNullable(logo);
            return this;
        }

        /**
         * <p>Section message of payment receipt</p>
         */
        @JsonSetter(value = "messageBeforeButton", nulls = Nulls.SKIP)
        public Builder messageBeforeButton(Optional<LabelElement> messageBeforeButton) {
            this.messageBeforeButton = messageBeforeButton;
            return this;
        }

        public Builder messageBeforeButton(LabelElement messageBeforeButton) {
            this.messageBeforeButton = Optional.ofNullable(messageBeforeButton);
            return this;
        }

        /**
         * <p>Section page of payment receipt</p>
         */
        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public Builder page(Optional<PageElement> page) {
            this.page = page;
            return this;
        }

        public Builder page(PageElement page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * <p>Section payment button of payment receipt</p>
         */
        @JsonSetter(value = "paymentButton", nulls = Nulls.SKIP)
        public Builder paymentButton(Optional<LabelElement> paymentButton) {
            this.paymentButton = paymentButton;
            return this;
        }

        public Builder paymentButton(LabelElement paymentButton) {
            this.paymentButton = Optional.ofNullable(paymentButton);
            return this;
        }

        /**
         * <p>Section payment information of payment receipt</p>
         */
        @JsonSetter(value = "paymentInformation", nulls = Nulls.SKIP)
        public Builder paymentInformation(Optional<Element> paymentInformation) {
            this.paymentInformation = paymentInformation;
            return this;
        }

        public Builder paymentInformation(Element paymentInformation) {
            this.paymentInformation = Optional.ofNullable(paymentInformation);
            return this;
        }

        /**
         * <p>The receipt's settings.</p>
         */
        @JsonSetter(value = "settings", nulls = Nulls.SKIP)
        public Builder settings(Optional<SettingElement> settings) {
            this.settings = settings;
            return this;
        }

        public Builder settings(SettingElement settings) {
            this.settings = Optional.ofNullable(settings);
            return this;
        }

        public ReceiptContent build() {
            return new ReceiptContent(
                    amount,
                    contactUs,
                    details,
                    logo,
                    messageBeforeButton,
                    page,
                    paymentButton,
                    paymentInformation,
                    settings,
                    additionalProperties);
        }
    }
}
