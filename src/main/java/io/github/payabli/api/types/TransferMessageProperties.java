/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransferMessageProperties.Builder.class)
public final class TransferMessageProperties {
    private final Optional<String> originalTransferStatus;

    private final Optional<String> currentTransferStatus;

    private final Map<String, Object> additionalProperties;

    private TransferMessageProperties(
            Optional<String> originalTransferStatus,
            Optional<String> currentTransferStatus,
            Map<String, Object> additionalProperties) {
        this.originalTransferStatus = originalTransferStatus;
        this.currentTransferStatus = currentTransferStatus;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("originalTransferStatus")
    public Optional<String> getOriginalTransferStatus() {
        return originalTransferStatus;
    }

    @JsonProperty("currentTransferStatus")
    public Optional<String> getCurrentTransferStatus() {
        return currentTransferStatus;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransferMessageProperties && equalTo((TransferMessageProperties) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransferMessageProperties other) {
        return originalTransferStatus.equals(other.originalTransferStatus)
                && currentTransferStatus.equals(other.currentTransferStatus);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.originalTransferStatus, this.currentTransferStatus);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> originalTransferStatus = Optional.empty();

        private Optional<String> currentTransferStatus = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TransferMessageProperties other) {
            originalTransferStatus(other.getOriginalTransferStatus());
            currentTransferStatus(other.getCurrentTransferStatus());
            return this;
        }

        @JsonSetter(value = "originalTransferStatus", nulls = Nulls.SKIP)
        public Builder originalTransferStatus(Optional<String> originalTransferStatus) {
            this.originalTransferStatus = originalTransferStatus;
            return this;
        }

        public Builder originalTransferStatus(String originalTransferStatus) {
            this.originalTransferStatus = Optional.ofNullable(originalTransferStatus);
            return this;
        }

        @JsonSetter(value = "currentTransferStatus", nulls = Nulls.SKIP)
        public Builder currentTransferStatus(Optional<String> currentTransferStatus) {
            this.currentTransferStatus = currentTransferStatus;
            return this;
        }

        public Builder currentTransferStatus(String currentTransferStatus) {
            this.currentTransferStatus = Optional.ofNullable(currentTransferStatus);
            return this;
        }

        public TransferMessageProperties build() {
            return new TransferMessageProperties(originalTransferStatus, currentTransferStatus, additionalProperties);
        }
    }
}
