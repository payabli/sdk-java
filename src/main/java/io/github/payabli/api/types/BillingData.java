/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BillingData.Builder.class)
public final class BillingData {
    private final Optional<String> accountNumber;

    private final Optional<Integer> bankAccountFunction;

    private final Optional<String> bankAccountHolderName;

    private final Optional<BankAccountHolderType> bankAccountHolderType;

    private final Optional<String> bankName;

    private final Optional<Integer> id;

    private final Optional<String> routingAccount;

    private final Optional<TypeAccount> typeAccount;

    private final Map<String, Object> additionalProperties;

    private BillingData(
            Optional<String> accountNumber,
            Optional<Integer> bankAccountFunction,
            Optional<String> bankAccountHolderName,
            Optional<BankAccountHolderType> bankAccountHolderType,
            Optional<String> bankName,
            Optional<Integer> id,
            Optional<String> routingAccount,
            Optional<TypeAccount> typeAccount,
            Map<String, Object> additionalProperties) {
        this.accountNumber = accountNumber;
        this.bankAccountFunction = bankAccountFunction;
        this.bankAccountHolderName = bankAccountHolderName;
        this.bankAccountHolderType = bankAccountHolderType;
        this.bankName = bankName;
        this.id = id;
        this.routingAccount = routingAccount;
        this.typeAccount = typeAccount;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Account number for bank account.
     */
    @JsonProperty("accountNumber")
    public Optional<String> getAccountNumber() {
        return accountNumber;
    }

    /**
     * @return Describes whether the bank account is used for deposits or withdrawals in Payabli:
     * <ul>
     * <li><code>0</code>: Deposit</li>
     * <li><code>1</code>: Withdrawal</li>
     * <li><code>2</code>: Deposit and withdrawal</li>
     * </ul>
     */
    @JsonProperty("bankAccountFunction")
    public Optional<Integer> getBankAccountFunction() {
        return bankAccountFunction;
    }

    @JsonProperty("bankAccountHolderName")
    public Optional<String> getBankAccountHolderName() {
        return bankAccountHolderName;
    }

    @JsonProperty("bankAccountHolderType")
    public Optional<BankAccountHolderType> getBankAccountHolderType() {
        return bankAccountHolderType;
    }

    @JsonProperty("bankName")
    public Optional<String> getBankName() {
        return bankName;
    }

    /**
     * @return The bank's ID in Payabli.
     */
    @JsonProperty("id")
    public Optional<Integer> getId() {
        return id;
    }

    @JsonProperty("routingAccount")
    public Optional<String> getRoutingAccount() {
        return routingAccount;
    }

    @JsonProperty("typeAccount")
    public Optional<TypeAccount> getTypeAccount() {
        return typeAccount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BillingData && equalTo((BillingData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BillingData other) {
        return accountNumber.equals(other.accountNumber)
                && bankAccountFunction.equals(other.bankAccountFunction)
                && bankAccountHolderName.equals(other.bankAccountHolderName)
                && bankAccountHolderType.equals(other.bankAccountHolderType)
                && bankName.equals(other.bankName)
                && id.equals(other.id)
                && routingAccount.equals(other.routingAccount)
                && typeAccount.equals(other.typeAccount);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accountNumber,
                this.bankAccountFunction,
                this.bankAccountHolderName,
                this.bankAccountHolderType,
                this.bankName,
                this.id,
                this.routingAccount,
                this.typeAccount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> accountNumber = Optional.empty();

        private Optional<Integer> bankAccountFunction = Optional.empty();

        private Optional<String> bankAccountHolderName = Optional.empty();

        private Optional<BankAccountHolderType> bankAccountHolderType = Optional.empty();

        private Optional<String> bankName = Optional.empty();

        private Optional<Integer> id = Optional.empty();

        private Optional<String> routingAccount = Optional.empty();

        private Optional<TypeAccount> typeAccount = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BillingData other) {
            accountNumber(other.getAccountNumber());
            bankAccountFunction(other.getBankAccountFunction());
            bankAccountHolderName(other.getBankAccountHolderName());
            bankAccountHolderType(other.getBankAccountHolderType());
            bankName(other.getBankName());
            id(other.getId());
            routingAccount(other.getRoutingAccount());
            typeAccount(other.getTypeAccount());
            return this;
        }

        /**
         * <p>Account number for bank account.</p>
         */
        @JsonSetter(value = "accountNumber", nulls = Nulls.SKIP)
        public Builder accountNumber(Optional<String> accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }

        public Builder accountNumber(String accountNumber) {
            this.accountNumber = Optional.ofNullable(accountNumber);
            return this;
        }

        /**
         * <p>Describes whether the bank account is used for deposits or withdrawals in Payabli:</p>
         * <ul>
         * <li><code>0</code>: Deposit</li>
         * <li><code>1</code>: Withdrawal</li>
         * <li><code>2</code>: Deposit and withdrawal</li>
         * </ul>
         */
        @JsonSetter(value = "bankAccountFunction", nulls = Nulls.SKIP)
        public Builder bankAccountFunction(Optional<Integer> bankAccountFunction) {
            this.bankAccountFunction = bankAccountFunction;
            return this;
        }

        public Builder bankAccountFunction(Integer bankAccountFunction) {
            this.bankAccountFunction = Optional.ofNullable(bankAccountFunction);
            return this;
        }

        @JsonSetter(value = "bankAccountHolderName", nulls = Nulls.SKIP)
        public Builder bankAccountHolderName(Optional<String> bankAccountHolderName) {
            this.bankAccountHolderName = bankAccountHolderName;
            return this;
        }

        public Builder bankAccountHolderName(String bankAccountHolderName) {
            this.bankAccountHolderName = Optional.ofNullable(bankAccountHolderName);
            return this;
        }

        @JsonSetter(value = "bankAccountHolderType", nulls = Nulls.SKIP)
        public Builder bankAccountHolderType(Optional<BankAccountHolderType> bankAccountHolderType) {
            this.bankAccountHolderType = bankAccountHolderType;
            return this;
        }

        public Builder bankAccountHolderType(BankAccountHolderType bankAccountHolderType) {
            this.bankAccountHolderType = Optional.ofNullable(bankAccountHolderType);
            return this;
        }

        @JsonSetter(value = "bankName", nulls = Nulls.SKIP)
        public Builder bankName(Optional<String> bankName) {
            this.bankName = bankName;
            return this;
        }

        public Builder bankName(String bankName) {
            this.bankName = Optional.ofNullable(bankName);
            return this;
        }

        /**
         * <p>The bank's ID in Payabli.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<Integer> id) {
            this.id = id;
            return this;
        }

        public Builder id(Integer id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        @JsonSetter(value = "routingAccount", nulls = Nulls.SKIP)
        public Builder routingAccount(Optional<String> routingAccount) {
            this.routingAccount = routingAccount;
            return this;
        }

        public Builder routingAccount(String routingAccount) {
            this.routingAccount = Optional.ofNullable(routingAccount);
            return this;
        }

        @JsonSetter(value = "typeAccount", nulls = Nulls.SKIP)
        public Builder typeAccount(Optional<TypeAccount> typeAccount) {
            this.typeAccount = typeAccount;
            return this;
        }

        public Builder typeAccount(TypeAccount typeAccount) {
            this.typeAccount = Optional.ofNullable(typeAccount);
            return this;
        }

        public BillingData build() {
            return new BillingData(
                    accountNumber,
                    bankAccountFunction,
                    bankAccountHolderName,
                    bankAccountHolderType,
                    bankName,
                    id,
                    routingAccount,
                    typeAccount,
                    additionalProperties);
        }
    }
}
