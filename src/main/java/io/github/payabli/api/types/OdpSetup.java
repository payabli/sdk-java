/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OdpSetup.Builder.class)
public final class OdpSetup {
    private final Optional<Boolean> allowAch;

    private final Optional<Boolean> allowChecks;

    private final Optional<Boolean> allowVCard;

    private final Optional<OdpSetupProcessingRegion> processingRegion;

    private final Optional<String> processor;

    private final Optional<String> issuerNetworkSettingsId;

    private final Map<String, Object> additionalProperties;

    private OdpSetup(
            Optional<Boolean> allowAch,
            Optional<Boolean> allowChecks,
            Optional<Boolean> allowVCard,
            Optional<OdpSetupProcessingRegion> processingRegion,
            Optional<String> processor,
            Optional<String> issuerNetworkSettingsId,
            Map<String, Object> additionalProperties) {
        this.allowAch = allowAch;
        this.allowChecks = allowChecks;
        this.allowVCard = allowVCard;
        this.processingRegion = processingRegion;
        this.processor = processor;
        this.issuerNetworkSettingsId = issuerNetworkSettingsId;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Enables or disables ACH payout functionality
     */
    @JsonProperty("allowAch")
    public Optional<Boolean> getAllowAch() {
        return allowAch;
    }

    /**
     * @return Enables or disables check printing payout functionality
     */
    @JsonProperty("allowChecks")
    public Optional<Boolean> getAllowChecks() {
        return allowChecks;
    }

    /**
     * @return Enables or disables vCard payout functionality
     */
    @JsonProperty("allowVCard")
    public Optional<Boolean> getAllowVCard() {
        return allowVCard;
    }

    /**
     * @return Region where payment processing occurs
     */
    @JsonProperty("processing_region")
    public Optional<OdpSetupProcessingRegion> getProcessingRegion() {
        return processingRegion;
    }

    /**
     * @return Payment processor identifier
     */
    @JsonProperty("processor")
    public Optional<String> getProcessor() {
        return processor;
    }

    /**
     * @return Reference ID for the program enabled for ODP issuance
     */
    @JsonProperty("issuerNetworkSettingsId")
    public Optional<String> getIssuerNetworkSettingsId() {
        return issuerNetworkSettingsId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OdpSetup && equalTo((OdpSetup) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OdpSetup other) {
        return allowAch.equals(other.allowAch)
                && allowChecks.equals(other.allowChecks)
                && allowVCard.equals(other.allowVCard)
                && processingRegion.equals(other.processingRegion)
                && processor.equals(other.processor)
                && issuerNetworkSettingsId.equals(other.issuerNetworkSettingsId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.allowAch,
                this.allowChecks,
                this.allowVCard,
                this.processingRegion,
                this.processor,
                this.issuerNetworkSettingsId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> allowAch = Optional.empty();

        private Optional<Boolean> allowChecks = Optional.empty();

        private Optional<Boolean> allowVCard = Optional.empty();

        private Optional<OdpSetupProcessingRegion> processingRegion = Optional.empty();

        private Optional<String> processor = Optional.empty();

        private Optional<String> issuerNetworkSettingsId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OdpSetup other) {
            allowAch(other.getAllowAch());
            allowChecks(other.getAllowChecks());
            allowVCard(other.getAllowVCard());
            processingRegion(other.getProcessingRegion());
            processor(other.getProcessor());
            issuerNetworkSettingsId(other.getIssuerNetworkSettingsId());
            return this;
        }

        /**
         * <p>Enables or disables ACH payout functionality</p>
         */
        @JsonSetter(value = "allowAch", nulls = Nulls.SKIP)
        public Builder allowAch(Optional<Boolean> allowAch) {
            this.allowAch = allowAch;
            return this;
        }

        public Builder allowAch(Boolean allowAch) {
            this.allowAch = Optional.ofNullable(allowAch);
            return this;
        }

        /**
         * <p>Enables or disables check printing payout functionality</p>
         */
        @JsonSetter(value = "allowChecks", nulls = Nulls.SKIP)
        public Builder allowChecks(Optional<Boolean> allowChecks) {
            this.allowChecks = allowChecks;
            return this;
        }

        public Builder allowChecks(Boolean allowChecks) {
            this.allowChecks = Optional.ofNullable(allowChecks);
            return this;
        }

        /**
         * <p>Enables or disables vCard payout functionality</p>
         */
        @JsonSetter(value = "allowVCard", nulls = Nulls.SKIP)
        public Builder allowVCard(Optional<Boolean> allowVCard) {
            this.allowVCard = allowVCard;
            return this;
        }

        public Builder allowVCard(Boolean allowVCard) {
            this.allowVCard = Optional.ofNullable(allowVCard);
            return this;
        }

        /**
         * <p>Region where payment processing occurs</p>
         */
        @JsonSetter(value = "processing_region", nulls = Nulls.SKIP)
        public Builder processingRegion(Optional<OdpSetupProcessingRegion> processingRegion) {
            this.processingRegion = processingRegion;
            return this;
        }

        public Builder processingRegion(OdpSetupProcessingRegion processingRegion) {
            this.processingRegion = Optional.ofNullable(processingRegion);
            return this;
        }

        /**
         * <p>Payment processor identifier</p>
         */
        @JsonSetter(value = "processor", nulls = Nulls.SKIP)
        public Builder processor(Optional<String> processor) {
            this.processor = processor;
            return this;
        }

        public Builder processor(String processor) {
            this.processor = Optional.ofNullable(processor);
            return this;
        }

        /**
         * <p>Reference ID for the program enabled for ODP issuance</p>
         */
        @JsonSetter(value = "issuerNetworkSettingsId", nulls = Nulls.SKIP)
        public Builder issuerNetworkSettingsId(Optional<String> issuerNetworkSettingsId) {
            this.issuerNetworkSettingsId = issuerNetworkSettingsId;
            return this;
        }

        public Builder issuerNetworkSettingsId(String issuerNetworkSettingsId) {
            this.issuerNetworkSettingsId = Optional.ofNullable(issuerNetworkSettingsId);
            return this;
        }

        public OdpSetup build() {
            return new OdpSetup(
                    allowAch,
                    allowChecks,
                    allowVCard,
                    processingRegion,
                    processor,
                    issuerNetworkSettingsId,
                    additionalProperties);
        }
    }
}
