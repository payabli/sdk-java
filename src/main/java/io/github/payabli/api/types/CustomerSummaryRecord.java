/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomerSummaryRecord.Builder.class)
public final class CustomerSummaryRecord {
    private final Optional<Integer> numberofTransactions;

    private final Optional<List<TransactionQueryRecords>> recentTransactions;

    private final Optional<Double> totalAmountTransactions;

    private final Optional<Double> totalNetAmountTransactions;

    private final Map<String, Object> additionalProperties;

    private CustomerSummaryRecord(
            Optional<Integer> numberofTransactions,
            Optional<List<TransactionQueryRecords>> recentTransactions,
            Optional<Double> totalAmountTransactions,
            Optional<Double> totalNetAmountTransactions,
            Map<String, Object> additionalProperties) {
        this.numberofTransactions = numberofTransactions;
        this.recentTransactions = recentTransactions;
        this.totalAmountTransactions = totalAmountTransactions;
        this.totalNetAmountTransactions = totalNetAmountTransactions;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Number total of transactions or payments
     */
    @JsonProperty("numberofTransactions")
    public Optional<Integer> getNumberofTransactions() {
        return numberofTransactions;
    }

    /**
     * @return List of more recent 5 transactions belonging to the customer
     */
    @JsonProperty("recentTransactions")
    public Optional<List<TransactionQueryRecords>> getRecentTransactions() {
        return recentTransactions;
    }

    /**
     * @return Total amount in transactions
     */
    @JsonProperty("totalAmountTransactions")
    public Optional<Double> getTotalAmountTransactions() {
        return totalAmountTransactions;
    }

    /**
     * @return Total net amount in transactions
     */
    @JsonProperty("totalNetAmountTransactions")
    public Optional<Double> getTotalNetAmountTransactions() {
        return totalNetAmountTransactions;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomerSummaryRecord && equalTo((CustomerSummaryRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomerSummaryRecord other) {
        return numberofTransactions.equals(other.numberofTransactions)
                && recentTransactions.equals(other.recentTransactions)
                && totalAmountTransactions.equals(other.totalAmountTransactions)
                && totalNetAmountTransactions.equals(other.totalNetAmountTransactions);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.numberofTransactions,
                this.recentTransactions,
                this.totalAmountTransactions,
                this.totalNetAmountTransactions);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> numberofTransactions = Optional.empty();

        private Optional<List<TransactionQueryRecords>> recentTransactions = Optional.empty();

        private Optional<Double> totalAmountTransactions = Optional.empty();

        private Optional<Double> totalNetAmountTransactions = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CustomerSummaryRecord other) {
            numberofTransactions(other.getNumberofTransactions());
            recentTransactions(other.getRecentTransactions());
            totalAmountTransactions(other.getTotalAmountTransactions());
            totalNetAmountTransactions(other.getTotalNetAmountTransactions());
            return this;
        }

        /**
         * <p>Number total of transactions or payments</p>
         */
        @JsonSetter(value = "numberofTransactions", nulls = Nulls.SKIP)
        public Builder numberofTransactions(Optional<Integer> numberofTransactions) {
            this.numberofTransactions = numberofTransactions;
            return this;
        }

        public Builder numberofTransactions(Integer numberofTransactions) {
            this.numberofTransactions = Optional.ofNullable(numberofTransactions);
            return this;
        }

        /**
         * <p>List of more recent 5 transactions belonging to the customer</p>
         */
        @JsonSetter(value = "recentTransactions", nulls = Nulls.SKIP)
        public Builder recentTransactions(Optional<List<TransactionQueryRecords>> recentTransactions) {
            this.recentTransactions = recentTransactions;
            return this;
        }

        public Builder recentTransactions(List<TransactionQueryRecords> recentTransactions) {
            this.recentTransactions = Optional.ofNullable(recentTransactions);
            return this;
        }

        /**
         * <p>Total amount in transactions</p>
         */
        @JsonSetter(value = "totalAmountTransactions", nulls = Nulls.SKIP)
        public Builder totalAmountTransactions(Optional<Double> totalAmountTransactions) {
            this.totalAmountTransactions = totalAmountTransactions;
            return this;
        }

        public Builder totalAmountTransactions(Double totalAmountTransactions) {
            this.totalAmountTransactions = Optional.ofNullable(totalAmountTransactions);
            return this;
        }

        /**
         * <p>Total net amount in transactions</p>
         */
        @JsonSetter(value = "totalNetAmountTransactions", nulls = Nulls.SKIP)
        public Builder totalNetAmountTransactions(Optional<Double> totalNetAmountTransactions) {
            this.totalNetAmountTransactions = totalNetAmountTransactions;
            return this;
        }

        public Builder totalNetAmountTransactions(Double totalNetAmountTransactions) {
            this.totalNetAmountTransactions = Optional.ofNullable(totalNetAmountTransactions);
            return this;
        }

        public CustomerSummaryRecord build() {
            return new CustomerSummaryRecord(
                    numberofTransactions,
                    recentTransactions,
                    totalAmountTransactions,
                    totalNetAmountTransactions,
                    additionalProperties);
        }
    }
}
