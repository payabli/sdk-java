/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DSection.Builder.class)
public final class DSection {
    private final Optional<Bnk> depositAccount;

    private final Optional<Bnk> withdrawalAccount;

    private final Map<String, Object> additionalProperties;

    private DSection(
            Optional<Bnk> depositAccount, Optional<Bnk> withdrawalAccount, Map<String, Object> additionalProperties) {
        this.depositAccount = depositAccount;
        this.withdrawalAccount = withdrawalAccount;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("depositAccount")
    public Optional<Bnk> getDepositAccount() {
        return depositAccount;
    }

    @JsonProperty("withdrawalAccount")
    public Optional<Bnk> getWithdrawalAccount() {
        return withdrawalAccount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DSection && equalTo((DSection) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DSection other) {
        return depositAccount.equals(other.depositAccount) && withdrawalAccount.equals(other.withdrawalAccount);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.depositAccount, this.withdrawalAccount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Bnk> depositAccount = Optional.empty();

        private Optional<Bnk> withdrawalAccount = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DSection other) {
            depositAccount(other.getDepositAccount());
            withdrawalAccount(other.getWithdrawalAccount());
            return this;
        }

        @JsonSetter(value = "depositAccount", nulls = Nulls.SKIP)
        public Builder depositAccount(Optional<Bnk> depositAccount) {
            this.depositAccount = depositAccount;
            return this;
        }

        public Builder depositAccount(Bnk depositAccount) {
            this.depositAccount = Optional.ofNullable(depositAccount);
            return this;
        }

        @JsonSetter(value = "withdrawalAccount", nulls = Nulls.SKIP)
        public Builder withdrawalAccount(Optional<Bnk> withdrawalAccount) {
            this.withdrawalAccount = withdrawalAccount;
            return this;
        }

        public Builder withdrawalAccount(Bnk withdrawalAccount) {
            this.withdrawalAccount = Optional.ofNullable(withdrawalAccount);
            return this;
        }

        public DSection build() {
            return new DSection(depositAccount, withdrawalAccount, additionalProperties);
        }
    }
}
