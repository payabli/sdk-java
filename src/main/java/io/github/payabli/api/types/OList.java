/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = OList.Builder.class)
public final class OList {
    private final Optional<LinkData> oaddress;

    private final Optional<LinkData> ocity;

    private final Optional<LinkData> ocountry;

    private final Optional<LinkData> odriverstate;

    private final Optional<LinkData> ostate;

    private final Optional<LinkData> ownerdob;

    private final Optional<LinkData> ownerdriver;

    private final Optional<LinkData> owneremail;

    private final Optional<LinkData> ownername;

    private final Optional<LinkData> ownerpercent;

    private final Optional<LinkData> ownerphone1;

    private final Optional<LinkData> ownerphone2;

    private final Optional<LinkData> ownerssn;

    private final Optional<LinkData> ownertitle;

    private final Optional<LinkData> ozip;

    private final Map<String, Object> additionalProperties;

    private OList(
            Optional<LinkData> oaddress,
            Optional<LinkData> ocity,
            Optional<LinkData> ocountry,
            Optional<LinkData> odriverstate,
            Optional<LinkData> ostate,
            Optional<LinkData> ownerdob,
            Optional<LinkData> ownerdriver,
            Optional<LinkData> owneremail,
            Optional<LinkData> ownername,
            Optional<LinkData> ownerpercent,
            Optional<LinkData> ownerphone1,
            Optional<LinkData> ownerphone2,
            Optional<LinkData> ownerssn,
            Optional<LinkData> ownertitle,
            Optional<LinkData> ozip,
            Map<String, Object> additionalProperties) {
        this.oaddress = oaddress;
        this.ocity = ocity;
        this.ocountry = ocountry;
        this.odriverstate = odriverstate;
        this.ostate = ostate;
        this.ownerdob = ownerdob;
        this.ownerdriver = ownerdriver;
        this.owneremail = owneremail;
        this.ownername = ownername;
        this.ownerpercent = ownerpercent;
        this.ownerphone1 = ownerphone1;
        this.ownerphone2 = ownerphone2;
        this.ownerssn = ownerssn;
        this.ownertitle = ownertitle;
        this.ozip = ozip;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("oaddress")
    public Optional<LinkData> getOaddress() {
        return oaddress;
    }

    @JsonProperty("ocity")
    public Optional<LinkData> getOcity() {
        return ocity;
    }

    @JsonProperty("ocountry")
    public Optional<LinkData> getOcountry() {
        return ocountry;
    }

    @JsonProperty("odriverstate")
    public Optional<LinkData> getOdriverstate() {
        return odriverstate;
    }

    @JsonProperty("ostate")
    public Optional<LinkData> getOstate() {
        return ostate;
    }

    @JsonProperty("ownerdob")
    public Optional<LinkData> getOwnerdob() {
        return ownerdob;
    }

    @JsonProperty("ownerdriver")
    public Optional<LinkData> getOwnerdriver() {
        return ownerdriver;
    }

    @JsonProperty("owneremail")
    public Optional<LinkData> getOwneremail() {
        return owneremail;
    }

    @JsonProperty("ownername")
    public Optional<LinkData> getOwnername() {
        return ownername;
    }

    @JsonProperty("ownerpercent")
    public Optional<LinkData> getOwnerpercent() {
        return ownerpercent;
    }

    @JsonProperty("ownerphone1")
    public Optional<LinkData> getOwnerphone1() {
        return ownerphone1;
    }

    @JsonProperty("ownerphone2")
    public Optional<LinkData> getOwnerphone2() {
        return ownerphone2;
    }

    @JsonProperty("ownerssn")
    public Optional<LinkData> getOwnerssn() {
        return ownerssn;
    }

    @JsonProperty("ownertitle")
    public Optional<LinkData> getOwnertitle() {
        return ownertitle;
    }

    @JsonProperty("ozip")
    public Optional<LinkData> getOzip() {
        return ozip;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof OList && equalTo((OList) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(OList other) {
        return oaddress.equals(other.oaddress)
                && ocity.equals(other.ocity)
                && ocountry.equals(other.ocountry)
                && odriverstate.equals(other.odriverstate)
                && ostate.equals(other.ostate)
                && ownerdob.equals(other.ownerdob)
                && ownerdriver.equals(other.ownerdriver)
                && owneremail.equals(other.owneremail)
                && ownername.equals(other.ownername)
                && ownerpercent.equals(other.ownerpercent)
                && ownerphone1.equals(other.ownerphone1)
                && ownerphone2.equals(other.ownerphone2)
                && ownerssn.equals(other.ownerssn)
                && ownertitle.equals(other.ownertitle)
                && ozip.equals(other.ozip);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.oaddress,
                this.ocity,
                this.ocountry,
                this.odriverstate,
                this.ostate,
                this.ownerdob,
                this.ownerdriver,
                this.owneremail,
                this.ownername,
                this.ownerpercent,
                this.ownerphone1,
                this.ownerphone2,
                this.ownerssn,
                this.ownertitle,
                this.ozip);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<LinkData> oaddress = Optional.empty();

        private Optional<LinkData> ocity = Optional.empty();

        private Optional<LinkData> ocountry = Optional.empty();

        private Optional<LinkData> odriverstate = Optional.empty();

        private Optional<LinkData> ostate = Optional.empty();

        private Optional<LinkData> ownerdob = Optional.empty();

        private Optional<LinkData> ownerdriver = Optional.empty();

        private Optional<LinkData> owneremail = Optional.empty();

        private Optional<LinkData> ownername = Optional.empty();

        private Optional<LinkData> ownerpercent = Optional.empty();

        private Optional<LinkData> ownerphone1 = Optional.empty();

        private Optional<LinkData> ownerphone2 = Optional.empty();

        private Optional<LinkData> ownerssn = Optional.empty();

        private Optional<LinkData> ownertitle = Optional.empty();

        private Optional<LinkData> ozip = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(OList other) {
            oaddress(other.getOaddress());
            ocity(other.getOcity());
            ocountry(other.getOcountry());
            odriverstate(other.getOdriverstate());
            ostate(other.getOstate());
            ownerdob(other.getOwnerdob());
            ownerdriver(other.getOwnerdriver());
            owneremail(other.getOwneremail());
            ownername(other.getOwnername());
            ownerpercent(other.getOwnerpercent());
            ownerphone1(other.getOwnerphone1());
            ownerphone2(other.getOwnerphone2());
            ownerssn(other.getOwnerssn());
            ownertitle(other.getOwnertitle());
            ozip(other.getOzip());
            return this;
        }

        @JsonSetter(value = "oaddress", nulls = Nulls.SKIP)
        public Builder oaddress(Optional<LinkData> oaddress) {
            this.oaddress = oaddress;
            return this;
        }

        public Builder oaddress(LinkData oaddress) {
            this.oaddress = Optional.ofNullable(oaddress);
            return this;
        }

        @JsonSetter(value = "ocity", nulls = Nulls.SKIP)
        public Builder ocity(Optional<LinkData> ocity) {
            this.ocity = ocity;
            return this;
        }

        public Builder ocity(LinkData ocity) {
            this.ocity = Optional.ofNullable(ocity);
            return this;
        }

        @JsonSetter(value = "ocountry", nulls = Nulls.SKIP)
        public Builder ocountry(Optional<LinkData> ocountry) {
            this.ocountry = ocountry;
            return this;
        }

        public Builder ocountry(LinkData ocountry) {
            this.ocountry = Optional.ofNullable(ocountry);
            return this;
        }

        @JsonSetter(value = "odriverstate", nulls = Nulls.SKIP)
        public Builder odriverstate(Optional<LinkData> odriverstate) {
            this.odriverstate = odriverstate;
            return this;
        }

        public Builder odriverstate(LinkData odriverstate) {
            this.odriverstate = Optional.ofNullable(odriverstate);
            return this;
        }

        @JsonSetter(value = "ostate", nulls = Nulls.SKIP)
        public Builder ostate(Optional<LinkData> ostate) {
            this.ostate = ostate;
            return this;
        }

        public Builder ostate(LinkData ostate) {
            this.ostate = Optional.ofNullable(ostate);
            return this;
        }

        @JsonSetter(value = "ownerdob", nulls = Nulls.SKIP)
        public Builder ownerdob(Optional<LinkData> ownerdob) {
            this.ownerdob = ownerdob;
            return this;
        }

        public Builder ownerdob(LinkData ownerdob) {
            this.ownerdob = Optional.ofNullable(ownerdob);
            return this;
        }

        @JsonSetter(value = "ownerdriver", nulls = Nulls.SKIP)
        public Builder ownerdriver(Optional<LinkData> ownerdriver) {
            this.ownerdriver = ownerdriver;
            return this;
        }

        public Builder ownerdriver(LinkData ownerdriver) {
            this.ownerdriver = Optional.ofNullable(ownerdriver);
            return this;
        }

        @JsonSetter(value = "owneremail", nulls = Nulls.SKIP)
        public Builder owneremail(Optional<LinkData> owneremail) {
            this.owneremail = owneremail;
            return this;
        }

        public Builder owneremail(LinkData owneremail) {
            this.owneremail = Optional.ofNullable(owneremail);
            return this;
        }

        @JsonSetter(value = "ownername", nulls = Nulls.SKIP)
        public Builder ownername(Optional<LinkData> ownername) {
            this.ownername = ownername;
            return this;
        }

        public Builder ownername(LinkData ownername) {
            this.ownername = Optional.ofNullable(ownername);
            return this;
        }

        @JsonSetter(value = "ownerpercent", nulls = Nulls.SKIP)
        public Builder ownerpercent(Optional<LinkData> ownerpercent) {
            this.ownerpercent = ownerpercent;
            return this;
        }

        public Builder ownerpercent(LinkData ownerpercent) {
            this.ownerpercent = Optional.ofNullable(ownerpercent);
            return this;
        }

        @JsonSetter(value = "ownerphone1", nulls = Nulls.SKIP)
        public Builder ownerphone1(Optional<LinkData> ownerphone1) {
            this.ownerphone1 = ownerphone1;
            return this;
        }

        public Builder ownerphone1(LinkData ownerphone1) {
            this.ownerphone1 = Optional.ofNullable(ownerphone1);
            return this;
        }

        @JsonSetter(value = "ownerphone2", nulls = Nulls.SKIP)
        public Builder ownerphone2(Optional<LinkData> ownerphone2) {
            this.ownerphone2 = ownerphone2;
            return this;
        }

        public Builder ownerphone2(LinkData ownerphone2) {
            this.ownerphone2 = Optional.ofNullable(ownerphone2);
            return this;
        }

        @JsonSetter(value = "ownerssn", nulls = Nulls.SKIP)
        public Builder ownerssn(Optional<LinkData> ownerssn) {
            this.ownerssn = ownerssn;
            return this;
        }

        public Builder ownerssn(LinkData ownerssn) {
            this.ownerssn = Optional.ofNullable(ownerssn);
            return this;
        }

        @JsonSetter(value = "ownertitle", nulls = Nulls.SKIP)
        public Builder ownertitle(Optional<LinkData> ownertitle) {
            this.ownertitle = ownertitle;
            return this;
        }

        public Builder ownertitle(LinkData ownertitle) {
            this.ownertitle = Optional.ofNullable(ownertitle);
            return this;
        }

        @JsonSetter(value = "ozip", nulls = Nulls.SKIP)
        public Builder ozip(Optional<LinkData> ozip) {
            this.ozip = ozip;
            return this;
        }

        public Builder ozip(LinkData ozip) {
            this.ozip = Optional.ofNullable(ozip);
            return this;
        }

        public OList build() {
            return new OList(
                    oaddress,
                    ocity,
                    ocountry,
                    odriverstate,
                    ostate,
                    ownerdob,
                    ownerdriver,
                    owneremail,
                    ownername,
                    ownerpercent,
                    ownerphone1,
                    ownerphone2,
                    ownerssn,
                    ownertitle,
                    ozip,
                    additionalProperties);
        }
    }
}
