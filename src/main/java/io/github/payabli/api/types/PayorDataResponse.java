/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.Nullable;
import io.github.payabli.api.core.NullableNonemptyFilter;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PayorDataResponse.Builder.class)
public final class PayorDataResponse {
    private final Optional<Map<String, Optional<Map<String, Object>>>> additionalData;

    private final Optional<String> billingAddress1;

    private final Optional<String> billingAddress2;

    private final Optional<String> billingCity;

    private final Optional<String> billingCountry;

    private final Optional<String> billingEmail;

    private final Optional<String> billingPhone;

    private final Optional<String> billingState;

    private final Optional<String> billingZip;

    private final Optional<String> companyName;

    private final Optional<Long> customerId;

    private final Optional<String> customerNumber;

    private final Optional<Integer> customerStatus;

    private final Optional<String> firstName;

    private final Optional<List<Optional<String>>> identifiers;

    private final Optional<String> lastName;

    private final Optional<String> shippingAddress1;

    private final Optional<String> shippingAddress2;

    private final Optional<String> shippingCity;

    private final Optional<String> shippingCountry;

    private final Optional<String> shippingState;

    private final Optional<String> shippingZip;

    private final Map<String, Object> additionalProperties;

    private PayorDataResponse(
            Optional<Map<String, Optional<Map<String, Object>>>> additionalData,
            Optional<String> billingAddress1,
            Optional<String> billingAddress2,
            Optional<String> billingCity,
            Optional<String> billingCountry,
            Optional<String> billingEmail,
            Optional<String> billingPhone,
            Optional<String> billingState,
            Optional<String> billingZip,
            Optional<String> companyName,
            Optional<Long> customerId,
            Optional<String> customerNumber,
            Optional<Integer> customerStatus,
            Optional<String> firstName,
            Optional<List<Optional<String>>> identifiers,
            Optional<String> lastName,
            Optional<String> shippingAddress1,
            Optional<String> shippingAddress2,
            Optional<String> shippingCity,
            Optional<String> shippingCountry,
            Optional<String> shippingState,
            Optional<String> shippingZip,
            Map<String, Object> additionalProperties) {
        this.additionalData = additionalData;
        this.billingAddress1 = billingAddress1;
        this.billingAddress2 = billingAddress2;
        this.billingCity = billingCity;
        this.billingCountry = billingCountry;
        this.billingEmail = billingEmail;
        this.billingPhone = billingPhone;
        this.billingState = billingState;
        this.billingZip = billingZip;
        this.companyName = companyName;
        this.customerId = customerId;
        this.customerNumber = customerNumber;
        this.customerStatus = customerStatus;
        this.firstName = firstName;
        this.identifiers = identifiers;
        this.lastName = lastName;
        this.shippingAddress1 = shippingAddress1;
        this.shippingAddress2 = shippingAddress2;
        this.shippingCity = shippingCity;
        this.shippingCountry = shippingCountry;
        this.shippingState = shippingState;
        this.shippingZip = shippingZip;
        this.additionalProperties = additionalProperties;
    }

    @JsonIgnore
    public Optional<Map<String, Optional<Map<String, Object>>>> getAdditionalData() {
        if (additionalData == null) {
            return Optional.empty();
        }
        return additionalData;
    }

    @JsonIgnore
    public Optional<String> getBillingAddress1() {
        if (billingAddress1 == null) {
            return Optional.empty();
        }
        return billingAddress1;
    }

    @JsonIgnore
    public Optional<String> getBillingAddress2() {
        if (billingAddress2 == null) {
            return Optional.empty();
        }
        return billingAddress2;
    }

    @JsonIgnore
    public Optional<String> getBillingCity() {
        if (billingCity == null) {
            return Optional.empty();
        }
        return billingCity;
    }

    @JsonIgnore
    public Optional<String> getBillingCountry() {
        if (billingCountry == null) {
            return Optional.empty();
        }
        return billingCountry;
    }

    @JsonIgnore
    public Optional<String> getBillingEmail() {
        if (billingEmail == null) {
            return Optional.empty();
        }
        return billingEmail;
    }

    @JsonIgnore
    public Optional<String> getBillingPhone() {
        if (billingPhone == null) {
            return Optional.empty();
        }
        return billingPhone;
    }

    @JsonIgnore
    public Optional<String> getBillingState() {
        if (billingState == null) {
            return Optional.empty();
        }
        return billingState;
    }

    /**
     * @return Customer's billing ZIP code. For Pay In functions, this field supports 5-digit and 9-digit ZIP codes and alphanumeric Canadian postal codes. For example: &quot;37615-1234&quot; or &quot;37615&quot;.
     */
    @JsonIgnore
    public Optional<String> getBillingZip() {
        if (billingZip == null) {
            return Optional.empty();
        }
        return billingZip;
    }

    /**
     * @return Customer's company name.
     */
    @JsonIgnore
    public Optional<String> getCompanyName() {
        if (companyName == null) {
            return Optional.empty();
        }
        return companyName;
    }

    @JsonIgnore
    public Optional<Long> getCustomerId() {
        if (customerId == null) {
            return Optional.empty();
        }
        return customerId;
    }

    @JsonIgnore
    public Optional<String> getCustomerNumber() {
        if (customerNumber == null) {
            return Optional.empty();
        }
        return customerNumber;
    }

    /**
     * @return Customer status. This is used to determine if the customer is active or inactive.
     */
    @JsonIgnore
    public Optional<Integer> getCustomerStatus() {
        if (customerStatus == null) {
            return Optional.empty();
        }
        return customerStatus;
    }

    /**
     * @return Customer/Payor first name.
     */
    @JsonIgnore
    public Optional<String> getFirstName() {
        if (firstName == null) {
            return Optional.empty();
        }
        return firstName;
    }

    @JsonIgnore
    public Optional<List<Optional<String>>> getIdentifiers() {
        if (identifiers == null) {
            return Optional.empty();
        }
        return identifiers;
    }

    /**
     * @return Customer/Payor last name.
     */
    @JsonIgnore
    public Optional<String> getLastName() {
        if (lastName == null) {
            return Optional.empty();
        }
        return lastName;
    }

    @JsonIgnore
    public Optional<String> getShippingAddress1() {
        if (shippingAddress1 == null) {
            return Optional.empty();
        }
        return shippingAddress1;
    }

    @JsonIgnore
    public Optional<String> getShippingAddress2() {
        if (shippingAddress2 == null) {
            return Optional.empty();
        }
        return shippingAddress2;
    }

    @JsonIgnore
    public Optional<String> getShippingCity() {
        if (shippingCity == null) {
            return Optional.empty();
        }
        return shippingCity;
    }

    @JsonIgnore
    public Optional<String> getShippingCountry() {
        if (shippingCountry == null) {
            return Optional.empty();
        }
        return shippingCountry;
    }

    @JsonIgnore
    public Optional<String> getShippingState() {
        if (shippingState == null) {
            return Optional.empty();
        }
        return shippingState;
    }

    @JsonIgnore
    public Optional<String> getShippingZip() {
        if (shippingZip == null) {
            return Optional.empty();
        }
        return shippingZip;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("AdditionalData")
    private Optional<Map<String, Optional<Map<String, Object>>>> _getAdditionalData() {
        return additionalData;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BillingAddress1")
    private Optional<String> _getBillingAddress1() {
        return billingAddress1;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BillingAddress2")
    private Optional<String> _getBillingAddress2() {
        return billingAddress2;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BillingCity")
    private Optional<String> _getBillingCity() {
        return billingCity;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BillingCountry")
    private Optional<String> _getBillingCountry() {
        return billingCountry;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BillingEmail")
    private Optional<String> _getBillingEmail() {
        return billingEmail;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BillingPhone")
    private Optional<String> _getBillingPhone() {
        return billingPhone;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BillingState")
    private Optional<String> _getBillingState() {
        return billingState;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("BillingZip")
    private Optional<String> _getBillingZip() {
        return billingZip;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("CompanyName")
    private Optional<String> _getCompanyName() {
        return companyName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customerId")
    private Optional<Long> _getCustomerId() {
        return customerId;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("CustomerNumber")
    private Optional<String> _getCustomerNumber() {
        return customerNumber;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("customerStatus")
    private Optional<Integer> _getCustomerStatus() {
        return customerStatus;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("FirstName")
    private Optional<String> _getFirstName() {
        return firstName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("Identifiers")
    private Optional<List<Optional<String>>> _getIdentifiers() {
        return identifiers;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("LastName")
    private Optional<String> _getLastName() {
        return lastName;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ShippingAddress1")
    private Optional<String> _getShippingAddress1() {
        return shippingAddress1;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ShippingAddress2")
    private Optional<String> _getShippingAddress2() {
        return shippingAddress2;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ShippingCity")
    private Optional<String> _getShippingCity() {
        return shippingCity;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ShippingCountry")
    private Optional<String> _getShippingCountry() {
        return shippingCountry;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ShippingState")
    private Optional<String> _getShippingState() {
        return shippingState;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("ShippingZip")
    private Optional<String> _getShippingZip() {
        return shippingZip;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PayorDataResponse && equalTo((PayorDataResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PayorDataResponse other) {
        return additionalData.equals(other.additionalData)
                && billingAddress1.equals(other.billingAddress1)
                && billingAddress2.equals(other.billingAddress2)
                && billingCity.equals(other.billingCity)
                && billingCountry.equals(other.billingCountry)
                && billingEmail.equals(other.billingEmail)
                && billingPhone.equals(other.billingPhone)
                && billingState.equals(other.billingState)
                && billingZip.equals(other.billingZip)
                && companyName.equals(other.companyName)
                && customerId.equals(other.customerId)
                && customerNumber.equals(other.customerNumber)
                && customerStatus.equals(other.customerStatus)
                && firstName.equals(other.firstName)
                && identifiers.equals(other.identifiers)
                && lastName.equals(other.lastName)
                && shippingAddress1.equals(other.shippingAddress1)
                && shippingAddress2.equals(other.shippingAddress2)
                && shippingCity.equals(other.shippingCity)
                && shippingCountry.equals(other.shippingCountry)
                && shippingState.equals(other.shippingState)
                && shippingZip.equals(other.shippingZip);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.additionalData,
                this.billingAddress1,
                this.billingAddress2,
                this.billingCity,
                this.billingCountry,
                this.billingEmail,
                this.billingPhone,
                this.billingState,
                this.billingZip,
                this.companyName,
                this.customerId,
                this.customerNumber,
                this.customerStatus,
                this.firstName,
                this.identifiers,
                this.lastName,
                this.shippingAddress1,
                this.shippingAddress2,
                this.shippingCity,
                this.shippingCountry,
                this.shippingState,
                this.shippingZip);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, Optional<Map<String, Object>>>> additionalData = Optional.empty();

        private Optional<String> billingAddress1 = Optional.empty();

        private Optional<String> billingAddress2 = Optional.empty();

        private Optional<String> billingCity = Optional.empty();

        private Optional<String> billingCountry = Optional.empty();

        private Optional<String> billingEmail = Optional.empty();

        private Optional<String> billingPhone = Optional.empty();

        private Optional<String> billingState = Optional.empty();

        private Optional<String> billingZip = Optional.empty();

        private Optional<String> companyName = Optional.empty();

        private Optional<Long> customerId = Optional.empty();

        private Optional<String> customerNumber = Optional.empty();

        private Optional<Integer> customerStatus = Optional.empty();

        private Optional<String> firstName = Optional.empty();

        private Optional<List<Optional<String>>> identifiers = Optional.empty();

        private Optional<String> lastName = Optional.empty();

        private Optional<String> shippingAddress1 = Optional.empty();

        private Optional<String> shippingAddress2 = Optional.empty();

        private Optional<String> shippingCity = Optional.empty();

        private Optional<String> shippingCountry = Optional.empty();

        private Optional<String> shippingState = Optional.empty();

        private Optional<String> shippingZip = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PayorDataResponse other) {
            additionalData(other.getAdditionalData());
            billingAddress1(other.getBillingAddress1());
            billingAddress2(other.getBillingAddress2());
            billingCity(other.getBillingCity());
            billingCountry(other.getBillingCountry());
            billingEmail(other.getBillingEmail());
            billingPhone(other.getBillingPhone());
            billingState(other.getBillingState());
            billingZip(other.getBillingZip());
            companyName(other.getCompanyName());
            customerId(other.getCustomerId());
            customerNumber(other.getCustomerNumber());
            customerStatus(other.getCustomerStatus());
            firstName(other.getFirstName());
            identifiers(other.getIdentifiers());
            lastName(other.getLastName());
            shippingAddress1(other.getShippingAddress1());
            shippingAddress2(other.getShippingAddress2());
            shippingCity(other.getShippingCity());
            shippingCountry(other.getShippingCountry());
            shippingState(other.getShippingState());
            shippingZip(other.getShippingZip());
            return this;
        }

        @JsonSetter(value = "AdditionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<Map<String, Optional<Map<String, Object>>>> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(Map<String, Optional<Map<String, Object>>> additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        public Builder additionalData(Nullable<Map<String, Optional<Map<String, Object>>>> additionalData) {
            if (additionalData.isNull()) {
                this.additionalData = null;
            } else if (additionalData.isEmpty()) {
                this.additionalData = Optional.empty();
            } else {
                this.additionalData = Optional.of(additionalData.get());
            }
            return this;
        }

        @JsonSetter(value = "BillingAddress1", nulls = Nulls.SKIP)
        public Builder billingAddress1(Optional<String> billingAddress1) {
            this.billingAddress1 = billingAddress1;
            return this;
        }

        public Builder billingAddress1(String billingAddress1) {
            this.billingAddress1 = Optional.ofNullable(billingAddress1);
            return this;
        }

        public Builder billingAddress1(Nullable<String> billingAddress1) {
            if (billingAddress1.isNull()) {
                this.billingAddress1 = null;
            } else if (billingAddress1.isEmpty()) {
                this.billingAddress1 = Optional.empty();
            } else {
                this.billingAddress1 = Optional.of(billingAddress1.get());
            }
            return this;
        }

        @JsonSetter(value = "BillingAddress2", nulls = Nulls.SKIP)
        public Builder billingAddress2(Optional<String> billingAddress2) {
            this.billingAddress2 = billingAddress2;
            return this;
        }

        public Builder billingAddress2(String billingAddress2) {
            this.billingAddress2 = Optional.ofNullable(billingAddress2);
            return this;
        }

        public Builder billingAddress2(Nullable<String> billingAddress2) {
            if (billingAddress2.isNull()) {
                this.billingAddress2 = null;
            } else if (billingAddress2.isEmpty()) {
                this.billingAddress2 = Optional.empty();
            } else {
                this.billingAddress2 = Optional.of(billingAddress2.get());
            }
            return this;
        }

        @JsonSetter(value = "BillingCity", nulls = Nulls.SKIP)
        public Builder billingCity(Optional<String> billingCity) {
            this.billingCity = billingCity;
            return this;
        }

        public Builder billingCity(String billingCity) {
            this.billingCity = Optional.ofNullable(billingCity);
            return this;
        }

        public Builder billingCity(Nullable<String> billingCity) {
            if (billingCity.isNull()) {
                this.billingCity = null;
            } else if (billingCity.isEmpty()) {
                this.billingCity = Optional.empty();
            } else {
                this.billingCity = Optional.of(billingCity.get());
            }
            return this;
        }

        @JsonSetter(value = "BillingCountry", nulls = Nulls.SKIP)
        public Builder billingCountry(Optional<String> billingCountry) {
            this.billingCountry = billingCountry;
            return this;
        }

        public Builder billingCountry(String billingCountry) {
            this.billingCountry = Optional.ofNullable(billingCountry);
            return this;
        }

        public Builder billingCountry(Nullable<String> billingCountry) {
            if (billingCountry.isNull()) {
                this.billingCountry = null;
            } else if (billingCountry.isEmpty()) {
                this.billingCountry = Optional.empty();
            } else {
                this.billingCountry = Optional.of(billingCountry.get());
            }
            return this;
        }

        @JsonSetter(value = "BillingEmail", nulls = Nulls.SKIP)
        public Builder billingEmail(Optional<String> billingEmail) {
            this.billingEmail = billingEmail;
            return this;
        }

        public Builder billingEmail(String billingEmail) {
            this.billingEmail = Optional.ofNullable(billingEmail);
            return this;
        }

        public Builder billingEmail(Nullable<String> billingEmail) {
            if (billingEmail.isNull()) {
                this.billingEmail = null;
            } else if (billingEmail.isEmpty()) {
                this.billingEmail = Optional.empty();
            } else {
                this.billingEmail = Optional.of(billingEmail.get());
            }
            return this;
        }

        @JsonSetter(value = "BillingPhone", nulls = Nulls.SKIP)
        public Builder billingPhone(Optional<String> billingPhone) {
            this.billingPhone = billingPhone;
            return this;
        }

        public Builder billingPhone(String billingPhone) {
            this.billingPhone = Optional.ofNullable(billingPhone);
            return this;
        }

        public Builder billingPhone(Nullable<String> billingPhone) {
            if (billingPhone.isNull()) {
                this.billingPhone = null;
            } else if (billingPhone.isEmpty()) {
                this.billingPhone = Optional.empty();
            } else {
                this.billingPhone = Optional.of(billingPhone.get());
            }
            return this;
        }

        @JsonSetter(value = "BillingState", nulls = Nulls.SKIP)
        public Builder billingState(Optional<String> billingState) {
            this.billingState = billingState;
            return this;
        }

        public Builder billingState(String billingState) {
            this.billingState = Optional.ofNullable(billingState);
            return this;
        }

        public Builder billingState(Nullable<String> billingState) {
            if (billingState.isNull()) {
                this.billingState = null;
            } else if (billingState.isEmpty()) {
                this.billingState = Optional.empty();
            } else {
                this.billingState = Optional.of(billingState.get());
            }
            return this;
        }

        /**
         * <p>Customer's billing ZIP code. For Pay In functions, this field supports 5-digit and 9-digit ZIP codes and alphanumeric Canadian postal codes. For example: &quot;37615-1234&quot; or &quot;37615&quot;.</p>
         */
        @JsonSetter(value = "BillingZip", nulls = Nulls.SKIP)
        public Builder billingZip(Optional<String> billingZip) {
            this.billingZip = billingZip;
            return this;
        }

        public Builder billingZip(String billingZip) {
            this.billingZip = Optional.ofNullable(billingZip);
            return this;
        }

        public Builder billingZip(Nullable<String> billingZip) {
            if (billingZip.isNull()) {
                this.billingZip = null;
            } else if (billingZip.isEmpty()) {
                this.billingZip = Optional.empty();
            } else {
                this.billingZip = Optional.of(billingZip.get());
            }
            return this;
        }

        /**
         * <p>Customer's company name.</p>
         */
        @JsonSetter(value = "CompanyName", nulls = Nulls.SKIP)
        public Builder companyName(Optional<String> companyName) {
            this.companyName = companyName;
            return this;
        }

        public Builder companyName(String companyName) {
            this.companyName = Optional.ofNullable(companyName);
            return this;
        }

        public Builder companyName(Nullable<String> companyName) {
            if (companyName.isNull()) {
                this.companyName = null;
            } else if (companyName.isEmpty()) {
                this.companyName = Optional.empty();
            } else {
                this.companyName = Optional.of(companyName.get());
            }
            return this;
        }

        @JsonSetter(value = "customerId", nulls = Nulls.SKIP)
        public Builder customerId(Optional<Long> customerId) {
            this.customerId = customerId;
            return this;
        }

        public Builder customerId(Long customerId) {
            this.customerId = Optional.ofNullable(customerId);
            return this;
        }

        public Builder customerId(Nullable<Long> customerId) {
            if (customerId.isNull()) {
                this.customerId = null;
            } else if (customerId.isEmpty()) {
                this.customerId = Optional.empty();
            } else {
                this.customerId = Optional.of(customerId.get());
            }
            return this;
        }

        @JsonSetter(value = "CustomerNumber", nulls = Nulls.SKIP)
        public Builder customerNumber(Optional<String> customerNumber) {
            this.customerNumber = customerNumber;
            return this;
        }

        public Builder customerNumber(String customerNumber) {
            this.customerNumber = Optional.ofNullable(customerNumber);
            return this;
        }

        public Builder customerNumber(Nullable<String> customerNumber) {
            if (customerNumber.isNull()) {
                this.customerNumber = null;
            } else if (customerNumber.isEmpty()) {
                this.customerNumber = Optional.empty();
            } else {
                this.customerNumber = Optional.of(customerNumber.get());
            }
            return this;
        }

        /**
         * <p>Customer status. This is used to determine if the customer is active or inactive.</p>
         */
        @JsonSetter(value = "customerStatus", nulls = Nulls.SKIP)
        public Builder customerStatus(Optional<Integer> customerStatus) {
            this.customerStatus = customerStatus;
            return this;
        }

        public Builder customerStatus(Integer customerStatus) {
            this.customerStatus = Optional.ofNullable(customerStatus);
            return this;
        }

        public Builder customerStatus(Nullable<Integer> customerStatus) {
            if (customerStatus.isNull()) {
                this.customerStatus = null;
            } else if (customerStatus.isEmpty()) {
                this.customerStatus = Optional.empty();
            } else {
                this.customerStatus = Optional.of(customerStatus.get());
            }
            return this;
        }

        /**
         * <p>Customer/Payor first name.</p>
         */
        @JsonSetter(value = "FirstName", nulls = Nulls.SKIP)
        public Builder firstName(Optional<String> firstName) {
            this.firstName = firstName;
            return this;
        }

        public Builder firstName(String firstName) {
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        public Builder firstName(Nullable<String> firstName) {
            if (firstName.isNull()) {
                this.firstName = null;
            } else if (firstName.isEmpty()) {
                this.firstName = Optional.empty();
            } else {
                this.firstName = Optional.of(firstName.get());
            }
            return this;
        }

        @JsonSetter(value = "Identifiers", nulls = Nulls.SKIP)
        public Builder identifiers(Optional<List<Optional<String>>> identifiers) {
            this.identifiers = identifiers;
            return this;
        }

        public Builder identifiers(List<Optional<String>> identifiers) {
            this.identifiers = Optional.ofNullable(identifiers);
            return this;
        }

        public Builder identifiers(Nullable<List<Optional<String>>> identifiers) {
            if (identifiers.isNull()) {
                this.identifiers = null;
            } else if (identifiers.isEmpty()) {
                this.identifiers = Optional.empty();
            } else {
                this.identifiers = Optional.of(identifiers.get());
            }
            return this;
        }

        /**
         * <p>Customer/Payor last name.</p>
         */
        @JsonSetter(value = "LastName", nulls = Nulls.SKIP)
        public Builder lastName(Optional<String> lastName) {
            this.lastName = lastName;
            return this;
        }

        public Builder lastName(String lastName) {
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        public Builder lastName(Nullable<String> lastName) {
            if (lastName.isNull()) {
                this.lastName = null;
            } else if (lastName.isEmpty()) {
                this.lastName = Optional.empty();
            } else {
                this.lastName = Optional.of(lastName.get());
            }
            return this;
        }

        @JsonSetter(value = "ShippingAddress1", nulls = Nulls.SKIP)
        public Builder shippingAddress1(Optional<String> shippingAddress1) {
            this.shippingAddress1 = shippingAddress1;
            return this;
        }

        public Builder shippingAddress1(String shippingAddress1) {
            this.shippingAddress1 = Optional.ofNullable(shippingAddress1);
            return this;
        }

        public Builder shippingAddress1(Nullable<String> shippingAddress1) {
            if (shippingAddress1.isNull()) {
                this.shippingAddress1 = null;
            } else if (shippingAddress1.isEmpty()) {
                this.shippingAddress1 = Optional.empty();
            } else {
                this.shippingAddress1 = Optional.of(shippingAddress1.get());
            }
            return this;
        }

        @JsonSetter(value = "ShippingAddress2", nulls = Nulls.SKIP)
        public Builder shippingAddress2(Optional<String> shippingAddress2) {
            this.shippingAddress2 = shippingAddress2;
            return this;
        }

        public Builder shippingAddress2(String shippingAddress2) {
            this.shippingAddress2 = Optional.ofNullable(shippingAddress2);
            return this;
        }

        public Builder shippingAddress2(Nullable<String> shippingAddress2) {
            if (shippingAddress2.isNull()) {
                this.shippingAddress2 = null;
            } else if (shippingAddress2.isEmpty()) {
                this.shippingAddress2 = Optional.empty();
            } else {
                this.shippingAddress2 = Optional.of(shippingAddress2.get());
            }
            return this;
        }

        @JsonSetter(value = "ShippingCity", nulls = Nulls.SKIP)
        public Builder shippingCity(Optional<String> shippingCity) {
            this.shippingCity = shippingCity;
            return this;
        }

        public Builder shippingCity(String shippingCity) {
            this.shippingCity = Optional.ofNullable(shippingCity);
            return this;
        }

        public Builder shippingCity(Nullable<String> shippingCity) {
            if (shippingCity.isNull()) {
                this.shippingCity = null;
            } else if (shippingCity.isEmpty()) {
                this.shippingCity = Optional.empty();
            } else {
                this.shippingCity = Optional.of(shippingCity.get());
            }
            return this;
        }

        @JsonSetter(value = "ShippingCountry", nulls = Nulls.SKIP)
        public Builder shippingCountry(Optional<String> shippingCountry) {
            this.shippingCountry = shippingCountry;
            return this;
        }

        public Builder shippingCountry(String shippingCountry) {
            this.shippingCountry = Optional.ofNullable(shippingCountry);
            return this;
        }

        public Builder shippingCountry(Nullable<String> shippingCountry) {
            if (shippingCountry.isNull()) {
                this.shippingCountry = null;
            } else if (shippingCountry.isEmpty()) {
                this.shippingCountry = Optional.empty();
            } else {
                this.shippingCountry = Optional.of(shippingCountry.get());
            }
            return this;
        }

        @JsonSetter(value = "ShippingState", nulls = Nulls.SKIP)
        public Builder shippingState(Optional<String> shippingState) {
            this.shippingState = shippingState;
            return this;
        }

        public Builder shippingState(String shippingState) {
            this.shippingState = Optional.ofNullable(shippingState);
            return this;
        }

        public Builder shippingState(Nullable<String> shippingState) {
            if (shippingState.isNull()) {
                this.shippingState = null;
            } else if (shippingState.isEmpty()) {
                this.shippingState = Optional.empty();
            } else {
                this.shippingState = Optional.of(shippingState.get());
            }
            return this;
        }

        @JsonSetter(value = "ShippingZip", nulls = Nulls.SKIP)
        public Builder shippingZip(Optional<String> shippingZip) {
            this.shippingZip = shippingZip;
            return this;
        }

        public Builder shippingZip(String shippingZip) {
            this.shippingZip = Optional.ofNullable(shippingZip);
            return this;
        }

        public Builder shippingZip(Nullable<String> shippingZip) {
            if (shippingZip.isNull()) {
                this.shippingZip = null;
            } else if (shippingZip.isEmpty()) {
                this.shippingZip = Optional.empty();
            } else {
                this.shippingZip = Optional.of(shippingZip.get());
            }
            return this;
        }

        public PayorDataResponse build() {
            return new PayorDataResponse(
                    additionalData,
                    billingAddress1,
                    billingAddress2,
                    billingCity,
                    billingCountry,
                    billingEmail,
                    billingPhone,
                    billingState,
                    billingZip,
                    companyName,
                    customerId,
                    customerNumber,
                    customerStatus,
                    firstName,
                    identifiers,
                    lastName,
                    shippingAddress1,
                    shippingAddress2,
                    shippingCity,
                    shippingCountry,
                    shippingState,
                    shippingZip,
                    additionalProperties);
        }
    }
}
