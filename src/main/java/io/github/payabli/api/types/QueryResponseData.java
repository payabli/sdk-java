/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryResponseData.Builder.class)
public final class QueryResponseData {
    private final Optional<String> authcode;

    private final Optional<String> avsresponse;

    private final Optional<String> avsresponseText;

    private final Optional<String> cvvresponse;

    private final Optional<String> cvvresponseText;

    private final Optional<String> emvAuthResponseData;

    private final Optional<String> orderid;

    private final Optional<String> response;

    private final Optional<String> responseCode;

    private final Optional<String> responseCodeText;

    private final Optional<String> responsetext;

    private final Optional<String> transactionid;

    private final Optional<String> type;

    private final Map<String, Object> additionalProperties;

    private QueryResponseData(
            Optional<String> authcode,
            Optional<String> avsresponse,
            Optional<String> avsresponseText,
            Optional<String> cvvresponse,
            Optional<String> cvvresponseText,
            Optional<String> emvAuthResponseData,
            Optional<String> orderid,
            Optional<String> response,
            Optional<String> responseCode,
            Optional<String> responseCodeText,
            Optional<String> responsetext,
            Optional<String> transactionid,
            Optional<String> type,
            Map<String, Object> additionalProperties) {
        this.authcode = authcode;
        this.avsresponse = avsresponse;
        this.avsresponseText = avsresponseText;
        this.cvvresponse = cvvresponse;
        this.cvvresponseText = cvvresponseText;
        this.emvAuthResponseData = emvAuthResponseData;
        this.orderid = orderid;
        this.response = response;
        this.responseCode = responseCode;
        this.responseCodeText = responseCodeText;
        this.responsetext = responsetext;
        this.transactionid = transactionid;
        this.type = type;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("authcode")
    public Optional<String> getAuthcode() {
        return authcode;
    }

    /**
     * @return Text code describing the result for address validation (applies only for card transactions).
     */
    @JsonProperty("avsresponse")
    public Optional<String> getAvsresponse() {
        return avsresponse;
    }

    /**
     * @return Text code describing the result for address validation (applies only for card transactions).
     */
    @JsonProperty("avsresponse_text")
    public Optional<String> getAvsresponseText() {
        return avsresponseText;
    }

    /**
     * @return Text code describing the result for CVV validation (applies only for card transactions).
     */
    @JsonProperty("cvvresponse")
    public Optional<String> getCvvresponse() {
        return cvvresponse;
    }

    /**
     * @return Text code describing the result for CVV validation (applies only for card transactions).
     */
    @JsonProperty("cvvresponse_text")
    public Optional<String> getCvvresponseText() {
        return cvvresponseText;
    }

    /**
     * @return EMV authorization response data, applicable for card transactions.
     */
    @JsonProperty("emv_auth_response_data")
    public Optional<String> getEmvAuthResponseData() {
        return emvAuthResponseData;
    }

    @JsonProperty("orderid")
    public Optional<String> getOrderid() {
        return orderid;
    }

    /**
     * @return Response text for operation: 'Success' or 'Declined'.
     */
    @JsonProperty("response")
    public Optional<String> getResponse() {
        return response;
    }

    /**
     * @return Internal result code processing the transaction. Value 1 indicates successful operation, values 2 and 3 indicate errors.
     */
    @JsonProperty("response_code")
    public Optional<String> getResponseCode() {
        return responseCode;
    }

    /**
     * @return Text describing the result. If resultCode = 1, will return 'Approved' or a general success message. If resultCode = 2 or 3, will contain the cause of the decline.
     */
    @JsonProperty("response_code_text")
    public Optional<String> getResponseCodeText() {
        return responseCodeText;
    }

    /**
     * @return Text describing the result. If resultCode = 1, will return 'Approved' or a general success message. If resultCode = 2 or 3, will contain the cause of the decline.
     */
    @JsonProperty("responsetext")
    public Optional<String> getResponsetext() {
        return responsetext;
    }

    /**
     * @return The transaction identifier in Payabli.
     */
    @JsonProperty("transactionid")
    public Optional<String> getTransactionid() {
        return transactionid;
    }

    /**
     * @return Type of transaction or operation.
     */
    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryResponseData && equalTo((QueryResponseData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryResponseData other) {
        return authcode.equals(other.authcode)
                && avsresponse.equals(other.avsresponse)
                && avsresponseText.equals(other.avsresponseText)
                && cvvresponse.equals(other.cvvresponse)
                && cvvresponseText.equals(other.cvvresponseText)
                && emvAuthResponseData.equals(other.emvAuthResponseData)
                && orderid.equals(other.orderid)
                && response.equals(other.response)
                && responseCode.equals(other.responseCode)
                && responseCodeText.equals(other.responseCodeText)
                && responsetext.equals(other.responsetext)
                && transactionid.equals(other.transactionid)
                && type.equals(other.type);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.authcode,
                this.avsresponse,
                this.avsresponseText,
                this.cvvresponse,
                this.cvvresponseText,
                this.emvAuthResponseData,
                this.orderid,
                this.response,
                this.responseCode,
                this.responseCodeText,
                this.responsetext,
                this.transactionid,
                this.type);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> authcode = Optional.empty();

        private Optional<String> avsresponse = Optional.empty();

        private Optional<String> avsresponseText = Optional.empty();

        private Optional<String> cvvresponse = Optional.empty();

        private Optional<String> cvvresponseText = Optional.empty();

        private Optional<String> emvAuthResponseData = Optional.empty();

        private Optional<String> orderid = Optional.empty();

        private Optional<String> response = Optional.empty();

        private Optional<String> responseCode = Optional.empty();

        private Optional<String> responseCodeText = Optional.empty();

        private Optional<String> responsetext = Optional.empty();

        private Optional<String> transactionid = Optional.empty();

        private Optional<String> type = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryResponseData other) {
            authcode(other.getAuthcode());
            avsresponse(other.getAvsresponse());
            avsresponseText(other.getAvsresponseText());
            cvvresponse(other.getCvvresponse());
            cvvresponseText(other.getCvvresponseText());
            emvAuthResponseData(other.getEmvAuthResponseData());
            orderid(other.getOrderid());
            response(other.getResponse());
            responseCode(other.getResponseCode());
            responseCodeText(other.getResponseCodeText());
            responsetext(other.getResponsetext());
            transactionid(other.getTransactionid());
            type(other.getType());
            return this;
        }

        @JsonSetter(value = "authcode", nulls = Nulls.SKIP)
        public Builder authcode(Optional<String> authcode) {
            this.authcode = authcode;
            return this;
        }

        public Builder authcode(String authcode) {
            this.authcode = Optional.ofNullable(authcode);
            return this;
        }

        /**
         * <p>Text code describing the result for address validation (applies only for card transactions).</p>
         */
        @JsonSetter(value = "avsresponse", nulls = Nulls.SKIP)
        public Builder avsresponse(Optional<String> avsresponse) {
            this.avsresponse = avsresponse;
            return this;
        }

        public Builder avsresponse(String avsresponse) {
            this.avsresponse = Optional.ofNullable(avsresponse);
            return this;
        }

        /**
         * <p>Text code describing the result for address validation (applies only for card transactions).</p>
         */
        @JsonSetter(value = "avsresponse_text", nulls = Nulls.SKIP)
        public Builder avsresponseText(Optional<String> avsresponseText) {
            this.avsresponseText = avsresponseText;
            return this;
        }

        public Builder avsresponseText(String avsresponseText) {
            this.avsresponseText = Optional.ofNullable(avsresponseText);
            return this;
        }

        /**
         * <p>Text code describing the result for CVV validation (applies only for card transactions).</p>
         */
        @JsonSetter(value = "cvvresponse", nulls = Nulls.SKIP)
        public Builder cvvresponse(Optional<String> cvvresponse) {
            this.cvvresponse = cvvresponse;
            return this;
        }

        public Builder cvvresponse(String cvvresponse) {
            this.cvvresponse = Optional.ofNullable(cvvresponse);
            return this;
        }

        /**
         * <p>Text code describing the result for CVV validation (applies only for card transactions).</p>
         */
        @JsonSetter(value = "cvvresponse_text", nulls = Nulls.SKIP)
        public Builder cvvresponseText(Optional<String> cvvresponseText) {
            this.cvvresponseText = cvvresponseText;
            return this;
        }

        public Builder cvvresponseText(String cvvresponseText) {
            this.cvvresponseText = Optional.ofNullable(cvvresponseText);
            return this;
        }

        /**
         * <p>EMV authorization response data, applicable for card transactions.</p>
         */
        @JsonSetter(value = "emv_auth_response_data", nulls = Nulls.SKIP)
        public Builder emvAuthResponseData(Optional<String> emvAuthResponseData) {
            this.emvAuthResponseData = emvAuthResponseData;
            return this;
        }

        public Builder emvAuthResponseData(String emvAuthResponseData) {
            this.emvAuthResponseData = Optional.ofNullable(emvAuthResponseData);
            return this;
        }

        @JsonSetter(value = "orderid", nulls = Nulls.SKIP)
        public Builder orderid(Optional<String> orderid) {
            this.orderid = orderid;
            return this;
        }

        public Builder orderid(String orderid) {
            this.orderid = Optional.ofNullable(orderid);
            return this;
        }

        /**
         * <p>Response text for operation: 'Success' or 'Declined'.</p>
         */
        @JsonSetter(value = "response", nulls = Nulls.SKIP)
        public Builder response(Optional<String> response) {
            this.response = response;
            return this;
        }

        public Builder response(String response) {
            this.response = Optional.ofNullable(response);
            return this;
        }

        /**
         * <p>Internal result code processing the transaction. Value 1 indicates successful operation, values 2 and 3 indicate errors.</p>
         */
        @JsonSetter(value = "response_code", nulls = Nulls.SKIP)
        public Builder responseCode(Optional<String> responseCode) {
            this.responseCode = responseCode;
            return this;
        }

        public Builder responseCode(String responseCode) {
            this.responseCode = Optional.ofNullable(responseCode);
            return this;
        }

        /**
         * <p>Text describing the result. If resultCode = 1, will return 'Approved' or a general success message. If resultCode = 2 or 3, will contain the cause of the decline.</p>
         */
        @JsonSetter(value = "response_code_text", nulls = Nulls.SKIP)
        public Builder responseCodeText(Optional<String> responseCodeText) {
            this.responseCodeText = responseCodeText;
            return this;
        }

        public Builder responseCodeText(String responseCodeText) {
            this.responseCodeText = Optional.ofNullable(responseCodeText);
            return this;
        }

        /**
         * <p>Text describing the result. If resultCode = 1, will return 'Approved' or a general success message. If resultCode = 2 or 3, will contain the cause of the decline.</p>
         */
        @JsonSetter(value = "responsetext", nulls = Nulls.SKIP)
        public Builder responsetext(Optional<String> responsetext) {
            this.responsetext = responsetext;
            return this;
        }

        public Builder responsetext(String responsetext) {
            this.responsetext = Optional.ofNullable(responsetext);
            return this;
        }

        /**
         * <p>The transaction identifier in Payabli.</p>
         */
        @JsonSetter(value = "transactionid", nulls = Nulls.SKIP)
        public Builder transactionid(Optional<String> transactionid) {
            this.transactionid = transactionid;
            return this;
        }

        public Builder transactionid(String transactionid) {
            this.transactionid = Optional.ofNullable(transactionid);
            return this;
        }

        /**
         * <p>Type of transaction or operation.</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        public QueryResponseData build() {
            return new QueryResponseData(
                    authcode,
                    avsresponse,
                    avsresponseText,
                    cvvresponse,
                    cvvresponseText,
                    emvAuthResponseData,
                    orderid,
                    response,
                    responseCode,
                    responseCodeText,
                    responsetext,
                    transactionid,
                    type,
                    additionalProperties);
        }
    }
}
