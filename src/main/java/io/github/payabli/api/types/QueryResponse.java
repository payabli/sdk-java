/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryResponse.Builder.class)
public final class QueryResponse {
    private final Optional<List<Object>> records;

    private final Optional<String> summary;

    private final Map<String, Object> additionalProperties;

    private QueryResponse(
            Optional<List<Object>> records, Optional<String> summary, Map<String, Object> additionalProperties) {
        this.records = records;
        this.summary = summary;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("records")
    public Optional<List<Object>> getRecords() {
        return records;
    }

    @JsonProperty("summary")
    public Optional<String> getSummary() {
        return summary;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryResponse && equalTo((QueryResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryResponse other) {
        return records.equals(other.records) && summary.equals(other.summary);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.records, this.summary);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<Object>> records = Optional.empty();

        private Optional<String> summary = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryResponse other) {
            records(other.getRecords());
            summary(other.getSummary());
            return this;
        }

        @JsonSetter(value = "records", nulls = Nulls.SKIP)
        public Builder records(Optional<List<Object>> records) {
            this.records = records;
            return this;
        }

        public Builder records(List<Object> records) {
            this.records = Optional.ofNullable(records);
            return this;
        }

        @JsonSetter(value = "summary", nulls = Nulls.SKIP)
        public Builder summary(Optional<String> summary) {
            this.summary = summary;
            return this;
        }

        public Builder summary(String summary) {
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        public QueryResponse build() {
            return new QueryResponse(records, summary, additionalProperties);
        }
    }
}
