/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DocumentsRef.Builder.class)
public final class DocumentsRef {
    private final Optional<List<PairFiles>> filelist;

    private final Optional<String> zipfile;

    private final Map<String, Object> additionalProperties;

    private DocumentsRef(
            Optional<List<PairFiles>> filelist, Optional<String> zipfile, Map<String, Object> additionalProperties) {
        this.filelist = filelist;
        this.zipfile = zipfile;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Array of objects describing files contained in the ZIP file.
     */
    @JsonProperty("filelist")
    public Optional<List<PairFiles>> getFilelist() {
        return filelist;
    }

    /**
     * @return Zip file containing attachments.
     */
    @JsonProperty("zipfile")
    public Optional<String> getZipfile() {
        return zipfile;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DocumentsRef && equalTo((DocumentsRef) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DocumentsRef other) {
        return filelist.equals(other.filelist) && zipfile.equals(other.zipfile);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.filelist, this.zipfile);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<PairFiles>> filelist = Optional.empty();

        private Optional<String> zipfile = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DocumentsRef other) {
            filelist(other.getFilelist());
            zipfile(other.getZipfile());
            return this;
        }

        /**
         * <p>Array of objects describing files contained in the ZIP file.</p>
         */
        @JsonSetter(value = "filelist", nulls = Nulls.SKIP)
        public Builder filelist(Optional<List<PairFiles>> filelist) {
            this.filelist = filelist;
            return this;
        }

        public Builder filelist(List<PairFiles> filelist) {
            this.filelist = Optional.ofNullable(filelist);
            return this;
        }

        /**
         * <p>Zip file containing attachments.</p>
         */
        @JsonSetter(value = "zipfile", nulls = Nulls.SKIP)
        public Builder zipfile(Optional<String> zipfile) {
            this.zipfile = zipfile;
            return this;
        }

        public Builder zipfile(String zipfile) {
            this.zipfile = Optional.ofNullable(zipfile);
            return this;
        }

        public DocumentsRef build() {
            return new DocumentsRef(filelist, zipfile, additionalProperties);
        }
    }
}
