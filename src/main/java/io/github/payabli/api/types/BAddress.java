/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BAddress.Builder.class)
public final class BAddress {
    private final Optional<LinkData> baddress;

    private final Optional<LinkData> baddress1;

    private final Optional<LinkData> bcity;

    private final Optional<LinkData> bcountry;

    private final Optional<LinkData> bstate;

    private final Optional<LinkData> bzip;

    private final Optional<LinkData> maddress;

    private final Optional<LinkData> maddress1;

    private final Optional<LinkData> mcity;

    private final Optional<LinkData> mcountry;

    private final Optional<LinkData> mstate;

    private final Optional<LinkData> mzip;

    private final Map<String, Object> additionalProperties;

    private BAddress(
            Optional<LinkData> baddress,
            Optional<LinkData> baddress1,
            Optional<LinkData> bcity,
            Optional<LinkData> bcountry,
            Optional<LinkData> bstate,
            Optional<LinkData> bzip,
            Optional<LinkData> maddress,
            Optional<LinkData> maddress1,
            Optional<LinkData> mcity,
            Optional<LinkData> mcountry,
            Optional<LinkData> mstate,
            Optional<LinkData> mzip,
            Map<String, Object> additionalProperties) {
        this.baddress = baddress;
        this.baddress1 = baddress1;
        this.bcity = bcity;
        this.bcountry = bcountry;
        this.bstate = bstate;
        this.bzip = bzip;
        this.maddress = maddress;
        this.maddress1 = maddress1;
        this.mcity = mcity;
        this.mcountry = mcountry;
        this.mstate = mstate;
        this.mzip = mzip;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("baddress")
    public Optional<LinkData> getBaddress() {
        return baddress;
    }

    @JsonProperty("baddress1")
    public Optional<LinkData> getBaddress1() {
        return baddress1;
    }

    @JsonProperty("bcity")
    public Optional<LinkData> getBcity() {
        return bcity;
    }

    @JsonProperty("bcountry")
    public Optional<LinkData> getBcountry() {
        return bcountry;
    }

    @JsonProperty("bstate")
    public Optional<LinkData> getBstate() {
        return bstate;
    }

    @JsonProperty("bzip")
    public Optional<LinkData> getBzip() {
        return bzip;
    }

    @JsonProperty("maddress")
    public Optional<LinkData> getMaddress() {
        return maddress;
    }

    @JsonProperty("maddress1")
    public Optional<LinkData> getMaddress1() {
        return maddress1;
    }

    @JsonProperty("mcity")
    public Optional<LinkData> getMcity() {
        return mcity;
    }

    @JsonProperty("mcountry")
    public Optional<LinkData> getMcountry() {
        return mcountry;
    }

    @JsonProperty("mstate")
    public Optional<LinkData> getMstate() {
        return mstate;
    }

    @JsonProperty("mzip")
    public Optional<LinkData> getMzip() {
        return mzip;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BAddress && equalTo((BAddress) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BAddress other) {
        return baddress.equals(other.baddress)
                && baddress1.equals(other.baddress1)
                && bcity.equals(other.bcity)
                && bcountry.equals(other.bcountry)
                && bstate.equals(other.bstate)
                && bzip.equals(other.bzip)
                && maddress.equals(other.maddress)
                && maddress1.equals(other.maddress1)
                && mcity.equals(other.mcity)
                && mcountry.equals(other.mcountry)
                && mstate.equals(other.mstate)
                && mzip.equals(other.mzip);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.baddress,
                this.baddress1,
                this.bcity,
                this.bcountry,
                this.bstate,
                this.bzip,
                this.maddress,
                this.maddress1,
                this.mcity,
                this.mcountry,
                this.mstate,
                this.mzip);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<LinkData> baddress = Optional.empty();

        private Optional<LinkData> baddress1 = Optional.empty();

        private Optional<LinkData> bcity = Optional.empty();

        private Optional<LinkData> bcountry = Optional.empty();

        private Optional<LinkData> bstate = Optional.empty();

        private Optional<LinkData> bzip = Optional.empty();

        private Optional<LinkData> maddress = Optional.empty();

        private Optional<LinkData> maddress1 = Optional.empty();

        private Optional<LinkData> mcity = Optional.empty();

        private Optional<LinkData> mcountry = Optional.empty();

        private Optional<LinkData> mstate = Optional.empty();

        private Optional<LinkData> mzip = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BAddress other) {
            baddress(other.getBaddress());
            baddress1(other.getBaddress1());
            bcity(other.getBcity());
            bcountry(other.getBcountry());
            bstate(other.getBstate());
            bzip(other.getBzip());
            maddress(other.getMaddress());
            maddress1(other.getMaddress1());
            mcity(other.getMcity());
            mcountry(other.getMcountry());
            mstate(other.getMstate());
            mzip(other.getMzip());
            return this;
        }

        @JsonSetter(value = "baddress", nulls = Nulls.SKIP)
        public Builder baddress(Optional<LinkData> baddress) {
            this.baddress = baddress;
            return this;
        }

        public Builder baddress(LinkData baddress) {
            this.baddress = Optional.ofNullable(baddress);
            return this;
        }

        @JsonSetter(value = "baddress1", nulls = Nulls.SKIP)
        public Builder baddress1(Optional<LinkData> baddress1) {
            this.baddress1 = baddress1;
            return this;
        }

        public Builder baddress1(LinkData baddress1) {
            this.baddress1 = Optional.ofNullable(baddress1);
            return this;
        }

        @JsonSetter(value = "bcity", nulls = Nulls.SKIP)
        public Builder bcity(Optional<LinkData> bcity) {
            this.bcity = bcity;
            return this;
        }

        public Builder bcity(LinkData bcity) {
            this.bcity = Optional.ofNullable(bcity);
            return this;
        }

        @JsonSetter(value = "bcountry", nulls = Nulls.SKIP)
        public Builder bcountry(Optional<LinkData> bcountry) {
            this.bcountry = bcountry;
            return this;
        }

        public Builder bcountry(LinkData bcountry) {
            this.bcountry = Optional.ofNullable(bcountry);
            return this;
        }

        @JsonSetter(value = "bstate", nulls = Nulls.SKIP)
        public Builder bstate(Optional<LinkData> bstate) {
            this.bstate = bstate;
            return this;
        }

        public Builder bstate(LinkData bstate) {
            this.bstate = Optional.ofNullable(bstate);
            return this;
        }

        @JsonSetter(value = "bzip", nulls = Nulls.SKIP)
        public Builder bzip(Optional<LinkData> bzip) {
            this.bzip = bzip;
            return this;
        }

        public Builder bzip(LinkData bzip) {
            this.bzip = Optional.ofNullable(bzip);
            return this;
        }

        @JsonSetter(value = "maddress", nulls = Nulls.SKIP)
        public Builder maddress(Optional<LinkData> maddress) {
            this.maddress = maddress;
            return this;
        }

        public Builder maddress(LinkData maddress) {
            this.maddress = Optional.ofNullable(maddress);
            return this;
        }

        @JsonSetter(value = "maddress1", nulls = Nulls.SKIP)
        public Builder maddress1(Optional<LinkData> maddress1) {
            this.maddress1 = maddress1;
            return this;
        }

        public Builder maddress1(LinkData maddress1) {
            this.maddress1 = Optional.ofNullable(maddress1);
            return this;
        }

        @JsonSetter(value = "mcity", nulls = Nulls.SKIP)
        public Builder mcity(Optional<LinkData> mcity) {
            this.mcity = mcity;
            return this;
        }

        public Builder mcity(LinkData mcity) {
            this.mcity = Optional.ofNullable(mcity);
            return this;
        }

        @JsonSetter(value = "mcountry", nulls = Nulls.SKIP)
        public Builder mcountry(Optional<LinkData> mcountry) {
            this.mcountry = mcountry;
            return this;
        }

        public Builder mcountry(LinkData mcountry) {
            this.mcountry = Optional.ofNullable(mcountry);
            return this;
        }

        @JsonSetter(value = "mstate", nulls = Nulls.SKIP)
        public Builder mstate(Optional<LinkData> mstate) {
            this.mstate = mstate;
            return this;
        }

        public Builder mstate(LinkData mstate) {
            this.mstate = Optional.ofNullable(mstate);
            return this;
        }

        @JsonSetter(value = "mzip", nulls = Nulls.SKIP)
        public Builder mzip(Optional<LinkData> mzip) {
            this.mzip = mzip;
            return this;
        }

        public Builder mzip(LinkData mzip) {
            this.mzip = Optional.ofNullable(mzip);
            return this;
        }

        public BAddress build() {
            return new BAddress(
                    baddress,
                    baddress1,
                    bcity,
                    bcountry,
                    bstate,
                    bzip,
                    maddress,
                    maddress1,
                    mcity,
                    mcountry,
                    mstate,
                    mzip,
                    additionalProperties);
        }
    }
}
