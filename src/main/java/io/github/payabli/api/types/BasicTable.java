/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BasicTable.Builder.class)
public final class BasicTable {
    private final Optional<List<LinkRow>> body;

    private final Optional<LinkRow> header;

    private final Map<String, Object> additionalProperties;

    private BasicTable(
            Optional<List<LinkRow>> body, Optional<LinkRow> header, Map<String, Object> additionalProperties) {
        this.body = body;
        this.header = header;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("body")
    public Optional<List<LinkRow>> getBody() {
        return body;
    }

    @JsonProperty("header")
    public Optional<LinkRow> getHeader() {
        return header;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BasicTable && equalTo((BasicTable) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BasicTable other) {
        return body.equals(other.body) && header.equals(other.header);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.body, this.header);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<LinkRow>> body = Optional.empty();

        private Optional<LinkRow> header = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BasicTable other) {
            body(other.getBody());
            header(other.getHeader());
            return this;
        }

        @JsonSetter(value = "body", nulls = Nulls.SKIP)
        public Builder body(Optional<List<LinkRow>> body) {
            this.body = body;
            return this;
        }

        public Builder body(List<LinkRow> body) {
            this.body = Optional.ofNullable(body);
            return this;
        }

        @JsonSetter(value = "header", nulls = Nulls.SKIP)
        public Builder header(Optional<LinkRow> header) {
            this.header = header;
            return this;
        }

        public Builder header(LinkRow header) {
            this.header = Optional.ofNullable(header);
            return this;
        }

        public BasicTable build() {
            return new BasicTable(body, header, additionalProperties);
        }
    }
}
