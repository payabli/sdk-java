/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = MethodQueryRecords.Builder.class)
public final class MethodQueryRecords {
    private final Optional<String> bin;

    private final Optional<BinData> binData;

    private final Optional<String> descriptor;

    private final Optional<String> expDate;

    private final Optional<String> holderName;

    private final Optional<String> idPmethod;

    private final Optional<OffsetDateTime> lastUpdated;

    private final Optional<String> maskedAccount;

    private final Optional<String> method;

    private final Map<String, Object> additionalProperties;

    private MethodQueryRecords(
            Optional<String> bin,
            Optional<BinData> binData,
            Optional<String> descriptor,
            Optional<String> expDate,
            Optional<String> holderName,
            Optional<String> idPmethod,
            Optional<OffsetDateTime> lastUpdated,
            Optional<String> maskedAccount,
            Optional<String> method,
            Map<String, Object> additionalProperties) {
        this.bin = bin;
        this.binData = binData;
        this.descriptor = descriptor;
        this.expDate = expDate;
        this.holderName = holderName;
        this.idPmethod = idPmethod;
        this.lastUpdated = lastUpdated;
        this.maskedAccount = maskedAccount;
        this.method = method;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The bank identification number (BIN). Null when method is ACH.
     */
    @JsonProperty("bin")
    public Optional<String> getBin() {
        return bin;
    }

    @JsonProperty("binData")
    public Optional<BinData> getBinData() {
        return binData;
    }

    @JsonProperty("descriptor")
    public Optional<String> getDescriptor() {
        return descriptor;
    }

    /**
     * @return Expiration date associated to the method (only for card) in format MMYY.
     */
    @JsonProperty("expDate")
    public Optional<String> getExpDate() {
        return expDate;
    }

    @JsonProperty("holderName")
    public Optional<String> getHolderName() {
        return holderName;
    }

    /**
     * @return Method internal ID
     */
    @JsonProperty("idPmethod")
    public Optional<String> getIdPmethod() {
        return idPmethod;
    }

    /**
     * @return Date of last update
     */
    @JsonProperty("lastUpdated")
    public Optional<OffsetDateTime> getLastUpdated() {
        return lastUpdated;
    }

    @JsonProperty("maskedAccount")
    public Optional<String> getMaskedAccount() {
        return maskedAccount;
    }

    /**
     * @return Type of payment vehicle: <strong>ach</strong> or <strong>card</strong>
     */
    @JsonProperty("method")
    public Optional<String> getMethod() {
        return method;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof MethodQueryRecords && equalTo((MethodQueryRecords) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(MethodQueryRecords other) {
        return bin.equals(other.bin)
                && binData.equals(other.binData)
                && descriptor.equals(other.descriptor)
                && expDate.equals(other.expDate)
                && holderName.equals(other.holderName)
                && idPmethod.equals(other.idPmethod)
                && lastUpdated.equals(other.lastUpdated)
                && maskedAccount.equals(other.maskedAccount)
                && method.equals(other.method);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.bin,
                this.binData,
                this.descriptor,
                this.expDate,
                this.holderName,
                this.idPmethod,
                this.lastUpdated,
                this.maskedAccount,
                this.method);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> bin = Optional.empty();

        private Optional<BinData> binData = Optional.empty();

        private Optional<String> descriptor = Optional.empty();

        private Optional<String> expDate = Optional.empty();

        private Optional<String> holderName = Optional.empty();

        private Optional<String> idPmethod = Optional.empty();

        private Optional<OffsetDateTime> lastUpdated = Optional.empty();

        private Optional<String> maskedAccount = Optional.empty();

        private Optional<String> method = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(MethodQueryRecords other) {
            bin(other.getBin());
            binData(other.getBinData());
            descriptor(other.getDescriptor());
            expDate(other.getExpDate());
            holderName(other.getHolderName());
            idPmethod(other.getIdPmethod());
            lastUpdated(other.getLastUpdated());
            maskedAccount(other.getMaskedAccount());
            method(other.getMethod());
            return this;
        }

        /**
         * <p>The bank identification number (BIN). Null when method is ACH.</p>
         */
        @JsonSetter(value = "bin", nulls = Nulls.SKIP)
        public Builder bin(Optional<String> bin) {
            this.bin = bin;
            return this;
        }

        public Builder bin(String bin) {
            this.bin = Optional.ofNullable(bin);
            return this;
        }

        @JsonSetter(value = "binData", nulls = Nulls.SKIP)
        public Builder binData(Optional<BinData> binData) {
            this.binData = binData;
            return this;
        }

        public Builder binData(BinData binData) {
            this.binData = Optional.ofNullable(binData);
            return this;
        }

        @JsonSetter(value = "descriptor", nulls = Nulls.SKIP)
        public Builder descriptor(Optional<String> descriptor) {
            this.descriptor = descriptor;
            return this;
        }

        public Builder descriptor(String descriptor) {
            this.descriptor = Optional.ofNullable(descriptor);
            return this;
        }

        /**
         * <p>Expiration date associated to the method (only for card) in format MMYY.</p>
         */
        @JsonSetter(value = "expDate", nulls = Nulls.SKIP)
        public Builder expDate(Optional<String> expDate) {
            this.expDate = expDate;
            return this;
        }

        public Builder expDate(String expDate) {
            this.expDate = Optional.ofNullable(expDate);
            return this;
        }

        @JsonSetter(value = "holderName", nulls = Nulls.SKIP)
        public Builder holderName(Optional<String> holderName) {
            this.holderName = holderName;
            return this;
        }

        public Builder holderName(String holderName) {
            this.holderName = Optional.ofNullable(holderName);
            return this;
        }

        /**
         * <p>Method internal ID</p>
         */
        @JsonSetter(value = "idPmethod", nulls = Nulls.SKIP)
        public Builder idPmethod(Optional<String> idPmethod) {
            this.idPmethod = idPmethod;
            return this;
        }

        public Builder idPmethod(String idPmethod) {
            this.idPmethod = Optional.ofNullable(idPmethod);
            return this;
        }

        /**
         * <p>Date of last update</p>
         */
        @JsonSetter(value = "lastUpdated", nulls = Nulls.SKIP)
        public Builder lastUpdated(Optional<OffsetDateTime> lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }

        public Builder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = Optional.ofNullable(lastUpdated);
            return this;
        }

        @JsonSetter(value = "maskedAccount", nulls = Nulls.SKIP)
        public Builder maskedAccount(Optional<String> maskedAccount) {
            this.maskedAccount = maskedAccount;
            return this;
        }

        public Builder maskedAccount(String maskedAccount) {
            this.maskedAccount = Optional.ofNullable(maskedAccount);
            return this;
        }

        /**
         * <p>Type of payment vehicle: <strong>ach</strong> or <strong>card</strong></p>
         */
        @JsonSetter(value = "method", nulls = Nulls.SKIP)
        public Builder method(Optional<String> method) {
            this.method = method;
            return this;
        }

        public Builder method(String method) {
            this.method = Optional.ofNullable(method);
            return this;
        }

        public MethodQueryRecords build() {
            return new MethodQueryRecords(
                    bin,
                    binData,
                    descriptor,
                    expDate,
                    holderName,
                    idPmethod,
                    lastUpdated,
                    maskedAccount,
                    method,
                    additionalProperties);
        }
    }
}
