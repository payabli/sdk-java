/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BillDetailsResponse.Builder.class)
public final class BillDetailsResponse {
    private final Optional<Long> billId;

    private final Optional<String> lotNumber;

    private final Optional<String> invoiceNumber;

    private final Optional<String> netAmount;

    private final Optional<String> discount;

    private final Optional<String> dueDate;

    private final Optional<String> invoiceDate;

    private final Optional<String> comments;

    private final Map<String, Object> additionalProperties;

    private BillDetailsResponse(
            Optional<Long> billId,
            Optional<String> lotNumber,
            Optional<String> invoiceNumber,
            Optional<String> netAmount,
            Optional<String> discount,
            Optional<String> dueDate,
            Optional<String> invoiceDate,
            Optional<String> comments,
            Map<String, Object> additionalProperties) {
        this.billId = billId;
        this.lotNumber = lotNumber;
        this.invoiceNumber = invoiceNumber;
        this.netAmount = netAmount;
        this.discount = discount;
        this.dueDate = dueDate;
        this.invoiceDate = invoiceDate;
        this.comments = comments;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("billId")
    public Optional<Long> getBillId() {
        return billId;
    }

    /**
     * @return Lot number of the bill.
     */
    @JsonProperty("lotNumber")
    public Optional<String> getLotNumber() {
        return lotNumber;
    }

    /**
     * @return Custom number identifying the bill.
     */
    @JsonProperty("invoiceNumber")
    public Optional<String> getInvoiceNumber() {
        return invoiceNumber;
    }

    /**
     * @return Net Amount owed in bill. Required when adding a bill.
     */
    @JsonProperty("netAmount")
    public Optional<String> getNetAmount() {
        return netAmount;
    }

    /**
     * @return Bill discount amount.
     */
    @JsonProperty("discount")
    public Optional<String> getDiscount() {
        return discount;
    }

    /**
     * @return Bill due date in format YYYY-MM-DD or MM/DD/YYYY.
     */
    @JsonProperty("dueDate")
    public Optional<String> getDueDate() {
        return dueDate;
    }

    /**
     * @return Bill date in format YYYY-MM-DD or MM/DD/YYYY.
     */
    @JsonProperty("invoiceDate")
    public Optional<String> getInvoiceDate() {
        return invoiceDate;
    }

    /**
     * @return Any comments about bill. <strong>For managed payouts, this field has a limit of 100 characters</strong>.
     */
    @JsonProperty("comments")
    public Optional<String> getComments() {
        return comments;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BillDetailsResponse && equalTo((BillDetailsResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BillDetailsResponse other) {
        return billId.equals(other.billId)
                && lotNumber.equals(other.lotNumber)
                && invoiceNumber.equals(other.invoiceNumber)
                && netAmount.equals(other.netAmount)
                && discount.equals(other.discount)
                && dueDate.equals(other.dueDate)
                && invoiceDate.equals(other.invoiceDate)
                && comments.equals(other.comments);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.billId,
                this.lotNumber,
                this.invoiceNumber,
                this.netAmount,
                this.discount,
                this.dueDate,
                this.invoiceDate,
                this.comments);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Long> billId = Optional.empty();

        private Optional<String> lotNumber = Optional.empty();

        private Optional<String> invoiceNumber = Optional.empty();

        private Optional<String> netAmount = Optional.empty();

        private Optional<String> discount = Optional.empty();

        private Optional<String> dueDate = Optional.empty();

        private Optional<String> invoiceDate = Optional.empty();

        private Optional<String> comments = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BillDetailsResponse other) {
            billId(other.getBillId());
            lotNumber(other.getLotNumber());
            invoiceNumber(other.getInvoiceNumber());
            netAmount(other.getNetAmount());
            discount(other.getDiscount());
            dueDate(other.getDueDate());
            invoiceDate(other.getInvoiceDate());
            comments(other.getComments());
            return this;
        }

        @JsonSetter(value = "billId", nulls = Nulls.SKIP)
        public Builder billId(Optional<Long> billId) {
            this.billId = billId;
            return this;
        }

        public Builder billId(Long billId) {
            this.billId = Optional.ofNullable(billId);
            return this;
        }

        /**
         * <p>Lot number of the bill.</p>
         */
        @JsonSetter(value = "lotNumber", nulls = Nulls.SKIP)
        public Builder lotNumber(Optional<String> lotNumber) {
            this.lotNumber = lotNumber;
            return this;
        }

        public Builder lotNumber(String lotNumber) {
            this.lotNumber = Optional.ofNullable(lotNumber);
            return this;
        }

        /**
         * <p>Custom number identifying the bill.</p>
         */
        @JsonSetter(value = "invoiceNumber", nulls = Nulls.SKIP)
        public Builder invoiceNumber(Optional<String> invoiceNumber) {
            this.invoiceNumber = invoiceNumber;
            return this;
        }

        public Builder invoiceNumber(String invoiceNumber) {
            this.invoiceNumber = Optional.ofNullable(invoiceNumber);
            return this;
        }

        /**
         * <p>Net Amount owed in bill. Required when adding a bill.</p>
         */
        @JsonSetter(value = "netAmount", nulls = Nulls.SKIP)
        public Builder netAmount(Optional<String> netAmount) {
            this.netAmount = netAmount;
            return this;
        }

        public Builder netAmount(String netAmount) {
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        /**
         * <p>Bill discount amount.</p>
         */
        @JsonSetter(value = "discount", nulls = Nulls.SKIP)
        public Builder discount(Optional<String> discount) {
            this.discount = discount;
            return this;
        }

        public Builder discount(String discount) {
            this.discount = Optional.ofNullable(discount);
            return this;
        }

        /**
         * <p>Bill due date in format YYYY-MM-DD or MM/DD/YYYY.</p>
         */
        @JsonSetter(value = "dueDate", nulls = Nulls.SKIP)
        public Builder dueDate(Optional<String> dueDate) {
            this.dueDate = dueDate;
            return this;
        }

        public Builder dueDate(String dueDate) {
            this.dueDate = Optional.ofNullable(dueDate);
            return this;
        }

        /**
         * <p>Bill date in format YYYY-MM-DD or MM/DD/YYYY.</p>
         */
        @JsonSetter(value = "invoiceDate", nulls = Nulls.SKIP)
        public Builder invoiceDate(Optional<String> invoiceDate) {
            this.invoiceDate = invoiceDate;
            return this;
        }

        public Builder invoiceDate(String invoiceDate) {
            this.invoiceDate = Optional.ofNullable(invoiceDate);
            return this;
        }

        /**
         * <p>Any comments about bill. <strong>For managed payouts, this field has a limit of 100 characters</strong>.</p>
         */
        @JsonSetter(value = "comments", nulls = Nulls.SKIP)
        public Builder comments(Optional<String> comments) {
            this.comments = comments;
            return this;
        }

        public Builder comments(String comments) {
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        public BillDetailsResponse build() {
            return new BillDetailsResponse(
                    billId,
                    lotNumber,
                    invoiceNumber,
                    netAmount,
                    discount,
                    dueDate,
                    invoiceDate,
                    comments,
                    additionalProperties);
        }
    }
}
