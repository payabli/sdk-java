/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DisplayProperty.Builder.class)
public final class DisplayProperty {
    private final Optional<Boolean> display;

    private final Optional<Boolean> fixed;

    private final Optional<String> name;

    private final Map<String, Object> additionalProperties;

    private DisplayProperty(
            Optional<Boolean> display,
            Optional<Boolean> fixed,
            Optional<String> name,
            Map<String, Object> additionalProperties) {
        this.display = display;
        this.fixed = fixed;
        this.name = name;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return When <code>true</code>, the field is displayed on the receipt.
     */
    @JsonProperty("display")
    public Optional<Boolean> getDisplay() {
        return display;
    }

    /**
     * @return This field is unused.
     */
    @JsonProperty("Fixed")
    public Optional<Boolean> getFixed() {
        return fixed;
    }

    /**
     * @return The field's name.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DisplayProperty && equalTo((DisplayProperty) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DisplayProperty other) {
        return display.equals(other.display) && fixed.equals(other.fixed) && name.equals(other.name);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.display, this.fixed, this.name);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> display = Optional.empty();

        private Optional<Boolean> fixed = Optional.empty();

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DisplayProperty other) {
            display(other.getDisplay());
            fixed(other.getFixed());
            name(other.getName());
            return this;
        }

        /**
         * <p>When <code>true</code>, the field is displayed on the receipt.</p>
         */
        @JsonSetter(value = "display", nulls = Nulls.SKIP)
        public Builder display(Optional<Boolean> display) {
            this.display = display;
            return this;
        }

        public Builder display(Boolean display) {
            this.display = Optional.ofNullable(display);
            return this;
        }

        /**
         * <p>This field is unused.</p>
         */
        @JsonSetter(value = "Fixed", nulls = Nulls.SKIP)
        public Builder fixed(Optional<Boolean> fixed) {
            this.fixed = fixed;
            return this;
        }

        public Builder fixed(Boolean fixed) {
            this.fixed = Optional.ofNullable(fixed);
            return this;
        }

        /**
         * <p>The field's name.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public DisplayProperty build() {
            return new DisplayProperty(display, fixed, name, additionalProperties);
        }
    }
}
