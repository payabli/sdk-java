/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DocumentSection.Builder.class)
public final class DocumentSection {
    private final Optional<Boolean> visble;

    private final Optional<String> subFooter;

    private final Optional<String> subHeader;

    private final Optional<BankSection> depositBank;

    private final Optional<Integer> minimumDocuments;

    private final Optional<Boolean> uploadDocuments;

    private final Optional<BankSection> bankData;

    private final Optional<DocumentSectionTermsAndConditions> termsAndConditions;

    private final Optional<SignerSection> signer;

    private final Optional<Boolean> visible;

    private final Optional<BankSection> withdrawalBank;

    private final Map<String, Object> additionalProperties;

    private DocumentSection(
            Optional<Boolean> visble,
            Optional<String> subFooter,
            Optional<String> subHeader,
            Optional<BankSection> depositBank,
            Optional<Integer> minimumDocuments,
            Optional<Boolean> uploadDocuments,
            Optional<BankSection> bankData,
            Optional<DocumentSectionTermsAndConditions> termsAndConditions,
            Optional<SignerSection> signer,
            Optional<Boolean> visible,
            Optional<BankSection> withdrawalBank,
            Map<String, Object> additionalProperties) {
        this.visble = visble;
        this.subFooter = subFooter;
        this.subHeader = subHeader;
        this.depositBank = depositBank;
        this.minimumDocuments = minimumDocuments;
        this.uploadDocuments = uploadDocuments;
        this.bankData = bankData;
        this.termsAndConditions = termsAndConditions;
        this.signer = signer;
        this.visible = visible;
        this.withdrawalBank = withdrawalBank;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("visble")
    public Optional<Boolean> getVisble() {
        return visble;
    }

    @JsonProperty("subFooter")
    public Optional<String> getSubFooter() {
        return subFooter;
    }

    @JsonProperty("subHeader")
    public Optional<String> getSubHeader() {
        return subHeader;
    }

    @JsonProperty("depositBank")
    public Optional<BankSection> getDepositBank() {
        return depositBank;
    }

    /**
     * @return The minimum number of documents the applicant must upload with the application.
     */
    @JsonProperty("minimumDocuments")
    public Optional<Integer> getMinimumDocuments() {
        return minimumDocuments;
    }

    /**
     * @return When <code>true</code>, allows the applicant to upload documents to the application.
     */
    @JsonProperty("uploadDocuments")
    public Optional<Boolean> getUploadDocuments() {
        return uploadDocuments;
    }

    @JsonProperty("bankData")
    public Optional<BankSection> getBankData() {
        return bankData;
    }

    @JsonProperty("termsAndConditions")
    public Optional<DocumentSectionTermsAndConditions> getTermsAndConditions() {
        return termsAndConditions;
    }

    @JsonProperty("signer")
    public Optional<SignerSection> getSigner() {
        return signer;
    }

    @JsonProperty("visible")
    public Optional<Boolean> getVisible() {
        return visible;
    }

    @JsonProperty("withdrawalBank")
    public Optional<BankSection> getWithdrawalBank() {
        return withdrawalBank;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DocumentSection && equalTo((DocumentSection) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DocumentSection other) {
        return visble.equals(other.visble)
                && subFooter.equals(other.subFooter)
                && subHeader.equals(other.subHeader)
                && depositBank.equals(other.depositBank)
                && minimumDocuments.equals(other.minimumDocuments)
                && uploadDocuments.equals(other.uploadDocuments)
                && bankData.equals(other.bankData)
                && termsAndConditions.equals(other.termsAndConditions)
                && signer.equals(other.signer)
                && visible.equals(other.visible)
                && withdrawalBank.equals(other.withdrawalBank);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.visble,
                this.subFooter,
                this.subHeader,
                this.depositBank,
                this.minimumDocuments,
                this.uploadDocuments,
                this.bankData,
                this.termsAndConditions,
                this.signer,
                this.visible,
                this.withdrawalBank);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> visble = Optional.empty();

        private Optional<String> subFooter = Optional.empty();

        private Optional<String> subHeader = Optional.empty();

        private Optional<BankSection> depositBank = Optional.empty();

        private Optional<Integer> minimumDocuments = Optional.empty();

        private Optional<Boolean> uploadDocuments = Optional.empty();

        private Optional<BankSection> bankData = Optional.empty();

        private Optional<DocumentSectionTermsAndConditions> termsAndConditions = Optional.empty();

        private Optional<SignerSection> signer = Optional.empty();

        private Optional<Boolean> visible = Optional.empty();

        private Optional<BankSection> withdrawalBank = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DocumentSection other) {
            visble(other.getVisble());
            subFooter(other.getSubFooter());
            subHeader(other.getSubHeader());
            depositBank(other.getDepositBank());
            minimumDocuments(other.getMinimumDocuments());
            uploadDocuments(other.getUploadDocuments());
            bankData(other.getBankData());
            termsAndConditions(other.getTermsAndConditions());
            signer(other.getSigner());
            visible(other.getVisible());
            withdrawalBank(other.getWithdrawalBank());
            return this;
        }

        @JsonSetter(value = "visble", nulls = Nulls.SKIP)
        public Builder visble(Optional<Boolean> visble) {
            this.visble = visble;
            return this;
        }

        public Builder visble(Boolean visble) {
            this.visble = Optional.ofNullable(visble);
            return this;
        }

        @JsonSetter(value = "subFooter", nulls = Nulls.SKIP)
        public Builder subFooter(Optional<String> subFooter) {
            this.subFooter = subFooter;
            return this;
        }

        public Builder subFooter(String subFooter) {
            this.subFooter = Optional.ofNullable(subFooter);
            return this;
        }

        @JsonSetter(value = "subHeader", nulls = Nulls.SKIP)
        public Builder subHeader(Optional<String> subHeader) {
            this.subHeader = subHeader;
            return this;
        }

        public Builder subHeader(String subHeader) {
            this.subHeader = Optional.ofNullable(subHeader);
            return this;
        }

        @JsonSetter(value = "depositBank", nulls = Nulls.SKIP)
        public Builder depositBank(Optional<BankSection> depositBank) {
            this.depositBank = depositBank;
            return this;
        }

        public Builder depositBank(BankSection depositBank) {
            this.depositBank = Optional.ofNullable(depositBank);
            return this;
        }

        /**
         * <p>The minimum number of documents the applicant must upload with the application.</p>
         */
        @JsonSetter(value = "minimumDocuments", nulls = Nulls.SKIP)
        public Builder minimumDocuments(Optional<Integer> minimumDocuments) {
            this.minimumDocuments = minimumDocuments;
            return this;
        }

        public Builder minimumDocuments(Integer minimumDocuments) {
            this.minimumDocuments = Optional.ofNullable(minimumDocuments);
            return this;
        }

        /**
         * <p>When <code>true</code>, allows the applicant to upload documents to the application.</p>
         */
        @JsonSetter(value = "uploadDocuments", nulls = Nulls.SKIP)
        public Builder uploadDocuments(Optional<Boolean> uploadDocuments) {
            this.uploadDocuments = uploadDocuments;
            return this;
        }

        public Builder uploadDocuments(Boolean uploadDocuments) {
            this.uploadDocuments = Optional.ofNullable(uploadDocuments);
            return this;
        }

        @JsonSetter(value = "bankData", nulls = Nulls.SKIP)
        public Builder bankData(Optional<BankSection> bankData) {
            this.bankData = bankData;
            return this;
        }

        public Builder bankData(BankSection bankData) {
            this.bankData = Optional.ofNullable(bankData);
            return this;
        }

        @JsonSetter(value = "termsAndConditions", nulls = Nulls.SKIP)
        public Builder termsAndConditions(Optional<DocumentSectionTermsAndConditions> termsAndConditions) {
            this.termsAndConditions = termsAndConditions;
            return this;
        }

        public Builder termsAndConditions(DocumentSectionTermsAndConditions termsAndConditions) {
            this.termsAndConditions = Optional.ofNullable(termsAndConditions);
            return this;
        }

        @JsonSetter(value = "signer", nulls = Nulls.SKIP)
        public Builder signer(Optional<SignerSection> signer) {
            this.signer = signer;
            return this;
        }

        public Builder signer(SignerSection signer) {
            this.signer = Optional.ofNullable(signer);
            return this;
        }

        @JsonSetter(value = "visible", nulls = Nulls.SKIP)
        public Builder visible(Optional<Boolean> visible) {
            this.visible = visible;
            return this;
        }

        public Builder visible(Boolean visible) {
            this.visible = Optional.ofNullable(visible);
            return this;
        }

        @JsonSetter(value = "withdrawalBank", nulls = Nulls.SKIP)
        public Builder withdrawalBank(Optional<BankSection> withdrawalBank) {
            this.withdrawalBank = withdrawalBank;
            return this;
        }

        public Builder withdrawalBank(BankSection withdrawalBank) {
            this.withdrawalBank = Optional.ofNullable(withdrawalBank);
            return this;
        }

        public DocumentSection build() {
            return new DocumentSection(
                    visble,
                    subFooter,
                    subHeader,
                    depositBank,
                    minimumDocuments,
                    uploadDocuments,
                    bankData,
                    termsAndConditions,
                    signer,
                    visible,
                    withdrawalBank,
                    additionalProperties);
        }
    }
}
