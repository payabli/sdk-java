/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PaymentDetailCredit.Builder.class)
public final class PaymentDetailCredit {
    private final Optional<String> currency;

    private final Optional<Double> serviceFee;

    private final double totalAmount;

    private final Map<String, Object> additionalProperties;

    private PaymentDetailCredit(
            Optional<String> currency,
            Optional<Double> serviceFee,
            double totalAmount,
            Map<String, Object> additionalProperties) {
        this.currency = currency;
        this.serviceFee = serviceFee;
        this.totalAmount = totalAmount;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Currency code ISO-4217. If not code is provided the currency in the paypoint setting is taken. Default is <strong>USD</strong>
     */
    @JsonProperty("currency")
    public Optional<String> getCurrency() {
        return currency;
    }

    /**
     * @return Service fee to be deducted from the total amount. This amount must be a number, percentages aren't accepted. If you are using a percentage-based fee schedule, you must calculate the value manually.
     */
    @JsonProperty("serviceFee")
    public Optional<Double> getServiceFee() {
        return serviceFee;
    }

    /**
     * @return Total amount to be charged. If a service fee is provided, then this amount should include the service fee.
     */
    @JsonProperty("totalAmount")
    public double getTotalAmount() {
        return totalAmount;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PaymentDetailCredit && equalTo((PaymentDetailCredit) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PaymentDetailCredit other) {
        return currency.equals(other.currency)
                && serviceFee.equals(other.serviceFee)
                && totalAmount == other.totalAmount;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.currency, this.serviceFee, this.totalAmount);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TotalAmountStage builder() {
        return new Builder();
    }

    public interface TotalAmountStage {
        /**
         * <p>Total amount to be charged. If a service fee is provided, then this amount should include the service fee.</p>
         */
        _FinalStage totalAmount(double totalAmount);

        Builder from(PaymentDetailCredit other);
    }

    public interface _FinalStage {
        PaymentDetailCredit build();

        /**
         * <p>Currency code ISO-4217. If not code is provided the currency in the paypoint setting is taken. Default is <strong>USD</strong></p>
         */
        _FinalStage currency(Optional<String> currency);

        _FinalStage currency(String currency);

        /**
         * <p>Service fee to be deducted from the total amount. This amount must be a number, percentages aren't accepted. If you are using a percentage-based fee schedule, you must calculate the value manually.</p>
         */
        _FinalStage serviceFee(Optional<Double> serviceFee);

        _FinalStage serviceFee(Double serviceFee);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TotalAmountStage, _FinalStage {
        private double totalAmount;

        private Optional<Double> serviceFee = Optional.empty();

        private Optional<String> currency = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PaymentDetailCredit other) {
            currency(other.getCurrency());
            serviceFee(other.getServiceFee());
            totalAmount(other.getTotalAmount());
            return this;
        }

        /**
         * <p>Total amount to be charged. If a service fee is provided, then this amount should include the service fee.</p>
         * <p>Total amount to be charged. If a service fee is provided, then this amount should include the service fee.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("totalAmount")
        public _FinalStage totalAmount(double totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * <p>Service fee to be deducted from the total amount. This amount must be a number, percentages aren't accepted. If you are using a percentage-based fee schedule, you must calculate the value manually.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serviceFee(Double serviceFee) {
            this.serviceFee = Optional.ofNullable(serviceFee);
            return this;
        }

        /**
         * <p>Service fee to be deducted from the total amount. This amount must be a number, percentages aren't accepted. If you are using a percentage-based fee schedule, you must calculate the value manually.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "serviceFee", nulls = Nulls.SKIP)
        public _FinalStage serviceFee(Optional<Double> serviceFee) {
            this.serviceFee = serviceFee;
            return this;
        }

        /**
         * <p>Currency code ISO-4217. If not code is provided the currency in the paypoint setting is taken. Default is <strong>USD</strong></p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage currency(String currency) {
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        /**
         * <p>Currency code ISO-4217. If not code is provided the currency in the paypoint setting is taken. Default is <strong>USD</strong></p>
         */
        @java.lang.Override
        @JsonSetter(value = "currency", nulls = Nulls.SKIP)
        public _FinalStage currency(Optional<String> currency) {
            this.currency = currency;
            return this;
        }

        @java.lang.Override
        public PaymentDetailCredit build() {
            return new PaymentDetailCredit(currency, serviceFee, totalAmount, additionalProperties);
        }
    }
}
