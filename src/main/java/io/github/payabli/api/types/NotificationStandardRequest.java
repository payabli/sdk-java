/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NotificationStandardRequest.Builder.class)
public final class NotificationStandardRequest {
    private final Optional<NotificationStandardRequestContent> content;

    private final NotificationStandardRequestFrequency frequency;

    private final NotificationStandardRequestMethod method;

    private final Optional<String> ownerId;

    private final int ownerType;

    private final Optional<Integer> status;

    private final String target;

    private final Map<String, Object> additionalProperties;

    private NotificationStandardRequest(
            Optional<NotificationStandardRequestContent> content,
            NotificationStandardRequestFrequency frequency,
            NotificationStandardRequestMethod method,
            Optional<String> ownerId,
            int ownerType,
            Optional<Integer> status,
            String target,
            Map<String, Object> additionalProperties) {
        this.content = content;
        this.frequency = frequency;
        this.method = method;
        this.ownerId = ownerId;
        this.ownerType = ownerType;
        this.status = status;
        this.target = target;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("content")
    public Optional<NotificationStandardRequestContent> getContent() {
        return content;
    }

    @JsonProperty("frequency")
    public NotificationStandardRequestFrequency getFrequency() {
        return frequency;
    }

    /**
     * @return Get near-instant notifications via email, SMS, or webhooks for important events like new payment disputes, merchant activations, fraud alerts, approved transactions, settlement history, vendor payouts, and more. Use webhooks with notifications to get real-time updates and automate operations based on key those key events. See <a href="/developers/developer-guides/notifications-and-webhooks-overview#notifications">Notifications</a> for more.
     */
    @JsonProperty("method")
    public NotificationStandardRequestMethod getMethod() {
        return method;
    }

    @JsonProperty("ownerId")
    public Optional<String> getOwnerId() {
        return ownerId;
    }

    @JsonProperty("ownerType")
    public int getOwnerType() {
        return ownerType;
    }

    @JsonProperty("status")
    public Optional<Integer> getStatus() {
        return status;
    }

    /**
     * @return Specify the notification target.
     * <ul>
     * <li>For method=email the expected value is a list of email addresses separated by semicolon.</li>
     * <li>For method=sms the expected value is a list of phone numbers separated by semicolon.</li>
     * <li>For method=web the expected value is a valid and complete URL. Webhooks support only standard HTTP ports: 80, 443, 8080, or 4443.</li>
     * </ul>
     */
    @JsonProperty("target")
    public String getTarget() {
        return target;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NotificationStandardRequest && equalTo((NotificationStandardRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NotificationStandardRequest other) {
        return content.equals(other.content)
                && frequency.equals(other.frequency)
                && method.equals(other.method)
                && ownerId.equals(other.ownerId)
                && ownerType == other.ownerType
                && status.equals(other.status)
                && target.equals(other.target);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.content, this.frequency, this.method, this.ownerId, this.ownerType, this.status, this.target);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static FrequencyStage builder() {
        return new Builder();
    }

    public interface FrequencyStage {
        MethodStage frequency(@NotNull NotificationStandardRequestFrequency frequency);

        Builder from(NotificationStandardRequest other);
    }

    public interface MethodStage {
        /**
         * <p>Get near-instant notifications via email, SMS, or webhooks for important events like new payment disputes, merchant activations, fraud alerts, approved transactions, settlement history, vendor payouts, and more. Use webhooks with notifications to get real-time updates and automate operations based on key those key events. See <a href="/developers/developer-guides/notifications-and-webhooks-overview#notifications">Notifications</a> for more.</p>
         */
        OwnerTypeStage method(@NotNull NotificationStandardRequestMethod method);
    }

    public interface OwnerTypeStage {
        TargetStage ownerType(int ownerType);
    }

    public interface TargetStage {
        /**
         * <p>Specify the notification target.</p>
         * <ul>
         * <li>For method=email the expected value is a list of email addresses separated by semicolon.</li>
         * <li>For method=sms the expected value is a list of phone numbers separated by semicolon.</li>
         * <li>For method=web the expected value is a valid and complete URL. Webhooks support only standard HTTP ports: 80, 443, 8080, or 4443.</li>
         * </ul>
         */
        _FinalStage target(@NotNull String target);
    }

    public interface _FinalStage {
        NotificationStandardRequest build();

        _FinalStage content(Optional<NotificationStandardRequestContent> content);

        _FinalStage content(NotificationStandardRequestContent content);

        _FinalStage ownerId(Optional<String> ownerId);

        _FinalStage ownerId(String ownerId);

        _FinalStage status(Optional<Integer> status);

        _FinalStage status(Integer status);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements FrequencyStage, MethodStage, OwnerTypeStage, TargetStage, _FinalStage {
        private NotificationStandardRequestFrequency frequency;

        private NotificationStandardRequestMethod method;

        private int ownerType;

        private String target;

        private Optional<Integer> status = Optional.empty();

        private Optional<String> ownerId = Optional.empty();

        private Optional<NotificationStandardRequestContent> content = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(NotificationStandardRequest other) {
            content(other.getContent());
            frequency(other.getFrequency());
            method(other.getMethod());
            ownerId(other.getOwnerId());
            ownerType(other.getOwnerType());
            status(other.getStatus());
            target(other.getTarget());
            return this;
        }

        @java.lang.Override
        @JsonSetter("frequency")
        public MethodStage frequency(@NotNull NotificationStandardRequestFrequency frequency) {
            this.frequency = Objects.requireNonNull(frequency, "frequency must not be null");
            return this;
        }

        /**
         * <p>Get near-instant notifications via email, SMS, or webhooks for important events like new payment disputes, merchant activations, fraud alerts, approved transactions, settlement history, vendor payouts, and more. Use webhooks with notifications to get real-time updates and automate operations based on key those key events. See <a href="/developers/developer-guides/notifications-and-webhooks-overview#notifications">Notifications</a> for more.</p>
         * <p>Get near-instant notifications via email, SMS, or webhooks for important events like new payment disputes, merchant activations, fraud alerts, approved transactions, settlement history, vendor payouts, and more. Use webhooks with notifications to get real-time updates and automate operations based on key those key events. See <a href="/developers/developer-guides/notifications-and-webhooks-overview#notifications">Notifications</a> for more.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("method")
        public OwnerTypeStage method(@NotNull NotificationStandardRequestMethod method) {
            this.method = Objects.requireNonNull(method, "method must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("ownerType")
        public TargetStage ownerType(int ownerType) {
            this.ownerType = ownerType;
            return this;
        }

        /**
         * <p>Specify the notification target.</p>
         * <ul>
         * <li>For method=email the expected value is a list of email addresses separated by semicolon.</li>
         * <li>For method=sms the expected value is a list of phone numbers separated by semicolon.</li>
         * <li>For method=web the expected value is a valid and complete URL. Webhooks support only standard HTTP ports: 80, 443, 8080, or 4443.</li>
         * </ul>
         * <p>Specify the notification target.</p>
         * <ul>
         * <li>For method=email the expected value is a list of email addresses separated by semicolon.</li>
         * <li>For method=sms the expected value is a list of phone numbers separated by semicolon.</li>
         * <li>For method=web the expected value is a valid and complete URL. Webhooks support only standard HTTP ports: 80, 443, 8080, or 4443.</li>
         * </ul>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("target")
        public _FinalStage target(@NotNull String target) {
            this.target = Objects.requireNonNull(target, "target must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage status(Integer status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<Integer> status) {
            this.status = status;
            return this;
        }

        @java.lang.Override
        public _FinalStage ownerId(String ownerId) {
            this.ownerId = Optional.ofNullable(ownerId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ownerId", nulls = Nulls.SKIP)
        public _FinalStage ownerId(Optional<String> ownerId) {
            this.ownerId = ownerId;
            return this;
        }

        @java.lang.Override
        public _FinalStage content(NotificationStandardRequestContent content) {
            this.content = Optional.ofNullable(content);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "content", nulls = Nulls.SKIP)
        public _FinalStage content(Optional<NotificationStandardRequestContent> content) {
            this.content = content;
            return this;
        }

        @java.lang.Override
        public NotificationStandardRequest build() {
            return new NotificationStandardRequest(
                    content, frequency, method, ownerId, ownerType, status, target, additionalProperties);
        }
    }
}
