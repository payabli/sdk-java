/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryTransactionEvents.Builder.class)
public final class QueryTransactionEvents {
    private final Optional<QueryTransactionEventsEventData> eventData;

    private final Optional<OffsetDateTime> eventTime;

    private final Optional<String> transEvent;

    private final Map<String, Object> additionalProperties;

    private QueryTransactionEvents(
            Optional<QueryTransactionEventsEventData> eventData,
            Optional<OffsetDateTime> eventTime,
            Optional<String> transEvent,
            Map<String, Object> additionalProperties) {
        this.eventData = eventData;
        this.eventTime = eventTime;
        this.transEvent = transEvent;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Any data associated to the event received from processor. Contents vary by event type.
     */
    @JsonProperty("EventData")
    public Optional<QueryTransactionEventsEventData> getEventData() {
        return eventData;
    }

    /**
     * @return Date and time of event.
     */
    @JsonProperty("EventTime")
    public Optional<OffsetDateTime> getEventTime() {
        return eventTime;
    }

    /**
     * @return Event descriptor. See <a href="/developers/references/transevents">TransEvent Reference</a> for more details.
     */
    @JsonProperty("TransEvent")
    public Optional<String> getTransEvent() {
        return transEvent;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryTransactionEvents && equalTo((QueryTransactionEvents) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryTransactionEvents other) {
        return eventData.equals(other.eventData)
                && eventTime.equals(other.eventTime)
                && transEvent.equals(other.transEvent);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.eventData, this.eventTime, this.transEvent);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<QueryTransactionEventsEventData> eventData = Optional.empty();

        private Optional<OffsetDateTime> eventTime = Optional.empty();

        private Optional<String> transEvent = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(QueryTransactionEvents other) {
            eventData(other.getEventData());
            eventTime(other.getEventTime());
            transEvent(other.getTransEvent());
            return this;
        }

        /**
         * <p>Any data associated to the event received from processor. Contents vary by event type.</p>
         */
        @JsonSetter(value = "EventData", nulls = Nulls.SKIP)
        public Builder eventData(Optional<QueryTransactionEventsEventData> eventData) {
            this.eventData = eventData;
            return this;
        }

        public Builder eventData(QueryTransactionEventsEventData eventData) {
            this.eventData = Optional.ofNullable(eventData);
            return this;
        }

        /**
         * <p>Date and time of event.</p>
         */
        @JsonSetter(value = "EventTime", nulls = Nulls.SKIP)
        public Builder eventTime(Optional<OffsetDateTime> eventTime) {
            this.eventTime = eventTime;
            return this;
        }

        public Builder eventTime(OffsetDateTime eventTime) {
            this.eventTime = Optional.ofNullable(eventTime);
            return this;
        }

        /**
         * <p>Event descriptor. See <a href="/developers/references/transevents">TransEvent Reference</a> for more details.</p>
         */
        @JsonSetter(value = "TransEvent", nulls = Nulls.SKIP)
        public Builder transEvent(Optional<String> transEvent) {
            this.transEvent = transEvent;
            return this;
        }

        public Builder transEvent(String transEvent) {
            this.transEvent = Optional.ofNullable(transEvent);
            return this;
        }

        public QueryTransactionEvents build() {
            return new QueryTransactionEvents(eventData, eventTime, transEvent, additionalProperties);
        }
    }
}
