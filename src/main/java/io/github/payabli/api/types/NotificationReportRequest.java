/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NotificationReportRequest.Builder.class)
public final class NotificationReportRequest {
    private final NotificationReportRequestContent content;

    private final NotificationReportRequestFrequency frequency;

    private final NotificationReportRequestMethod method;

    private final Optional<String> ownerId;

    private final int ownerType;

    private final Optional<Integer> status;

    private final String target;

    private final Map<String, Object> additionalProperties;

    private NotificationReportRequest(
            NotificationReportRequestContent content,
            NotificationReportRequestFrequency frequency,
            NotificationReportRequestMethod method,
            Optional<String> ownerId,
            int ownerType,
            Optional<Integer> status,
            String target,
            Map<String, Object> additionalProperties) {
        this.content = content;
        this.frequency = frequency;
        this.method = method;
        this.ownerId = ownerId;
        this.ownerType = ownerType;
        this.status = status;
        this.target = target;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("content")
    public NotificationReportRequestContent getContent() {
        return content;
    }

    @JsonProperty("frequency")
    public NotificationReportRequestFrequency getFrequency() {
        return frequency;
    }

    /**
     * @return Automated reporting lets you gather critical reports without manually filtering and exporting the data. Get automated daily, weekly, and monthly report for daily sales, ACH returns, settlements, and more. You can send these reports via email or via webhook. See <a href="/developers/developer-guides/notifications-and-webhooks-overview#automated-reports">Automated Reports</a> for more.
     */
    @JsonProperty("method")
    public NotificationReportRequestMethod getMethod() {
        return method;
    }

    @JsonProperty("ownerId")
    public Optional<String> getOwnerId() {
        return ownerId;
    }

    @JsonProperty("ownerType")
    public int getOwnerType() {
        return ownerType;
    }

    @JsonProperty("status")
    public Optional<Integer> getStatus() {
        return status;
    }

    /**
     * @return Specify the notification target.
     * <p>For method=report-email the expected value is a list of email addresses separated by semicolon.</p>
     * <p>For method=report-web the expected value is a valid and complete URL. Webhooks support only standard HTTP ports: 80, 443, 8080, or 4443.</p>
     */
    @JsonProperty("target")
    public String getTarget() {
        return target;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NotificationReportRequest && equalTo((NotificationReportRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NotificationReportRequest other) {
        return content.equals(other.content)
                && frequency.equals(other.frequency)
                && method.equals(other.method)
                && ownerId.equals(other.ownerId)
                && ownerType == other.ownerType
                && status.equals(other.status)
                && target.equals(other.target);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.content, this.frequency, this.method, this.ownerId, this.ownerType, this.status, this.target);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ContentStage builder() {
        return new Builder();
    }

    public interface ContentStage {
        FrequencyStage content(@NotNull NotificationReportRequestContent content);

        Builder from(NotificationReportRequest other);
    }

    public interface FrequencyStage {
        MethodStage frequency(@NotNull NotificationReportRequestFrequency frequency);
    }

    public interface MethodStage {
        /**
         * <p>Automated reporting lets you gather critical reports without manually filtering and exporting the data. Get automated daily, weekly, and monthly report for daily sales, ACH returns, settlements, and more. You can send these reports via email or via webhook. See <a href="/developers/developer-guides/notifications-and-webhooks-overview#automated-reports">Automated Reports</a> for more.</p>
         */
        OwnerTypeStage method(@NotNull NotificationReportRequestMethod method);
    }

    public interface OwnerTypeStage {
        TargetStage ownerType(int ownerType);
    }

    public interface TargetStage {
        /**
         * <p>Specify the notification target.</p>
         * <p>For method=report-email the expected value is a list of email addresses separated by semicolon.</p>
         * <p>For method=report-web the expected value is a valid and complete URL. Webhooks support only standard HTTP ports: 80, 443, 8080, or 4443.</p>
         */
        _FinalStage target(@NotNull String target);
    }

    public interface _FinalStage {
        NotificationReportRequest build();

        _FinalStage ownerId(Optional<String> ownerId);

        _FinalStage ownerId(String ownerId);

        _FinalStage status(Optional<Integer> status);

        _FinalStage status(Integer status);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements ContentStage, FrequencyStage, MethodStage, OwnerTypeStage, TargetStage, _FinalStage {
        private NotificationReportRequestContent content;

        private NotificationReportRequestFrequency frequency;

        private NotificationReportRequestMethod method;

        private int ownerType;

        private String target;

        private Optional<Integer> status = Optional.empty();

        private Optional<String> ownerId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(NotificationReportRequest other) {
            content(other.getContent());
            frequency(other.getFrequency());
            method(other.getMethod());
            ownerId(other.getOwnerId());
            ownerType(other.getOwnerType());
            status(other.getStatus());
            target(other.getTarget());
            return this;
        }

        @java.lang.Override
        @JsonSetter("content")
        public FrequencyStage content(@NotNull NotificationReportRequestContent content) {
            this.content = Objects.requireNonNull(content, "content must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("frequency")
        public MethodStage frequency(@NotNull NotificationReportRequestFrequency frequency) {
            this.frequency = Objects.requireNonNull(frequency, "frequency must not be null");
            return this;
        }

        /**
         * <p>Automated reporting lets you gather critical reports without manually filtering and exporting the data. Get automated daily, weekly, and monthly report for daily sales, ACH returns, settlements, and more. You can send these reports via email or via webhook. See <a href="/developers/developer-guides/notifications-and-webhooks-overview#automated-reports">Automated Reports</a> for more.</p>
         * <p>Automated reporting lets you gather critical reports without manually filtering and exporting the data. Get automated daily, weekly, and monthly report for daily sales, ACH returns, settlements, and more. You can send these reports via email or via webhook. See <a href="/developers/developer-guides/notifications-and-webhooks-overview#automated-reports">Automated Reports</a> for more.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("method")
        public OwnerTypeStage method(@NotNull NotificationReportRequestMethod method) {
            this.method = Objects.requireNonNull(method, "method must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("ownerType")
        public TargetStage ownerType(int ownerType) {
            this.ownerType = ownerType;
            return this;
        }

        /**
         * <p>Specify the notification target.</p>
         * <p>For method=report-email the expected value is a list of email addresses separated by semicolon.</p>
         * <p>For method=report-web the expected value is a valid and complete URL. Webhooks support only standard HTTP ports: 80, 443, 8080, or 4443.</p>
         * <p>Specify the notification target.</p>
         * <p>For method=report-email the expected value is a list of email addresses separated by semicolon.</p>
         * <p>For method=report-web the expected value is a valid and complete URL. Webhooks support only standard HTTP ports: 80, 443, 8080, or 4443.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("target")
        public _FinalStage target(@NotNull String target) {
            this.target = Objects.requireNonNull(target, "target must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage status(Integer status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public _FinalStage status(Optional<Integer> status) {
            this.status = status;
            return this;
        }

        @java.lang.Override
        public _FinalStage ownerId(String ownerId) {
            this.ownerId = Optional.ofNullable(ownerId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ownerId", nulls = Nulls.SKIP)
        public _FinalStage ownerId(Optional<String> ownerId) {
            this.ownerId = ownerId;
            return this;
        }

        @java.lang.Override
        public NotificationReportRequest build() {
            return new NotificationReportRequest(
                    content, frequency, method, ownerId, ownerType, status, target, additionalProperties);
        }
    }
}
