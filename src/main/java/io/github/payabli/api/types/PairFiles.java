/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PairFiles.Builder.class)
public final class PairFiles {
    private final Optional<String> originalName;

    private final Optional<String> zipName;

    private final Optional<String> descriptor;

    private final Map<String, Object> additionalProperties;

    private PairFiles(
            Optional<String> originalName,
            Optional<String> zipName,
            Optional<String> descriptor,
            Map<String, Object> additionalProperties) {
        this.originalName = originalName;
        this.zipName = zipName;
        this.descriptor = descriptor;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Original filename
     */
    @JsonProperty("originalName")
    public Optional<String> getOriginalName() {
        return originalName;
    }

    /**
     * @return Filename assigned to zipped file. This is the name to use for reference in the API functions to get files in attachments.
     */
    @JsonProperty("zipName")
    public Optional<String> getZipName() {
        return zipName;
    }

    /**
     * @return Descriptor of the file.
     */
    @JsonProperty("descriptor")
    public Optional<String> getDescriptor() {
        return descriptor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PairFiles && equalTo((PairFiles) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PairFiles other) {
        return originalName.equals(other.originalName)
                && zipName.equals(other.zipName)
                && descriptor.equals(other.descriptor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.originalName, this.zipName, this.descriptor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> originalName = Optional.empty();

        private Optional<String> zipName = Optional.empty();

        private Optional<String> descriptor = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PairFiles other) {
            originalName(other.getOriginalName());
            zipName(other.getZipName());
            descriptor(other.getDescriptor());
            return this;
        }

        /**
         * <p>Original filename</p>
         */
        @JsonSetter(value = "originalName", nulls = Nulls.SKIP)
        public Builder originalName(Optional<String> originalName) {
            this.originalName = originalName;
            return this;
        }

        public Builder originalName(String originalName) {
            this.originalName = Optional.ofNullable(originalName);
            return this;
        }

        /**
         * <p>Filename assigned to zipped file. This is the name to use for reference in the API functions to get files in attachments.</p>
         */
        @JsonSetter(value = "zipName", nulls = Nulls.SKIP)
        public Builder zipName(Optional<String> zipName) {
            this.zipName = zipName;
            return this;
        }

        public Builder zipName(String zipName) {
            this.zipName = Optional.ofNullable(zipName);
            return this;
        }

        /**
         * <p>Descriptor of the file.</p>
         */
        @JsonSetter(value = "descriptor", nulls = Nulls.SKIP)
        public Builder descriptor(Optional<String> descriptor) {
            this.descriptor = descriptor;
            return this;
        }

        public Builder descriptor(String descriptor) {
            this.descriptor = Optional.ofNullable(descriptor);
            return this;
        }

        public PairFiles build() {
            return new PairFiles(originalName, zipName, descriptor, additionalProperties);
        }
    }
}
