/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = FrequencyList.Builder.class)
public final class FrequencyList {
    private final Optional<Boolean> annually;

    private final Optional<Boolean> every2Weeks;

    private final Optional<Boolean> every3Months;

    private final Optional<Boolean> every6Months;

    private final Optional<Boolean> monthly;

    private final Optional<Boolean> oneTime;

    private final Optional<Boolean> weekly;

    private final Map<String, Object> additionalProperties;

    private FrequencyList(
            Optional<Boolean> annually,
            Optional<Boolean> every2Weeks,
            Optional<Boolean> every3Months,
            Optional<Boolean> every6Months,
            Optional<Boolean> monthly,
            Optional<Boolean> oneTime,
            Optional<Boolean> weekly,
            Map<String, Object> additionalProperties) {
        this.annually = annually;
        this.every2Weeks = every2Weeks;
        this.every3Months = every3Months;
        this.every6Months = every6Months;
        this.monthly = monthly;
        this.oneTime = oneTime;
        this.weekly = weekly;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Enable or disable frequency
     */
    @JsonProperty("annually")
    public Optional<Boolean> getAnnually() {
        return annually;
    }

    /**
     * @return Enable or disable frequency
     */
    @JsonProperty("every2Weeks")
    public Optional<Boolean> getEvery2Weeks() {
        return every2Weeks;
    }

    /**
     * @return Enable or disable frequency
     */
    @JsonProperty("every3Months")
    public Optional<Boolean> getEvery3Months() {
        return every3Months;
    }

    /**
     * @return Enable or disable frequency
     */
    @JsonProperty("every6Months")
    public Optional<Boolean> getEvery6Months() {
        return every6Months;
    }

    /**
     * @return Enable or disable frequency
     */
    @JsonProperty("monthly")
    public Optional<Boolean> getMonthly() {
        return monthly;
    }

    /**
     * @return Enable or disable frequency
     */
    @JsonProperty("one-time")
    public Optional<Boolean> getOneTime() {
        return oneTime;
    }

    /**
     * @return Enable or disable frequency
     */
    @JsonProperty("weekly")
    public Optional<Boolean> getWeekly() {
        return weekly;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof FrequencyList && equalTo((FrequencyList) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(FrequencyList other) {
        return annually.equals(other.annually)
                && every2Weeks.equals(other.every2Weeks)
                && every3Months.equals(other.every3Months)
                && every6Months.equals(other.every6Months)
                && monthly.equals(other.monthly)
                && oneTime.equals(other.oneTime)
                && weekly.equals(other.weekly);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.annually,
                this.every2Weeks,
                this.every3Months,
                this.every6Months,
                this.monthly,
                this.oneTime,
                this.weekly);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> annually = Optional.empty();

        private Optional<Boolean> every2Weeks = Optional.empty();

        private Optional<Boolean> every3Months = Optional.empty();

        private Optional<Boolean> every6Months = Optional.empty();

        private Optional<Boolean> monthly = Optional.empty();

        private Optional<Boolean> oneTime = Optional.empty();

        private Optional<Boolean> weekly = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(FrequencyList other) {
            annually(other.getAnnually());
            every2Weeks(other.getEvery2Weeks());
            every3Months(other.getEvery3Months());
            every6Months(other.getEvery6Months());
            monthly(other.getMonthly());
            oneTime(other.getOneTime());
            weekly(other.getWeekly());
            return this;
        }

        /**
         * <p>Enable or disable frequency</p>
         */
        @JsonSetter(value = "annually", nulls = Nulls.SKIP)
        public Builder annually(Optional<Boolean> annually) {
            this.annually = annually;
            return this;
        }

        public Builder annually(Boolean annually) {
            this.annually = Optional.ofNullable(annually);
            return this;
        }

        /**
         * <p>Enable or disable frequency</p>
         */
        @JsonSetter(value = "every2Weeks", nulls = Nulls.SKIP)
        public Builder every2Weeks(Optional<Boolean> every2Weeks) {
            this.every2Weeks = every2Weeks;
            return this;
        }

        public Builder every2Weeks(Boolean every2Weeks) {
            this.every2Weeks = Optional.ofNullable(every2Weeks);
            return this;
        }

        /**
         * <p>Enable or disable frequency</p>
         */
        @JsonSetter(value = "every3Months", nulls = Nulls.SKIP)
        public Builder every3Months(Optional<Boolean> every3Months) {
            this.every3Months = every3Months;
            return this;
        }

        public Builder every3Months(Boolean every3Months) {
            this.every3Months = Optional.ofNullable(every3Months);
            return this;
        }

        /**
         * <p>Enable or disable frequency</p>
         */
        @JsonSetter(value = "every6Months", nulls = Nulls.SKIP)
        public Builder every6Months(Optional<Boolean> every6Months) {
            this.every6Months = every6Months;
            return this;
        }

        public Builder every6Months(Boolean every6Months) {
            this.every6Months = Optional.ofNullable(every6Months);
            return this;
        }

        /**
         * <p>Enable or disable frequency</p>
         */
        @JsonSetter(value = "monthly", nulls = Nulls.SKIP)
        public Builder monthly(Optional<Boolean> monthly) {
            this.monthly = monthly;
            return this;
        }

        public Builder monthly(Boolean monthly) {
            this.monthly = Optional.ofNullable(monthly);
            return this;
        }

        /**
         * <p>Enable or disable frequency</p>
         */
        @JsonSetter(value = "one-time", nulls = Nulls.SKIP)
        public Builder oneTime(Optional<Boolean> oneTime) {
            this.oneTime = oneTime;
            return this;
        }

        public Builder oneTime(Boolean oneTime) {
            this.oneTime = Optional.ofNullable(oneTime);
            return this;
        }

        /**
         * <p>Enable or disable frequency</p>
         */
        @JsonSetter(value = "weekly", nulls = Nulls.SKIP)
        public Builder weekly(Optional<Boolean> weekly) {
            this.weekly = weekly;
            return this;
        }

        public Builder weekly(Boolean weekly) {
            this.weekly = Optional.ofNullable(weekly);
            return this;
        }

        public FrequencyList build() {
            return new FrequencyList(
                    annually, every2Weeks, every3Months, every6Months, monthly, oneTime, weekly, additionalProperties);
        }
    }
}
