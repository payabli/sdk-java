/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Instrument.Builder.class)
public final class Instrument {
    private final String achAccount;

    private final String achRouting;

    private final Optional<String> billingAddress;

    private final Optional<String> billingCity;

    private final Optional<String> billingCountry;

    private final Optional<String> billingState;

    private final Optional<String> billingZip;

    private final Map<String, Object> additionalProperties;

    private Instrument(
            String achAccount,
            String achRouting,
            Optional<String> billingAddress,
            Optional<String> billingCity,
            Optional<String> billingCountry,
            Optional<String> billingState,
            Optional<String> billingZip,
            Map<String, Object> additionalProperties) {
        this.achAccount = achAccount;
        this.achRouting = achRouting;
        this.billingAddress = billingAddress;
        this.billingCity = billingCity;
        this.billingCountry = billingCountry;
        this.billingState = billingState;
        this.billingZip = billingZip;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("achAccount")
    public String getAchAccount() {
        return achAccount;
    }

    @JsonProperty("achRouting")
    public String getAchRouting() {
        return achRouting;
    }

    @JsonProperty("billingAddress")
    public Optional<String> getBillingAddress() {
        return billingAddress;
    }

    @JsonProperty("billingCity")
    public Optional<String> getBillingCity() {
        return billingCity;
    }

    @JsonProperty("billingCountry")
    public Optional<String> getBillingCountry() {
        return billingCountry;
    }

    @JsonProperty("billingState")
    public Optional<String> getBillingState() {
        return billingState;
    }

    @JsonProperty("billingZip")
    public Optional<String> getBillingZip() {
        return billingZip;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Instrument && equalTo((Instrument) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Instrument other) {
        return achAccount.equals(other.achAccount)
                && achRouting.equals(other.achRouting)
                && billingAddress.equals(other.billingAddress)
                && billingCity.equals(other.billingCity)
                && billingCountry.equals(other.billingCountry)
                && billingState.equals(other.billingState)
                && billingZip.equals(other.billingZip);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.achAccount,
                this.achRouting,
                this.billingAddress,
                this.billingCity,
                this.billingCountry,
                this.billingState,
                this.billingZip);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AchAccountStage builder() {
        return new Builder();
    }

    public interface AchAccountStage {
        AchRoutingStage achAccount(@NotNull String achAccount);

        Builder from(Instrument other);
    }

    public interface AchRoutingStage {
        _FinalStage achRouting(@NotNull String achRouting);
    }

    public interface _FinalStage {
        Instrument build();

        _FinalStage billingAddress(Optional<String> billingAddress);

        _FinalStage billingAddress(String billingAddress);

        _FinalStage billingCity(Optional<String> billingCity);

        _FinalStage billingCity(String billingCity);

        _FinalStage billingCountry(Optional<String> billingCountry);

        _FinalStage billingCountry(String billingCountry);

        _FinalStage billingState(Optional<String> billingState);

        _FinalStage billingState(String billingState);

        _FinalStage billingZip(Optional<String> billingZip);

        _FinalStage billingZip(String billingZip);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AchAccountStage, AchRoutingStage, _FinalStage {
        private String achAccount;

        private String achRouting;

        private Optional<String> billingZip = Optional.empty();

        private Optional<String> billingState = Optional.empty();

        private Optional<String> billingCountry = Optional.empty();

        private Optional<String> billingCity = Optional.empty();

        private Optional<String> billingAddress = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(Instrument other) {
            achAccount(other.getAchAccount());
            achRouting(other.getAchRouting());
            billingAddress(other.getBillingAddress());
            billingCity(other.getBillingCity());
            billingCountry(other.getBillingCountry());
            billingState(other.getBillingState());
            billingZip(other.getBillingZip());
            return this;
        }

        @java.lang.Override
        @JsonSetter("achAccount")
        public AchRoutingStage achAccount(@NotNull String achAccount) {
            this.achAccount = Objects.requireNonNull(achAccount, "achAccount must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("achRouting")
        public _FinalStage achRouting(@NotNull String achRouting) {
            this.achRouting = Objects.requireNonNull(achRouting, "achRouting must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage billingZip(String billingZip) {
            this.billingZip = Optional.ofNullable(billingZip);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "billingZip", nulls = Nulls.SKIP)
        public _FinalStage billingZip(Optional<String> billingZip) {
            this.billingZip = billingZip;
            return this;
        }

        @java.lang.Override
        public _FinalStage billingState(String billingState) {
            this.billingState = Optional.ofNullable(billingState);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "billingState", nulls = Nulls.SKIP)
        public _FinalStage billingState(Optional<String> billingState) {
            this.billingState = billingState;
            return this;
        }

        @java.lang.Override
        public _FinalStage billingCountry(String billingCountry) {
            this.billingCountry = Optional.ofNullable(billingCountry);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "billingCountry", nulls = Nulls.SKIP)
        public _FinalStage billingCountry(Optional<String> billingCountry) {
            this.billingCountry = billingCountry;
            return this;
        }

        @java.lang.Override
        public _FinalStage billingCity(String billingCity) {
            this.billingCity = Optional.ofNullable(billingCity);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "billingCity", nulls = Nulls.SKIP)
        public _FinalStage billingCity(Optional<String> billingCity) {
            this.billingCity = billingCity;
            return this;
        }

        @java.lang.Override
        public _FinalStage billingAddress(String billingAddress) {
            this.billingAddress = Optional.ofNullable(billingAddress);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "billingAddress", nulls = Nulls.SKIP)
        public _FinalStage billingAddress(Optional<String> billingAddress) {
            this.billingAddress = billingAddress;
            return this;
        }

        @java.lang.Override
        public Instrument build() {
            return new Instrument(
                    achAccount,
                    achRouting,
                    billingAddress,
                    billingCity,
                    billingCountry,
                    billingState,
                    billingZip,
                    additionalProperties);
        }
    }
}
