/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SignerData.Builder.class)
public final class SignerData {
    private final Optional<String> signerUuid;

    private final Optional<String> name;

    private final Optional<String> ssn;

    private final Optional<String> dob;

    private final Optional<String> phone;

    private final Optional<String> email;

    private final Optional<String> address;

    private final Optional<String> address1;

    private final Optional<String> city;

    private final Optional<String> state;

    private final Optional<String> zip;

    private final Optional<String> country;

    private final Optional<Boolean> acceptance;

    private final Optional<String> signedDocumentReference;

    private final Optional<Boolean> pciAttestation;

    private final Optional<String> attestationDate;

    private final Optional<String> signDate;

    private final Optional<String> additionalData;

    private final Map<String, Object> additionalProperties;

    private SignerData(
            Optional<String> signerUuid,
            Optional<String> name,
            Optional<String> ssn,
            Optional<String> dob,
            Optional<String> phone,
            Optional<String> email,
            Optional<String> address,
            Optional<String> address1,
            Optional<String> city,
            Optional<String> state,
            Optional<String> zip,
            Optional<String> country,
            Optional<Boolean> acceptance,
            Optional<String> signedDocumentReference,
            Optional<Boolean> pciAttestation,
            Optional<String> attestationDate,
            Optional<String> signDate,
            Optional<String> additionalData,
            Map<String, Object> additionalProperties) {
        this.signerUuid = signerUuid;
        this.name = name;
        this.ssn = ssn;
        this.dob = dob;
        this.phone = phone;
        this.email = email;
        this.address = address;
        this.address1 = address1;
        this.city = city;
        this.state = state;
        this.zip = zip;
        this.country = country;
        this.acceptance = acceptance;
        this.signedDocumentReference = signedDocumentReference;
        this.pciAttestation = pciAttestation;
        this.attestationDate = attestationDate;
        this.signDate = signDate;
        this.additionalData = additionalData;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The signer's ID. This is automatically generated by Payabli.
     */
    @JsonProperty("signerUuid")
    public Optional<String> getSignerUuid() {
        return signerUuid;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("ssn")
    public Optional<String> getSsn() {
        return ssn;
    }

    @JsonProperty("dob")
    public Optional<String> getDob() {
        return dob;
    }

    @JsonProperty("phone")
    public Optional<String> getPhone() {
        return phone;
    }

    /**
     * @return The signer's email address.
     */
    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    @JsonProperty("address")
    public Optional<String> getAddress() {
        return address;
    }

    @JsonProperty("address1")
    public Optional<String> getAddress1() {
        return address1;
    }

    @JsonProperty("city")
    public Optional<String> getCity() {
        return city;
    }

    @JsonProperty("state")
    public Optional<String> getState() {
        return state;
    }

    @JsonProperty("zip")
    public Optional<String> getZip() {
        return zip;
    }

    @JsonProperty("country")
    public Optional<String> getCountry() {
        return country;
    }

    @JsonProperty("acceptance")
    public Optional<Boolean> getAcceptance() {
        return acceptance;
    }

    /**
     * @return Reference to the signed document.
     */
    @JsonProperty("signedDocumentReference")
    public Optional<String> getSignedDocumentReference() {
        return signedDocumentReference;
    }

    @JsonProperty("pciAttestation")
    public Optional<Boolean> getPciAttestation() {
        return pciAttestation;
    }

    @JsonProperty("attestationDate")
    public Optional<String> getAttestationDate() {
        return attestationDate;
    }

    @JsonProperty("signDate")
    public Optional<String> getSignDate() {
        return signDate;
    }

    @JsonProperty("additionalData")
    public Optional<String> getAdditionalData() {
        return additionalData;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SignerData && equalTo((SignerData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SignerData other) {
        return signerUuid.equals(other.signerUuid)
                && name.equals(other.name)
                && ssn.equals(other.ssn)
                && dob.equals(other.dob)
                && phone.equals(other.phone)
                && email.equals(other.email)
                && address.equals(other.address)
                && address1.equals(other.address1)
                && city.equals(other.city)
                && state.equals(other.state)
                && zip.equals(other.zip)
                && country.equals(other.country)
                && acceptance.equals(other.acceptance)
                && signedDocumentReference.equals(other.signedDocumentReference)
                && pciAttestation.equals(other.pciAttestation)
                && attestationDate.equals(other.attestationDate)
                && signDate.equals(other.signDate)
                && additionalData.equals(other.additionalData);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.signerUuid,
                this.name,
                this.ssn,
                this.dob,
                this.phone,
                this.email,
                this.address,
                this.address1,
                this.city,
                this.state,
                this.zip,
                this.country,
                this.acceptance,
                this.signedDocumentReference,
                this.pciAttestation,
                this.attestationDate,
                this.signDate,
                this.additionalData);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> signerUuid = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> ssn = Optional.empty();

        private Optional<String> dob = Optional.empty();

        private Optional<String> phone = Optional.empty();

        private Optional<String> email = Optional.empty();

        private Optional<String> address = Optional.empty();

        private Optional<String> address1 = Optional.empty();

        private Optional<String> city = Optional.empty();

        private Optional<String> state = Optional.empty();

        private Optional<String> zip = Optional.empty();

        private Optional<String> country = Optional.empty();

        private Optional<Boolean> acceptance = Optional.empty();

        private Optional<String> signedDocumentReference = Optional.empty();

        private Optional<Boolean> pciAttestation = Optional.empty();

        private Optional<String> attestationDate = Optional.empty();

        private Optional<String> signDate = Optional.empty();

        private Optional<String> additionalData = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SignerData other) {
            signerUuid(other.getSignerUuid());
            name(other.getName());
            ssn(other.getSsn());
            dob(other.getDob());
            phone(other.getPhone());
            email(other.getEmail());
            address(other.getAddress());
            address1(other.getAddress1());
            city(other.getCity());
            state(other.getState());
            zip(other.getZip());
            country(other.getCountry());
            acceptance(other.getAcceptance());
            signedDocumentReference(other.getSignedDocumentReference());
            pciAttestation(other.getPciAttestation());
            attestationDate(other.getAttestationDate());
            signDate(other.getSignDate());
            additionalData(other.getAdditionalData());
            return this;
        }

        /**
         * <p>The signer's ID. This is automatically generated by Payabli.</p>
         */
        @JsonSetter(value = "signerUuid", nulls = Nulls.SKIP)
        public Builder signerUuid(Optional<String> signerUuid) {
            this.signerUuid = signerUuid;
            return this;
        }

        public Builder signerUuid(String signerUuid) {
            this.signerUuid = Optional.ofNullable(signerUuid);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "ssn", nulls = Nulls.SKIP)
        public Builder ssn(Optional<String> ssn) {
            this.ssn = ssn;
            return this;
        }

        public Builder ssn(String ssn) {
            this.ssn = Optional.ofNullable(ssn);
            return this;
        }

        @JsonSetter(value = "dob", nulls = Nulls.SKIP)
        public Builder dob(Optional<String> dob) {
            this.dob = dob;
            return this;
        }

        public Builder dob(String dob) {
            this.dob = Optional.ofNullable(dob);
            return this;
        }

        @JsonSetter(value = "phone", nulls = Nulls.SKIP)
        public Builder phone(Optional<String> phone) {
            this.phone = phone;
            return this;
        }

        public Builder phone(String phone) {
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * <p>The signer's email address.</p>
         */
        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        @JsonSetter(value = "address", nulls = Nulls.SKIP)
        public Builder address(Optional<String> address) {
            this.address = address;
            return this;
        }

        public Builder address(String address) {
            this.address = Optional.ofNullable(address);
            return this;
        }

        @JsonSetter(value = "address1", nulls = Nulls.SKIP)
        public Builder address1(Optional<String> address1) {
            this.address1 = address1;
            return this;
        }

        public Builder address1(String address1) {
            this.address1 = Optional.ofNullable(address1);
            return this;
        }

        @JsonSetter(value = "city", nulls = Nulls.SKIP)
        public Builder city(Optional<String> city) {
            this.city = city;
            return this;
        }

        public Builder city(String city) {
            this.city = Optional.ofNullable(city);
            return this;
        }

        @JsonSetter(value = "state", nulls = Nulls.SKIP)
        public Builder state(Optional<String> state) {
            this.state = state;
            return this;
        }

        public Builder state(String state) {
            this.state = Optional.ofNullable(state);
            return this;
        }

        @JsonSetter(value = "zip", nulls = Nulls.SKIP)
        public Builder zip(Optional<String> zip) {
            this.zip = zip;
            return this;
        }

        public Builder zip(String zip) {
            this.zip = Optional.ofNullable(zip);
            return this;
        }

        @JsonSetter(value = "country", nulls = Nulls.SKIP)
        public Builder country(Optional<String> country) {
            this.country = country;
            return this;
        }

        public Builder country(String country) {
            this.country = Optional.ofNullable(country);
            return this;
        }

        @JsonSetter(value = "acceptance", nulls = Nulls.SKIP)
        public Builder acceptance(Optional<Boolean> acceptance) {
            this.acceptance = acceptance;
            return this;
        }

        public Builder acceptance(Boolean acceptance) {
            this.acceptance = Optional.ofNullable(acceptance);
            return this;
        }

        /**
         * <p>Reference to the signed document.</p>
         */
        @JsonSetter(value = "signedDocumentReference", nulls = Nulls.SKIP)
        public Builder signedDocumentReference(Optional<String> signedDocumentReference) {
            this.signedDocumentReference = signedDocumentReference;
            return this;
        }

        public Builder signedDocumentReference(String signedDocumentReference) {
            this.signedDocumentReference = Optional.ofNullable(signedDocumentReference);
            return this;
        }

        @JsonSetter(value = "pciAttestation", nulls = Nulls.SKIP)
        public Builder pciAttestation(Optional<Boolean> pciAttestation) {
            this.pciAttestation = pciAttestation;
            return this;
        }

        public Builder pciAttestation(Boolean pciAttestation) {
            this.pciAttestation = Optional.ofNullable(pciAttestation);
            return this;
        }

        @JsonSetter(value = "attestationDate", nulls = Nulls.SKIP)
        public Builder attestationDate(Optional<String> attestationDate) {
            this.attestationDate = attestationDate;
            return this;
        }

        public Builder attestationDate(String attestationDate) {
            this.attestationDate = Optional.ofNullable(attestationDate);
            return this;
        }

        @JsonSetter(value = "signDate", nulls = Nulls.SKIP)
        public Builder signDate(Optional<String> signDate) {
            this.signDate = signDate;
            return this;
        }

        public Builder signDate(String signDate) {
            this.signDate = Optional.ofNullable(signDate);
            return this;
        }

        @JsonSetter(value = "additionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<String> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(String additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        public SignerData build() {
            return new SignerData(
                    signerUuid,
                    name,
                    ssn,
                    dob,
                    phone,
                    email,
                    address,
                    address1,
                    city,
                    state,
                    zip,
                    country,
                    acceptance,
                    signedDocumentReference,
                    pciAttestation,
                    attestationDate,
                    signDate,
                    additionalData,
                    additionalProperties);
        }
    }
}
