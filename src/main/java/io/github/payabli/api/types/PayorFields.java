/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PayorFields.Builder.class)
public final class PayorFields {
    private final Optional<Boolean> display;

    private final Optional<Boolean> fixed;

    private final Optional<Boolean> identifier;

    private final Optional<String> label;

    private final Optional<String> name;

    private final Optional<Integer> order;

    private final Optional<Boolean> required;

    private final Optional<String> validation;

    private final Optional<String> value;

    private final Optional<Integer> width;

    private final Map<String, Object> additionalProperties;

    private PayorFields(
            Optional<Boolean> display,
            Optional<Boolean> fixed,
            Optional<Boolean> identifier,
            Optional<String> label,
            Optional<String> name,
            Optional<Integer> order,
            Optional<Boolean> required,
            Optional<String> validation,
            Optional<String> value,
            Optional<Integer> width,
            Map<String, Object> additionalProperties) {
        this.display = display;
        this.fixed = fixed;
        this.identifier = identifier;
        this.label = label;
        this.name = name;
        this.order = order;
        this.required = required;
        this.validation = validation;
        this.value = value;
        this.width = width;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Flag indicating if the input field will show in container
     */
    @JsonProperty("display")
    public Optional<Boolean> getDisplay() {
        return display;
    }

    /**
     * @return Flag indicating if the value in input field is read-only or not.
     */
    @JsonProperty("fixed")
    public Optional<Boolean> getFixed() {
        return fixed;
    }

    /**
     * @return Flag indicating if the input field is a customer identifier
     */
    @JsonProperty("identifier")
    public Optional<Boolean> getIdentifier() {
        return identifier;
    }

    /**
     * @return Label to display for field
     */
    @JsonProperty("label")
    public Optional<String> getLabel() {
        return label;
    }

    /**
     * @return Name of field to show. Should be one of the standard customer fields or a custom field name
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @JsonProperty("order")
    public Optional<Integer> getOrder() {
        return order;
    }

    /**
     * @return Flag indicating if the input field is required for validation
     */
    @JsonProperty("required")
    public Optional<Boolean> getRequired() {
        return required;
    }

    /**
     * @return Type of validation to apply to the input field Accepted values:
     * <ul>
     * <li>
     * <p>alpha for alphabetical</p>
     * </li>
     * <li>
     * <p>numbers for numeric</p>
     * </li>
     * <li>
     * <p>text for alphanumeric</p>
     * </li>
     * <li>
     * <p>email for masked email address input</p>
     * </li>
     * <li>
     * <p>phone for US phone numbers</p>
     * </li>
     * </ul>
     */
    @JsonProperty("validation")
    public Optional<String> getValidation() {
        return validation;
    }

    /**
     * @return Pre-populated value for field
     */
    @JsonProperty("value")
    public Optional<String> getValue() {
        return value;
    }

    /**
     * @return Numeric value indicating the size of input relative to the container. Accepted values:
     * <pre><code>- 4 = 1/3
     *
     * - 6 = 1/2
     *
     * - 8 = 2/3
     *
     * - 12 = 3/3
     * </code></pre>
     */
    @JsonProperty("width")
    public Optional<Integer> getWidth() {
        return width;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PayorFields && equalTo((PayorFields) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PayorFields other) {
        return display.equals(other.display)
                && fixed.equals(other.fixed)
                && identifier.equals(other.identifier)
                && label.equals(other.label)
                && name.equals(other.name)
                && order.equals(other.order)
                && required.equals(other.required)
                && validation.equals(other.validation)
                && value.equals(other.value)
                && width.equals(other.width);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.display,
                this.fixed,
                this.identifier,
                this.label,
                this.name,
                this.order,
                this.required,
                this.validation,
                this.value,
                this.width);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> display = Optional.empty();

        private Optional<Boolean> fixed = Optional.empty();

        private Optional<Boolean> identifier = Optional.empty();

        private Optional<String> label = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<Integer> order = Optional.empty();

        private Optional<Boolean> required = Optional.empty();

        private Optional<String> validation = Optional.empty();

        private Optional<String> value = Optional.empty();

        private Optional<Integer> width = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PayorFields other) {
            display(other.getDisplay());
            fixed(other.getFixed());
            identifier(other.getIdentifier());
            label(other.getLabel());
            name(other.getName());
            order(other.getOrder());
            required(other.getRequired());
            validation(other.getValidation());
            value(other.getValue());
            width(other.getWidth());
            return this;
        }

        /**
         * <p>Flag indicating if the input field will show in container</p>
         */
        @JsonSetter(value = "display", nulls = Nulls.SKIP)
        public Builder display(Optional<Boolean> display) {
            this.display = display;
            return this;
        }

        public Builder display(Boolean display) {
            this.display = Optional.ofNullable(display);
            return this;
        }

        /**
         * <p>Flag indicating if the value in input field is read-only or not.</p>
         */
        @JsonSetter(value = "fixed", nulls = Nulls.SKIP)
        public Builder fixed(Optional<Boolean> fixed) {
            this.fixed = fixed;
            return this;
        }

        public Builder fixed(Boolean fixed) {
            this.fixed = Optional.ofNullable(fixed);
            return this;
        }

        /**
         * <p>Flag indicating if the input field is a customer identifier</p>
         */
        @JsonSetter(value = "identifier", nulls = Nulls.SKIP)
        public Builder identifier(Optional<Boolean> identifier) {
            this.identifier = identifier;
            return this;
        }

        public Builder identifier(Boolean identifier) {
            this.identifier = Optional.ofNullable(identifier);
            return this;
        }

        /**
         * <p>Label to display for field</p>
         */
        @JsonSetter(value = "label", nulls = Nulls.SKIP)
        public Builder label(Optional<String> label) {
            this.label = label;
            return this;
        }

        public Builder label(String label) {
            this.label = Optional.ofNullable(label);
            return this;
        }

        /**
         * <p>Name of field to show. Should be one of the standard customer fields or a custom field name</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        @JsonSetter(value = "order", nulls = Nulls.SKIP)
        public Builder order(Optional<Integer> order) {
            this.order = order;
            return this;
        }

        public Builder order(Integer order) {
            this.order = Optional.ofNullable(order);
            return this;
        }

        /**
         * <p>Flag indicating if the input field is required for validation</p>
         */
        @JsonSetter(value = "required", nulls = Nulls.SKIP)
        public Builder required(Optional<Boolean> required) {
            this.required = required;
            return this;
        }

        public Builder required(Boolean required) {
            this.required = Optional.ofNullable(required);
            return this;
        }

        /**
         * <p>Type of validation to apply to the input field Accepted values:</p>
         * <ul>
         * <li>
         * <p>alpha for alphabetical</p>
         * </li>
         * <li>
         * <p>numbers for numeric</p>
         * </li>
         * <li>
         * <p>text for alphanumeric</p>
         * </li>
         * <li>
         * <p>email for masked email address input</p>
         * </li>
         * <li>
         * <p>phone for US phone numbers</p>
         * </li>
         * </ul>
         */
        @JsonSetter(value = "validation", nulls = Nulls.SKIP)
        public Builder validation(Optional<String> validation) {
            this.validation = validation;
            return this;
        }

        public Builder validation(String validation) {
            this.validation = Optional.ofNullable(validation);
            return this;
        }

        /**
         * <p>Pre-populated value for field</p>
         */
        @JsonSetter(value = "value", nulls = Nulls.SKIP)
        public Builder value(Optional<String> value) {
            this.value = value;
            return this;
        }

        public Builder value(String value) {
            this.value = Optional.ofNullable(value);
            return this;
        }

        /**
         * <p>Numeric value indicating the size of input relative to the container. Accepted values:</p>
         * <pre><code>- 4 = 1/3
         *
         * - 6 = 1/2
         *
         * - 8 = 2/3
         *
         * - 12 = 3/3
         * </code></pre>
         */
        @JsonSetter(value = "width", nulls = Nulls.SKIP)
        public Builder width(Optional<Integer> width) {
            this.width = width;
            return this;
        }

        public Builder width(Integer width) {
            this.width = Optional.ofNullable(width);
            return this;
        }

        public PayorFields build() {
            return new PayorFields(
                    display,
                    fixed,
                    identifier,
                    label,
                    name,
                    order,
                    required,
                    validation,
                    value,
                    width,
                    additionalProperties);
        }
    }
}
