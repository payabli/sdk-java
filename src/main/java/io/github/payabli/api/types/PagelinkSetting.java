/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PagelinkSetting.Builder.class)
public final class PagelinkSetting {
    private final Optional<String> color;

    private final Optional<String> customCssUrl;

    private final Optional<String> language;

    private final Optional<FileContent> pageLogo;

    private final Optional<Boolean> redirectAfterApprove;

    private final Optional<String> redirectAfterApproveUrl;

    private final Map<String, Object> additionalProperties;

    private PagelinkSetting(
            Optional<String> color,
            Optional<String> customCssUrl,
            Optional<String> language,
            Optional<FileContent> pageLogo,
            Optional<Boolean> redirectAfterApprove,
            Optional<String> redirectAfterApproveUrl,
            Map<String, Object> additionalProperties) {
        this.color = color;
        this.customCssUrl = customCssUrl;
        this.language = language;
        this.pageLogo = pageLogo;
        this.redirectAfterApprove = redirectAfterApprove;
        this.redirectAfterApproveUrl = redirectAfterApproveUrl;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return An HTML color code in format #RRGGBB
     */
    @JsonProperty("color")
    public Optional<String> getColor() {
        return color;
    }

    /**
     * @return Complete URL to a custom CSS file to be loaded with the page
     */
    @JsonProperty("customCssUrl")
    public Optional<String> getCustomCssUrl() {
        return customCssUrl;
    }

    /**
     * @return Two-letter code following ISO 639-1
     */
    @JsonProperty("language")
    public Optional<String> getLanguage() {
        return language;
    }

    /**
     * @return Object containing logo file to upload/ use in page
     */
    @JsonProperty("pageLogo")
    public Optional<FileContent> getPageLogo() {
        return pageLogo;
    }

    /**
     * @return Flag indicating if the capability for redirection in the page will be activated
     */
    @JsonProperty("redirectAfterApprove")
    public Optional<Boolean> getRedirectAfterApprove() {
        return redirectAfterApprove;
    }

    /**
     * @return Complete URL where the page will be redirected after completion
     */
    @JsonProperty("redirectAfterApproveUrl")
    public Optional<String> getRedirectAfterApproveUrl() {
        return redirectAfterApproveUrl;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PagelinkSetting && equalTo((PagelinkSetting) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PagelinkSetting other) {
        return color.equals(other.color)
                && customCssUrl.equals(other.customCssUrl)
                && language.equals(other.language)
                && pageLogo.equals(other.pageLogo)
                && redirectAfterApprove.equals(other.redirectAfterApprove)
                && redirectAfterApproveUrl.equals(other.redirectAfterApproveUrl);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.color,
                this.customCssUrl,
                this.language,
                this.pageLogo,
                this.redirectAfterApprove,
                this.redirectAfterApproveUrl);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> color = Optional.empty();

        private Optional<String> customCssUrl = Optional.empty();

        private Optional<String> language = Optional.empty();

        private Optional<FileContent> pageLogo = Optional.empty();

        private Optional<Boolean> redirectAfterApprove = Optional.empty();

        private Optional<String> redirectAfterApproveUrl = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PagelinkSetting other) {
            color(other.getColor());
            customCssUrl(other.getCustomCssUrl());
            language(other.getLanguage());
            pageLogo(other.getPageLogo());
            redirectAfterApprove(other.getRedirectAfterApprove());
            redirectAfterApproveUrl(other.getRedirectAfterApproveUrl());
            return this;
        }

        /**
         * <p>An HTML color code in format #RRGGBB</p>
         */
        @JsonSetter(value = "color", nulls = Nulls.SKIP)
        public Builder color(Optional<String> color) {
            this.color = color;
            return this;
        }

        public Builder color(String color) {
            this.color = Optional.ofNullable(color);
            return this;
        }

        /**
         * <p>Complete URL to a custom CSS file to be loaded with the page</p>
         */
        @JsonSetter(value = "customCssUrl", nulls = Nulls.SKIP)
        public Builder customCssUrl(Optional<String> customCssUrl) {
            this.customCssUrl = customCssUrl;
            return this;
        }

        public Builder customCssUrl(String customCssUrl) {
            this.customCssUrl = Optional.ofNullable(customCssUrl);
            return this;
        }

        /**
         * <p>Two-letter code following ISO 639-1</p>
         */
        @JsonSetter(value = "language", nulls = Nulls.SKIP)
        public Builder language(Optional<String> language) {
            this.language = language;
            return this;
        }

        public Builder language(String language) {
            this.language = Optional.ofNullable(language);
            return this;
        }

        /**
         * <p>Object containing logo file to upload/ use in page</p>
         */
        @JsonSetter(value = "pageLogo", nulls = Nulls.SKIP)
        public Builder pageLogo(Optional<FileContent> pageLogo) {
            this.pageLogo = pageLogo;
            return this;
        }

        public Builder pageLogo(FileContent pageLogo) {
            this.pageLogo = Optional.ofNullable(pageLogo);
            return this;
        }

        /**
         * <p>Flag indicating if the capability for redirection in the page will be activated</p>
         */
        @JsonSetter(value = "redirectAfterApprove", nulls = Nulls.SKIP)
        public Builder redirectAfterApprove(Optional<Boolean> redirectAfterApprove) {
            this.redirectAfterApprove = redirectAfterApprove;
            return this;
        }

        public Builder redirectAfterApprove(Boolean redirectAfterApprove) {
            this.redirectAfterApprove = Optional.ofNullable(redirectAfterApprove);
            return this;
        }

        /**
         * <p>Complete URL where the page will be redirected after completion</p>
         */
        @JsonSetter(value = "redirectAfterApproveUrl", nulls = Nulls.SKIP)
        public Builder redirectAfterApproveUrl(Optional<String> redirectAfterApproveUrl) {
            this.redirectAfterApproveUrl = redirectAfterApproveUrl;
            return this;
        }

        public Builder redirectAfterApproveUrl(String redirectAfterApproveUrl) {
            this.redirectAfterApproveUrl = Optional.ofNullable(redirectAfterApproveUrl);
            return this;
        }

        public PagelinkSetting build() {
            return new PagelinkSetting(
                    color,
                    customCssUrl,
                    language,
                    pageLogo,
                    redirectAfterApprove,
                    redirectAfterApproveUrl,
                    additionalProperties);
        }
    }
}
