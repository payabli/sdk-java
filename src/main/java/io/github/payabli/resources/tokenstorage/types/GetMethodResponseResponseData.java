/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.tokenstorage.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import io.github.payabli.types.AchHolderType;
import io.github.payabli.types.BinData;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = GetMethodResponseResponseData.Builder.class)
public final class GetMethodResponseResponseData {
    private final Optional<String> aba;

    private final Optional<AchHolderType> achHolderType;

    private final Optional<String> achSecCode;

    private final Optional<String> bin;

    private final Optional<BinData> binData;

    private final Optional<List<GetMethodResponseResponseDataCustomersItem>> customers;

    private final Optional<String> descriptor;

    private final Optional<String> expDate;

    private final Optional<String> holderName;

    private final Optional<String> idPmethod;

    private final Optional<OffsetDateTime> lastUpdated;

    private final Optional<String> maskedAccount;

    private final Optional<String> method;

    private final Optional<String> methodType;

    private final Optional<String> postalCode;

    private final Map<String, Object> additionalProperties;

    private GetMethodResponseResponseData(
            Optional<String> aba,
            Optional<AchHolderType> achHolderType,
            Optional<String> achSecCode,
            Optional<String> bin,
            Optional<BinData> binData,
            Optional<List<GetMethodResponseResponseDataCustomersItem>> customers,
            Optional<String> descriptor,
            Optional<String> expDate,
            Optional<String> holderName,
            Optional<String> idPmethod,
            Optional<OffsetDateTime> lastUpdated,
            Optional<String> maskedAccount,
            Optional<String> method,
            Optional<String> methodType,
            Optional<String> postalCode,
            Map<String, Object> additionalProperties) {
        this.aba = aba;
        this.achHolderType = achHolderType;
        this.achSecCode = achSecCode;
        this.bin = bin;
        this.binData = binData;
        this.customers = customers;
        this.descriptor = descriptor;
        this.expDate = expDate;
        this.holderName = holderName;
        this.idPmethod = idPmethod;
        this.lastUpdated = lastUpdated;
        this.maskedAccount = maskedAccount;
        this.method = method;
        this.methodType = methodType;
        this.postalCode = postalCode;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Bank routing number
     */
    @JsonProperty("aba")
    public Optional<String> getAba() {
        return aba;
    }

    @JsonProperty("achHolderType")
    public Optional<AchHolderType> getAchHolderType() {
        return achHolderType;
    }

    @JsonProperty("achSecCode")
    public Optional<String> getAchSecCode() {
        return achSecCode;
    }

    /**
     * @return The bank identification number (BIN)
     */
    @JsonProperty("bin")
    public Optional<String> getBin() {
        return bin;
    }

    @JsonProperty("binData")
    public Optional<BinData> getBinData() {
        return binData;
    }

    @JsonProperty("customers")
    public Optional<List<GetMethodResponseResponseDataCustomersItem>> getCustomers() {
        return customers;
    }

    @JsonProperty("descriptor")
    public Optional<String> getDescriptor() {
        return descriptor;
    }

    /**
     * @return Expiration date for card in stored method in format MM/YY
     */
    @JsonProperty("expDate")
    public Optional<String> getExpDate() {
        return expDate;
    }

    /**
     * @return Account holder name in stored method
     */
    @JsonProperty("holderName")
    public Optional<String> getHolderName() {
        return holderName;
    }

    /**
     * @return The stored payment method's identifier in Payabli
     */
    @JsonProperty("idPmethod")
    public Optional<String> getIdPmethod() {
        return idPmethod;
    }

    /**
     * @return Timestamp for last update of stored method, in UTC
     */
    @JsonProperty("lastUpdated")
    public Optional<OffsetDateTime> getLastUpdated() {
        return lastUpdated;
    }

    @JsonProperty("maskedAccount")
    public Optional<String> getMaskedAccount() {
        return maskedAccount;
    }

    /**
     * @return The saved method's type: <code>card</code> or <code>ach</code>.
     */
    @JsonProperty("method")
    public Optional<String> getMethod() {
        return method;
    }

    /**
     * @return The payment method's token type
     */
    @JsonProperty("methodType")
    public Optional<String> getMethodType() {
        return methodType;
    }

    /**
     * @return The payment method postal code
     */
    @JsonProperty("postalCode")
    public Optional<String> getPostalCode() {
        return postalCode;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof GetMethodResponseResponseData && equalTo((GetMethodResponseResponseData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(GetMethodResponseResponseData other) {
        return aba.equals(other.aba)
                && achHolderType.equals(other.achHolderType)
                && achSecCode.equals(other.achSecCode)
                && bin.equals(other.bin)
                && binData.equals(other.binData)
                && customers.equals(other.customers)
                && descriptor.equals(other.descriptor)
                && expDate.equals(other.expDate)
                && holderName.equals(other.holderName)
                && idPmethod.equals(other.idPmethod)
                && lastUpdated.equals(other.lastUpdated)
                && maskedAccount.equals(other.maskedAccount)
                && method.equals(other.method)
                && methodType.equals(other.methodType)
                && postalCode.equals(other.postalCode);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.aba,
                this.achHolderType,
                this.achSecCode,
                this.bin,
                this.binData,
                this.customers,
                this.descriptor,
                this.expDate,
                this.holderName,
                this.idPmethod,
                this.lastUpdated,
                this.maskedAccount,
                this.method,
                this.methodType,
                this.postalCode);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> aba = Optional.empty();

        private Optional<AchHolderType> achHolderType = Optional.empty();

        private Optional<String> achSecCode = Optional.empty();

        private Optional<String> bin = Optional.empty();

        private Optional<BinData> binData = Optional.empty();

        private Optional<List<GetMethodResponseResponseDataCustomersItem>> customers = Optional.empty();

        private Optional<String> descriptor = Optional.empty();

        private Optional<String> expDate = Optional.empty();

        private Optional<String> holderName = Optional.empty();

        private Optional<String> idPmethod = Optional.empty();

        private Optional<OffsetDateTime> lastUpdated = Optional.empty();

        private Optional<String> maskedAccount = Optional.empty();

        private Optional<String> method = Optional.empty();

        private Optional<String> methodType = Optional.empty();

        private Optional<String> postalCode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(GetMethodResponseResponseData other) {
            aba(other.getAba());
            achHolderType(other.getAchHolderType());
            achSecCode(other.getAchSecCode());
            bin(other.getBin());
            binData(other.getBinData());
            customers(other.getCustomers());
            descriptor(other.getDescriptor());
            expDate(other.getExpDate());
            holderName(other.getHolderName());
            idPmethod(other.getIdPmethod());
            lastUpdated(other.getLastUpdated());
            maskedAccount(other.getMaskedAccount());
            method(other.getMethod());
            methodType(other.getMethodType());
            postalCode(other.getPostalCode());
            return this;
        }

        /**
         * <p>Bank routing number</p>
         */
        @JsonSetter(value = "aba", nulls = Nulls.SKIP)
        public Builder aba(Optional<String> aba) {
            this.aba = aba;
            return this;
        }

        public Builder aba(String aba) {
            this.aba = Optional.ofNullable(aba);
            return this;
        }

        @JsonSetter(value = "achHolderType", nulls = Nulls.SKIP)
        public Builder achHolderType(Optional<AchHolderType> achHolderType) {
            this.achHolderType = achHolderType;
            return this;
        }

        public Builder achHolderType(AchHolderType achHolderType) {
            this.achHolderType = Optional.ofNullable(achHolderType);
            return this;
        }

        @JsonSetter(value = "achSecCode", nulls = Nulls.SKIP)
        public Builder achSecCode(Optional<String> achSecCode) {
            this.achSecCode = achSecCode;
            return this;
        }

        public Builder achSecCode(String achSecCode) {
            this.achSecCode = Optional.ofNullable(achSecCode);
            return this;
        }

        /**
         * <p>The bank identification number (BIN)</p>
         */
        @JsonSetter(value = "bin", nulls = Nulls.SKIP)
        public Builder bin(Optional<String> bin) {
            this.bin = bin;
            return this;
        }

        public Builder bin(String bin) {
            this.bin = Optional.ofNullable(bin);
            return this;
        }

        @JsonSetter(value = "binData", nulls = Nulls.SKIP)
        public Builder binData(Optional<BinData> binData) {
            this.binData = binData;
            return this;
        }

        public Builder binData(BinData binData) {
            this.binData = Optional.ofNullable(binData);
            return this;
        }

        @JsonSetter(value = "customers", nulls = Nulls.SKIP)
        public Builder customers(Optional<List<GetMethodResponseResponseDataCustomersItem>> customers) {
            this.customers = customers;
            return this;
        }

        public Builder customers(List<GetMethodResponseResponseDataCustomersItem> customers) {
            this.customers = Optional.ofNullable(customers);
            return this;
        }

        @JsonSetter(value = "descriptor", nulls = Nulls.SKIP)
        public Builder descriptor(Optional<String> descriptor) {
            this.descriptor = descriptor;
            return this;
        }

        public Builder descriptor(String descriptor) {
            this.descriptor = Optional.ofNullable(descriptor);
            return this;
        }

        /**
         * <p>Expiration date for card in stored method in format MM/YY</p>
         */
        @JsonSetter(value = "expDate", nulls = Nulls.SKIP)
        public Builder expDate(Optional<String> expDate) {
            this.expDate = expDate;
            return this;
        }

        public Builder expDate(String expDate) {
            this.expDate = Optional.ofNullable(expDate);
            return this;
        }

        /**
         * <p>Account holder name in stored method</p>
         */
        @JsonSetter(value = "holderName", nulls = Nulls.SKIP)
        public Builder holderName(Optional<String> holderName) {
            this.holderName = holderName;
            return this;
        }

        public Builder holderName(String holderName) {
            this.holderName = Optional.ofNullable(holderName);
            return this;
        }

        /**
         * <p>The stored payment method's identifier in Payabli</p>
         */
        @JsonSetter(value = "idPmethod", nulls = Nulls.SKIP)
        public Builder idPmethod(Optional<String> idPmethod) {
            this.idPmethod = idPmethod;
            return this;
        }

        public Builder idPmethod(String idPmethod) {
            this.idPmethod = Optional.ofNullable(idPmethod);
            return this;
        }

        /**
         * <p>Timestamp for last update of stored method, in UTC</p>
         */
        @JsonSetter(value = "lastUpdated", nulls = Nulls.SKIP)
        public Builder lastUpdated(Optional<OffsetDateTime> lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }

        public Builder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = Optional.ofNullable(lastUpdated);
            return this;
        }

        @JsonSetter(value = "maskedAccount", nulls = Nulls.SKIP)
        public Builder maskedAccount(Optional<String> maskedAccount) {
            this.maskedAccount = maskedAccount;
            return this;
        }

        public Builder maskedAccount(String maskedAccount) {
            this.maskedAccount = Optional.ofNullable(maskedAccount);
            return this;
        }

        /**
         * <p>The saved method's type: <code>card</code> or <code>ach</code>.</p>
         */
        @JsonSetter(value = "method", nulls = Nulls.SKIP)
        public Builder method(Optional<String> method) {
            this.method = method;
            return this;
        }

        public Builder method(String method) {
            this.method = Optional.ofNullable(method);
            return this;
        }

        /**
         * <p>The payment method's token type</p>
         */
        @JsonSetter(value = "methodType", nulls = Nulls.SKIP)
        public Builder methodType(Optional<String> methodType) {
            this.methodType = methodType;
            return this;
        }

        public Builder methodType(String methodType) {
            this.methodType = Optional.ofNullable(methodType);
            return this;
        }

        /**
         * <p>The payment method postal code</p>
         */
        @JsonSetter(value = "postalCode", nulls = Nulls.SKIP)
        public Builder postalCode(Optional<String> postalCode) {
            this.postalCode = postalCode;
            return this;
        }

        public Builder postalCode(String postalCode) {
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        public GetMethodResponseResponseData build() {
            return new GetMethodResponseResponseData(
                    aba,
                    achHolderType,
                    achSecCode,
                    bin,
                    binData,
                    customers,
                    descriptor,
                    expDate,
                    holderName,
                    idPmethod,
                    lastUpdated,
                    maskedAccount,
                    method,
                    methodType,
                    postalCode,
                    additionalProperties);
        }
    }
}
