/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.tokenstorage.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import io.github.payabli.types.PayorDataRequest;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RequestTokenStorage.Builder.class)
public final class RequestTokenStorage {
    private final Optional<PayorDataRequest> customerData;

    private final Optional<String> entryPoint;

    private final Optional<Boolean> fallbackAuth;

    private final Optional<Integer> fallbackAuthAmount;

    private final Optional<String> methodDescription;

    private final Optional<RequestTokenStoragePaymentMethod> paymentMethod;

    private final Optional<String> source;

    private final Optional<String> subdomain;

    private final Map<String, Object> additionalProperties;

    private RequestTokenStorage(
            Optional<PayorDataRequest> customerData,
            Optional<String> entryPoint,
            Optional<Boolean> fallbackAuth,
            Optional<Integer> fallbackAuthAmount,
            Optional<String> methodDescription,
            Optional<RequestTokenStoragePaymentMethod> paymentMethod,
            Optional<String> source,
            Optional<String> subdomain,
            Map<String, Object> additionalProperties) {
        this.customerData = customerData;
        this.entryPoint = entryPoint;
        this.fallbackAuth = fallbackAuth;
        this.fallbackAuthAmount = fallbackAuthAmount;
        this.methodDescription = methodDescription;
        this.paymentMethod = paymentMethod;
        this.source = source;
        this.subdomain = subdomain;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Object describing the Customer/Payor owner of payment method. Required for POST requests. Which fields are required depends on the paypoint's custom identifier settings.
     */
    @JsonProperty("customerData")
    public Optional<PayorDataRequest> getCustomerData() {
        return customerData;
    }

    /**
     * @return Entrypoint identifier. Required for POST requests.
     */
    @JsonProperty("entryPoint")
    public Optional<String> getEntryPoint() {
        return entryPoint;
    }

    /**
     * @return When <code>true</code>, if tokenization fails, Payabli will attempt an authorization transaction to request a permanent token for the card. If the authorization is successful, the card will be tokenized and the authorization will be voided automatically.
     */
    @JsonProperty("fallbackAuth")
    public Optional<Boolean> getFallbackAuth() {
        return fallbackAuth;
    }

    /**
     * @return The amount for the <code>fallbackAuth</code> transaction. Defaults to one dollar (<code>100</code>).
     */
    @JsonProperty("fallbackAuthAmount")
    public Optional<Integer> getFallbackAuthAmount() {
        return fallbackAuthAmount;
    }

    /**
     * @return Custom description for stored payment method.
     */
    @JsonProperty("methodDescription")
    public Optional<String> getMethodDescription() {
        return methodDescription;
    }

    /**
     * @return Information about the payment method for the transaction.
     */
    @JsonProperty("paymentMethod")
    public Optional<RequestTokenStoragePaymentMethod> getPaymentMethod() {
        return paymentMethod;
    }

    /**
     * @return Custom identifier to indicate the source for the request
     */
    @JsonProperty("source")
    public Optional<String> getSource() {
        return source;
    }

    @JsonProperty("subdomain")
    public Optional<String> getSubdomain() {
        return subdomain;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RequestTokenStorage && equalTo((RequestTokenStorage) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RequestTokenStorage other) {
        return customerData.equals(other.customerData)
                && entryPoint.equals(other.entryPoint)
                && fallbackAuth.equals(other.fallbackAuth)
                && fallbackAuthAmount.equals(other.fallbackAuthAmount)
                && methodDescription.equals(other.methodDescription)
                && paymentMethod.equals(other.paymentMethod)
                && source.equals(other.source)
                && subdomain.equals(other.subdomain);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.customerData,
                this.entryPoint,
                this.fallbackAuth,
                this.fallbackAuthAmount,
                this.methodDescription,
                this.paymentMethod,
                this.source,
                this.subdomain);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<PayorDataRequest> customerData = Optional.empty();

        private Optional<String> entryPoint = Optional.empty();

        private Optional<Boolean> fallbackAuth = Optional.empty();

        private Optional<Integer> fallbackAuthAmount = Optional.empty();

        private Optional<String> methodDescription = Optional.empty();

        private Optional<RequestTokenStoragePaymentMethod> paymentMethod = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<String> subdomain = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RequestTokenStorage other) {
            customerData(other.getCustomerData());
            entryPoint(other.getEntryPoint());
            fallbackAuth(other.getFallbackAuth());
            fallbackAuthAmount(other.getFallbackAuthAmount());
            methodDescription(other.getMethodDescription());
            paymentMethod(other.getPaymentMethod());
            source(other.getSource());
            subdomain(other.getSubdomain());
            return this;
        }

        /**
         * <p>Object describing the Customer/Payor owner of payment method. Required for POST requests. Which fields are required depends on the paypoint's custom identifier settings.</p>
         */
        @JsonSetter(value = "customerData", nulls = Nulls.SKIP)
        public Builder customerData(Optional<PayorDataRequest> customerData) {
            this.customerData = customerData;
            return this;
        }

        public Builder customerData(PayorDataRequest customerData) {
            this.customerData = Optional.ofNullable(customerData);
            return this;
        }

        /**
         * <p>Entrypoint identifier. Required for POST requests.</p>
         */
        @JsonSetter(value = "entryPoint", nulls = Nulls.SKIP)
        public Builder entryPoint(Optional<String> entryPoint) {
            this.entryPoint = entryPoint;
            return this;
        }

        public Builder entryPoint(String entryPoint) {
            this.entryPoint = Optional.ofNullable(entryPoint);
            return this;
        }

        /**
         * <p>When <code>true</code>, if tokenization fails, Payabli will attempt an authorization transaction to request a permanent token for the card. If the authorization is successful, the card will be tokenized and the authorization will be voided automatically.</p>
         */
        @JsonSetter(value = "fallbackAuth", nulls = Nulls.SKIP)
        public Builder fallbackAuth(Optional<Boolean> fallbackAuth) {
            this.fallbackAuth = fallbackAuth;
            return this;
        }

        public Builder fallbackAuth(Boolean fallbackAuth) {
            this.fallbackAuth = Optional.ofNullable(fallbackAuth);
            return this;
        }

        /**
         * <p>The amount for the <code>fallbackAuth</code> transaction. Defaults to one dollar (<code>100</code>).</p>
         */
        @JsonSetter(value = "fallbackAuthAmount", nulls = Nulls.SKIP)
        public Builder fallbackAuthAmount(Optional<Integer> fallbackAuthAmount) {
            this.fallbackAuthAmount = fallbackAuthAmount;
            return this;
        }

        public Builder fallbackAuthAmount(Integer fallbackAuthAmount) {
            this.fallbackAuthAmount = Optional.ofNullable(fallbackAuthAmount);
            return this;
        }

        /**
         * <p>Custom description for stored payment method.</p>
         */
        @JsonSetter(value = "methodDescription", nulls = Nulls.SKIP)
        public Builder methodDescription(Optional<String> methodDescription) {
            this.methodDescription = methodDescription;
            return this;
        }

        public Builder methodDescription(String methodDescription) {
            this.methodDescription = Optional.ofNullable(methodDescription);
            return this;
        }

        /**
         * <p>Information about the payment method for the transaction.</p>
         */
        @JsonSetter(value = "paymentMethod", nulls = Nulls.SKIP)
        public Builder paymentMethod(Optional<RequestTokenStoragePaymentMethod> paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }

        public Builder paymentMethod(RequestTokenStoragePaymentMethod paymentMethod) {
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        /**
         * <p>Custom identifier to indicate the source for the request</p>
         */
        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public Builder source(Optional<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        @JsonSetter(value = "subdomain", nulls = Nulls.SKIP)
        public Builder subdomain(Optional<String> subdomain) {
            this.subdomain = subdomain;
            return this;
        }

        public Builder subdomain(String subdomain) {
            this.subdomain = Optional.ofNullable(subdomain);
            return this;
        }

        public RequestTokenStorage build() {
            return new RequestTokenStorage(
                    customerData,
                    entryPoint,
                    fallbackAuth,
                    fallbackAuthAmount,
                    methodDescription,
                    paymentMethod,
                    source,
                    subdomain,
                    additionalProperties);
        }
    }
}
