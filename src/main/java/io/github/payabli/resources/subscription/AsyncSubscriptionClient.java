/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.subscription;

import io.github.payabli.core.ClientOptions;
import io.github.payabli.core.RequestOptions;
import io.github.payabli.resources.subscription.requests.RequestSchedule;
import io.github.payabli.resources.subscription.requests.RequestUpdateSchedule;
import io.github.payabli.resources.subscription.types.AddSubscriptionResponse;
import io.github.payabli.resources.subscription.types.RemoveSubscriptionResponse;
import io.github.payabli.resources.subscription.types.UpdateSubscriptionResponse;
import io.github.payabli.types.SubscriptionQueryRecords;
import java.util.concurrent.CompletableFuture;

public class AsyncSubscriptionClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawSubscriptionClient rawClient;

    public AsyncSubscriptionClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawSubscriptionClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawSubscriptionClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Retrieves a single subscription's details.
     */
    public CompletableFuture<SubscriptionQueryRecords> getSubscription(int subId) {
        return this.rawClient.getSubscription(subId).thenApply(response -> response.body());
    }

    /**
     * Retrieves a single subscription's details.
     */
    public CompletableFuture<SubscriptionQueryRecords> getSubscription(int subId, RequestOptions requestOptions) {
        return this.rawClient.getSubscription(subId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Creates a subscription or scheduled payment to run at a specified time and frequency.
     */
    public CompletableFuture<AddSubscriptionResponse> newSubscription(RequestSchedule request) {
        return this.rawClient.newSubscription(request).thenApply(response -> response.body());
    }

    /**
     * Creates a subscription or scheduled payment to run at a specified time and frequency.
     */
    public CompletableFuture<AddSubscriptionResponse> newSubscription(
            RequestSchedule request, RequestOptions requestOptions) {
        return this.rawClient.newSubscription(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Deletes a subscription, autopay, or recurring payment and prevents future charges.
     */
    public CompletableFuture<RemoveSubscriptionResponse> removeSubscription(int subId) {
        return this.rawClient.removeSubscription(subId).thenApply(response -> response.body());
    }

    /**
     * Deletes a subscription, autopay, or recurring payment and prevents future charges.
     */
    public CompletableFuture<RemoveSubscriptionResponse> removeSubscription(int subId, RequestOptions requestOptions) {
        return this.rawClient.removeSubscription(subId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Updates a subscription's details.
     */
    public CompletableFuture<UpdateSubscriptionResponse> updateSubscription(int subId) {
        return this.rawClient.updateSubscription(subId).thenApply(response -> response.body());
    }

    /**
     * Updates a subscription's details.
     */
    public CompletableFuture<UpdateSubscriptionResponse> updateSubscription(int subId, RequestUpdateSchedule request) {
        return this.rawClient.updateSubscription(subId, request).thenApply(response -> response.body());
    }

    /**
     * Updates a subscription's details.
     */
    public CompletableFuture<UpdateSubscriptionResponse> updateSubscription(
            int subId, RequestUpdateSchedule request, RequestOptions requestOptions) {
        return this.rawClient.updateSubscription(subId, request, requestOptions).thenApply(response -> response.body());
    }
}
