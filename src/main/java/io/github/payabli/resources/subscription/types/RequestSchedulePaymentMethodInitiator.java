/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.subscription.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RequestSchedulePaymentMethodInitiator.Builder.class)
public final class RequestSchedulePaymentMethodInitiator {
    private final Optional<String> initiator;

    private final Optional<String> storedMethodId;

    private final Optional<String> storedMethodUsageType;

    private final Map<String, Object> additionalProperties;

    private RequestSchedulePaymentMethodInitiator(
            Optional<String> initiator,
            Optional<String> storedMethodId,
            Optional<String> storedMethodUsageType,
            Map<String, Object> additionalProperties) {
        this.initiator = initiator;
        this.storedMethodId = storedMethodId;
        this.storedMethodUsageType = storedMethodUsageType;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("initiator")
    public Optional<String> getInitiator() {
        return initiator;
    }

    /**
     * @return Payabli identifier of a tokenized payment method.
     */
    @JsonProperty("storedMethodId")
    public Optional<String> getStoredMethodId() {
        return storedMethodId;
    }

    @JsonProperty("storedMethodUsageType")
    public Optional<String> getStoredMethodUsageType() {
        return storedMethodUsageType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RequestSchedulePaymentMethodInitiator
                && equalTo((RequestSchedulePaymentMethodInitiator) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RequestSchedulePaymentMethodInitiator other) {
        return initiator.equals(other.initiator)
                && storedMethodId.equals(other.storedMethodId)
                && storedMethodUsageType.equals(other.storedMethodUsageType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.initiator, this.storedMethodId, this.storedMethodUsageType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> initiator = Optional.empty();

        private Optional<String> storedMethodId = Optional.empty();

        private Optional<String> storedMethodUsageType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RequestSchedulePaymentMethodInitiator other) {
            initiator(other.getInitiator());
            storedMethodId(other.getStoredMethodId());
            storedMethodUsageType(other.getStoredMethodUsageType());
            return this;
        }

        @JsonSetter(value = "initiator", nulls = Nulls.SKIP)
        public Builder initiator(Optional<String> initiator) {
            this.initiator = initiator;
            return this;
        }

        public Builder initiator(String initiator) {
            this.initiator = Optional.ofNullable(initiator);
            return this;
        }

        /**
         * <p>Payabli identifier of a tokenized payment method.</p>
         */
        @JsonSetter(value = "storedMethodId", nulls = Nulls.SKIP)
        public Builder storedMethodId(Optional<String> storedMethodId) {
            this.storedMethodId = storedMethodId;
            return this;
        }

        public Builder storedMethodId(String storedMethodId) {
            this.storedMethodId = Optional.ofNullable(storedMethodId);
            return this;
        }

        @JsonSetter(value = "storedMethodUsageType", nulls = Nulls.SKIP)
        public Builder storedMethodUsageType(Optional<String> storedMethodUsageType) {
            this.storedMethodUsageType = storedMethodUsageType;
            return this;
        }

        public Builder storedMethodUsageType(String storedMethodUsageType) {
            this.storedMethodUsageType = Optional.ofNullable(storedMethodUsageType);
            return this;
        }

        public RequestSchedulePaymentMethodInitiator build() {
            return new RequestSchedulePaymentMethodInitiator(
                    initiator, storedMethodId, storedMethodUsageType, additionalProperties);
        }
    }
}
