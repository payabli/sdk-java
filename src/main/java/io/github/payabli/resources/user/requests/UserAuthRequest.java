/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.user.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UserAuthRequest.Builder.class)
public final class UserAuthRequest {
    private final Optional<String> email;

    private final Optional<String> entry;

    private final Optional<Integer> entryType;

    private final Optional<String> psw;

    private final Optional<Long> userId;

    private final Optional<String> userTokenId;

    private final Map<String, Object> additionalProperties;

    private UserAuthRequest(
            Optional<String> email,
            Optional<String> entry,
            Optional<Integer> entryType,
            Optional<String> psw,
            Optional<Long> userId,
            Optional<String> userTokenId,
            Map<String, Object> additionalProperties) {
        this.email = email;
        this.entry = entry;
        this.entryType = entryType;
        this.psw = psw;
        this.userId = userId;
        this.userTokenId = userTokenId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("email")
    public Optional<String> getEmail() {
        return email;
    }

    /**
     * @return Identifier for entry point originating the request (used by front-end apps)
     */
    @JsonProperty("entry")
    public Optional<String> getEntry() {
        return entry;
    }

    /**
     * @return Type of entry identifier: 0 - partner, 2 - paypoint. This is used by front-end apps, required if an Entry is indicated.
     */
    @JsonProperty("entryType")
    public Optional<Integer> getEntryType() {
        return entryType;
    }

    @JsonProperty("psw")
    public Optional<String> getPsw() {
        return psw;
    }

    @JsonProperty("userId")
    public Optional<Long> getUserId() {
        return userId;
    }

    @JsonProperty("userTokenId")
    public Optional<String> getUserTokenId() {
        return userTokenId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UserAuthRequest && equalTo((UserAuthRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UserAuthRequest other) {
        return email.equals(other.email)
                && entry.equals(other.entry)
                && entryType.equals(other.entryType)
                && psw.equals(other.psw)
                && userId.equals(other.userId)
                && userTokenId.equals(other.userTokenId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.email, this.entry, this.entryType, this.psw, this.userId, this.userTokenId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> email = Optional.empty();

        private Optional<String> entry = Optional.empty();

        private Optional<Integer> entryType = Optional.empty();

        private Optional<String> psw = Optional.empty();

        private Optional<Long> userId = Optional.empty();

        private Optional<String> userTokenId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UserAuthRequest other) {
            email(other.getEmail());
            entry(other.getEntry());
            entryType(other.getEntryType());
            psw(other.getPsw());
            userId(other.getUserId());
            userTokenId(other.getUserTokenId());
            return this;
        }

        @JsonSetter(value = "email", nulls = Nulls.SKIP)
        public Builder email(Optional<String> email) {
            this.email = email;
            return this;
        }

        public Builder email(String email) {
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * <p>Identifier for entry point originating the request (used by front-end apps)</p>
         */
        @JsonSetter(value = "entry", nulls = Nulls.SKIP)
        public Builder entry(Optional<String> entry) {
            this.entry = entry;
            return this;
        }

        public Builder entry(String entry) {
            this.entry = Optional.ofNullable(entry);
            return this;
        }

        /**
         * <p>Type of entry identifier: 0 - partner, 2 - paypoint. This is used by front-end apps, required if an Entry is indicated.</p>
         */
        @JsonSetter(value = "entryType", nulls = Nulls.SKIP)
        public Builder entryType(Optional<Integer> entryType) {
            this.entryType = entryType;
            return this;
        }

        public Builder entryType(Integer entryType) {
            this.entryType = Optional.ofNullable(entryType);
            return this;
        }

        @JsonSetter(value = "psw", nulls = Nulls.SKIP)
        public Builder psw(Optional<String> psw) {
            this.psw = psw;
            return this;
        }

        public Builder psw(String psw) {
            this.psw = Optional.ofNullable(psw);
            return this;
        }

        @JsonSetter(value = "userId", nulls = Nulls.SKIP)
        public Builder userId(Optional<Long> userId) {
            this.userId = userId;
            return this;
        }

        public Builder userId(Long userId) {
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        @JsonSetter(value = "userTokenId", nulls = Nulls.SKIP)
        public Builder userTokenId(Optional<String> userTokenId) {
            this.userTokenId = userTokenId;
            return this;
        }

        public Builder userTokenId(String userTokenId) {
            this.userTokenId = Optional.ofNullable(userTokenId);
            return this;
        }

        public UserAuthRequest build() {
            return new UserAuthRequest(email, entry, entryType, psw, userId, userTokenId, additionalProperties);
        }
    }
}
