/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.chargebacks.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import io.github.payabli.types.FileContent;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ResponseChargeBack.Builder.class)
public final class ResponseChargeBack {
    private final Optional<String> idempotencyKey;

    private final Optional<List<FileContent>> attachments;

    private final Optional<String> contactEmail;

    private final Optional<String> contactName;

    private final Optional<String> notes;

    private final Map<String, Object> additionalProperties;

    private ResponseChargeBack(
            Optional<String> idempotencyKey,
            Optional<List<FileContent>> attachments,
            Optional<String> contactEmail,
            Optional<String> contactName,
            Optional<String> notes,
            Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.attachments = attachments;
        this.contactEmail = contactEmail;
        this.contactName = contactName;
        this.notes = notes;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return A unique ID you can include to prevent duplicating objects or transactions if a request is sent more than once. This key isn't generated in Payabli, you must generate it yourself.
     */
    @JsonProperty("idempotencyKey")
    public Optional<String> getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return Array of attached files to response.
     */
    @JsonProperty("attachments")
    public Optional<List<FileContent>> getAttachments() {
        return attachments;
    }

    /**
     * @return Email of response submitter.
     */
    @JsonProperty("contactEmail")
    public Optional<String> getContactEmail() {
        return contactEmail;
    }

    /**
     * @return Name of response submitter
     */
    @JsonProperty("contactName")
    public Optional<String> getContactName() {
        return contactName;
    }

    /**
     * @return Response notes
     */
    @JsonProperty("notes")
    public Optional<String> getNotes() {
        return notes;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ResponseChargeBack && equalTo((ResponseChargeBack) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ResponseChargeBack other) {
        return idempotencyKey.equals(other.idempotencyKey)
                && attachments.equals(other.attachments)
                && contactEmail.equals(other.contactEmail)
                && contactName.equals(other.contactName)
                && notes.equals(other.notes);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.idempotencyKey, this.attachments, this.contactEmail, this.contactName, this.notes);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> idempotencyKey = Optional.empty();

        private Optional<List<FileContent>> attachments = Optional.empty();

        private Optional<String> contactEmail = Optional.empty();

        private Optional<String> contactName = Optional.empty();

        private Optional<String> notes = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ResponseChargeBack other) {
            idempotencyKey(other.getIdempotencyKey());
            attachments(other.getAttachments());
            contactEmail(other.getContactEmail());
            contactName(other.getContactName());
            notes(other.getNotes());
            return this;
        }

        /**
         * <p>A unique ID you can include to prevent duplicating objects or transactions if a request is sent more than once. This key isn't generated in Payabli, you must generate it yourself.</p>
         */
        @JsonSetter(value = "idempotencyKey", nulls = Nulls.SKIP)
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public Builder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * <p>Array of attached files to response.</p>
         */
        @JsonSetter(value = "attachments", nulls = Nulls.SKIP)
        public Builder attachments(Optional<List<FileContent>> attachments) {
            this.attachments = attachments;
            return this;
        }

        public Builder attachments(List<FileContent> attachments) {
            this.attachments = Optional.ofNullable(attachments);
            return this;
        }

        /**
         * <p>Email of response submitter.</p>
         */
        @JsonSetter(value = "contactEmail", nulls = Nulls.SKIP)
        public Builder contactEmail(Optional<String> contactEmail) {
            this.contactEmail = contactEmail;
            return this;
        }

        public Builder contactEmail(String contactEmail) {
            this.contactEmail = Optional.ofNullable(contactEmail);
            return this;
        }

        /**
         * <p>Name of response submitter</p>
         */
        @JsonSetter(value = "contactName", nulls = Nulls.SKIP)
        public Builder contactName(Optional<String> contactName) {
            this.contactName = contactName;
            return this;
        }

        public Builder contactName(String contactName) {
            this.contactName = Optional.ofNullable(contactName);
            return this;
        }

        /**
         * <p>Response notes</p>
         */
        @JsonSetter(value = "notes", nulls = Nulls.SKIP)
        public Builder notes(Optional<String> notes) {
            this.notes = notes;
            return this;
        }

        public Builder notes(String notes) {
            this.notes = Optional.ofNullable(notes);
            return this;
        }

        public ResponseChargeBack build() {
            return new ResponseChargeBack(
                    idempotencyKey, attachments, contactEmail, contactName, notes, additionalProperties);
        }
    }
}
