/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.templates;

import io.github.payabli.core.ClientOptions;
import io.github.payabli.core.RequestOptions;
import io.github.payabli.resources.templates.requests.ListTemplatesRequest;
import io.github.payabli.types.BoardingLinkApiResponse;
import io.github.payabli.types.PayabliApiResponseTemplateId;
import io.github.payabli.types.TemplateData;
import io.github.payabli.types.TemplateQueryRecord;
import io.github.payabli.types.TemplateQueryResponse;
import java.util.concurrent.CompletableFuture;

public class AsyncTemplatesClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawTemplatesClient rawClient;

    public AsyncTemplatesClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawTemplatesClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawTemplatesClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Creates a boarding template in an organization.
     */
    public CompletableFuture<PayabliApiResponseTemplateId> addTemplate(int orgId) {
        return this.rawClient.addTemplate(orgId).thenApply(response -> response.body());
    }

    /**
     * Creates a boarding template in an organization.
     */
    public CompletableFuture<PayabliApiResponseTemplateId> addTemplate(int orgId, TemplateData request) {
        return this.rawClient.addTemplate(orgId, request).thenApply(response -> response.body());
    }

    /**
     * Creates a boarding template in an organization.
     */
    public CompletableFuture<PayabliApiResponseTemplateId> addTemplate(
            int orgId, TemplateData request, RequestOptions requestOptions) {
        return this.rawClient.addTemplate(orgId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Deletes a template by ID.
     */
    public CompletableFuture<PayabliApiResponseTemplateId> deleteTemplate(double templateId) {
        return this.rawClient.deleteTemplate(templateId).thenApply(response -> response.body());
    }

    /**
     * Deletes a template by ID.
     */
    public CompletableFuture<PayabliApiResponseTemplateId> deleteTemplate(
            double templateId, RequestOptions requestOptions) {
        return this.rawClient.deleteTemplate(templateId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Generates a boarding link from a boarding template.
     */
    public CompletableFuture<BoardingLinkApiResponse> getlinkTemplate(boolean ignoreEmpty, double templateId) {
        return this.rawClient.getlinkTemplate(ignoreEmpty, templateId).thenApply(response -> response.body());
    }

    /**
     * Generates a boarding link from a boarding template.
     */
    public CompletableFuture<BoardingLinkApiResponse> getlinkTemplate(
            boolean ignoreEmpty, double templateId, RequestOptions requestOptions) {
        return this.rawClient
                .getlinkTemplate(ignoreEmpty, templateId, requestOptions)
                .thenApply(response -> response.body());
    }

    /**
     * Retrieves a boarding template's details by ID.
     */
    public CompletableFuture<TemplateQueryRecord> getTemplate(double templateId) {
        return this.rawClient.getTemplate(templateId).thenApply(response -> response.body());
    }

    /**
     * Retrieves a boarding template's details by ID.
     */
    public CompletableFuture<TemplateQueryRecord> getTemplate(double templateId, RequestOptions requestOptions) {
        return this.rawClient.getTemplate(templateId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Retrieves a list of boarding templates for an organization. Use filters to limit results. You can't make a request that includes filters from the API console in the documentation. The response won't be filtered. Instead, copy the request, remove <code>parameters=</code> and run the request in a different client.
     */
    public CompletableFuture<TemplateQueryResponse> listTemplates(int orgId) {
        return this.rawClient.listTemplates(orgId).thenApply(response -> response.body());
    }

    /**
     * Retrieves a list of boarding templates for an organization. Use filters to limit results. You can't make a request that includes filters from the API console in the documentation. The response won't be filtered. Instead, copy the request, remove <code>parameters=</code> and run the request in a different client.
     */
    public CompletableFuture<TemplateQueryResponse> listTemplates(int orgId, ListTemplatesRequest request) {
        return this.rawClient.listTemplates(orgId, request).thenApply(response -> response.body());
    }

    /**
     * Retrieves a list of boarding templates for an organization. Use filters to limit results. You can't make a request that includes filters from the API console in the documentation. The response won't be filtered. Instead, copy the request, remove <code>parameters=</code> and run the request in a different client.
     */
    public CompletableFuture<TemplateQueryResponse> listTemplates(
            int orgId, ListTemplatesRequest request, RequestOptions requestOptions) {
        return this.rawClient.listTemplates(orgId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Updates a boarding template by ID.
     */
    public CompletableFuture<PayabliApiResponseTemplateId> updateTemplate(double templateId) {
        return this.rawClient.updateTemplate(templateId).thenApply(response -> response.body());
    }

    /**
     * Updates a boarding template by ID.
     */
    public CompletableFuture<PayabliApiResponseTemplateId> updateTemplate(double templateId, TemplateData request) {
        return this.rawClient.updateTemplate(templateId, request).thenApply(response -> response.body());
    }

    /**
     * Updates a boarding template by ID.
     */
    public CompletableFuture<PayabliApiResponseTemplateId> updateTemplate(
            double templateId, TemplateData request, RequestOptions requestOptions) {
        return this.rawClient
                .updateTemplate(templateId, request, requestOptions)
                .thenApply(response -> response.body());
    }
}
