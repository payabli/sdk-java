/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.cloud.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeviceEntry.Builder.class)
public final class DeviceEntry {
    private final Optional<String> idempotencyKey;

    private final Optional<String> description;

    private final Optional<String> registrationCode;

    private final Map<String, Object> additionalProperties;

    private DeviceEntry(
            Optional<String> idempotencyKey,
            Optional<String> description,
            Optional<String> registrationCode,
            Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.description = description;
        this.registrationCode = registrationCode;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("idempotencyKey")
    public Optional<String> getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return Description or name for the device. This can be anything, but Payabli recommends entering the name of the paypoint, or some other easy to identify descriptor. If you have several devices for one paypoint, you can give them descriptions like &quot;Cashier 1&quot; and &quot;Cashier 2&quot;, or &quot;Front Desk&quot; and &quot;Back Office&quot;
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return The device registration code or serial number, depending on the model.
     * <ul>
     * <li>
     * <p>Ingenico devices: This is the activation code that's displayed on the device screen during setup.</p>
     * </li>
     * <li>
     * <p>PAX A920 device: This code is the serial number on the back of the device.</p>
     * </li>
     * </ul>
     */
    @JsonProperty("registrationCode")
    public Optional<String> getRegistrationCode() {
        return registrationCode;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeviceEntry && equalTo((DeviceEntry) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeviceEntry other) {
        return idempotencyKey.equals(other.idempotencyKey)
                && description.equals(other.description)
                && registrationCode.equals(other.registrationCode);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.idempotencyKey, this.description, this.registrationCode);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> idempotencyKey = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> registrationCode = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DeviceEntry other) {
            idempotencyKey(other.getIdempotencyKey());
            description(other.getDescription());
            registrationCode(other.getRegistrationCode());
            return this;
        }

        @JsonSetter(value = "idempotencyKey", nulls = Nulls.SKIP)
        public Builder idempotencyKey(Optional<String> idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        public Builder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        /**
         * <p>Description or name for the device. This can be anything, but Payabli recommends entering the name of the paypoint, or some other easy to identify descriptor. If you have several devices for one paypoint, you can give them descriptions like &quot;Cashier 1&quot; and &quot;Cashier 2&quot;, or &quot;Front Desk&quot; and &quot;Back Office&quot;</p>
         */
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>The device registration code or serial number, depending on the model.</p>
         * <ul>
         * <li>
         * <p>Ingenico devices: This is the activation code that's displayed on the device screen during setup.</p>
         * </li>
         * <li>
         * <p>PAX A920 device: This code is the serial number on the back of the device.</p>
         * </li>
         * </ul>
         */
        @JsonSetter(value = "registrationCode", nulls = Nulls.SKIP)
        public Builder registrationCode(Optional<String> registrationCode) {
            this.registrationCode = registrationCode;
            return this;
        }

        public Builder registrationCode(String registrationCode) {
            this.registrationCode = Optional.ofNullable(registrationCode);
            return this;
        }

        public DeviceEntry build() {
            return new DeviceEntry(idempotencyKey, description, registrationCode, additionalProperties);
        }
    }
}
