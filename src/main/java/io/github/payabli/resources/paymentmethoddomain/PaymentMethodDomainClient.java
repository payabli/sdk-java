/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.paymentmethoddomain;

import io.github.payabli.core.ClientOptions;
import io.github.payabli.core.RequestOptions;
import io.github.payabli.resources.paymentmethoddomain.requests.AddPaymentMethodDomainRequest;
import io.github.payabli.resources.paymentmethoddomain.requests.ListPaymentMethodDomainsRequest;
import io.github.payabli.resources.paymentmethoddomain.requests.UpdatePaymentMethodDomainRequest;
import io.github.payabli.resources.paymentmethoddomain.types.DeletePaymentMethodDomainResponse;
import io.github.payabli.resources.paymentmethoddomain.types.ListPaymentMethodDomainsResponse;
import io.github.payabli.types.AddPaymentMethodDomainApiResponse;
import io.github.payabli.types.PaymentMethodDomainApiResponse;
import io.github.payabli.types.PaymentMethodDomainGeneralResponse;

public class PaymentMethodDomainClient {
    protected final ClientOptions clientOptions;

    private final RawPaymentMethodDomainClient rawClient;

    public PaymentMethodDomainClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new RawPaymentMethodDomainClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public RawPaymentMethodDomainClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Add a payment method domain to an organization or paypoint.
     */
    public AddPaymentMethodDomainApiResponse addPaymentMethodDomain() {
        return this.rawClient.addPaymentMethodDomain().body();
    }

    /**
     * Add a payment method domain to an organization or paypoint.
     */
    public AddPaymentMethodDomainApiResponse addPaymentMethodDomain(AddPaymentMethodDomainRequest request) {
        return this.rawClient.addPaymentMethodDomain(request).body();
    }

    /**
     * Add a payment method domain to an organization or paypoint.
     */
    public AddPaymentMethodDomainApiResponse addPaymentMethodDomain(
            AddPaymentMethodDomainRequest request, RequestOptions requestOptions) {
        return this.rawClient.addPaymentMethodDomain(request, requestOptions).body();
    }

    /**
     * Cascades a payment method domain to all child entities. All paypoints and suborganization under this parent will inherit this domain and its settings.
     */
    public PaymentMethodDomainGeneralResponse cascadePaymentMethodDomain(String domainId) {
        return this.rawClient.cascadePaymentMethodDomain(domainId).body();
    }

    /**
     * Cascades a payment method domain to all child entities. All paypoints and suborganization under this parent will inherit this domain and its settings.
     */
    public PaymentMethodDomainGeneralResponse cascadePaymentMethodDomain(
            String domainId, RequestOptions requestOptions) {
        return this.rawClient
                .cascadePaymentMethodDomain(domainId, requestOptions)
                .body();
    }

    /**
     * Delete a payment method domain. You can't delete an inherited domain, you must delete a domain at the organization level.
     */
    public DeletePaymentMethodDomainResponse deletePaymentMethodDomain(String domainId) {
        return this.rawClient.deletePaymentMethodDomain(domainId).body();
    }

    /**
     * Delete a payment method domain. You can't delete an inherited domain, you must delete a domain at the organization level.
     */
    public DeletePaymentMethodDomainResponse deletePaymentMethodDomain(String domainId, RequestOptions requestOptions) {
        return this.rawClient
                .deletePaymentMethodDomain(domainId, requestOptions)
                .body();
    }

    /**
     * Get the details for a payment method domain.
     */
    public PaymentMethodDomainApiResponse getPaymentMethodDomain(String domainId) {
        return this.rawClient.getPaymentMethodDomain(domainId).body();
    }

    /**
     * Get the details for a payment method domain.
     */
    public PaymentMethodDomainApiResponse getPaymentMethodDomain(String domainId, RequestOptions requestOptions) {
        return this.rawClient.getPaymentMethodDomain(domainId, requestOptions).body();
    }

    /**
     * Get a list of payment method domains that belong to a PSP, organization, or paypoint.
     */
    public ListPaymentMethodDomainsResponse listPaymentMethodDomains() {
        return this.rawClient.listPaymentMethodDomains().body();
    }

    /**
     * Get a list of payment method domains that belong to a PSP, organization, or paypoint.
     */
    public ListPaymentMethodDomainsResponse listPaymentMethodDomains(ListPaymentMethodDomainsRequest request) {
        return this.rawClient.listPaymentMethodDomains(request).body();
    }

    /**
     * Get a list of payment method domains that belong to a PSP, organization, or paypoint.
     */
    public ListPaymentMethodDomainsResponse listPaymentMethodDomains(
            ListPaymentMethodDomainsRequest request, RequestOptions requestOptions) {
        return this.rawClient.listPaymentMethodDomains(request, requestOptions).body();
    }

    /**
     * Update a payment method domain's configuration values.
     */
    public PaymentMethodDomainGeneralResponse updatePaymentMethodDomain(String domainId) {
        return this.rawClient.updatePaymentMethodDomain(domainId).body();
    }

    /**
     * Update a payment method domain's configuration values.
     */
    public PaymentMethodDomainGeneralResponse updatePaymentMethodDomain(
            String domainId, UpdatePaymentMethodDomainRequest request) {
        return this.rawClient.updatePaymentMethodDomain(domainId, request).body();
    }

    /**
     * Update a payment method domain's configuration values.
     */
    public PaymentMethodDomainGeneralResponse updatePaymentMethodDomain(
            String domainId, UpdatePaymentMethodDomainRequest request, RequestOptions requestOptions) {
        return this.rawClient
                .updatePaymentMethodDomain(domainId, request, requestOptions)
                .body();
    }

    /**
     * Verify a new payment method domain. If verification is successful, Apple Pay is automatically activated for the domain.
     */
    public PaymentMethodDomainGeneralResponse verifyPaymentMethodDomain(String domainId) {
        return this.rawClient.verifyPaymentMethodDomain(domainId).body();
    }

    /**
     * Verify a new payment method domain. If verification is successful, Apple Pay is automatically activated for the domain.
     */
    public PaymentMethodDomainGeneralResponse verifyPaymentMethodDomain(
            String domainId, RequestOptions requestOptions) {
        return this.rawClient
                .verifyPaymentMethodDomain(domainId, requestOptions)
                .body();
    }
}
