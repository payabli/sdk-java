/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.paymentmethoddomain.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListPaymentMethodDomainsRequest.Builder.class)
public final class ListPaymentMethodDomainsRequest {
    private final Optional<Long> entityId;

    private final Optional<String> entityType;

    private final Optional<Integer> fromRecord;

    private final Optional<Integer> limitRecord;

    private final Map<String, Object> additionalProperties;

    private ListPaymentMethodDomainsRequest(
            Optional<Long> entityId,
            Optional<String> entityType,
            Optional<Integer> fromRecord,
            Optional<Integer> limitRecord,
            Map<String, Object> additionalProperties) {
        this.entityId = entityId;
        this.entityType = entityType;
        this.fromRecord = fromRecord;
        this.limitRecord = limitRecord;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Identifier for the organization or paypoint.
     * <ul>
     * <li>For organization, provide the organization ID - For paypoint, provide the paypoint ID</li>
     * </ul>
     */
    @JsonProperty("entityId")
    public Optional<Long> getEntityId() {
        return entityId;
    }

    /**
     * @return The type of entity. Valid values:
     * <ul>
     * <li>organization</li>
     * <li>paypoint</li>
     * <li>psp</li>
     * </ul>
     */
    @JsonProperty("entityType")
    public Optional<String> getEntityType() {
        return entityType;
    }

    /**
     * @return Number of records to skip. Defaults to <code>0</code>.
     */
    @JsonProperty("fromRecord")
    public Optional<Integer> getFromRecord() {
        return fromRecord;
    }

    /**
     * @return Max number of records for query response. Defaults to <code>20</code>.
     */
    @JsonProperty("limitRecord")
    public Optional<Integer> getLimitRecord() {
        return limitRecord;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListPaymentMethodDomainsRequest && equalTo((ListPaymentMethodDomainsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListPaymentMethodDomainsRequest other) {
        return entityId.equals(other.entityId)
                && entityType.equals(other.entityType)
                && fromRecord.equals(other.fromRecord)
                && limitRecord.equals(other.limitRecord);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.entityId, this.entityType, this.fromRecord, this.limitRecord);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Long> entityId = Optional.empty();

        private Optional<String> entityType = Optional.empty();

        private Optional<Integer> fromRecord = Optional.empty();

        private Optional<Integer> limitRecord = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListPaymentMethodDomainsRequest other) {
            entityId(other.getEntityId());
            entityType(other.getEntityType());
            fromRecord(other.getFromRecord());
            limitRecord(other.getLimitRecord());
            return this;
        }

        /**
         * <p>Identifier for the organization or paypoint.</p>
         * <ul>
         * <li>For organization, provide the organization ID - For paypoint, provide the paypoint ID</li>
         * </ul>
         */
        @JsonSetter(value = "entityId", nulls = Nulls.SKIP)
        public Builder entityId(Optional<Long> entityId) {
            this.entityId = entityId;
            return this;
        }

        public Builder entityId(Long entityId) {
            this.entityId = Optional.ofNullable(entityId);
            return this;
        }

        /**
         * <p>The type of entity. Valid values:</p>
         * <ul>
         * <li>organization</li>
         * <li>paypoint</li>
         * <li>psp</li>
         * </ul>
         */
        @JsonSetter(value = "entityType", nulls = Nulls.SKIP)
        public Builder entityType(Optional<String> entityType) {
            this.entityType = entityType;
            return this;
        }

        public Builder entityType(String entityType) {
            this.entityType = Optional.ofNullable(entityType);
            return this;
        }

        /**
         * <p>Number of records to skip. Defaults to <code>0</code>.</p>
         */
        @JsonSetter(value = "fromRecord", nulls = Nulls.SKIP)
        public Builder fromRecord(Optional<Integer> fromRecord) {
            this.fromRecord = fromRecord;
            return this;
        }

        public Builder fromRecord(Integer fromRecord) {
            this.fromRecord = Optional.ofNullable(fromRecord);
            return this;
        }

        /**
         * <p>Max number of records for query response. Defaults to <code>20</code>.</p>
         */
        @JsonSetter(value = "limitRecord", nulls = Nulls.SKIP)
        public Builder limitRecord(Optional<Integer> limitRecord) {
            this.limitRecord = limitRecord;
            return this;
        }

        public Builder limitRecord(Integer limitRecord) {
            this.limitRecord = Optional.ofNullable(limitRecord);
            return this;
        }

        public ListPaymentMethodDomainsRequest build() {
            return new ListPaymentMethodDomainsRequest(
                    entityId, entityType, fromRecord, limitRecord, additionalProperties);
        }
    }
}
