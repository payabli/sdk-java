/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.wallet;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.github.payabli.core.ClientOptions;
import io.github.payabli.core.MediaTypes;
import io.github.payabli.core.ObjectMappers;
import io.github.payabli.core.PayabliApiApiException;
import io.github.payabli.core.PayabliApiException;
import io.github.payabli.core.PayabliApiHttpResponse;
import io.github.payabli.core.RequestOptions;
import io.github.payabli.errors.BadRequestError;
import io.github.payabli.errors.InternalServerError;
import io.github.payabli.errors.ServiceUnavailableError;
import io.github.payabli.errors.UnauthorizedError;
import io.github.payabli.resources.wallet.requests.ConfigureOrganizationRequestApplePay;
import io.github.payabli.resources.wallet.requests.ConfigureOrganizationRequestGooglePay;
import io.github.payabli.resources.wallet.requests.ConfigurePaypointRequestApplePay;
import io.github.payabli.resources.wallet.requests.ConfigurePaypointRequestGooglePay;
import io.github.payabli.types.ConfigureApplePayOrganizationApiResponse;
import io.github.payabli.types.ConfigureApplePaypointApiResponse;
import io.github.payabli.types.ConfigureGooglePaypointApiResponse;
import io.github.payabli.types.PayabliApiResponse;
import java.io.IOException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawWalletClient {
    protected final ClientOptions clientOptions;

    public RawWalletClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Configure and activate Apple Pay for a Payabli organization
     */
    public PayabliApiHttpResponse<ConfigureApplePayOrganizationApiResponse> configureApplePayOrganization() {
        return configureApplePayOrganization(
                ConfigureOrganizationRequestApplePay.builder().build());
    }

    /**
     * Configure and activate Apple Pay for a Payabli organization
     */
    public PayabliApiHttpResponse<ConfigureApplePayOrganizationApiResponse> configureApplePayOrganization(
            ConfigureOrganizationRequestApplePay request) {
        return configureApplePayOrganization(request, null);
    }

    /**
     * Configure and activate Apple Pay for a Payabli organization
     */
    public PayabliApiHttpResponse<ConfigureApplePayOrganizationApiResponse> configureApplePayOrganization(
            ConfigureOrganizationRequestApplePay request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Wallet/applepay/configure-organization")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new PayabliApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ConfigureApplePayOrganizationApiResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Configure and activate Apple Pay for a Payabli paypoint
     */
    public PayabliApiHttpResponse<ConfigureApplePaypointApiResponse> configureApplePayPaypoint() {
        return configureApplePayPaypoint(
                ConfigurePaypointRequestApplePay.builder().build());
    }

    /**
     * Configure and activate Apple Pay for a Payabli paypoint
     */
    public PayabliApiHttpResponse<ConfigureApplePaypointApiResponse> configureApplePayPaypoint(
            ConfigurePaypointRequestApplePay request) {
        return configureApplePayPaypoint(request, null);
    }

    /**
     * Configure and activate Apple Pay for a Payabli paypoint
     */
    public PayabliApiHttpResponse<ConfigureApplePaypointApiResponse> configureApplePayPaypoint(
            ConfigurePaypointRequestApplePay request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Wallet/applepay/configure-paypoint")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new PayabliApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ConfigureApplePaypointApiResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Configure and activate Google Pay for a Payabli organization
     */
    public PayabliApiHttpResponse<ConfigureApplePayOrganizationApiResponse> configureGooglePayOrganization() {
        return configureGooglePayOrganization(
                ConfigureOrganizationRequestGooglePay.builder().build());
    }

    /**
     * Configure and activate Google Pay for a Payabli organization
     */
    public PayabliApiHttpResponse<ConfigureApplePayOrganizationApiResponse> configureGooglePayOrganization(
            ConfigureOrganizationRequestGooglePay request) {
        return configureGooglePayOrganization(request, null);
    }

    /**
     * Configure and activate Google Pay for a Payabli organization
     */
    public PayabliApiHttpResponse<ConfigureApplePayOrganizationApiResponse> configureGooglePayOrganization(
            ConfigureOrganizationRequestGooglePay request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Wallet/googlepay/configure-organization")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new PayabliApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ConfigureApplePayOrganizationApiResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }

    /**
     * Configure and activate Google Pay for a Payabli paypoint
     */
    public PayabliApiHttpResponse<ConfigureGooglePaypointApiResponse> configureGooglePayPaypoint() {
        return configureGooglePayPaypoint(
                ConfigurePaypointRequestGooglePay.builder().build());
    }

    /**
     * Configure and activate Google Pay for a Payabli paypoint
     */
    public PayabliApiHttpResponse<ConfigureGooglePaypointApiResponse> configureGooglePayPaypoint(
            ConfigurePaypointRequestGooglePay request) {
        return configureGooglePayPaypoint(request, null);
    }

    /**
     * Configure and activate Google Pay for a Payabli paypoint
     */
    public PayabliApiHttpResponse<ConfigureGooglePaypointApiResponse> configureGooglePayPaypoint(
            ConfigurePaypointRequestGooglePay request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Wallet/googlepay/configure-paypoint")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new PayabliApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PayabliApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), ConfigureGooglePaypointApiResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            try {
                switch (response.code()) {
                    case 400:
                        throw new BadRequestError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 401:
                        throw new UnauthorizedError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 500:
                        throw new InternalServerError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class), response);
                    case 503:
                        throw new ServiceUnavailableError(
                                ObjectMappers.JSON_MAPPER.readValue(responseBodyString, PayabliApiResponse.class),
                                response);
                }
            } catch (JsonProcessingException ignored) {
                // unable to map error response, throwing generic error
            }
            throw new PayabliApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PayabliApiException("Network error executing HTTP request", e);
        }
    }
}
