/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.bill.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import io.github.payabli.types.BillItem;
import io.github.payabli.types.BillQueryRecord2BillApprovalsItem;
import io.github.payabli.types.DocumentsRef;
import io.github.payabli.types.Frequency;
import io.github.payabli.types.GeneralEvents;
import io.github.payabli.types.TransactionOutQueryRecord;
import io.github.payabli.types.VendorDataResponse;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BillResponseData.Builder.class)
public final class BillResponseData {
    private final Optional<Long> idBill;

    private final Optional<String> billNumber;

    private final Optional<Double> netAmount;

    private final Optional<Double> discount;

    private final Optional<Double> totalAmount;

    private final Optional<String> billDate;

    private final Optional<String> dueDate;

    private final Optional<String> comments;

    private final Optional<String> batchNumber;

    private final Optional<List<BillItem>> billItems;

    private final Optional<Integer> mode;

    private final Optional<String> paymentMethod;

    private final Optional<String> paymentId;

    private final Optional<String> accountingField1;

    private final Optional<String> accountingField2;

    private final Optional<String> terms;

    private final Optional<String> source;

    private final Optional<String> additionalData;

    private final Optional<VendorDataResponse> vendor;

    private final Optional<Integer> status;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<String> endDate;

    private final Optional<OffsetDateTime> lastUpdated;

    private final Optional<Frequency> frequency;

    private final Optional<TransactionOutQueryRecord> transaction;

    private final Optional<List<GeneralEvents>> billEvents;

    private final Optional<List<Optional<BillQueryRecord2BillApprovalsItem>>> billApprovals;

    private final Optional<String> paypointLegalname;

    private final Optional<String> paypointDbaname;

    private final Optional<Long> parentOrgId;

    private final Optional<String> parentOrgName;

    private final Optional<String> paypointEntryname;

    private final Optional<String> paylinkId;

    private final Optional<DocumentsRef> documentsRef;

    private final Optional<String> externalPaypointId;

    private final Optional<String> lotNumber;

    private final Optional<Long> entityId;

    private final Map<String, Object> additionalProperties;

    private BillResponseData(
            Optional<Long> idBill,
            Optional<String> billNumber,
            Optional<Double> netAmount,
            Optional<Double> discount,
            Optional<Double> totalAmount,
            Optional<String> billDate,
            Optional<String> dueDate,
            Optional<String> comments,
            Optional<String> batchNumber,
            Optional<List<BillItem>> billItems,
            Optional<Integer> mode,
            Optional<String> paymentMethod,
            Optional<String> paymentId,
            Optional<String> accountingField1,
            Optional<String> accountingField2,
            Optional<String> terms,
            Optional<String> source,
            Optional<String> additionalData,
            Optional<VendorDataResponse> vendor,
            Optional<Integer> status,
            Optional<OffsetDateTime> createdAt,
            Optional<String> endDate,
            Optional<OffsetDateTime> lastUpdated,
            Optional<Frequency> frequency,
            Optional<TransactionOutQueryRecord> transaction,
            Optional<List<GeneralEvents>> billEvents,
            Optional<List<Optional<BillQueryRecord2BillApprovalsItem>>> billApprovals,
            Optional<String> paypointLegalname,
            Optional<String> paypointDbaname,
            Optional<Long> parentOrgId,
            Optional<String> parentOrgName,
            Optional<String> paypointEntryname,
            Optional<String> paylinkId,
            Optional<DocumentsRef> documentsRef,
            Optional<String> externalPaypointId,
            Optional<String> lotNumber,
            Optional<Long> entityId,
            Map<String, Object> additionalProperties) {
        this.idBill = idBill;
        this.billNumber = billNumber;
        this.netAmount = netAmount;
        this.discount = discount;
        this.totalAmount = totalAmount;
        this.billDate = billDate;
        this.dueDate = dueDate;
        this.comments = comments;
        this.batchNumber = batchNumber;
        this.billItems = billItems;
        this.mode = mode;
        this.paymentMethod = paymentMethod;
        this.paymentId = paymentId;
        this.accountingField1 = accountingField1;
        this.accountingField2 = accountingField2;
        this.terms = terms;
        this.source = source;
        this.additionalData = additionalData;
        this.vendor = vendor;
        this.status = status;
        this.createdAt = createdAt;
        this.endDate = endDate;
        this.lastUpdated = lastUpdated;
        this.frequency = frequency;
        this.transaction = transaction;
        this.billEvents = billEvents;
        this.billApprovals = billApprovals;
        this.paypointLegalname = paypointLegalname;
        this.paypointDbaname = paypointDbaname;
        this.parentOrgId = parentOrgId;
        this.parentOrgName = parentOrgName;
        this.paypointEntryname = paypointEntryname;
        this.paylinkId = paylinkId;
        this.documentsRef = documentsRef;
        this.externalPaypointId = externalPaypointId;
        this.lotNumber = lotNumber;
        this.entityId = entityId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("IdBill")
    public Optional<Long> getIdBill() {
        return idBill;
    }

    /**
     * @return Unique identifier for the bill.
     */
    @JsonProperty("BillNumber")
    public Optional<String> getBillNumber() {
        return billNumber;
    }

    /**
     * @return Net amount owed in bill.
     */
    @JsonProperty("NetAmount")
    public Optional<Double> getNetAmount() {
        return netAmount;
    }

    /**
     * @return Bill discount amount.
     */
    @JsonProperty("Discount")
    public Optional<Double> getDiscount() {
        return discount;
    }

    /**
     * @return Total amount for the bill.
     */
    @JsonProperty("TotalAmount")
    public Optional<Double> getTotalAmount() {
        return totalAmount;
    }

    /**
     * @return Date of bill. Accepted formats: YYYY-MM-DD, MM/DD/YYYY
     */
    @JsonProperty("BillDate")
    public Optional<String> getBillDate() {
        return billDate;
    }

    /**
     * @return Due Date of bill. Accepted formats: YYYY-MM-DD, MM/DD/YYYY
     */
    @JsonProperty("DueDate")
    public Optional<String> getDueDate() {
        return dueDate;
    }

    @JsonProperty("Comments")
    public Optional<String> getComments() {
        return comments;
    }

    /**
     * @return The batch number that the bill belongs to.
     */
    @JsonProperty("BatchNumber")
    public Optional<String> getBatchNumber() {
        return batchNumber;
    }

    /**
     * @return Array of <code>LineItems</code> contained in bill.
     */
    @JsonProperty("BillItems")
    public Optional<List<BillItem>> getBillItems() {
        return billItems;
    }

    /**
     * @return Bill mode: value <code>0</code> for single/one-time bills, <code>1</code> for scheduled bills.
     */
    @JsonProperty("Mode")
    public Optional<Integer> getMode() {
        return mode;
    }

    /**
     * @return Payment method used for the bill.
     */
    @JsonProperty("PaymentMethod")
    public Optional<String> getPaymentMethod() {
        return paymentMethod;
    }

    /**
     * @return Payment ID associated with the bill.
     */
    @JsonProperty("PaymentId")
    public Optional<String> getPaymentId() {
        return paymentId;
    }

    @JsonProperty("AccountingField1")
    public Optional<String> getAccountingField1() {
        return accountingField1;
    }

    @JsonProperty("AccountingField2")
    public Optional<String> getAccountingField2() {
        return accountingField2;
    }

    @JsonProperty("Terms")
    public Optional<String> getTerms() {
        return terms;
    }

    /**
     * @return The source of the bill, such as &quot;API&quot; or &quot;UI&quot;.
     */
    @JsonProperty("Source")
    public Optional<String> getSource() {
        return source;
    }

    @JsonProperty("AdditionalData")
    public Optional<String> getAdditionalData() {
        return additionalData;
    }

    @JsonProperty("Vendor")
    public Optional<VendorDataResponse> getVendor() {
        return vendor;
    }

    @JsonProperty("Status")
    public Optional<Integer> getStatus() {
        return status;
    }

    @JsonProperty("CreatedAt")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return End date for scheduled bills. Applied only in <code>Mode</code> = 1.
     */
    @JsonProperty("EndDate")
    public Optional<String> getEndDate() {
        return endDate;
    }

    @JsonProperty("LastUpdated")
    public Optional<OffsetDateTime> getLastUpdated() {
        return lastUpdated;
    }

    /**
     * @return Frequency for scheduled bills. Applied only in <code>Mode</code> = 1.
     */
    @JsonProperty("Frequency")
    public Optional<Frequency> getFrequency() {
        return frequency;
    }

    /**
     * @return MoneyOut transaction associated to the bill
     */
    @JsonProperty("Transaction")
    public Optional<TransactionOutQueryRecord> getTransaction() {
        return transaction;
    }

    @JsonProperty("billEvents")
    public Optional<List<GeneralEvents>> getBillEvents() {
        return billEvents;
    }

    @JsonProperty("billApprovals")
    public Optional<List<Optional<BillQueryRecord2BillApprovalsItem>>> getBillApprovals() {
        return billApprovals;
    }

    @JsonProperty("PaypointLegalname")
    public Optional<String> getPaypointLegalname() {
        return paypointLegalname;
    }

    @JsonProperty("PaypointDbaname")
    public Optional<String> getPaypointDbaname() {
        return paypointDbaname;
    }

    @JsonProperty("ParentOrgId")
    public Optional<Long> getParentOrgId() {
        return parentOrgId;
    }

    @JsonProperty("ParentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    @JsonProperty("PaypointEntryname")
    public Optional<String> getPaypointEntryname() {
        return paypointEntryname;
    }

    @JsonProperty("paylinkId")
    public Optional<String> getPaylinkId() {
        return paylinkId;
    }

    /**
     * @return Object with the attached documents.
     */
    @JsonProperty("DocumentsRef")
    public Optional<DocumentsRef> getDocumentsRef() {
        return documentsRef;
    }

    @JsonProperty("externalPaypointID")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    /**
     * @return Lot number of the bill.
     */
    @JsonProperty("LotNumber")
    public Optional<String> getLotNumber() {
        return lotNumber;
    }

    @JsonProperty("EntityID")
    public Optional<Long> getEntityId() {
        return entityId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BillResponseData && equalTo((BillResponseData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BillResponseData other) {
        return idBill.equals(other.idBill)
                && billNumber.equals(other.billNumber)
                && netAmount.equals(other.netAmount)
                && discount.equals(other.discount)
                && totalAmount.equals(other.totalAmount)
                && billDate.equals(other.billDate)
                && dueDate.equals(other.dueDate)
                && comments.equals(other.comments)
                && batchNumber.equals(other.batchNumber)
                && billItems.equals(other.billItems)
                && mode.equals(other.mode)
                && paymentMethod.equals(other.paymentMethod)
                && paymentId.equals(other.paymentId)
                && accountingField1.equals(other.accountingField1)
                && accountingField2.equals(other.accountingField2)
                && terms.equals(other.terms)
                && source.equals(other.source)
                && additionalData.equals(other.additionalData)
                && vendor.equals(other.vendor)
                && status.equals(other.status)
                && createdAt.equals(other.createdAt)
                && endDate.equals(other.endDate)
                && lastUpdated.equals(other.lastUpdated)
                && frequency.equals(other.frequency)
                && transaction.equals(other.transaction)
                && billEvents.equals(other.billEvents)
                && billApprovals.equals(other.billApprovals)
                && paypointLegalname.equals(other.paypointLegalname)
                && paypointDbaname.equals(other.paypointDbaname)
                && parentOrgId.equals(other.parentOrgId)
                && parentOrgName.equals(other.parentOrgName)
                && paypointEntryname.equals(other.paypointEntryname)
                && paylinkId.equals(other.paylinkId)
                && documentsRef.equals(other.documentsRef)
                && externalPaypointId.equals(other.externalPaypointId)
                && lotNumber.equals(other.lotNumber)
                && entityId.equals(other.entityId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.idBill,
                this.billNumber,
                this.netAmount,
                this.discount,
                this.totalAmount,
                this.billDate,
                this.dueDate,
                this.comments,
                this.batchNumber,
                this.billItems,
                this.mode,
                this.paymentMethod,
                this.paymentId,
                this.accountingField1,
                this.accountingField2,
                this.terms,
                this.source,
                this.additionalData,
                this.vendor,
                this.status,
                this.createdAt,
                this.endDate,
                this.lastUpdated,
                this.frequency,
                this.transaction,
                this.billEvents,
                this.billApprovals,
                this.paypointLegalname,
                this.paypointDbaname,
                this.parentOrgId,
                this.parentOrgName,
                this.paypointEntryname,
                this.paylinkId,
                this.documentsRef,
                this.externalPaypointId,
                this.lotNumber,
                this.entityId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Long> idBill = Optional.empty();

        private Optional<String> billNumber = Optional.empty();

        private Optional<Double> netAmount = Optional.empty();

        private Optional<Double> discount = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<String> billDate = Optional.empty();

        private Optional<String> dueDate = Optional.empty();

        private Optional<String> comments = Optional.empty();

        private Optional<String> batchNumber = Optional.empty();

        private Optional<List<BillItem>> billItems = Optional.empty();

        private Optional<Integer> mode = Optional.empty();

        private Optional<String> paymentMethod = Optional.empty();

        private Optional<String> paymentId = Optional.empty();

        private Optional<String> accountingField1 = Optional.empty();

        private Optional<String> accountingField2 = Optional.empty();

        private Optional<String> terms = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<String> additionalData = Optional.empty();

        private Optional<VendorDataResponse> vendor = Optional.empty();

        private Optional<Integer> status = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> endDate = Optional.empty();

        private Optional<OffsetDateTime> lastUpdated = Optional.empty();

        private Optional<Frequency> frequency = Optional.empty();

        private Optional<TransactionOutQueryRecord> transaction = Optional.empty();

        private Optional<List<GeneralEvents>> billEvents = Optional.empty();

        private Optional<List<Optional<BillQueryRecord2BillApprovalsItem>>> billApprovals = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<Long> parentOrgId = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<String> paypointEntryname = Optional.empty();

        private Optional<String> paylinkId = Optional.empty();

        private Optional<DocumentsRef> documentsRef = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<String> lotNumber = Optional.empty();

        private Optional<Long> entityId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BillResponseData other) {
            idBill(other.getIdBill());
            billNumber(other.getBillNumber());
            netAmount(other.getNetAmount());
            discount(other.getDiscount());
            totalAmount(other.getTotalAmount());
            billDate(other.getBillDate());
            dueDate(other.getDueDate());
            comments(other.getComments());
            batchNumber(other.getBatchNumber());
            billItems(other.getBillItems());
            mode(other.getMode());
            paymentMethod(other.getPaymentMethod());
            paymentId(other.getPaymentId());
            accountingField1(other.getAccountingField1());
            accountingField2(other.getAccountingField2());
            terms(other.getTerms());
            source(other.getSource());
            additionalData(other.getAdditionalData());
            vendor(other.getVendor());
            status(other.getStatus());
            createdAt(other.getCreatedAt());
            endDate(other.getEndDate());
            lastUpdated(other.getLastUpdated());
            frequency(other.getFrequency());
            transaction(other.getTransaction());
            billEvents(other.getBillEvents());
            billApprovals(other.getBillApprovals());
            paypointLegalname(other.getPaypointLegalname());
            paypointDbaname(other.getPaypointDbaname());
            parentOrgId(other.getParentOrgId());
            parentOrgName(other.getParentOrgName());
            paypointEntryname(other.getPaypointEntryname());
            paylinkId(other.getPaylinkId());
            documentsRef(other.getDocumentsRef());
            externalPaypointId(other.getExternalPaypointId());
            lotNumber(other.getLotNumber());
            entityId(other.getEntityId());
            return this;
        }

        @JsonSetter(value = "IdBill", nulls = Nulls.SKIP)
        public Builder idBill(Optional<Long> idBill) {
            this.idBill = idBill;
            return this;
        }

        public Builder idBill(Long idBill) {
            this.idBill = Optional.ofNullable(idBill);
            return this;
        }

        /**
         * <p>Unique identifier for the bill.</p>
         */
        @JsonSetter(value = "BillNumber", nulls = Nulls.SKIP)
        public Builder billNumber(Optional<String> billNumber) {
            this.billNumber = billNumber;
            return this;
        }

        public Builder billNumber(String billNumber) {
            this.billNumber = Optional.ofNullable(billNumber);
            return this;
        }

        /**
         * <p>Net amount owed in bill.</p>
         */
        @JsonSetter(value = "NetAmount", nulls = Nulls.SKIP)
        public Builder netAmount(Optional<Double> netAmount) {
            this.netAmount = netAmount;
            return this;
        }

        public Builder netAmount(Double netAmount) {
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        /**
         * <p>Bill discount amount.</p>
         */
        @JsonSetter(value = "Discount", nulls = Nulls.SKIP)
        public Builder discount(Optional<Double> discount) {
            this.discount = discount;
            return this;
        }

        public Builder discount(Double discount) {
            this.discount = Optional.ofNullable(discount);
            return this;
        }

        /**
         * <p>Total amount for the bill.</p>
         */
        @JsonSetter(value = "TotalAmount", nulls = Nulls.SKIP)
        public Builder totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * <p>Date of bill. Accepted formats: YYYY-MM-DD, MM/DD/YYYY</p>
         */
        @JsonSetter(value = "BillDate", nulls = Nulls.SKIP)
        public Builder billDate(Optional<String> billDate) {
            this.billDate = billDate;
            return this;
        }

        public Builder billDate(String billDate) {
            this.billDate = Optional.ofNullable(billDate);
            return this;
        }

        /**
         * <p>Due Date of bill. Accepted formats: YYYY-MM-DD, MM/DD/YYYY</p>
         */
        @JsonSetter(value = "DueDate", nulls = Nulls.SKIP)
        public Builder dueDate(Optional<String> dueDate) {
            this.dueDate = dueDate;
            return this;
        }

        public Builder dueDate(String dueDate) {
            this.dueDate = Optional.ofNullable(dueDate);
            return this;
        }

        @JsonSetter(value = "Comments", nulls = Nulls.SKIP)
        public Builder comments(Optional<String> comments) {
            this.comments = comments;
            return this;
        }

        public Builder comments(String comments) {
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        /**
         * <p>The batch number that the bill belongs to.</p>
         */
        @JsonSetter(value = "BatchNumber", nulls = Nulls.SKIP)
        public Builder batchNumber(Optional<String> batchNumber) {
            this.batchNumber = batchNumber;
            return this;
        }

        public Builder batchNumber(String batchNumber) {
            this.batchNumber = Optional.ofNullable(batchNumber);
            return this;
        }

        /**
         * <p>Array of <code>LineItems</code> contained in bill.</p>
         */
        @JsonSetter(value = "BillItems", nulls = Nulls.SKIP)
        public Builder billItems(Optional<List<BillItem>> billItems) {
            this.billItems = billItems;
            return this;
        }

        public Builder billItems(List<BillItem> billItems) {
            this.billItems = Optional.ofNullable(billItems);
            return this;
        }

        /**
         * <p>Bill mode: value <code>0</code> for single/one-time bills, <code>1</code> for scheduled bills.</p>
         */
        @JsonSetter(value = "Mode", nulls = Nulls.SKIP)
        public Builder mode(Optional<Integer> mode) {
            this.mode = mode;
            return this;
        }

        public Builder mode(Integer mode) {
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * <p>Payment method used for the bill.</p>
         */
        @JsonSetter(value = "PaymentMethod", nulls = Nulls.SKIP)
        public Builder paymentMethod(Optional<String> paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }

        public Builder paymentMethod(String paymentMethod) {
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        /**
         * <p>Payment ID associated with the bill.</p>
         */
        @JsonSetter(value = "PaymentId", nulls = Nulls.SKIP)
        public Builder paymentId(Optional<String> paymentId) {
            this.paymentId = paymentId;
            return this;
        }

        public Builder paymentId(String paymentId) {
            this.paymentId = Optional.ofNullable(paymentId);
            return this;
        }

        @JsonSetter(value = "AccountingField1", nulls = Nulls.SKIP)
        public Builder accountingField1(Optional<String> accountingField1) {
            this.accountingField1 = accountingField1;
            return this;
        }

        public Builder accountingField1(String accountingField1) {
            this.accountingField1 = Optional.ofNullable(accountingField1);
            return this;
        }

        @JsonSetter(value = "AccountingField2", nulls = Nulls.SKIP)
        public Builder accountingField2(Optional<String> accountingField2) {
            this.accountingField2 = accountingField2;
            return this;
        }

        public Builder accountingField2(String accountingField2) {
            this.accountingField2 = Optional.ofNullable(accountingField2);
            return this;
        }

        @JsonSetter(value = "Terms", nulls = Nulls.SKIP)
        public Builder terms(Optional<String> terms) {
            this.terms = terms;
            return this;
        }

        public Builder terms(String terms) {
            this.terms = Optional.ofNullable(terms);
            return this;
        }

        /**
         * <p>The source of the bill, such as &quot;API&quot; or &quot;UI&quot;.</p>
         */
        @JsonSetter(value = "Source", nulls = Nulls.SKIP)
        public Builder source(Optional<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        @JsonSetter(value = "AdditionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<String> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(String additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        @JsonSetter(value = "Vendor", nulls = Nulls.SKIP)
        public Builder vendor(Optional<VendorDataResponse> vendor) {
            this.vendor = vendor;
            return this;
        }

        public Builder vendor(VendorDataResponse vendor) {
            this.vendor = Optional.ofNullable(vendor);
            return this;
        }

        @JsonSetter(value = "Status", nulls = Nulls.SKIP)
        public Builder status(Optional<Integer> status) {
            this.status = status;
            return this;
        }

        public Builder status(Integer status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "CreatedAt", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>End date for scheduled bills. Applied only in <code>Mode</code> = 1.</p>
         */
        @JsonSetter(value = "EndDate", nulls = Nulls.SKIP)
        public Builder endDate(Optional<String> endDate) {
            this.endDate = endDate;
            return this;
        }

        public Builder endDate(String endDate) {
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        @JsonSetter(value = "LastUpdated", nulls = Nulls.SKIP)
        public Builder lastUpdated(Optional<OffsetDateTime> lastUpdated) {
            this.lastUpdated = lastUpdated;
            return this;
        }

        public Builder lastUpdated(OffsetDateTime lastUpdated) {
            this.lastUpdated = Optional.ofNullable(lastUpdated);
            return this;
        }

        /**
         * <p>Frequency for scheduled bills. Applied only in <code>Mode</code> = 1.</p>
         */
        @JsonSetter(value = "Frequency", nulls = Nulls.SKIP)
        public Builder frequency(Optional<Frequency> frequency) {
            this.frequency = frequency;
            return this;
        }

        public Builder frequency(Frequency frequency) {
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        /**
         * <p>MoneyOut transaction associated to the bill</p>
         */
        @JsonSetter(value = "Transaction", nulls = Nulls.SKIP)
        public Builder transaction(Optional<TransactionOutQueryRecord> transaction) {
            this.transaction = transaction;
            return this;
        }

        public Builder transaction(TransactionOutQueryRecord transaction) {
            this.transaction = Optional.ofNullable(transaction);
            return this;
        }

        @JsonSetter(value = "billEvents", nulls = Nulls.SKIP)
        public Builder billEvents(Optional<List<GeneralEvents>> billEvents) {
            this.billEvents = billEvents;
            return this;
        }

        public Builder billEvents(List<GeneralEvents> billEvents) {
            this.billEvents = Optional.ofNullable(billEvents);
            return this;
        }

        @JsonSetter(value = "billApprovals", nulls = Nulls.SKIP)
        public Builder billApprovals(Optional<List<Optional<BillQueryRecord2BillApprovalsItem>>> billApprovals) {
            this.billApprovals = billApprovals;
            return this;
        }

        public Builder billApprovals(List<Optional<BillQueryRecord2BillApprovalsItem>> billApprovals) {
            this.billApprovals = Optional.ofNullable(billApprovals);
            return this;
        }

        @JsonSetter(value = "PaypointLegalname", nulls = Nulls.SKIP)
        public Builder paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        public Builder paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        @JsonSetter(value = "PaypointDbaname", nulls = Nulls.SKIP)
        public Builder paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        public Builder paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        @JsonSetter(value = "ParentOrgId", nulls = Nulls.SKIP)
        public Builder parentOrgId(Optional<Long> parentOrgId) {
            this.parentOrgId = parentOrgId;
            return this;
        }

        public Builder parentOrgId(Long parentOrgId) {
            this.parentOrgId = Optional.ofNullable(parentOrgId);
            return this;
        }

        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        @JsonSetter(value = "PaypointEntryname", nulls = Nulls.SKIP)
        public Builder paypointEntryname(Optional<String> paypointEntryname) {
            this.paypointEntryname = paypointEntryname;
            return this;
        }

        public Builder paypointEntryname(String paypointEntryname) {
            this.paypointEntryname = Optional.ofNullable(paypointEntryname);
            return this;
        }

        @JsonSetter(value = "paylinkId", nulls = Nulls.SKIP)
        public Builder paylinkId(Optional<String> paylinkId) {
            this.paylinkId = paylinkId;
            return this;
        }

        public Builder paylinkId(String paylinkId) {
            this.paylinkId = Optional.ofNullable(paylinkId);
            return this;
        }

        /**
         * <p>Object with the attached documents.</p>
         */
        @JsonSetter(value = "DocumentsRef", nulls = Nulls.SKIP)
        public Builder documentsRef(Optional<DocumentsRef> documentsRef) {
            this.documentsRef = documentsRef;
            return this;
        }

        public Builder documentsRef(DocumentsRef documentsRef) {
            this.documentsRef = Optional.ofNullable(documentsRef);
            return this;
        }

        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        /**
         * <p>Lot number of the bill.</p>
         */
        @JsonSetter(value = "LotNumber", nulls = Nulls.SKIP)
        public Builder lotNumber(Optional<String> lotNumber) {
            this.lotNumber = lotNumber;
            return this;
        }

        public Builder lotNumber(String lotNumber) {
            this.lotNumber = Optional.ofNullable(lotNumber);
            return this;
        }

        @JsonSetter(value = "EntityID", nulls = Nulls.SKIP)
        public Builder entityId(Optional<Long> entityId) {
            this.entityId = entityId;
            return this;
        }

        public Builder entityId(Long entityId) {
            this.entityId = Optional.ofNullable(entityId);
            return this;
        }

        public BillResponseData build() {
            return new BillResponseData(
                    idBill,
                    billNumber,
                    netAmount,
                    discount,
                    totalAmount,
                    billDate,
                    dueDate,
                    comments,
                    batchNumber,
                    billItems,
                    mode,
                    paymentMethod,
                    paymentId,
                    accountingField1,
                    accountingField2,
                    terms,
                    source,
                    additionalData,
                    vendor,
                    status,
                    createdAt,
                    endDate,
                    lastUpdated,
                    frequency,
                    transaction,
                    billEvents,
                    billApprovals,
                    paypointLegalname,
                    paypointDbaname,
                    parentOrgId,
                    parentOrgName,
                    paypointEntryname,
                    paylinkId,
                    documentsRef,
                    externalPaypointId,
                    lotNumber,
                    entityId,
                    additionalProperties);
        }
    }
}
