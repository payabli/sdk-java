/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.bill.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import io.github.payabli.types.BillItem;
import io.github.payabli.types.FileContent;
import io.github.payabli.types.Frequency;
import io.github.payabli.types.VendorData;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BillOutData.Builder.class)
public final class BillOutData {
    private final Optional<String> accountingField1;

    private final Optional<String> accountingField2;

    private final Optional<String> additionalData;

    private final Optional<List<FileContent>> attachments;

    private final Optional<String> billDate;

    private final Optional<List<BillItem>> billItems;

    private final Optional<String> billNumber;

    private final Optional<String> comments;

    private final Optional<Double> discount;

    private final Optional<String> dueDate;

    private final Optional<String> endDate;

    private final Optional<Frequency> frequency;

    private final Optional<String> lotNumber;

    private final Optional<Integer> mode;

    private final Optional<Double> netAmount;

    private final Optional<BillOutDataScheduledOptions> scheduledOptions;

    private final Optional<Integer> status;

    private final Optional<String> terms;

    private final Optional<Double> totalAmount;

    private final Optional<VendorData> vendor;

    private final Map<String, Object> additionalProperties;

    private BillOutData(
            Optional<String> accountingField1,
            Optional<String> accountingField2,
            Optional<String> additionalData,
            Optional<List<FileContent>> attachments,
            Optional<String> billDate,
            Optional<List<BillItem>> billItems,
            Optional<String> billNumber,
            Optional<String> comments,
            Optional<Double> discount,
            Optional<String> dueDate,
            Optional<String> endDate,
            Optional<Frequency> frequency,
            Optional<String> lotNumber,
            Optional<Integer> mode,
            Optional<Double> netAmount,
            Optional<BillOutDataScheduledOptions> scheduledOptions,
            Optional<Integer> status,
            Optional<String> terms,
            Optional<Double> totalAmount,
            Optional<VendorData> vendor,
            Map<String, Object> additionalProperties) {
        this.accountingField1 = accountingField1;
        this.accountingField2 = accountingField2;
        this.additionalData = additionalData;
        this.attachments = attachments;
        this.billDate = billDate;
        this.billItems = billItems;
        this.billNumber = billNumber;
        this.comments = comments;
        this.discount = discount;
        this.dueDate = dueDate;
        this.endDate = endDate;
        this.frequency = frequency;
        this.lotNumber = lotNumber;
        this.mode = mode;
        this.netAmount = netAmount;
        this.scheduledOptions = scheduledOptions;
        this.status = status;
        this.terms = terms;
        this.totalAmount = totalAmount;
        this.vendor = vendor;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("accountingField1")
    public Optional<String> getAccountingField1() {
        return accountingField1;
    }

    @JsonProperty("accountingField2")
    public Optional<String> getAccountingField2() {
        return accountingField2;
    }

    @JsonProperty("additionalData")
    public Optional<String> getAdditionalData() {
        return additionalData;
    }

    /**
     * @return An array of bill images. Attachments aren't required, but we strongly recommend including them. Including a bill image can make payouts smoother and prevent delays. You can include either the Base64-encoded file content, or you can include an fURL to a public file. The maximum file size for image uploads is 30 MB.
     */
    @JsonProperty("attachments")
    public Optional<List<FileContent>> getAttachments() {
        return attachments;
    }

    /**
     * @return Date of bill. Accepted formats: YYYY-MM-DD, MM/DD/YYYY.
     */
    @JsonProperty("billDate")
    public Optional<String> getBillDate() {
        return billDate;
    }

    @JsonProperty("billItems")
    public Optional<List<BillItem>> getBillItems() {
        return billItems;
    }

    /**
     * @return Unique identifier for the bill. Required when adding a bill.
     */
    @JsonProperty("billNumber")
    public Optional<String> getBillNumber() {
        return billNumber;
    }

    @JsonProperty("comments")
    public Optional<String> getComments() {
        return comments;
    }

    /**
     * @return Discount amount applied to the bill.
     */
    @JsonProperty("discount")
    public Optional<Double> getDiscount() {
        return discount;
    }

    /**
     * @return Due date of bill. Accepted formats: YYYY-MM-DD, MM/DD/YYYY.
     */
    @JsonProperty("dueDate")
    public Optional<String> getDueDate() {
        return dueDate;
    }

    /**
     * @return End Date for scheduled bills. Applied only in <code>Mode</code> = 1. Accepted formats: YYYY-MM-DD, MM/DD/YYYY
     */
    @JsonProperty("endDate")
    public Optional<String> getEndDate() {
        return endDate;
    }

    /**
     * @return Frequency for scheduled bills. Applied only in <code>Mode</code> = 1.
     */
    @JsonProperty("frequency")
    public Optional<Frequency> getFrequency() {
        return frequency;
    }

    /**
     * @return Lot number associated with the bill.
     */
    @JsonProperty("lotNumber")
    public Optional<String> getLotNumber() {
        return lotNumber;
    }

    /**
     * @return Bill mode: value <code>0</code> for one-time bills, <code>1</code> for scheduled bills.
     */
    @JsonProperty("mode")
    public Optional<Integer> getMode() {
        return mode;
    }

    /**
     * @return Net Amount owed in bill. Required when adding a bill.
     */
    @JsonProperty("netAmount")
    public Optional<Double> getNetAmount() {
        return netAmount;
    }

    /**
     * @return Options for scheduled bills.
     */
    @JsonProperty("scheduledOptions")
    public Optional<BillOutDataScheduledOptions> getScheduledOptions() {
        return scheduledOptions;
    }

    @JsonProperty("status")
    public Optional<Integer> getStatus() {
        return status;
    }

    @JsonProperty("terms")
    public Optional<String> getTerms() {
        return terms;
    }

    /**
     * @return Total amount of the bill.
     */
    @JsonProperty("totalAmount")
    public Optional<Double> getTotalAmount() {
        return totalAmount;
    }

    /**
     * @return The vendor associated with the bill. Although you can create a vendor in a create bill request, Payabli recommends creating a vendor separately and passing a valid <code>vendorNumber</code> here. At minimum, the <code>vendorNumber</code> is required.
     */
    @JsonProperty("vendor")
    public Optional<VendorData> getVendor() {
        return vendor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BillOutData && equalTo((BillOutData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BillOutData other) {
        return accountingField1.equals(other.accountingField1)
                && accountingField2.equals(other.accountingField2)
                && additionalData.equals(other.additionalData)
                && attachments.equals(other.attachments)
                && billDate.equals(other.billDate)
                && billItems.equals(other.billItems)
                && billNumber.equals(other.billNumber)
                && comments.equals(other.comments)
                && discount.equals(other.discount)
                && dueDate.equals(other.dueDate)
                && endDate.equals(other.endDate)
                && frequency.equals(other.frequency)
                && lotNumber.equals(other.lotNumber)
                && mode.equals(other.mode)
                && netAmount.equals(other.netAmount)
                && scheduledOptions.equals(other.scheduledOptions)
                && status.equals(other.status)
                && terms.equals(other.terms)
                && totalAmount.equals(other.totalAmount)
                && vendor.equals(other.vendor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accountingField1,
                this.accountingField2,
                this.additionalData,
                this.attachments,
                this.billDate,
                this.billItems,
                this.billNumber,
                this.comments,
                this.discount,
                this.dueDate,
                this.endDate,
                this.frequency,
                this.lotNumber,
                this.mode,
                this.netAmount,
                this.scheduledOptions,
                this.status,
                this.terms,
                this.totalAmount,
                this.vendor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> accountingField1 = Optional.empty();

        private Optional<String> accountingField2 = Optional.empty();

        private Optional<String> additionalData = Optional.empty();

        private Optional<List<FileContent>> attachments = Optional.empty();

        private Optional<String> billDate = Optional.empty();

        private Optional<List<BillItem>> billItems = Optional.empty();

        private Optional<String> billNumber = Optional.empty();

        private Optional<String> comments = Optional.empty();

        private Optional<Double> discount = Optional.empty();

        private Optional<String> dueDate = Optional.empty();

        private Optional<String> endDate = Optional.empty();

        private Optional<Frequency> frequency = Optional.empty();

        private Optional<String> lotNumber = Optional.empty();

        private Optional<Integer> mode = Optional.empty();

        private Optional<Double> netAmount = Optional.empty();

        private Optional<BillOutDataScheduledOptions> scheduledOptions = Optional.empty();

        private Optional<Integer> status = Optional.empty();

        private Optional<String> terms = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<VendorData> vendor = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(BillOutData other) {
            accountingField1(other.getAccountingField1());
            accountingField2(other.getAccountingField2());
            additionalData(other.getAdditionalData());
            attachments(other.getAttachments());
            billDate(other.getBillDate());
            billItems(other.getBillItems());
            billNumber(other.getBillNumber());
            comments(other.getComments());
            discount(other.getDiscount());
            dueDate(other.getDueDate());
            endDate(other.getEndDate());
            frequency(other.getFrequency());
            lotNumber(other.getLotNumber());
            mode(other.getMode());
            netAmount(other.getNetAmount());
            scheduledOptions(other.getScheduledOptions());
            status(other.getStatus());
            terms(other.getTerms());
            totalAmount(other.getTotalAmount());
            vendor(other.getVendor());
            return this;
        }

        @JsonSetter(value = "accountingField1", nulls = Nulls.SKIP)
        public Builder accountingField1(Optional<String> accountingField1) {
            this.accountingField1 = accountingField1;
            return this;
        }

        public Builder accountingField1(String accountingField1) {
            this.accountingField1 = Optional.ofNullable(accountingField1);
            return this;
        }

        @JsonSetter(value = "accountingField2", nulls = Nulls.SKIP)
        public Builder accountingField2(Optional<String> accountingField2) {
            this.accountingField2 = accountingField2;
            return this;
        }

        public Builder accountingField2(String accountingField2) {
            this.accountingField2 = Optional.ofNullable(accountingField2);
            return this;
        }

        @JsonSetter(value = "additionalData", nulls = Nulls.SKIP)
        public Builder additionalData(Optional<String> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        public Builder additionalData(String additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        /**
         * <p>An array of bill images. Attachments aren't required, but we strongly recommend including them. Including a bill image can make payouts smoother and prevent delays. You can include either the Base64-encoded file content, or you can include an fURL to a public file. The maximum file size for image uploads is 30 MB.</p>
         */
        @JsonSetter(value = "attachments", nulls = Nulls.SKIP)
        public Builder attachments(Optional<List<FileContent>> attachments) {
            this.attachments = attachments;
            return this;
        }

        public Builder attachments(List<FileContent> attachments) {
            this.attachments = Optional.ofNullable(attachments);
            return this;
        }

        /**
         * <p>Date of bill. Accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         */
        @JsonSetter(value = "billDate", nulls = Nulls.SKIP)
        public Builder billDate(Optional<String> billDate) {
            this.billDate = billDate;
            return this;
        }

        public Builder billDate(String billDate) {
            this.billDate = Optional.ofNullable(billDate);
            return this;
        }

        @JsonSetter(value = "billItems", nulls = Nulls.SKIP)
        public Builder billItems(Optional<List<BillItem>> billItems) {
            this.billItems = billItems;
            return this;
        }

        public Builder billItems(List<BillItem> billItems) {
            this.billItems = Optional.ofNullable(billItems);
            return this;
        }

        /**
         * <p>Unique identifier for the bill. Required when adding a bill.</p>
         */
        @JsonSetter(value = "billNumber", nulls = Nulls.SKIP)
        public Builder billNumber(Optional<String> billNumber) {
            this.billNumber = billNumber;
            return this;
        }

        public Builder billNumber(String billNumber) {
            this.billNumber = Optional.ofNullable(billNumber);
            return this;
        }

        @JsonSetter(value = "comments", nulls = Nulls.SKIP)
        public Builder comments(Optional<String> comments) {
            this.comments = comments;
            return this;
        }

        public Builder comments(String comments) {
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        /**
         * <p>Discount amount applied to the bill.</p>
         */
        @JsonSetter(value = "discount", nulls = Nulls.SKIP)
        public Builder discount(Optional<Double> discount) {
            this.discount = discount;
            return this;
        }

        public Builder discount(Double discount) {
            this.discount = Optional.ofNullable(discount);
            return this;
        }

        /**
         * <p>Due date of bill. Accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         */
        @JsonSetter(value = "dueDate", nulls = Nulls.SKIP)
        public Builder dueDate(Optional<String> dueDate) {
            this.dueDate = dueDate;
            return this;
        }

        public Builder dueDate(String dueDate) {
            this.dueDate = Optional.ofNullable(dueDate);
            return this;
        }

        /**
         * <p>End Date for scheduled bills. Applied only in <code>Mode</code> = 1. Accepted formats: YYYY-MM-DD, MM/DD/YYYY</p>
         */
        @JsonSetter(value = "endDate", nulls = Nulls.SKIP)
        public Builder endDate(Optional<String> endDate) {
            this.endDate = endDate;
            return this;
        }

        public Builder endDate(String endDate) {
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * <p>Frequency for scheduled bills. Applied only in <code>Mode</code> = 1.</p>
         */
        @JsonSetter(value = "frequency", nulls = Nulls.SKIP)
        public Builder frequency(Optional<Frequency> frequency) {
            this.frequency = frequency;
            return this;
        }

        public Builder frequency(Frequency frequency) {
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        /**
         * <p>Lot number associated with the bill.</p>
         */
        @JsonSetter(value = "lotNumber", nulls = Nulls.SKIP)
        public Builder lotNumber(Optional<String> lotNumber) {
            this.lotNumber = lotNumber;
            return this;
        }

        public Builder lotNumber(String lotNumber) {
            this.lotNumber = Optional.ofNullable(lotNumber);
            return this;
        }

        /**
         * <p>Bill mode: value <code>0</code> for one-time bills, <code>1</code> for scheduled bills.</p>
         */
        @JsonSetter(value = "mode", nulls = Nulls.SKIP)
        public Builder mode(Optional<Integer> mode) {
            this.mode = mode;
            return this;
        }

        public Builder mode(Integer mode) {
            this.mode = Optional.ofNullable(mode);
            return this;
        }

        /**
         * <p>Net Amount owed in bill. Required when adding a bill.</p>
         */
        @JsonSetter(value = "netAmount", nulls = Nulls.SKIP)
        public Builder netAmount(Optional<Double> netAmount) {
            this.netAmount = netAmount;
            return this;
        }

        public Builder netAmount(Double netAmount) {
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        /**
         * <p>Options for scheduled bills.</p>
         */
        @JsonSetter(value = "scheduledOptions", nulls = Nulls.SKIP)
        public Builder scheduledOptions(Optional<BillOutDataScheduledOptions> scheduledOptions) {
            this.scheduledOptions = scheduledOptions;
            return this;
        }

        public Builder scheduledOptions(BillOutDataScheduledOptions scheduledOptions) {
            this.scheduledOptions = Optional.ofNullable(scheduledOptions);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<Integer> status) {
            this.status = status;
            return this;
        }

        public Builder status(Integer status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "terms", nulls = Nulls.SKIP)
        public Builder terms(Optional<String> terms) {
            this.terms = terms;
            return this;
        }

        public Builder terms(String terms) {
            this.terms = Optional.ofNullable(terms);
            return this;
        }

        /**
         * <p>Total amount of the bill.</p>
         */
        @JsonSetter(value = "totalAmount", nulls = Nulls.SKIP)
        public Builder totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * <p>The vendor associated with the bill. Although you can create a vendor in a create bill request, Payabli recommends creating a vendor separately and passing a valid <code>vendorNumber</code> here. At minimum, the <code>vendorNumber</code> is required.</p>
         */
        @JsonSetter(value = "vendor", nulls = Nulls.SKIP)
        public Builder vendor(Optional<VendorData> vendor) {
            this.vendor = vendor;
            return this;
        }

        public Builder vendor(VendorData vendor) {
            this.vendor = Optional.ofNullable(vendor);
            return this;
        }

        public BillOutData build() {
            return new BillOutData(
                    accountingField1,
                    accountingField2,
                    additionalData,
                    attachments,
                    billDate,
                    billItems,
                    billNumber,
                    comments,
                    discount,
                    dueDate,
                    endDate,
                    frequency,
                    lotNumber,
                    mode,
                    netAmount,
                    scheduledOptions,
                    status,
                    terms,
                    totalAmount,
                    vendor,
                    additionalProperties);
        }
    }
}
