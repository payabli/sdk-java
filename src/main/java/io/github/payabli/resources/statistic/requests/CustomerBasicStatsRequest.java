/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.statistic.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CustomerBasicStatsRequest.Builder.class)
public final class CustomerBasicStatsRequest {
    private final Optional<Map<String, Optional<String>>> parameters;

    private final Map<String, Object> additionalProperties;

    private CustomerBasicStatsRequest(
            Optional<Map<String, Optional<String>>> parameters, Map<String, Object> additionalProperties) {
        this.parameters = parameters;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return List of parameters.
     */
    @JsonProperty("parameters")
    public Optional<Map<String, Optional<String>>> getParameters() {
        return parameters;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CustomerBasicStatsRequest && equalTo((CustomerBasicStatsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CustomerBasicStatsRequest other) {
        return parameters.equals(other.parameters);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.parameters);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Map<String, Optional<String>>> parameters = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CustomerBasicStatsRequest other) {
            parameters(other.getParameters());
            return this;
        }

        /**
         * <p>List of parameters.</p>
         */
        @JsonSetter(value = "parameters", nulls = Nulls.SKIP)
        public Builder parameters(Optional<Map<String, Optional<String>>> parameters) {
            this.parameters = parameters;
            return this;
        }

        public Builder parameters(Map<String, Optional<String>> parameters) {
            this.parameters = Optional.ofNullable(parameters);
            return this;
        }

        public CustomerBasicStatsRequest build() {
            return new CustomerBasicStatsRequest(parameters, additionalProperties);
        }
    }
}
