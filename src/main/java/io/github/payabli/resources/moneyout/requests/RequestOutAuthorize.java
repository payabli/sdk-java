/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.moneyout.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import io.github.payabli.resources.moneyout.types.AuthorizePayoutBody;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RequestOutAuthorize.Builder.class)
public final class RequestOutAuthorize {
    private final Optional<String> idempotencyKey;

    private final Optional<Boolean> allowDuplicatedBills;

    private final Optional<Boolean> doNotCreateBills;

    private final Optional<Boolean> forceVendorCreation;

    private final AuthorizePayoutBody body;

    private final Map<String, Object> additionalProperties;

    private RequestOutAuthorize(
            Optional<String> idempotencyKey,
            Optional<Boolean> allowDuplicatedBills,
            Optional<Boolean> doNotCreateBills,
            Optional<Boolean> forceVendorCreation,
            AuthorizePayoutBody body,
            Map<String, Object> additionalProperties) {
        this.idempotencyKey = idempotencyKey;
        this.allowDuplicatedBills = allowDuplicatedBills;
        this.doNotCreateBills = doNotCreateBills;
        this.forceVendorCreation = forceVendorCreation;
        this.body = body;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("idempotencyKey")
    public Optional<String> getIdempotencyKey() {
        return idempotencyKey;
    }

    /**
     * @return When <code>true</code>, the authorization bypasses the requirement for unique bills, identified by vendor invoice number. This allows you to make more than one payout authorization for a bill, like a split payment.
     */
    @JsonProperty("allowDuplicatedBills")
    public Optional<Boolean> getAllowDuplicatedBills() {
        return allowDuplicatedBills;
    }

    /**
     * @return When <code>true</code>, Payabli won't automatically create a bill for this payout transaction.
     */
    @JsonProperty("doNotCreateBills")
    public Optional<Boolean> getDoNotCreateBills() {
        return doNotCreateBills;
    }

    /**
     * @return When <code>true</code>, the request creates a new vendor record, regardless of whether the vendor already exists.
     */
    @JsonProperty("forceVendorCreation")
    public Optional<Boolean> getForceVendorCreation() {
        return forceVendorCreation;
    }

    @JsonProperty("body")
    public AuthorizePayoutBody getBody() {
        return body;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RequestOutAuthorize && equalTo((RequestOutAuthorize) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RequestOutAuthorize other) {
        return idempotencyKey.equals(other.idempotencyKey)
                && allowDuplicatedBills.equals(other.allowDuplicatedBills)
                && doNotCreateBills.equals(other.doNotCreateBills)
                && forceVendorCreation.equals(other.forceVendorCreation)
                && body.equals(other.body);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.idempotencyKey,
                this.allowDuplicatedBills,
                this.doNotCreateBills,
                this.forceVendorCreation,
                this.body);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static BodyStage builder() {
        return new Builder();
    }

    public interface BodyStage {
        _FinalStage body(@NotNull AuthorizePayoutBody body);

        Builder from(RequestOutAuthorize other);
    }

    public interface _FinalStage {
        RequestOutAuthorize build();

        _FinalStage idempotencyKey(Optional<String> idempotencyKey);

        _FinalStage idempotencyKey(String idempotencyKey);

        /**
         * <p>When <code>true</code>, the authorization bypasses the requirement for unique bills, identified by vendor invoice number. This allows you to make more than one payout authorization for a bill, like a split payment.</p>
         */
        _FinalStage allowDuplicatedBills(Optional<Boolean> allowDuplicatedBills);

        _FinalStage allowDuplicatedBills(Boolean allowDuplicatedBills);

        /**
         * <p>When <code>true</code>, Payabli won't automatically create a bill for this payout transaction.</p>
         */
        _FinalStage doNotCreateBills(Optional<Boolean> doNotCreateBills);

        _FinalStage doNotCreateBills(Boolean doNotCreateBills);

        /**
         * <p>When <code>true</code>, the request creates a new vendor record, regardless of whether the vendor already exists.</p>
         */
        _FinalStage forceVendorCreation(Optional<Boolean> forceVendorCreation);

        _FinalStage forceVendorCreation(Boolean forceVendorCreation);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements BodyStage, _FinalStage {
        private AuthorizePayoutBody body;

        private Optional<Boolean> forceVendorCreation = Optional.empty();

        private Optional<Boolean> doNotCreateBills = Optional.empty();

        private Optional<Boolean> allowDuplicatedBills = Optional.empty();

        private Optional<String> idempotencyKey = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RequestOutAuthorize other) {
            idempotencyKey(other.getIdempotencyKey());
            allowDuplicatedBills(other.getAllowDuplicatedBills());
            doNotCreateBills(other.getDoNotCreateBills());
            forceVendorCreation(other.getForceVendorCreation());
            body(other.getBody());
            return this;
        }

        @java.lang.Override
        @JsonSetter("body")
        public _FinalStage body(@NotNull AuthorizePayoutBody body) {
            this.body = Objects.requireNonNull(body, "body must not be null");
            return this;
        }

        /**
         * <p>When <code>true</code>, the request creates a new vendor record, regardless of whether the vendor already exists.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage forceVendorCreation(Boolean forceVendorCreation) {
            this.forceVendorCreation = Optional.ofNullable(forceVendorCreation);
            return this;
        }

        /**
         * <p>When <code>true</code>, the request creates a new vendor record, regardless of whether the vendor already exists.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "forceVendorCreation", nulls = Nulls.SKIP)
        public _FinalStage forceVendorCreation(Optional<Boolean> forceVendorCreation) {
            this.forceVendorCreation = forceVendorCreation;
            return this;
        }

        /**
         * <p>When <code>true</code>, Payabli won't automatically create a bill for this payout transaction.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage doNotCreateBills(Boolean doNotCreateBills) {
            this.doNotCreateBills = Optional.ofNullable(doNotCreateBills);
            return this;
        }

        /**
         * <p>When <code>true</code>, Payabli won't automatically create a bill for this payout transaction.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "doNotCreateBills", nulls = Nulls.SKIP)
        public _FinalStage doNotCreateBills(Optional<Boolean> doNotCreateBills) {
            this.doNotCreateBills = doNotCreateBills;
            return this;
        }

        /**
         * <p>When <code>true</code>, the authorization bypasses the requirement for unique bills, identified by vendor invoice number. This allows you to make more than one payout authorization for a bill, like a split payment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage allowDuplicatedBills(Boolean allowDuplicatedBills) {
            this.allowDuplicatedBills = Optional.ofNullable(allowDuplicatedBills);
            return this;
        }

        /**
         * <p>When <code>true</code>, the authorization bypasses the requirement for unique bills, identified by vendor invoice number. This allows you to make more than one payout authorization for a bill, like a split payment.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "allowDuplicatedBills", nulls = Nulls.SKIP)
        public _FinalStage allowDuplicatedBills(Optional<Boolean> allowDuplicatedBills) {
            this.allowDuplicatedBills = allowDuplicatedBills;
            return this;
        }

        @java.lang.Override
        public _FinalStage idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = Optional.ofNullable(idempotencyKey);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "idempotencyKey", nulls = Nulls.SKIP)
        public _FinalStage idempotencyKey(Optional<String> idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }

        @java.lang.Override
        public RequestOutAuthorize build() {
            return new RequestOutAuthorize(
                    idempotencyKey,
                    allowDuplicatedBills,
                    doNotCreateBills,
                    forceVendorCreation,
                    body,
                    additionalProperties);
        }
    }
}
