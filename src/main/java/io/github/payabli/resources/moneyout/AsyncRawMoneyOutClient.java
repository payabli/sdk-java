/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.moneyout;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.github.payabli.core.ClientOptions;
import io.github.payabli.core.MediaTypes;
import io.github.payabli.core.ObjectMappers;
import io.github.payabli.core.PayabliApiApiException;
import io.github.payabli.core.PayabliApiException;
import io.github.payabli.core.PayabliApiHttpResponse;
import io.github.payabli.core.QueryStringMapper;
import io.github.payabli.core.RequestOptions;
import io.github.payabli.errors.BadRequestError;
import io.github.payabli.errors.InternalServerError;
import io.github.payabli.errors.ServiceUnavailableError;
import io.github.payabli.errors.UnauthorizedError;
import io.github.payabli.resources.moneyout.requests.CaptureAllOutRequest;
import io.github.payabli.resources.moneyout.requests.CaptureOutRequest;
import io.github.payabli.resources.moneyout.requests.RequestOutAuthorize;
import io.github.payabli.resources.moneyout.requests.SendVCardLinkRequest;
import io.github.payabli.resources.moneyout.types.CaptureAllOutResponse;
import io.github.payabli.resources.moneyout.types.OperationResult;
import io.github.payabli.resources.moneyout.types.VCardGetResponse;
import io.github.payabli.types.BillDetailResponse;
import io.github.payabli.types.PayabliApiResponse;
import io.github.payabli.types.PayabliApiResponse0000;
import io.github.payabli.types.PayabliApiResponse11;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawMoneyOutClient {
    protected final ClientOptions clientOptions;

    public AsyncRawMoneyOutClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Authorizes transaction for payout. Authorized transactions aren't flagged for settlement until captured. Use <code>referenceId</code> returned in the response to capture the transaction.
     */
    public CompletableFuture<PayabliApiHttpResponse<PayabliApiResponse11>> authorizeOut(RequestOutAuthorize request) {
        return authorizeOut(request, null);
    }

    /**
     * Authorizes transaction for payout. Authorized transactions aren't flagged for settlement until captured. Use <code>referenceId</code> returned in the response to capture the transaction.
     */
    public CompletableFuture<PayabliApiHttpResponse<PayabliApiResponse11>> authorizeOut(
            RequestOutAuthorize request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyOut/authorize");
        if (request.getAllowDuplicatedBills().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "allowDuplicatedBills",
                    request.getAllowDuplicatedBills().get(),
                    false);
        }
        if (request.getDoNotCreateBills().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "doNotCreateBills", request.getDoNotCreateBills().get(), false);
        }
        if (request.getForceVendorCreation().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl,
                    "forceVendorCreation",
                    request.getForceVendorCreation().get(),
                    false);
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        if (request.getIdempotencyKey().isPresent()) {
            _requestBuilder.addHeader(
                    "idempotencyKey", request.getIdempotencyKey().get());
        }
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<PayabliApiResponse11>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), PayabliApiResponse11.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Cancels an array of payout transactions.
     */
    public CompletableFuture<PayabliApiHttpResponse<CaptureAllOutResponse>> cancelAllOut(List<String> request) {
        return cancelAllOut(request, null);
    }

    /**
     * Cancels an array of payout transactions.
     */
    public CompletableFuture<PayabliApiHttpResponse<CaptureAllOutResponse>> cancelAllOut(
            List<String> request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyOut/cancelAll")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new PayabliApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<CaptureAllOutResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), CaptureAllOutResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Cancel a payout transaction by ID.
     */
    public CompletableFuture<PayabliApiHttpResponse<PayabliApiResponse0000>> cancelOut(String referenceId) {
        return cancelOut(referenceId, null);
    }

    /**
     * Cancel a payout transaction by ID.
     */
    public CompletableFuture<PayabliApiHttpResponse<PayabliApiResponse0000>> cancelOut(
            String referenceId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyOut/cancel")
                .addPathSegment(referenceId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<PayabliApiResponse0000>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), PayabliApiResponse0000.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Captures an array of authorized payout transactions for settlement.
     */
    public CompletableFuture<PayabliApiHttpResponse<CaptureAllOutResponse>> captureAllOut(
            CaptureAllOutRequest request) {
        return captureAllOut(request, null);
    }

    /**
     * Captures an array of authorized payout transactions for settlement.
     */
    public CompletableFuture<PayabliApiHttpResponse<CaptureAllOutResponse>> captureAllOut(
            CaptureAllOutRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyOut/captureAll")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        if (request.getIdempotencyKey().isPresent()) {
            _requestBuilder.addHeader(
                    "idempotencyKey", request.getIdempotencyKey().get());
        }
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<CaptureAllOutResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), CaptureAllOutResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Captures a single authorized payout transaction by ID.
     */
    public CompletableFuture<PayabliApiHttpResponse<PayabliApiResponse11>> captureOut(String referenceId) {
        return captureOut(referenceId, CaptureOutRequest.builder().build());
    }

    /**
     * Captures a single authorized payout transaction by ID.
     */
    public CompletableFuture<PayabliApiHttpResponse<PayabliApiResponse11>> captureOut(
            String referenceId, CaptureOutRequest request) {
        return captureOut(referenceId, request, null);
    }

    /**
     * Captures a single authorized payout transaction by ID.
     */
    public CompletableFuture<PayabliApiHttpResponse<PayabliApiResponse11>> captureOut(
            String referenceId, CaptureOutRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyOut/capture")
                .addPathSegment(referenceId)
                .build();
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        if (request.getIdempotencyKey().isPresent()) {
            _requestBuilder.addHeader(
                    "idempotencyKey", request.getIdempotencyKey().get());
        }
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<PayabliApiResponse11>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), PayabliApiResponse11.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Returns details for a processed money out transaction.
     */
    public CompletableFuture<PayabliApiHttpResponse<BillDetailResponse>> payoutDetails(String transId) {
        return payoutDetails(transId, null);
    }

    /**
     * Returns details for a processed money out transaction.
     */
    public CompletableFuture<PayabliApiHttpResponse<BillDetailResponse>> payoutDetails(
            String transId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyOut/details")
                .addPathSegment(transId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<BillDetailResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), BillDetailResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Retrieves vCard details for a single card in an entrypoint.
     */
    public CompletableFuture<PayabliApiHttpResponse<VCardGetResponse>> vCardGet(String cardToken) {
        return vCardGet(cardToken, null);
    }

    /**
     * Retrieves vCard details for a single card in an entrypoint.
     */
    public CompletableFuture<PayabliApiHttpResponse<VCardGetResponse>> vCardGet(
            String cardToken, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyOut/vcard")
                .addPathSegment(cardToken)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<VCardGetResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), VCardGetResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Sends a virtual card link via email to the vendor associated with the <code>transId</code>.
     */
    public CompletableFuture<PayabliApiHttpResponse<OperationResult>> sendVCardLink(SendVCardLinkRequest request) {
        return sendVCardLink(request, null);
    }

    /**
     * Sends a virtual card link via email to the vendor associated with the <code>transId</code>.
     */
    public CompletableFuture<PayabliApiHttpResponse<OperationResult>> sendVCardLink(
            SendVCardLinkRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("vcard/send-card-link")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new PayabliApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<OperationResult>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), OperationResult.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Retrieve the image of a check associated with a processed transaction.
     * The check image is returned in the response body as a base64-encoded string.
     * The check image is only available for payouts that have been processed.
     */
    public CompletableFuture<PayabliApiHttpResponse<String>> getCheckImage(String assetName) {
        return getCheckImage(assetName, null);
    }

    /**
     * Retrieve the image of a check associated with a processed transaction.
     * The check image is returned in the response body as a base64-encoded string.
     * The check image is only available for payouts that have been processed.
     */
    public CompletableFuture<PayabliApiHttpResponse<String>> getCheckImage(
            String assetName, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("MoneyOut/checkimage")
                .addPathSegment(assetName)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<String>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), String.class), response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
