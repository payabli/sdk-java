/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.moneyout;

import io.github.payabli.core.ClientOptions;
import io.github.payabli.core.RequestOptions;
import io.github.payabli.resources.moneyout.requests.CaptureAllOutRequest;
import io.github.payabli.resources.moneyout.requests.CaptureOutRequest;
import io.github.payabli.resources.moneyout.requests.RequestOutAuthorize;
import io.github.payabli.resources.moneyout.requests.SendVCardLinkRequest;
import io.github.payabli.resources.moneyout.types.CaptureAllOutResponse;
import io.github.payabli.resources.moneyout.types.OperationResult;
import io.github.payabli.resources.moneyout.types.VCardGetResponse;
import io.github.payabli.types.BillDetailResponse;
import io.github.payabli.types.PayabliApiResponse0000;
import io.github.payabli.types.PayabliApiResponse11;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class AsyncMoneyOutClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawMoneyOutClient rawClient;

    public AsyncMoneyOutClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawMoneyOutClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawMoneyOutClient withRawResponse() {
        return this.rawClient;
    }

    /**
     * Authorizes transaction for payout. Authorized transactions aren't flagged for settlement until captured. Use <code>referenceId</code> returned in the response to capture the transaction.
     */
    public CompletableFuture<PayabliApiResponse11> authorizeOut(RequestOutAuthorize request) {
        return this.rawClient.authorizeOut(request).thenApply(response -> response.body());
    }

    /**
     * Authorizes transaction for payout. Authorized transactions aren't flagged for settlement until captured. Use <code>referenceId</code> returned in the response to capture the transaction.
     */
    public CompletableFuture<PayabliApiResponse11> authorizeOut(
            RequestOutAuthorize request, RequestOptions requestOptions) {
        return this.rawClient.authorizeOut(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Cancels an array of payout transactions.
     */
    public CompletableFuture<CaptureAllOutResponse> cancelAllOut(List<String> request) {
        return this.rawClient.cancelAllOut(request).thenApply(response -> response.body());
    }

    /**
     * Cancels an array of payout transactions.
     */
    public CompletableFuture<CaptureAllOutResponse> cancelAllOut(List<String> request, RequestOptions requestOptions) {
        return this.rawClient.cancelAllOut(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Cancel a payout transaction by ID.
     */
    public CompletableFuture<PayabliApiResponse0000> cancelOut(String referenceId) {
        return this.rawClient.cancelOut(referenceId).thenApply(response -> response.body());
    }

    /**
     * Cancel a payout transaction by ID.
     */
    public CompletableFuture<PayabliApiResponse0000> cancelOut(String referenceId, RequestOptions requestOptions) {
        return this.rawClient.cancelOut(referenceId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Captures an array of authorized payout transactions for settlement.
     */
    public CompletableFuture<CaptureAllOutResponse> captureAllOut(CaptureAllOutRequest request) {
        return this.rawClient.captureAllOut(request).thenApply(response -> response.body());
    }

    /**
     * Captures an array of authorized payout transactions for settlement.
     */
    public CompletableFuture<CaptureAllOutResponse> captureAllOut(
            CaptureAllOutRequest request, RequestOptions requestOptions) {
        return this.rawClient.captureAllOut(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Captures a single authorized payout transaction by ID.
     */
    public CompletableFuture<PayabliApiResponse11> captureOut(String referenceId) {
        return this.rawClient.captureOut(referenceId).thenApply(response -> response.body());
    }

    /**
     * Captures a single authorized payout transaction by ID.
     */
    public CompletableFuture<PayabliApiResponse11> captureOut(String referenceId, CaptureOutRequest request) {
        return this.rawClient.captureOut(referenceId, request).thenApply(response -> response.body());
    }

    /**
     * Captures a single authorized payout transaction by ID.
     */
    public CompletableFuture<PayabliApiResponse11> captureOut(
            String referenceId, CaptureOutRequest request, RequestOptions requestOptions) {
        return this.rawClient.captureOut(referenceId, request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Returns details for a processed money out transaction.
     */
    public CompletableFuture<BillDetailResponse> payoutDetails(String transId) {
        return this.rawClient.payoutDetails(transId).thenApply(response -> response.body());
    }

    /**
     * Returns details for a processed money out transaction.
     */
    public CompletableFuture<BillDetailResponse> payoutDetails(String transId, RequestOptions requestOptions) {
        return this.rawClient.payoutDetails(transId, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Retrieves vCard details for a single card in an entrypoint.
     */
    public CompletableFuture<VCardGetResponse> vCardGet(String cardToken) {
        return this.rawClient.vCardGet(cardToken).thenApply(response -> response.body());
    }

    /**
     * Retrieves vCard details for a single card in an entrypoint.
     */
    public CompletableFuture<VCardGetResponse> vCardGet(String cardToken, RequestOptions requestOptions) {
        return this.rawClient.vCardGet(cardToken, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Sends a virtual card link via email to the vendor associated with the <code>transId</code>.
     */
    public CompletableFuture<OperationResult> sendVCardLink(SendVCardLinkRequest request) {
        return this.rawClient.sendVCardLink(request).thenApply(response -> response.body());
    }

    /**
     * Sends a virtual card link via email to the vendor associated with the <code>transId</code>.
     */
    public CompletableFuture<OperationResult> sendVCardLink(
            SendVCardLinkRequest request, RequestOptions requestOptions) {
        return this.rawClient.sendVCardLink(request, requestOptions).thenApply(response -> response.body());
    }

    /**
     * Retrieve the image of a check associated with a processed transaction.
     * The check image is returned in the response body as a base64-encoded string.
     * The check image is only available for payouts that have been processed.
     */
    public CompletableFuture<String> getCheckImage(String assetName) {
        return this.rawClient.getCheckImage(assetName).thenApply(response -> response.body());
    }

    /**
     * Retrieve the image of a check associated with a processed transaction.
     * The check image is returned in the response body as a base64-encoded string.
     * The check image is only available for payouts that have been processed.
     */
    public CompletableFuture<String> getCheckImage(String assetName, RequestOptions requestOptions) {
        return this.rawClient.getCheckImage(assetName, requestOptions).thenApply(response -> response.body());
    }
}
