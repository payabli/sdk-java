/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.checkcapture;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.github.payabli.core.ClientOptions;
import io.github.payabli.core.MediaTypes;
import io.github.payabli.core.ObjectMappers;
import io.github.payabli.core.PayabliApiApiException;
import io.github.payabli.core.PayabliApiException;
import io.github.payabli.core.PayabliApiHttpResponse;
import io.github.payabli.core.RequestOptions;
import io.github.payabli.errors.BadRequestError;
import io.github.payabli.errors.InternalServerError;
import io.github.payabli.errors.ServiceUnavailableError;
import io.github.payabli.errors.UnauthorizedError;
import io.github.payabli.resources.checkcapture.requests.CheckCaptureRequestBody;
import io.github.payabli.resources.checkcapture.types.CheckCaptureResponse;
import io.github.payabli.types.PayabliApiResponse;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawCheckCaptureClient {
    protected final ClientOptions clientOptions;

    public AsyncRawCheckCaptureClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Captures a check for Remote Deposit Capture (RDC) using the provided check images and details. This endpoint handles the OCR extraction of check data including MICR, routing number, account number, and amount. See the <a href="/developers/developer-guides/pay-in-rdc">RDC guide</a> for more details.
     */
    public CompletableFuture<PayabliApiHttpResponse<CheckCaptureResponse>> checkProcessing(
            CheckCaptureRequestBody request) {
        return checkProcessing(request, null);
    }

    /**
     * Captures a check for Remote Deposit Capture (RDC) using the provided check images and details. This endpoint handles the OCR extraction of check data including MICR, routing number, account number, and amount. See the <a href="/developers/developer-guides/pay-in-rdc">RDC guide</a> for more details.
     */
    public CompletableFuture<PayabliApiHttpResponse<CheckCaptureResponse>> checkProcessing(
            CheckCaptureRequestBody request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("CheckCapture/CheckProcessing")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaTypes.APPLICATION_JSON);
        } catch (JsonProcessingException e) {
            throw new PayabliApiException("Failed to serialize request", e);
        }
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<CheckCaptureResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), CheckCaptureResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
