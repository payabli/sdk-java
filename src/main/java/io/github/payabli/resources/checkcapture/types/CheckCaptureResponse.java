/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.checkcapture.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CheckCaptureResponse.Builder.class)
public final class CheckCaptureResponse {
    private final Optional<String> id;

    private final boolean success;

    private final String processDate;

    private final Optional<String> ocrMicr;

    private final Optional<String> ocrMicrStatus;

    private final Optional<String> ocrMicrConfidence;

    private final Optional<String> ocrAccountNumber;

    private final Optional<String> ocrRoutingNumber;

    private final Optional<String> ocrCheckNumber;

    private final Optional<String> ocrCheckTranCode;

    private final Optional<String> ocrAmount;

    private final Optional<String> ocrAmountStatus;

    private final Optional<String> ocrAmountConfidence;

    private final boolean amountDiscrepancyDetected;

    private final boolean endorsementDetected;

    private final Optional<List<String>> errors;

    private final Optional<List<String>> messages;

    private final Optional<String> carLarMatchConfidence;

    private final Optional<String> carLarMatchStatus;

    private final Optional<String> frontImage;

    private final Optional<String> rearImage;

    private final double checkType;

    private final Optional<String> referenceNumber;

    private final Optional<String> pageIdentifier;

    private final Map<String, Object> additionalProperties;

    private CheckCaptureResponse(
            Optional<String> id,
            boolean success,
            String processDate,
            Optional<String> ocrMicr,
            Optional<String> ocrMicrStatus,
            Optional<String> ocrMicrConfidence,
            Optional<String> ocrAccountNumber,
            Optional<String> ocrRoutingNumber,
            Optional<String> ocrCheckNumber,
            Optional<String> ocrCheckTranCode,
            Optional<String> ocrAmount,
            Optional<String> ocrAmountStatus,
            Optional<String> ocrAmountConfidence,
            boolean amountDiscrepancyDetected,
            boolean endorsementDetected,
            Optional<List<String>> errors,
            Optional<List<String>> messages,
            Optional<String> carLarMatchConfidence,
            Optional<String> carLarMatchStatus,
            Optional<String> frontImage,
            Optional<String> rearImage,
            double checkType,
            Optional<String> referenceNumber,
            Optional<String> pageIdentifier,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.success = success;
        this.processDate = processDate;
        this.ocrMicr = ocrMicr;
        this.ocrMicrStatus = ocrMicrStatus;
        this.ocrMicrConfidence = ocrMicrConfidence;
        this.ocrAccountNumber = ocrAccountNumber;
        this.ocrRoutingNumber = ocrRoutingNumber;
        this.ocrCheckNumber = ocrCheckNumber;
        this.ocrCheckTranCode = ocrCheckTranCode;
        this.ocrAmount = ocrAmount;
        this.ocrAmountStatus = ocrAmountStatus;
        this.ocrAmountConfidence = ocrAmountConfidence;
        this.amountDiscrepancyDetected = amountDiscrepancyDetected;
        this.endorsementDetected = endorsementDetected;
        this.errors = errors;
        this.messages = messages;
        this.carLarMatchConfidence = carLarMatchConfidence;
        this.carLarMatchStatus = carLarMatchStatus;
        this.frontImage = frontImage;
        this.rearImage = rearImage;
        this.checkType = checkType;
        this.referenceNumber = referenceNumber;
        this.pageIdentifier = pageIdentifier;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique ID for the check capture, to be used with the /api/MoneyIn/getpaid endpoint.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return Indicates whether the check processing was successful.
     */
    @JsonProperty("success")
    public boolean getSuccess() {
        return success;
    }

    /**
     * @return The date and time when the check was processed (ISO 8601 format).
     */
    @JsonProperty("processDate")
    public String getProcessDate() {
        return processDate;
    }

    /**
     * @return The OCR-extracted MICR (Magnetic Ink Character Recognition) line from the check.
     */
    @JsonProperty("ocrMicr")
    public Optional<String> getOcrMicr() {
        return ocrMicr;
    }

    /**
     * @return Status of the MICR extraction process.
     */
    @JsonProperty("ocrMicrStatus")
    public Optional<String> getOcrMicrStatus() {
        return ocrMicrStatus;
    }

    /**
     * @return Confidence score for the MICR extraction (0 to 100).
     */
    @JsonProperty("ocrMicrConfidence")
    public Optional<String> getOcrMicrConfidence() {
        return ocrMicrConfidence;
    }

    /**
     * @return The bank account number extracted from the check.
     */
    @JsonProperty("ocrAccountNumber")
    public Optional<String> getOcrAccountNumber() {
        return ocrAccountNumber;
    }

    /**
     * @return The bank routing number extracted from the check.
     */
    @JsonProperty("ocrRoutingNumber")
    public Optional<String> getOcrRoutingNumber() {
        return ocrRoutingNumber;
    }

    /**
     * @return The check number extracted from the check.
     */
    @JsonProperty("ocrCheckNumber")
    public Optional<String> getOcrCheckNumber() {
        return ocrCheckNumber;
    }

    /**
     * @return The transaction code extracted from the check.
     */
    @JsonProperty("ocrCheckTranCode")
    public Optional<String> getOcrCheckTranCode() {
        return ocrCheckTranCode;
    }

    /**
     * @return The amount extracted via OCR from the check.
     */
    @JsonProperty("ocrAmount")
    public Optional<String> getOcrAmount() {
        return ocrAmount;
    }

    /**
     * @return Status of the amount extraction process.
     */
    @JsonProperty("ocrAmountStatus")
    public Optional<String> getOcrAmountStatus() {
        return ocrAmountStatus;
    }

    /**
     * @return Confidence score for the amount extraction (0 to 100).
     */
    @JsonProperty("ocrAmountConfidence")
    public Optional<String> getOcrAmountConfidence() {
        return ocrAmountConfidence;
    }

    /**
     * @return Flag indicating whether there's a discrepancy between the provided amount and the OCR-detected amount.
     */
    @JsonProperty("amountDiscrepancyDetected")
    public boolean getAmountDiscrepancyDetected() {
        return amountDiscrepancyDetected;
    }

    /**
     * @return Flag indicating whether an endorsement was detected on the check.
     */
    @JsonProperty("endorsementDetected")
    public boolean getEndorsementDetected() {
        return endorsementDetected;
    }

    /**
     * @return List of error messages that occurred during processing.
     */
    @JsonProperty("errors")
    public Optional<List<String>> getErrors() {
        return errors;
    }

    /**
     * @return List of informational messages about the processing.
     */
    @JsonProperty("messages")
    public Optional<List<String>> getMessages() {
        return messages;
    }

    /**
     * @return Confidence score for the match between Courtesy Amount Recognition (CAR) and Legal Amount Recognition (LAR).
     */
    @JsonProperty("carLarMatchConfidence")
    public Optional<String> getCarLarMatchConfidence() {
        return carLarMatchConfidence;
    }

    /**
     * @return Status of the CAR/LAR match.
     */
    @JsonProperty("carLarMatchStatus")
    public Optional<String> getCarLarMatchStatus() {
        return carLarMatchStatus;
    }

    /**
     * @return Processed front image of the check (Base64-encoded).
     */
    @JsonProperty("frontImage")
    public Optional<String> getFrontImage() {
        return frontImage;
    }

    /**
     * @return Processed rear image of the check (Base64-encoded).
     */
    @JsonProperty("rearImage")
    public Optional<String> getRearImage() {
        return rearImage;
    }

    /**
     * @return Identifier for the type of check.
     * Personal = 1
     * Business = 2
     * Only personal checks are supported for check capture.
     */
    @JsonProperty("checkType")
    public double getCheckType() {
        return checkType;
    }

    /**
     * @return Reference number for the transaction.
     */
    @JsonProperty("referenceNumber")
    public Optional<String> getReferenceNumber() {
        return referenceNumber;
    }

    @JsonProperty("pageIdentifier")
    public Optional<String> getPageIdentifier() {
        return pageIdentifier;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CheckCaptureResponse && equalTo((CheckCaptureResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CheckCaptureResponse other) {
        return id.equals(other.id)
                && success == other.success
                && processDate.equals(other.processDate)
                && ocrMicr.equals(other.ocrMicr)
                && ocrMicrStatus.equals(other.ocrMicrStatus)
                && ocrMicrConfidence.equals(other.ocrMicrConfidence)
                && ocrAccountNumber.equals(other.ocrAccountNumber)
                && ocrRoutingNumber.equals(other.ocrRoutingNumber)
                && ocrCheckNumber.equals(other.ocrCheckNumber)
                && ocrCheckTranCode.equals(other.ocrCheckTranCode)
                && ocrAmount.equals(other.ocrAmount)
                && ocrAmountStatus.equals(other.ocrAmountStatus)
                && ocrAmountConfidence.equals(other.ocrAmountConfidence)
                && amountDiscrepancyDetected == other.amountDiscrepancyDetected
                && endorsementDetected == other.endorsementDetected
                && errors.equals(other.errors)
                && messages.equals(other.messages)
                && carLarMatchConfidence.equals(other.carLarMatchConfidence)
                && carLarMatchStatus.equals(other.carLarMatchStatus)
                && frontImage.equals(other.frontImage)
                && rearImage.equals(other.rearImage)
                && checkType == other.checkType
                && referenceNumber.equals(other.referenceNumber)
                && pageIdentifier.equals(other.pageIdentifier);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.success,
                this.processDate,
                this.ocrMicr,
                this.ocrMicrStatus,
                this.ocrMicrConfidence,
                this.ocrAccountNumber,
                this.ocrRoutingNumber,
                this.ocrCheckNumber,
                this.ocrCheckTranCode,
                this.ocrAmount,
                this.ocrAmountStatus,
                this.ocrAmountConfidence,
                this.amountDiscrepancyDetected,
                this.endorsementDetected,
                this.errors,
                this.messages,
                this.carLarMatchConfidence,
                this.carLarMatchStatus,
                this.frontImage,
                this.rearImage,
                this.checkType,
                this.referenceNumber,
                this.pageIdentifier);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static SuccessStage builder() {
        return new Builder();
    }

    public interface SuccessStage {
        /**
         * <p>Indicates whether the check processing was successful.</p>
         */
        ProcessDateStage success(boolean success);

        Builder from(CheckCaptureResponse other);
    }

    public interface ProcessDateStage {
        /**
         * <p>The date and time when the check was processed (ISO 8601 format).</p>
         */
        AmountDiscrepancyDetectedStage processDate(@NotNull String processDate);
    }

    public interface AmountDiscrepancyDetectedStage {
        /**
         * <p>Flag indicating whether there's a discrepancy between the provided amount and the OCR-detected amount.</p>
         */
        EndorsementDetectedStage amountDiscrepancyDetected(boolean amountDiscrepancyDetected);
    }

    public interface EndorsementDetectedStage {
        /**
         * <p>Flag indicating whether an endorsement was detected on the check.</p>
         */
        CheckTypeStage endorsementDetected(boolean endorsementDetected);
    }

    public interface CheckTypeStage {
        /**
         * <p>Identifier for the type of check.
         * Personal = 1
         * Business = 2
         * Only personal checks are supported for check capture.</p>
         */
        _FinalStage checkType(double checkType);
    }

    public interface _FinalStage {
        CheckCaptureResponse build();

        /**
         * <p>Unique ID for the check capture, to be used with the /api/MoneyIn/getpaid endpoint.</p>
         */
        _FinalStage id(Optional<String> id);

        _FinalStage id(String id);

        /**
         * <p>The OCR-extracted MICR (Magnetic Ink Character Recognition) line from the check.</p>
         */
        _FinalStage ocrMicr(Optional<String> ocrMicr);

        _FinalStage ocrMicr(String ocrMicr);

        /**
         * <p>Status of the MICR extraction process.</p>
         */
        _FinalStage ocrMicrStatus(Optional<String> ocrMicrStatus);

        _FinalStage ocrMicrStatus(String ocrMicrStatus);

        /**
         * <p>Confidence score for the MICR extraction (0 to 100).</p>
         */
        _FinalStage ocrMicrConfidence(Optional<String> ocrMicrConfidence);

        _FinalStage ocrMicrConfidence(String ocrMicrConfidence);

        /**
         * <p>The bank account number extracted from the check.</p>
         */
        _FinalStage ocrAccountNumber(Optional<String> ocrAccountNumber);

        _FinalStage ocrAccountNumber(String ocrAccountNumber);

        /**
         * <p>The bank routing number extracted from the check.</p>
         */
        _FinalStage ocrRoutingNumber(Optional<String> ocrRoutingNumber);

        _FinalStage ocrRoutingNumber(String ocrRoutingNumber);

        /**
         * <p>The check number extracted from the check.</p>
         */
        _FinalStage ocrCheckNumber(Optional<String> ocrCheckNumber);

        _FinalStage ocrCheckNumber(String ocrCheckNumber);

        /**
         * <p>The transaction code extracted from the check.</p>
         */
        _FinalStage ocrCheckTranCode(Optional<String> ocrCheckTranCode);

        _FinalStage ocrCheckTranCode(String ocrCheckTranCode);

        /**
         * <p>The amount extracted via OCR from the check.</p>
         */
        _FinalStage ocrAmount(Optional<String> ocrAmount);

        _FinalStage ocrAmount(String ocrAmount);

        /**
         * <p>Status of the amount extraction process.</p>
         */
        _FinalStage ocrAmountStatus(Optional<String> ocrAmountStatus);

        _FinalStage ocrAmountStatus(String ocrAmountStatus);

        /**
         * <p>Confidence score for the amount extraction (0 to 100).</p>
         */
        _FinalStage ocrAmountConfidence(Optional<String> ocrAmountConfidence);

        _FinalStage ocrAmountConfidence(String ocrAmountConfidence);

        /**
         * <p>List of error messages that occurred during processing.</p>
         */
        _FinalStage errors(Optional<List<String>> errors);

        _FinalStage errors(List<String> errors);

        /**
         * <p>List of informational messages about the processing.</p>
         */
        _FinalStage messages(Optional<List<String>> messages);

        _FinalStage messages(List<String> messages);

        /**
         * <p>Confidence score for the match between Courtesy Amount Recognition (CAR) and Legal Amount Recognition (LAR).</p>
         */
        _FinalStage carLarMatchConfidence(Optional<String> carLarMatchConfidence);

        _FinalStage carLarMatchConfidence(String carLarMatchConfidence);

        /**
         * <p>Status of the CAR/LAR match.</p>
         */
        _FinalStage carLarMatchStatus(Optional<String> carLarMatchStatus);

        _FinalStage carLarMatchStatus(String carLarMatchStatus);

        /**
         * <p>Processed front image of the check (Base64-encoded).</p>
         */
        _FinalStage frontImage(Optional<String> frontImage);

        _FinalStage frontImage(String frontImage);

        /**
         * <p>Processed rear image of the check (Base64-encoded).</p>
         */
        _FinalStage rearImage(Optional<String> rearImage);

        _FinalStage rearImage(String rearImage);

        /**
         * <p>Reference number for the transaction.</p>
         */
        _FinalStage referenceNumber(Optional<String> referenceNumber);

        _FinalStage referenceNumber(String referenceNumber);

        _FinalStage pageIdentifier(Optional<String> pageIdentifier);

        _FinalStage pageIdentifier(String pageIdentifier);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements SuccessStage,
                    ProcessDateStage,
                    AmountDiscrepancyDetectedStage,
                    EndorsementDetectedStage,
                    CheckTypeStage,
                    _FinalStage {
        private boolean success;

        private String processDate;

        private boolean amountDiscrepancyDetected;

        private boolean endorsementDetected;

        private double checkType;

        private Optional<String> pageIdentifier = Optional.empty();

        private Optional<String> referenceNumber = Optional.empty();

        private Optional<String> rearImage = Optional.empty();

        private Optional<String> frontImage = Optional.empty();

        private Optional<String> carLarMatchStatus = Optional.empty();

        private Optional<String> carLarMatchConfidence = Optional.empty();

        private Optional<List<String>> messages = Optional.empty();

        private Optional<List<String>> errors = Optional.empty();

        private Optional<String> ocrAmountConfidence = Optional.empty();

        private Optional<String> ocrAmountStatus = Optional.empty();

        private Optional<String> ocrAmount = Optional.empty();

        private Optional<String> ocrCheckTranCode = Optional.empty();

        private Optional<String> ocrCheckNumber = Optional.empty();

        private Optional<String> ocrRoutingNumber = Optional.empty();

        private Optional<String> ocrAccountNumber = Optional.empty();

        private Optional<String> ocrMicrConfidence = Optional.empty();

        private Optional<String> ocrMicrStatus = Optional.empty();

        private Optional<String> ocrMicr = Optional.empty();

        private Optional<String> id = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CheckCaptureResponse other) {
            id(other.getId());
            success(other.getSuccess());
            processDate(other.getProcessDate());
            ocrMicr(other.getOcrMicr());
            ocrMicrStatus(other.getOcrMicrStatus());
            ocrMicrConfidence(other.getOcrMicrConfidence());
            ocrAccountNumber(other.getOcrAccountNumber());
            ocrRoutingNumber(other.getOcrRoutingNumber());
            ocrCheckNumber(other.getOcrCheckNumber());
            ocrCheckTranCode(other.getOcrCheckTranCode());
            ocrAmount(other.getOcrAmount());
            ocrAmountStatus(other.getOcrAmountStatus());
            ocrAmountConfidence(other.getOcrAmountConfidence());
            amountDiscrepancyDetected(other.getAmountDiscrepancyDetected());
            endorsementDetected(other.getEndorsementDetected());
            errors(other.getErrors());
            messages(other.getMessages());
            carLarMatchConfidence(other.getCarLarMatchConfidence());
            carLarMatchStatus(other.getCarLarMatchStatus());
            frontImage(other.getFrontImage());
            rearImage(other.getRearImage());
            checkType(other.getCheckType());
            referenceNumber(other.getReferenceNumber());
            pageIdentifier(other.getPageIdentifier());
            return this;
        }

        /**
         * <p>Indicates whether the check processing was successful.</p>
         * <p>Indicates whether the check processing was successful.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("success")
        public ProcessDateStage success(boolean success) {
            this.success = success;
            return this;
        }

        /**
         * <p>The date and time when the check was processed (ISO 8601 format).</p>
         * <p>The date and time when the check was processed (ISO 8601 format).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("processDate")
        public AmountDiscrepancyDetectedStage processDate(@NotNull String processDate) {
            this.processDate = Objects.requireNonNull(processDate, "processDate must not be null");
            return this;
        }

        /**
         * <p>Flag indicating whether there's a discrepancy between the provided amount and the OCR-detected amount.</p>
         * <p>Flag indicating whether there's a discrepancy between the provided amount and the OCR-detected amount.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("amountDiscrepancyDetected")
        public EndorsementDetectedStage amountDiscrepancyDetected(boolean amountDiscrepancyDetected) {
            this.amountDiscrepancyDetected = amountDiscrepancyDetected;
            return this;
        }

        /**
         * <p>Flag indicating whether an endorsement was detected on the check.</p>
         * <p>Flag indicating whether an endorsement was detected on the check.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("endorsementDetected")
        public CheckTypeStage endorsementDetected(boolean endorsementDetected) {
            this.endorsementDetected = endorsementDetected;
            return this;
        }

        /**
         * <p>Identifier for the type of check.
         * Personal = 1
         * Business = 2
         * Only personal checks are supported for check capture.</p>
         * <p>Identifier for the type of check.
         * Personal = 1
         * Business = 2
         * Only personal checks are supported for check capture.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("checkType")
        public _FinalStage checkType(double checkType) {
            this.checkType = checkType;
            return this;
        }

        @java.lang.Override
        public _FinalStage pageIdentifier(String pageIdentifier) {
            this.pageIdentifier = Optional.ofNullable(pageIdentifier);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "pageIdentifier", nulls = Nulls.SKIP)
        public _FinalStage pageIdentifier(Optional<String> pageIdentifier) {
            this.pageIdentifier = pageIdentifier;
            return this;
        }

        /**
         * <p>Reference number for the transaction.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage referenceNumber(String referenceNumber) {
            this.referenceNumber = Optional.ofNullable(referenceNumber);
            return this;
        }

        /**
         * <p>Reference number for the transaction.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "referenceNumber", nulls = Nulls.SKIP)
        public _FinalStage referenceNumber(Optional<String> referenceNumber) {
            this.referenceNumber = referenceNumber;
            return this;
        }

        /**
         * <p>Processed rear image of the check (Base64-encoded).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage rearImage(String rearImage) {
            this.rearImage = Optional.ofNullable(rearImage);
            return this;
        }

        /**
         * <p>Processed rear image of the check (Base64-encoded).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "rearImage", nulls = Nulls.SKIP)
        public _FinalStage rearImage(Optional<String> rearImage) {
            this.rearImage = rearImage;
            return this;
        }

        /**
         * <p>Processed front image of the check (Base64-encoded).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage frontImage(String frontImage) {
            this.frontImage = Optional.ofNullable(frontImage);
            return this;
        }

        /**
         * <p>Processed front image of the check (Base64-encoded).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "frontImage", nulls = Nulls.SKIP)
        public _FinalStage frontImage(Optional<String> frontImage) {
            this.frontImage = frontImage;
            return this;
        }

        /**
         * <p>Status of the CAR/LAR match.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage carLarMatchStatus(String carLarMatchStatus) {
            this.carLarMatchStatus = Optional.ofNullable(carLarMatchStatus);
            return this;
        }

        /**
         * <p>Status of the CAR/LAR match.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "carLarMatchStatus", nulls = Nulls.SKIP)
        public _FinalStage carLarMatchStatus(Optional<String> carLarMatchStatus) {
            this.carLarMatchStatus = carLarMatchStatus;
            return this;
        }

        /**
         * <p>Confidence score for the match between Courtesy Amount Recognition (CAR) and Legal Amount Recognition (LAR).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage carLarMatchConfidence(String carLarMatchConfidence) {
            this.carLarMatchConfidence = Optional.ofNullable(carLarMatchConfidence);
            return this;
        }

        /**
         * <p>Confidence score for the match between Courtesy Amount Recognition (CAR) and Legal Amount Recognition (LAR).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "carLarMatchConfidence", nulls = Nulls.SKIP)
        public _FinalStage carLarMatchConfidence(Optional<String> carLarMatchConfidence) {
            this.carLarMatchConfidence = carLarMatchConfidence;
            return this;
        }

        /**
         * <p>List of informational messages about the processing.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage messages(List<String> messages) {
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        /**
         * <p>List of informational messages about the processing.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "messages", nulls = Nulls.SKIP)
        public _FinalStage messages(Optional<List<String>> messages) {
            this.messages = messages;
            return this;
        }

        /**
         * <p>List of error messages that occurred during processing.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage errors(List<String> errors) {
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        /**
         * <p>List of error messages that occurred during processing.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "errors", nulls = Nulls.SKIP)
        public _FinalStage errors(Optional<List<String>> errors) {
            this.errors = errors;
            return this;
        }

        /**
         * <p>Confidence score for the amount extraction (0 to 100).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ocrAmountConfidence(String ocrAmountConfidence) {
            this.ocrAmountConfidence = Optional.ofNullable(ocrAmountConfidence);
            return this;
        }

        /**
         * <p>Confidence score for the amount extraction (0 to 100).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ocrAmountConfidence", nulls = Nulls.SKIP)
        public _FinalStage ocrAmountConfidence(Optional<String> ocrAmountConfidence) {
            this.ocrAmountConfidence = ocrAmountConfidence;
            return this;
        }

        /**
         * <p>Status of the amount extraction process.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ocrAmountStatus(String ocrAmountStatus) {
            this.ocrAmountStatus = Optional.ofNullable(ocrAmountStatus);
            return this;
        }

        /**
         * <p>Status of the amount extraction process.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ocrAmountStatus", nulls = Nulls.SKIP)
        public _FinalStage ocrAmountStatus(Optional<String> ocrAmountStatus) {
            this.ocrAmountStatus = ocrAmountStatus;
            return this;
        }

        /**
         * <p>The amount extracted via OCR from the check.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ocrAmount(String ocrAmount) {
            this.ocrAmount = Optional.ofNullable(ocrAmount);
            return this;
        }

        /**
         * <p>The amount extracted via OCR from the check.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ocrAmount", nulls = Nulls.SKIP)
        public _FinalStage ocrAmount(Optional<String> ocrAmount) {
            this.ocrAmount = ocrAmount;
            return this;
        }

        /**
         * <p>The transaction code extracted from the check.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ocrCheckTranCode(String ocrCheckTranCode) {
            this.ocrCheckTranCode = Optional.ofNullable(ocrCheckTranCode);
            return this;
        }

        /**
         * <p>The transaction code extracted from the check.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ocrCheckTranCode", nulls = Nulls.SKIP)
        public _FinalStage ocrCheckTranCode(Optional<String> ocrCheckTranCode) {
            this.ocrCheckTranCode = ocrCheckTranCode;
            return this;
        }

        /**
         * <p>The check number extracted from the check.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ocrCheckNumber(String ocrCheckNumber) {
            this.ocrCheckNumber = Optional.ofNullable(ocrCheckNumber);
            return this;
        }

        /**
         * <p>The check number extracted from the check.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ocrCheckNumber", nulls = Nulls.SKIP)
        public _FinalStage ocrCheckNumber(Optional<String> ocrCheckNumber) {
            this.ocrCheckNumber = ocrCheckNumber;
            return this;
        }

        /**
         * <p>The bank routing number extracted from the check.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ocrRoutingNumber(String ocrRoutingNumber) {
            this.ocrRoutingNumber = Optional.ofNullable(ocrRoutingNumber);
            return this;
        }

        /**
         * <p>The bank routing number extracted from the check.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ocrRoutingNumber", nulls = Nulls.SKIP)
        public _FinalStage ocrRoutingNumber(Optional<String> ocrRoutingNumber) {
            this.ocrRoutingNumber = ocrRoutingNumber;
            return this;
        }

        /**
         * <p>The bank account number extracted from the check.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ocrAccountNumber(String ocrAccountNumber) {
            this.ocrAccountNumber = Optional.ofNullable(ocrAccountNumber);
            return this;
        }

        /**
         * <p>The bank account number extracted from the check.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ocrAccountNumber", nulls = Nulls.SKIP)
        public _FinalStage ocrAccountNumber(Optional<String> ocrAccountNumber) {
            this.ocrAccountNumber = ocrAccountNumber;
            return this;
        }

        /**
         * <p>Confidence score for the MICR extraction (0 to 100).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ocrMicrConfidence(String ocrMicrConfidence) {
            this.ocrMicrConfidence = Optional.ofNullable(ocrMicrConfidence);
            return this;
        }

        /**
         * <p>Confidence score for the MICR extraction (0 to 100).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ocrMicrConfidence", nulls = Nulls.SKIP)
        public _FinalStage ocrMicrConfidence(Optional<String> ocrMicrConfidence) {
            this.ocrMicrConfidence = ocrMicrConfidence;
            return this;
        }

        /**
         * <p>Status of the MICR extraction process.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ocrMicrStatus(String ocrMicrStatus) {
            this.ocrMicrStatus = Optional.ofNullable(ocrMicrStatus);
            return this;
        }

        /**
         * <p>Status of the MICR extraction process.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ocrMicrStatus", nulls = Nulls.SKIP)
        public _FinalStage ocrMicrStatus(Optional<String> ocrMicrStatus) {
            this.ocrMicrStatus = ocrMicrStatus;
            return this;
        }

        /**
         * <p>The OCR-extracted MICR (Magnetic Ink Character Recognition) line from the check.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage ocrMicr(String ocrMicr) {
            this.ocrMicr = Optional.ofNullable(ocrMicr);
            return this;
        }

        /**
         * <p>The OCR-extracted MICR (Magnetic Ink Character Recognition) line from the check.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "ocrMicr", nulls = Nulls.SKIP)
        public _FinalStage ocrMicr(Optional<String> ocrMicr) {
            this.ocrMicr = ocrMicr;
            return this;
        }

        /**
         * <p>Unique ID for the check capture, to be used with the /api/MoneyIn/getpaid endpoint.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>Unique ID for the check capture, to be used with the /api/MoneyIn/getpaid endpoint.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public _FinalStage id(Optional<String> id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        public CheckCaptureResponse build() {
            return new CheckCaptureResponse(
                    id,
                    success,
                    processDate,
                    ocrMicr,
                    ocrMicrStatus,
                    ocrMicrConfidence,
                    ocrAccountNumber,
                    ocrRoutingNumber,
                    ocrCheckNumber,
                    ocrCheckTranCode,
                    ocrAmount,
                    ocrAmountStatus,
                    ocrAmountConfidence,
                    amountDiscrepancyDetected,
                    endorsementDetected,
                    errors,
                    messages,
                    carLarMatchConfidence,
                    carLarMatchStatus,
                    frontImage,
                    rearImage,
                    checkType,
                    referenceNumber,
                    pageIdentifier,
                    additionalProperties);
        }
    }
}
