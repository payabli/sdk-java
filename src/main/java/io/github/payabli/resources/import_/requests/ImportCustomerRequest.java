/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.import_.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ImportCustomerRequest.Builder.class)
public final class ImportCustomerRequest {
    private final Optional<Integer> replaceExisting;

    private final Map<String, Object> additionalProperties;

    private ImportCustomerRequest(Optional<Integer> replaceExisting, Map<String, Object> additionalProperties) {
        this.replaceExisting = replaceExisting;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Flag indicating to replace existing customer with a new record. Possible values: 0 (do not replace), 1 (replace). Default is 0
     */
    @JsonProperty("replaceExisting")
    public Optional<Integer> getReplaceExisting() {
        return replaceExisting;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ImportCustomerRequest && equalTo((ImportCustomerRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ImportCustomerRequest other) {
        return replaceExisting.equals(other.replaceExisting);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.replaceExisting);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> replaceExisting = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ImportCustomerRequest other) {
            replaceExisting(other.getReplaceExisting());
            return this;
        }

        /**
         * <p>Flag indicating to replace existing customer with a new record. Possible values: 0 (do not replace), 1 (replace). Default is 0</p>
         */
        @JsonSetter(value = "replaceExisting", nulls = Nulls.SKIP)
        public Builder replaceExisting(Optional<Integer> replaceExisting) {
            this.replaceExisting = replaceExisting;
            return this;
        }

        public Builder replaceExisting(Integer replaceExisting) {
            this.replaceExisting = Optional.ofNullable(replaceExisting);
            return this;
        }

        public ImportCustomerRequest build() {
            return new ImportCustomerRequest(replaceExisting, additionalProperties);
        }
    }
}
