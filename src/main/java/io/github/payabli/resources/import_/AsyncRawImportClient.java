/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.import_;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.github.payabli.core.ClientOptions;
import io.github.payabli.core.ObjectMappers;
import io.github.payabli.core.PayabliApiApiException;
import io.github.payabli.core.PayabliApiException;
import io.github.payabli.core.PayabliApiHttpResponse;
import io.github.payabli.core.QueryStringMapper;
import io.github.payabli.core.RequestOptions;
import io.github.payabli.errors.BadRequestError;
import io.github.payabli.errors.InternalServerError;
import io.github.payabli.errors.ServiceUnavailableError;
import io.github.payabli.errors.UnauthorizedError;
import io.github.payabli.resources.import_.requests.ImportBillsRequest;
import io.github.payabli.resources.import_.requests.ImportCustomerRequest;
import io.github.payabli.resources.import_.requests.ImportVendorRequest;
import io.github.payabli.types.PayabliApiResponse;
import io.github.payabli.types.PayabliApiResponseImport;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.concurrent.CompletableFuture;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawImportClient {
    protected final ClientOptions clientOptions;

    public AsyncRawImportClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    /**
     * Import a list of bills from a CSV file. See the <a href="/developers/developer-guides/bills-add#import-bills">Import Guide</a> for more help and an example file.
     */
    public CompletableFuture<PayabliApiHttpResponse<PayabliApiResponseImport>> importBills(
            String entry, File file, ImportBillsRequest request) {
        return importBills(entry, file, request, null);
    }

    /**
     * Import a list of bills from a CSV file. See the <a href="/developers/developer-guides/bills-add#import-bills">Import Guide</a> for more help and an example file.
     */
    public CompletableFuture<PayabliApiHttpResponse<PayabliApiResponseImport>> importBills(
            String entry, File file, ImportBillsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Import/billsForm")
                .addPathSegment(entry)
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(file, fileMimeTypeMediaType));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<PayabliApiResponseImport>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), PayabliApiResponseImport.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Import a list of customers from a CSV file. See the <a href="/developers/developer-guides/entities-customers#import-customers">Import Guide</a> for more help and example files.
     */
    public CompletableFuture<PayabliApiHttpResponse<PayabliApiResponseImport>> importCustomer(
            String entry, File file, ImportCustomerRequest request) {
        return importCustomer(entry, file, request, null);
    }

    /**
     * Import a list of customers from a CSV file. See the <a href="/developers/developer-guides/entities-customers#import-customers">Import Guide</a> for more help and example files.
     */
    public CompletableFuture<PayabliApiHttpResponse<PayabliApiResponseImport>> importCustomer(
            String entry, File file, ImportCustomerRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Import/customersForm")
                .addPathSegment(entry);
        if (request.getReplaceExisting().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "replaceExisting", request.getReplaceExisting().get(), false);
        }
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(file, fileMimeTypeMediaType));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<PayabliApiResponseImport>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), PayabliApiResponseImport.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    /**
     * Import a list of vendors from a CSV file. See the <a href="/developers/developer-guides/entities-vendors#import-vendors">Import Guide</a> for more help and example files.
     */
    public CompletableFuture<PayabliApiHttpResponse<PayabliApiResponseImport>> importVendor(
            String entry, File file, ImportVendorRequest request) {
        return importVendor(entry, file, request, null);
    }

    /**
     * Import a list of vendors from a CSV file. See the <a href="/developers/developer-guides/entities-vendors#import-vendors">Import Guide</a> for more help and example files.
     */
    public CompletableFuture<PayabliApiHttpResponse<PayabliApiResponseImport>> importVendor(
            String entry, File file, ImportVendorRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("Import/vendorsForm")
                .addPathSegment(entry)
                .build();
        MultipartBody.Builder body = new MultipartBody.Builder().setType(MultipartBody.FORM);
        try {
            String fileMimeType = Files.probeContentType(file.toPath());
            MediaType fileMimeTypeMediaType = fileMimeType != null ? MediaType.parse(fileMimeType) : null;
            body.addFormDataPart("file", file.getName(), RequestBody.create(file, fileMimeTypeMediaType));
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body.build())
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PayabliApiHttpResponse<PayabliApiResponseImport>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PayabliApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), PayabliApiResponseImport.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    try {
                        switch (response.code()) {
                            case 400:
                                future.completeExceptionally(new BadRequestError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 401:
                                future.completeExceptionally(new UnauthorizedError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 500:
                                future.completeExceptionally(new InternalServerError(
                                        ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                                        response));
                                return;
                            case 503:
                                future.completeExceptionally(new ServiceUnavailableError(
                                        ObjectMappers.JSON_MAPPER.readValue(
                                                responseBodyString, PayabliApiResponse.class),
                                        response));
                                return;
                        }
                    } catch (JsonProcessingException ignored) {
                        // unable to map error response, throwing generic error
                    }
                    future.completeExceptionally(new PayabliApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PayabliApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
