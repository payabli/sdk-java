/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.moneyin.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import io.github.payabli.types.BillData;
import io.github.payabli.types.PaymentDetail;
import io.github.payabli.types.PaymentMethod;
import io.github.payabli.types.PayorDataRequest;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransRequestBody.Builder.class)
public final class TransRequestBody {
    private final Optional<String> accountId;

    private final Optional<PayorDataRequest> customerData;

    private final Optional<String> entryPoint;

    private final Optional<BillData> invoiceData;

    private final Optional<String> ipaddress;

    private final Optional<String> orderDescription;

    private final Optional<String> orderId;

    private final PaymentDetail paymentDetails;

    private final PaymentMethod paymentMethod;

    private final Optional<String> source;

    private final Optional<String> subdomain;

    private final Optional<Long> subscriptionId;

    private final Map<String, Object> additionalProperties;

    private TransRequestBody(
            Optional<String> accountId,
            Optional<PayorDataRequest> customerData,
            Optional<String> entryPoint,
            Optional<BillData> invoiceData,
            Optional<String> ipaddress,
            Optional<String> orderDescription,
            Optional<String> orderId,
            PaymentDetail paymentDetails,
            PaymentMethod paymentMethod,
            Optional<String> source,
            Optional<String> subdomain,
            Optional<Long> subscriptionId,
            Map<String, Object> additionalProperties) {
        this.accountId = accountId;
        this.customerData = customerData;
        this.entryPoint = entryPoint;
        this.invoiceData = invoiceData;
        this.ipaddress = ipaddress;
        this.orderDescription = orderDescription;
        this.orderId = orderId;
        this.paymentDetails = paymentDetails;
        this.paymentMethod = paymentMethod;
        this.source = source;
        this.subdomain = subdomain;
        this.subscriptionId = subscriptionId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("accountId")
    public Optional<String> getAccountId() {
        return accountId;
    }

    /**
     * @return Object describing the Customer/Payor. Which fields are required depends on the paypoint's custom identifier settings.
     */
    @JsonProperty("customerData")
    public Optional<PayorDataRequest> getCustomerData() {
        return customerData;
    }

    @JsonProperty("entryPoint")
    public Optional<String> getEntryPoint() {
        return entryPoint;
    }

    /**
     * @return Object describing an Invoice linked to the transaction.
     */
    @JsonProperty("invoiceData")
    public Optional<BillData> getInvoiceData() {
        return invoiceData;
    }

    @JsonProperty("ipaddress")
    public Optional<String> getIpaddress() {
        return ipaddress;
    }

    @JsonProperty("orderDescription")
    public Optional<String> getOrderDescription() {
        return orderDescription;
    }

    @JsonProperty("orderId")
    public Optional<String> getOrderId() {
        return orderId;
    }

    /**
     * @return Object describing details of the payment. Required.
     */
    @JsonProperty("paymentDetails")
    public PaymentDetail getPaymentDetails() {
        return paymentDetails;
    }

    /**
     * @return Information about the payment method for the transaction. Required and recommended fields for each payment method type are described in each schema below.
     */
    @JsonProperty("paymentMethod")
    public PaymentMethod getPaymentMethod() {
        return paymentMethod;
    }

    @JsonProperty("source")
    public Optional<String> getSource() {
        return source;
    }

    @JsonProperty("subdomain")
    public Optional<String> getSubdomain() {
        return subdomain;
    }

    @JsonProperty("subscriptionId")
    public Optional<Long> getSubscriptionId() {
        return subscriptionId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransRequestBody && equalTo((TransRequestBody) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransRequestBody other) {
        return accountId.equals(other.accountId)
                && customerData.equals(other.customerData)
                && entryPoint.equals(other.entryPoint)
                && invoiceData.equals(other.invoiceData)
                && ipaddress.equals(other.ipaddress)
                && orderDescription.equals(other.orderDescription)
                && orderId.equals(other.orderId)
                && paymentDetails.equals(other.paymentDetails)
                && paymentMethod.equals(other.paymentMethod)
                && source.equals(other.source)
                && subdomain.equals(other.subdomain)
                && subscriptionId.equals(other.subscriptionId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accountId,
                this.customerData,
                this.entryPoint,
                this.invoiceData,
                this.ipaddress,
                this.orderDescription,
                this.orderId,
                this.paymentDetails,
                this.paymentMethod,
                this.source,
                this.subdomain,
                this.subscriptionId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static PaymentDetailsStage builder() {
        return new Builder();
    }

    public interface PaymentDetailsStage {
        /**
         * <p>Object describing details of the payment. Required.</p>
         */
        PaymentMethodStage paymentDetails(@NotNull PaymentDetail paymentDetails);

        Builder from(TransRequestBody other);
    }

    public interface PaymentMethodStage {
        /**
         * <p>Information about the payment method for the transaction. Required and recommended fields for each payment method type are described in each schema below.</p>
         */
        _FinalStage paymentMethod(@NotNull PaymentMethod paymentMethod);
    }

    public interface _FinalStage {
        TransRequestBody build();

        _FinalStage accountId(Optional<String> accountId);

        _FinalStage accountId(String accountId);

        /**
         * <p>Object describing the Customer/Payor. Which fields are required depends on the paypoint's custom identifier settings.</p>
         */
        _FinalStage customerData(Optional<PayorDataRequest> customerData);

        _FinalStage customerData(PayorDataRequest customerData);

        _FinalStage entryPoint(Optional<String> entryPoint);

        _FinalStage entryPoint(String entryPoint);

        /**
         * <p>Object describing an Invoice linked to the transaction.</p>
         */
        _FinalStage invoiceData(Optional<BillData> invoiceData);

        _FinalStage invoiceData(BillData invoiceData);

        _FinalStage ipaddress(Optional<String> ipaddress);

        _FinalStage ipaddress(String ipaddress);

        _FinalStage orderDescription(Optional<String> orderDescription);

        _FinalStage orderDescription(String orderDescription);

        _FinalStage orderId(Optional<String> orderId);

        _FinalStage orderId(String orderId);

        _FinalStage source(Optional<String> source);

        _FinalStage source(String source);

        _FinalStage subdomain(Optional<String> subdomain);

        _FinalStage subdomain(String subdomain);

        _FinalStage subscriptionId(Optional<Long> subscriptionId);

        _FinalStage subscriptionId(Long subscriptionId);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements PaymentDetailsStage, PaymentMethodStage, _FinalStage {
        private PaymentDetail paymentDetails;

        private PaymentMethod paymentMethod;

        private Optional<Long> subscriptionId = Optional.empty();

        private Optional<String> subdomain = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<String> orderDescription = Optional.empty();

        private Optional<String> ipaddress = Optional.empty();

        private Optional<BillData> invoiceData = Optional.empty();

        private Optional<String> entryPoint = Optional.empty();

        private Optional<PayorDataRequest> customerData = Optional.empty();

        private Optional<String> accountId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(TransRequestBody other) {
            accountId(other.getAccountId());
            customerData(other.getCustomerData());
            entryPoint(other.getEntryPoint());
            invoiceData(other.getInvoiceData());
            ipaddress(other.getIpaddress());
            orderDescription(other.getOrderDescription());
            orderId(other.getOrderId());
            paymentDetails(other.getPaymentDetails());
            paymentMethod(other.getPaymentMethod());
            source(other.getSource());
            subdomain(other.getSubdomain());
            subscriptionId(other.getSubscriptionId());
            return this;
        }

        /**
         * <p>Object describing details of the payment. Required.</p>
         * <p>Object describing details of the payment. Required.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("paymentDetails")
        public PaymentMethodStage paymentDetails(@NotNull PaymentDetail paymentDetails) {
            this.paymentDetails = Objects.requireNonNull(paymentDetails, "paymentDetails must not be null");
            return this;
        }

        /**
         * <p>Information about the payment method for the transaction. Required and recommended fields for each payment method type are described in each schema below.</p>
         * <p>Information about the payment method for the transaction. Required and recommended fields for each payment method type are described in each schema below.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("paymentMethod")
        public _FinalStage paymentMethod(@NotNull PaymentMethod paymentMethod) {
            this.paymentMethod = Objects.requireNonNull(paymentMethod, "paymentMethod must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage subscriptionId(Long subscriptionId) {
            this.subscriptionId = Optional.ofNullable(subscriptionId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "subscriptionId", nulls = Nulls.SKIP)
        public _FinalStage subscriptionId(Optional<Long> subscriptionId) {
            this.subscriptionId = subscriptionId;
            return this;
        }

        @java.lang.Override
        public _FinalStage subdomain(String subdomain) {
            this.subdomain = Optional.ofNullable(subdomain);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "subdomain", nulls = Nulls.SKIP)
        public _FinalStage subdomain(Optional<String> subdomain) {
            this.subdomain = subdomain;
            return this;
        }

        @java.lang.Override
        public _FinalStage source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "source", nulls = Nulls.SKIP)
        public _FinalStage source(Optional<String> source) {
            this.source = source;
            return this;
        }

        @java.lang.Override
        public _FinalStage orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "orderId", nulls = Nulls.SKIP)
        public _FinalStage orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        @java.lang.Override
        public _FinalStage orderDescription(String orderDescription) {
            this.orderDescription = Optional.ofNullable(orderDescription);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "orderDescription", nulls = Nulls.SKIP)
        public _FinalStage orderDescription(Optional<String> orderDescription) {
            this.orderDescription = orderDescription;
            return this;
        }

        @java.lang.Override
        public _FinalStage ipaddress(String ipaddress) {
            this.ipaddress = Optional.ofNullable(ipaddress);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "ipaddress", nulls = Nulls.SKIP)
        public _FinalStage ipaddress(Optional<String> ipaddress) {
            this.ipaddress = ipaddress;
            return this;
        }

        /**
         * <p>Object describing an Invoice linked to the transaction.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage invoiceData(BillData invoiceData) {
            this.invoiceData = Optional.ofNullable(invoiceData);
            return this;
        }

        /**
         * <p>Object describing an Invoice linked to the transaction.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "invoiceData", nulls = Nulls.SKIP)
        public _FinalStage invoiceData(Optional<BillData> invoiceData) {
            this.invoiceData = invoiceData;
            return this;
        }

        @java.lang.Override
        public _FinalStage entryPoint(String entryPoint) {
            this.entryPoint = Optional.ofNullable(entryPoint);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "entryPoint", nulls = Nulls.SKIP)
        public _FinalStage entryPoint(Optional<String> entryPoint) {
            this.entryPoint = entryPoint;
            return this;
        }

        /**
         * <p>Object describing the Customer/Payor. Which fields are required depends on the paypoint's custom identifier settings.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage customerData(PayorDataRequest customerData) {
            this.customerData = Optional.ofNullable(customerData);
            return this;
        }

        /**
         * <p>Object describing the Customer/Payor. Which fields are required depends on the paypoint's custom identifier settings.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "customerData", nulls = Nulls.SKIP)
        public _FinalStage customerData(Optional<PayorDataRequest> customerData) {
            this.customerData = customerData;
            return this;
        }

        @java.lang.Override
        public _FinalStage accountId(String accountId) {
            this.accountId = Optional.ofNullable(accountId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "accountId", nulls = Nulls.SKIP)
        public _FinalStage accountId(Optional<String> accountId) {
            this.accountId = accountId;
            return this;
        }

        @java.lang.Override
        public TransRequestBody build() {
            return new TransRequestBody(
                    accountId,
                    customerData,
                    entryPoint,
                    invoiceData,
                    ipaddress,
                    orderDescription,
                    orderId,
                    paymentDetails,
                    paymentMethod,
                    source,
                    subdomain,
                    subscriptionId,
                    additionalProperties);
        }
    }
}
