/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.moneyin.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import io.github.payabli.types.Achaccounttype;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RequestCreditPaymentMethod.Builder.class)
public final class RequestCreditPaymentMethod {
    private final Optional<String> achAccount;

    private final Optional<Achaccounttype> achAccountType;

    private final Optional<String> achCode;

    private final Optional<String> achHolder;

    private final Optional<String> achRouting;

    private final Map<String, Object> additionalProperties;

    private RequestCreditPaymentMethod(
            Optional<String> achAccount,
            Optional<Achaccounttype> achAccountType,
            Optional<String> achCode,
            Optional<String> achHolder,
            Optional<String> achRouting,
            Map<String, Object> additionalProperties) {
        this.achAccount = achAccount;
        this.achAccountType = achAccountType;
        this.achCode = achCode;
        this.achHolder = achHolder;
        this.achRouting = achRouting;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("achAccount")
    public Optional<String> getAchAccount() {
        return achAccount;
    }

    @JsonProperty("achAccountType")
    public Optional<Achaccounttype> getAchAccountType() {
        return achAccountType;
    }

    @JsonProperty("achCode")
    public Optional<String> getAchCode() {
        return achCode;
    }

    /**
     * @return Bank account holder.
     */
    @JsonProperty("achHolder")
    public Optional<String> getAchHolder() {
        return achHolder;
    }

    @JsonProperty("achRouting")
    public Optional<String> getAchRouting() {
        return achRouting;
    }

    /**
     * @return Method to use for the transaction. Must be ACH.
     */
    @JsonProperty("method")
    public String getMethod() {
        return "ach";
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RequestCreditPaymentMethod && equalTo((RequestCreditPaymentMethod) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RequestCreditPaymentMethod other) {
        return achAccount.equals(other.achAccount)
                && achAccountType.equals(other.achAccountType)
                && achCode.equals(other.achCode)
                && achHolder.equals(other.achHolder)
                && achRouting.equals(other.achRouting);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.achAccount, this.achAccountType, this.achCode, this.achHolder, this.achRouting);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> achAccount = Optional.empty();

        private Optional<Achaccounttype> achAccountType = Optional.empty();

        private Optional<String> achCode = Optional.empty();

        private Optional<String> achHolder = Optional.empty();

        private Optional<String> achRouting = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RequestCreditPaymentMethod other) {
            achAccount(other.getAchAccount());
            achAccountType(other.getAchAccountType());
            achCode(other.getAchCode());
            achHolder(other.getAchHolder());
            achRouting(other.getAchRouting());
            return this;
        }

        @JsonSetter(value = "achAccount", nulls = Nulls.SKIP)
        public Builder achAccount(Optional<String> achAccount) {
            this.achAccount = achAccount;
            return this;
        }

        public Builder achAccount(String achAccount) {
            this.achAccount = Optional.ofNullable(achAccount);
            return this;
        }

        @JsonSetter(value = "achAccountType", nulls = Nulls.SKIP)
        public Builder achAccountType(Optional<Achaccounttype> achAccountType) {
            this.achAccountType = achAccountType;
            return this;
        }

        public Builder achAccountType(Achaccounttype achAccountType) {
            this.achAccountType = Optional.ofNullable(achAccountType);
            return this;
        }

        @JsonSetter(value = "achCode", nulls = Nulls.SKIP)
        public Builder achCode(Optional<String> achCode) {
            this.achCode = achCode;
            return this;
        }

        public Builder achCode(String achCode) {
            this.achCode = Optional.ofNullable(achCode);
            return this;
        }

        /**
         * <p>Bank account holder.</p>
         */
        @JsonSetter(value = "achHolder", nulls = Nulls.SKIP)
        public Builder achHolder(Optional<String> achHolder) {
            this.achHolder = achHolder;
            return this;
        }

        public Builder achHolder(String achHolder) {
            this.achHolder = Optional.ofNullable(achHolder);
            return this;
        }

        @JsonSetter(value = "achRouting", nulls = Nulls.SKIP)
        public Builder achRouting(Optional<String> achRouting) {
            this.achRouting = achRouting;
            return this;
        }

        public Builder achRouting(String achRouting) {
            this.achRouting = Optional.ofNullable(achRouting);
            return this;
        }

        public RequestCreditPaymentMethod build() {
            return new RequestCreditPaymentMethod(
                    achAccount, achAccountType, achCode, achHolder, achRouting, additionalProperties);
        }
    }
}
