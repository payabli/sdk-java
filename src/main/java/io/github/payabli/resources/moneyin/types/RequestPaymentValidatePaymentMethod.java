/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.moneyin.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RequestPaymentValidatePaymentMethod.Builder.class)
public final class RequestPaymentValidatePaymentMethod {
    private final RequestPaymentValidatePaymentMethodMethod method;

    private final String cardnumber;

    private final String cardexp;

    private final String cardzip;

    private final String cardHolder;

    private final Map<String, Object> additionalProperties;

    private RequestPaymentValidatePaymentMethod(
            RequestPaymentValidatePaymentMethodMethod method,
            String cardnumber,
            String cardexp,
            String cardzip,
            String cardHolder,
            Map<String, Object> additionalProperties) {
        this.method = method;
        this.cardnumber = cardnumber;
        this.cardexp = cardexp;
        this.cardzip = cardzip;
        this.cardHolder = cardHolder;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("method")
    public RequestPaymentValidatePaymentMethodMethod getMethod() {
        return method;
    }

    @JsonProperty("cardnumber")
    public String getCardnumber() {
        return cardnumber;
    }

    @JsonProperty("cardexp")
    public String getCardexp() {
        return cardexp;
    }

    @JsonProperty("cardzip")
    public String getCardzip() {
        return cardzip;
    }

    @JsonProperty("cardHolder")
    public String getCardHolder() {
        return cardHolder;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RequestPaymentValidatePaymentMethod
                && equalTo((RequestPaymentValidatePaymentMethod) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RequestPaymentValidatePaymentMethod other) {
        return method.equals(other.method)
                && cardnumber.equals(other.cardnumber)
                && cardexp.equals(other.cardexp)
                && cardzip.equals(other.cardzip)
                && cardHolder.equals(other.cardHolder);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.method, this.cardnumber, this.cardexp, this.cardzip, this.cardHolder);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static MethodStage builder() {
        return new Builder();
    }

    public interface MethodStage {
        CardnumberStage method(@NotNull RequestPaymentValidatePaymentMethodMethod method);

        Builder from(RequestPaymentValidatePaymentMethod other);
    }

    public interface CardnumberStage {
        CardexpStage cardnumber(@NotNull String cardnumber);
    }

    public interface CardexpStage {
        CardzipStage cardexp(@NotNull String cardexp);
    }

    public interface CardzipStage {
        CardHolderStage cardzip(@NotNull String cardzip);
    }

    public interface CardHolderStage {
        _FinalStage cardHolder(@NotNull String cardHolder);
    }

    public interface _FinalStage {
        RequestPaymentValidatePaymentMethod build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements MethodStage, CardnumberStage, CardexpStage, CardzipStage, CardHolderStage, _FinalStage {
        private RequestPaymentValidatePaymentMethodMethod method;

        private String cardnumber;

        private String cardexp;

        private String cardzip;

        private String cardHolder;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(RequestPaymentValidatePaymentMethod other) {
            method(other.getMethod());
            cardnumber(other.getCardnumber());
            cardexp(other.getCardexp());
            cardzip(other.getCardzip());
            cardHolder(other.getCardHolder());
            return this;
        }

        @java.lang.Override
        @JsonSetter("method")
        public CardnumberStage method(@NotNull RequestPaymentValidatePaymentMethodMethod method) {
            this.method = Objects.requireNonNull(method, "method must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("cardnumber")
        public CardexpStage cardnumber(@NotNull String cardnumber) {
            this.cardnumber = Objects.requireNonNull(cardnumber, "cardnumber must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("cardexp")
        public CardzipStage cardexp(@NotNull String cardexp) {
            this.cardexp = Objects.requireNonNull(cardexp, "cardexp must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("cardzip")
        public CardHolderStage cardzip(@NotNull String cardzip) {
            this.cardzip = Objects.requireNonNull(cardzip, "cardzip must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("cardHolder")
        public _FinalStage cardHolder(@NotNull String cardHolder) {
            this.cardHolder = Objects.requireNonNull(cardHolder, "cardHolder must not be null");
            return this;
        }

        @java.lang.Override
        public RequestPaymentValidatePaymentMethod build() {
            return new RequestPaymentValidatePaymentMethod(
                    method, cardnumber, cardexp, cardzip, cardHolder, additionalProperties);
        }
    }
}
