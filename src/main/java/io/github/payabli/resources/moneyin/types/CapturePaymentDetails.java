/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.moneyin.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CapturePaymentDetails.Builder.class)
public final class CapturePaymentDetails {
    private final double totalAmount;

    private final Optional<Double> serviceFee;

    private final Map<String, Object> additionalProperties;

    private CapturePaymentDetails(
            double totalAmount, Optional<Double> serviceFee, Map<String, Object> additionalProperties) {
        this.totalAmount = totalAmount;
        this.serviceFee = serviceFee;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Total amount to be captured, including the <code>serviceFee</code> amount. The amount can't be greater the original
     * total amount of the transaction, and can't be more than 15% lower than the original amount.
     */
    @JsonProperty("totalAmount")
    public double getTotalAmount() {
        return totalAmount;
    }

    /**
     * @return Service fee to capture for the transaction.
     */
    @JsonProperty("serviceFee")
    public Optional<Double> getServiceFee() {
        return serviceFee;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CapturePaymentDetails && equalTo((CapturePaymentDetails) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CapturePaymentDetails other) {
        return totalAmount == other.totalAmount && serviceFee.equals(other.serviceFee);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.totalAmount, this.serviceFee);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TotalAmountStage builder() {
        return new Builder();
    }

    public interface TotalAmountStage {
        /**
         * <p>Total amount to be captured, including the <code>serviceFee</code> amount. The amount can't be greater the original
         * total amount of the transaction, and can't be more than 15% lower than the original amount.</p>
         */
        _FinalStage totalAmount(double totalAmount);

        Builder from(CapturePaymentDetails other);
    }

    public interface _FinalStage {
        CapturePaymentDetails build();

        /**
         * <p>Service fee to capture for the transaction.</p>
         */
        _FinalStage serviceFee(Optional<Double> serviceFee);

        _FinalStage serviceFee(Double serviceFee);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TotalAmountStage, _FinalStage {
        private double totalAmount;

        private Optional<Double> serviceFee = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CapturePaymentDetails other) {
            totalAmount(other.getTotalAmount());
            serviceFee(other.getServiceFee());
            return this;
        }

        /**
         * <p>Total amount to be captured, including the <code>serviceFee</code> amount. The amount can't be greater the original
         * total amount of the transaction, and can't be more than 15% lower than the original amount.</p>
         * <p>Total amount to be captured, including the <code>serviceFee</code> amount. The amount can't be greater the original
         * total amount of the transaction, and can't be more than 15% lower than the original amount.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("totalAmount")
        public _FinalStage totalAmount(double totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * <p>Service fee to capture for the transaction.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage serviceFee(Double serviceFee) {
            this.serviceFee = Optional.ofNullable(serviceFee);
            return this;
        }

        /**
         * <p>Service fee to capture for the transaction.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "serviceFee", nulls = Nulls.SKIP)
        public _FinalStage serviceFee(Optional<Double> serviceFee) {
            this.serviceFee = serviceFee;
            return this;
        }

        @java.lang.Override
        public CapturePaymentDetails build() {
            return new CapturePaymentDetails(totalAmount, serviceFee, additionalProperties);
        }
    }
}
