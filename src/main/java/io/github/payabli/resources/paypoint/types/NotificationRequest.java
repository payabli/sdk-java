/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.paypoint.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = NotificationRequest.Builder.class)
public final class NotificationRequest {
    private final String notificationUrl;

    private final Optional<List<WebHeaderParameter>> webHeaderParameters;

    private final Map<String, Object> additionalProperties;

    private NotificationRequest(
            String notificationUrl,
            Optional<List<WebHeaderParameter>> webHeaderParameters,
            Map<String, Object> additionalProperties) {
        this.notificationUrl = notificationUrl;
        this.webHeaderParameters = webHeaderParameters;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Complete HTTP URL receiving the notification
     */
    @JsonProperty("notificationUrl")
    public String getNotificationUrl() {
        return notificationUrl;
    }

    /**
     * @return A dictionary of key-value pairs to be inserted in the header when the notification request is submitted
     */
    @JsonProperty("webHeaderParameters")
    public Optional<List<WebHeaderParameter>> getWebHeaderParameters() {
        return webHeaderParameters;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof NotificationRequest && equalTo((NotificationRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(NotificationRequest other) {
        return notificationUrl.equals(other.notificationUrl) && webHeaderParameters.equals(other.webHeaderParameters);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.notificationUrl, this.webHeaderParameters);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static NotificationUrlStage builder() {
        return new Builder();
    }

    public interface NotificationUrlStage {
        /**
         * <p>Complete HTTP URL receiving the notification</p>
         */
        _FinalStage notificationUrl(@NotNull String notificationUrl);

        Builder from(NotificationRequest other);
    }

    public interface _FinalStage {
        NotificationRequest build();

        /**
         * <p>A dictionary of key-value pairs to be inserted in the header when the notification request is submitted</p>
         */
        _FinalStage webHeaderParameters(Optional<List<WebHeaderParameter>> webHeaderParameters);

        _FinalStage webHeaderParameters(List<WebHeaderParameter> webHeaderParameters);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements NotificationUrlStage, _FinalStage {
        private String notificationUrl;

        private Optional<List<WebHeaderParameter>> webHeaderParameters = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(NotificationRequest other) {
            notificationUrl(other.getNotificationUrl());
            webHeaderParameters(other.getWebHeaderParameters());
            return this;
        }

        /**
         * <p>Complete HTTP URL receiving the notification</p>
         * <p>Complete HTTP URL receiving the notification</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("notificationUrl")
        public _FinalStage notificationUrl(@NotNull String notificationUrl) {
            this.notificationUrl = Objects.requireNonNull(notificationUrl, "notificationUrl must not be null");
            return this;
        }

        /**
         * <p>A dictionary of key-value pairs to be inserted in the header when the notification request is submitted</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage webHeaderParameters(List<WebHeaderParameter> webHeaderParameters) {
            this.webHeaderParameters = Optional.ofNullable(webHeaderParameters);
            return this;
        }

        /**
         * <p>A dictionary of key-value pairs to be inserted in the header when the notification request is submitted</p>
         */
        @java.lang.Override
        @JsonSetter(value = "webHeaderParameters", nulls = Nulls.SKIP)
        public _FinalStage webHeaderParameters(Optional<List<WebHeaderParameter>> webHeaderParameters) {
            this.webHeaderParameters = webHeaderParameters;
            return this;
        }

        @java.lang.Override
        public NotificationRequest build() {
            return new NotificationRequest(notificationUrl, webHeaderParameters, additionalProperties);
        }
    }
}
