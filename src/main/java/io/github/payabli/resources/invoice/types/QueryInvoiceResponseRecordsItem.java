/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.invoice.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.Nullable;
import io.github.payabli.core.NullableNonemptyFilter;
import io.github.payabli.core.ObjectMappers;
import io.github.payabli.types.BillItem;
import io.github.payabli.types.BillOptions;
import io.github.payabli.types.DocumentsRef;
import io.github.payabli.types.Frequency;
import io.github.payabli.types.GeneralEvents;
import io.github.payabli.types.PayorDataResponse;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = QueryInvoiceResponseRecordsItem.Builder.class)
public final class QueryInvoiceResponseRecordsItem {
    private final long invoiceId;

    private final long customerId;

    private final long paypointId;

    private final String invoiceNumber;

    private final Optional<String> invoiceDate;

    private final Optional<String> invoiceDueDate;

    private final Optional<String> invoiceSentDate;

    private final Optional<String> invoiceEndDate;

    private final Optional<OffsetDateTime> lastPaymentDate;

    private final OffsetDateTime createdAt;

    private final int invoiceStatus;

    private final int invoiceType;

    private final Frequency frequency;

    private final String paymentTerms;

    private final Optional<String> termsConditions;

    private final Optional<String> notes;

    private final Optional<Double> tax;

    private final Optional<Double> discount;

    private final double invoiceAmount;

    private final double invoicePaidAmount;

    private final Optional<Double> freightAmount;

    private final Optional<Double> dutyAmount;

    private final Optional<String> purchaseOrder;

    private final String firstName;

    private final String lastName;

    private final Optional<String> company;

    private final String shippingAddress1;

    private final String shippingAddress2;

    private final String shippingCity;

    private final String shippingState;

    private final String shippingZip;

    private final String shippingFromZip;

    private final String shippingCountry;

    private final String shippingEmail;

    private final String shippingPhone;

    private final Optional<String> summaryCommodityCode;

    private final List<BillItem> items;

    private final PayorDataResponse customer;

    private final String paylinkId;

    private final Optional<List<GeneralEvents>> billEvents;

    private final Optional<BillOptions> scheduledOptions;

    private final String paypointLegalname;

    private final String paypointDbaname;

    private final String paypointEntryname;

    private final long parentOrgId;

    private final String parentOrgName;

    private final Optional<Map<String, Object>> additionalData;

    private final Optional<DocumentsRef> documentsRef;

    private final String externalPaypointId;

    private final Optional<String> pageIdentifier;

    private final Map<String, Object> additionalProperties;

    private QueryInvoiceResponseRecordsItem(
            long invoiceId,
            long customerId,
            long paypointId,
            String invoiceNumber,
            Optional<String> invoiceDate,
            Optional<String> invoiceDueDate,
            Optional<String> invoiceSentDate,
            Optional<String> invoiceEndDate,
            Optional<OffsetDateTime> lastPaymentDate,
            OffsetDateTime createdAt,
            int invoiceStatus,
            int invoiceType,
            Frequency frequency,
            String paymentTerms,
            Optional<String> termsConditions,
            Optional<String> notes,
            Optional<Double> tax,
            Optional<Double> discount,
            double invoiceAmount,
            double invoicePaidAmount,
            Optional<Double> freightAmount,
            Optional<Double> dutyAmount,
            Optional<String> purchaseOrder,
            String firstName,
            String lastName,
            Optional<String> company,
            String shippingAddress1,
            String shippingAddress2,
            String shippingCity,
            String shippingState,
            String shippingZip,
            String shippingFromZip,
            String shippingCountry,
            String shippingEmail,
            String shippingPhone,
            Optional<String> summaryCommodityCode,
            List<BillItem> items,
            PayorDataResponse customer,
            String paylinkId,
            Optional<List<GeneralEvents>> billEvents,
            Optional<BillOptions> scheduledOptions,
            String paypointLegalname,
            String paypointDbaname,
            String paypointEntryname,
            long parentOrgId,
            String parentOrgName,
            Optional<Map<String, Object>> additionalData,
            Optional<DocumentsRef> documentsRef,
            String externalPaypointId,
            Optional<String> pageIdentifier,
            Map<String, Object> additionalProperties) {
        this.invoiceId = invoiceId;
        this.customerId = customerId;
        this.paypointId = paypointId;
        this.invoiceNumber = invoiceNumber;
        this.invoiceDate = invoiceDate;
        this.invoiceDueDate = invoiceDueDate;
        this.invoiceSentDate = invoiceSentDate;
        this.invoiceEndDate = invoiceEndDate;
        this.lastPaymentDate = lastPaymentDate;
        this.createdAt = createdAt;
        this.invoiceStatus = invoiceStatus;
        this.invoiceType = invoiceType;
        this.frequency = frequency;
        this.paymentTerms = paymentTerms;
        this.termsConditions = termsConditions;
        this.notes = notes;
        this.tax = tax;
        this.discount = discount;
        this.invoiceAmount = invoiceAmount;
        this.invoicePaidAmount = invoicePaidAmount;
        this.freightAmount = freightAmount;
        this.dutyAmount = dutyAmount;
        this.purchaseOrder = purchaseOrder;
        this.firstName = firstName;
        this.lastName = lastName;
        this.company = company;
        this.shippingAddress1 = shippingAddress1;
        this.shippingAddress2 = shippingAddress2;
        this.shippingCity = shippingCity;
        this.shippingState = shippingState;
        this.shippingZip = shippingZip;
        this.shippingFromZip = shippingFromZip;
        this.shippingCountry = shippingCountry;
        this.shippingEmail = shippingEmail;
        this.shippingPhone = shippingPhone;
        this.summaryCommodityCode = summaryCommodityCode;
        this.items = items;
        this.customer = customer;
        this.paylinkId = paylinkId;
        this.billEvents = billEvents;
        this.scheduledOptions = scheduledOptions;
        this.paypointLegalname = paypointLegalname;
        this.paypointDbaname = paypointDbaname;
        this.paypointEntryname = paypointEntryname;
        this.parentOrgId = parentOrgId;
        this.parentOrgName = parentOrgName;
        this.additionalData = additionalData;
        this.documentsRef = documentsRef;
        this.externalPaypointId = externalPaypointId;
        this.pageIdentifier = pageIdentifier;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("invoiceId")
    public long getInvoiceId() {
        return invoiceId;
    }

    @JsonProperty("customerId")
    public long getCustomerId() {
        return customerId;
    }

    @JsonProperty("paypointId")
    public long getPaypointId() {
        return paypointId;
    }

    @JsonProperty("invoiceNumber")
    public String getInvoiceNumber() {
        return invoiceNumber;
    }

    /**
     * @return Invoice date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
     */
    @JsonProperty("invoiceDate")
    public Optional<String> getInvoiceDate() {
        return invoiceDate;
    }

    /**
     * @return Invoice due date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
     */
    @JsonProperty("invoiceDueDate")
    public Optional<String> getInvoiceDueDate() {
        return invoiceDueDate;
    }

    /**
     * @return Invoice sent date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.
     */
    @JsonProperty("invoiceSentDate")
    public Optional<String> getInvoiceSentDate() {
        return invoiceSentDate;
    }

    /**
     * @return The end date for a scheduled invoice cycle (<code>invoiceType</code> = 1).
     */
    @JsonProperty("invoiceEndDate")
    public Optional<String> getInvoiceEndDate() {
        return invoiceEndDate;
    }

    /**
     * @return Timestamp of last payment.
     */
    @JsonProperty("lastPaymentDate")
    public Optional<OffsetDateTime> getLastPaymentDate() {
        return lastPaymentDate;
    }

    @JsonProperty("createdAt")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("invoiceStatus")
    public int getInvoiceStatus() {
        return invoiceStatus;
    }

    @JsonProperty("invoiceType")
    public int getInvoiceType() {
        return invoiceType;
    }

    /**
     * @return Frequency of scheduled invoice.
     */
    @JsonProperty("frequency")
    public Frequency getFrequency() {
        return frequency;
    }

    @JsonProperty("paymentTerms")
    public String getPaymentTerms() {
        return paymentTerms;
    }

    @JsonIgnore
    public Optional<String> getTermsConditions() {
        if (termsConditions == null) {
            return Optional.empty();
        }
        return termsConditions;
    }

    /**
     * @return Invoice notes.
     */
    @JsonIgnore
    public Optional<String> getNotes() {
        if (notes == null) {
            return Optional.empty();
        }
        return notes;
    }

    @JsonProperty("tax")
    public Optional<Double> getTax() {
        return tax;
    }

    @JsonProperty("discount")
    public Optional<Double> getDiscount() {
        return discount;
    }

    @JsonProperty("invoiceAmount")
    public double getInvoiceAmount() {
        return invoiceAmount;
    }

    @JsonProperty("invoicePaidAmount")
    public double getInvoicePaidAmount() {
        return invoicePaidAmount;
    }

    @JsonProperty("freightAmount")
    public Optional<Double> getFreightAmount() {
        return freightAmount;
    }

    @JsonProperty("dutyAmount")
    public Optional<Double> getDutyAmount() {
        return dutyAmount;
    }

    @JsonIgnore
    public Optional<String> getPurchaseOrder() {
        if (purchaseOrder == null) {
            return Optional.empty();
        }
        return purchaseOrder;
    }

    /**
     * @return First name of the recipient of the invoice.
     */
    @JsonProperty("firstName")
    public String getFirstName() {
        return firstName;
    }

    /**
     * @return Last name of the recipient of the invoice.
     */
    @JsonProperty("lastName")
    public String getLastName() {
        return lastName;
    }

    /**
     * @return Company name of the recipient of the invoice.
     */
    @JsonIgnore
    public Optional<String> getCompany() {
        if (company == null) {
            return Optional.empty();
        }
        return company;
    }

    @JsonProperty("shippingAddress1")
    public String getShippingAddress1() {
        return shippingAddress1;
    }

    @JsonProperty("shippingAddress2")
    public String getShippingAddress2() {
        return shippingAddress2;
    }

    @JsonProperty("shippingCity")
    public String getShippingCity() {
        return shippingCity;
    }

    @JsonProperty("shippingState")
    public String getShippingState() {
        return shippingState;
    }

    @JsonProperty("shippingZip")
    public String getShippingZip() {
        return shippingZip;
    }

    @JsonProperty("shippingFromZip")
    public String getShippingFromZip() {
        return shippingFromZip;
    }

    @JsonProperty("shippingCountry")
    public String getShippingCountry() {
        return shippingCountry;
    }

    /**
     * @return Shipping recipient's contact email address.
     */
    @JsonProperty("shippingEmail")
    public String getShippingEmail() {
        return shippingEmail;
    }

    /**
     * @return Recipient phone number.
     */
    @JsonProperty("shippingPhone")
    public String getShippingPhone() {
        return shippingPhone;
    }

    @JsonIgnore
    public Optional<String> getSummaryCommodityCode() {
        if (summaryCommodityCode == null) {
            return Optional.empty();
        }
        return summaryCommodityCode;
    }

    /**
     * @return Array of line items included in the invoice.
     */
    @JsonProperty("items")
    public List<BillItem> getItems() {
        return items;
    }

    @JsonProperty("Customer")
    public PayorDataResponse getCustomer() {
        return customer;
    }

    @JsonProperty("paylinkId")
    public String getPaylinkId() {
        return paylinkId;
    }

    @JsonProperty("billEvents")
    public Optional<List<GeneralEvents>> getBillEvents() {
        return billEvents;
    }

    /**
     * @return Object with options for scheduled invoices.
     */
    @JsonIgnore
    public Optional<BillOptions> getScheduledOptions() {
        if (scheduledOptions == null) {
            return Optional.empty();
        }
        return scheduledOptions;
    }

    /**
     * @return Paypoint's legal name.
     */
    @JsonProperty("PaypointLegalname")
    public String getPaypointLegalname() {
        return paypointLegalname;
    }

    /**
     * @return Paypoint's DBA name.
     */
    @JsonProperty("PaypointDbaname")
    public String getPaypointDbaname() {
        return paypointDbaname;
    }

    /**
     * @return Paypoint's entryname.
     */
    @JsonProperty("PaypointEntryname")
    public String getPaypointEntryname() {
        return paypointEntryname;
    }

    @JsonProperty("ParentOrgId")
    public long getParentOrgId() {
        return parentOrgId;
    }

    @JsonProperty("ParentOrgName")
    public String getParentOrgName() {
        return parentOrgName;
    }

    /**
     * @return Custom list of key:value pairs. This field is used to store any data related to the invoice or for your system.
     */
    @JsonIgnore
    public Optional<Map<String, Object>> getAdditionalData() {
        if (additionalData == null) {
            return Optional.empty();
        }
        return additionalData;
    }

    /**
     * @return Object containing attachments associated to the invoice.
     */
    @JsonIgnore
    public Optional<DocumentsRef> getDocumentsRef() {
        if (documentsRef == null) {
            return Optional.empty();
        }
        return documentsRef;
    }

    @JsonProperty("externalPaypointID")
    public String getExternalPaypointId() {
        return externalPaypointId;
    }

    @JsonIgnore
    public Optional<String> getPageIdentifier() {
        if (pageIdentifier == null) {
            return Optional.empty();
        }
        return pageIdentifier;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("termsConditions")
    private Optional<String> _getTermsConditions() {
        return termsConditions;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("notes")
    private Optional<String> _getNotes() {
        return notes;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("purchaseOrder")
    private Optional<String> _getPurchaseOrder() {
        return purchaseOrder;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("company")
    private Optional<String> _getCompany() {
        return company;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("summaryCommodityCode")
    private Optional<String> _getSummaryCommodityCode() {
        return summaryCommodityCode;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("scheduledOptions")
    private Optional<BillOptions> _getScheduledOptions() {
        return scheduledOptions;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("AdditionalData")
    private Optional<Map<String, Object>> _getAdditionalData() {
        return additionalData;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("DocumentsRef")
    private Optional<DocumentsRef> _getDocumentsRef() {
        return documentsRef;
    }

    @JsonInclude(value = JsonInclude.Include.CUSTOM, valueFilter = NullableNonemptyFilter.class)
    @JsonProperty("pageIdentifier")
    private Optional<String> _getPageIdentifier() {
        return pageIdentifier;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof QueryInvoiceResponseRecordsItem && equalTo((QueryInvoiceResponseRecordsItem) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(QueryInvoiceResponseRecordsItem other) {
        return invoiceId == other.invoiceId
                && customerId == other.customerId
                && paypointId == other.paypointId
                && invoiceNumber.equals(other.invoiceNumber)
                && invoiceDate.equals(other.invoiceDate)
                && invoiceDueDate.equals(other.invoiceDueDate)
                && invoiceSentDate.equals(other.invoiceSentDate)
                && invoiceEndDate.equals(other.invoiceEndDate)
                && lastPaymentDate.equals(other.lastPaymentDate)
                && createdAt.equals(other.createdAt)
                && invoiceStatus == other.invoiceStatus
                && invoiceType == other.invoiceType
                && frequency.equals(other.frequency)
                && paymentTerms.equals(other.paymentTerms)
                && termsConditions.equals(other.termsConditions)
                && notes.equals(other.notes)
                && tax.equals(other.tax)
                && discount.equals(other.discount)
                && invoiceAmount == other.invoiceAmount
                && invoicePaidAmount == other.invoicePaidAmount
                && freightAmount.equals(other.freightAmount)
                && dutyAmount.equals(other.dutyAmount)
                && purchaseOrder.equals(other.purchaseOrder)
                && firstName.equals(other.firstName)
                && lastName.equals(other.lastName)
                && company.equals(other.company)
                && shippingAddress1.equals(other.shippingAddress1)
                && shippingAddress2.equals(other.shippingAddress2)
                && shippingCity.equals(other.shippingCity)
                && shippingState.equals(other.shippingState)
                && shippingZip.equals(other.shippingZip)
                && shippingFromZip.equals(other.shippingFromZip)
                && shippingCountry.equals(other.shippingCountry)
                && shippingEmail.equals(other.shippingEmail)
                && shippingPhone.equals(other.shippingPhone)
                && summaryCommodityCode.equals(other.summaryCommodityCode)
                && items.equals(other.items)
                && customer.equals(other.customer)
                && paylinkId.equals(other.paylinkId)
                && billEvents.equals(other.billEvents)
                && scheduledOptions.equals(other.scheduledOptions)
                && paypointLegalname.equals(other.paypointLegalname)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointEntryname.equals(other.paypointEntryname)
                && parentOrgId == other.parentOrgId
                && parentOrgName.equals(other.parentOrgName)
                && additionalData.equals(other.additionalData)
                && documentsRef.equals(other.documentsRef)
                && externalPaypointId.equals(other.externalPaypointId)
                && pageIdentifier.equals(other.pageIdentifier);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.invoiceId,
                this.customerId,
                this.paypointId,
                this.invoiceNumber,
                this.invoiceDate,
                this.invoiceDueDate,
                this.invoiceSentDate,
                this.invoiceEndDate,
                this.lastPaymentDate,
                this.createdAt,
                this.invoiceStatus,
                this.invoiceType,
                this.frequency,
                this.paymentTerms,
                this.termsConditions,
                this.notes,
                this.tax,
                this.discount,
                this.invoiceAmount,
                this.invoicePaidAmount,
                this.freightAmount,
                this.dutyAmount,
                this.purchaseOrder,
                this.firstName,
                this.lastName,
                this.company,
                this.shippingAddress1,
                this.shippingAddress2,
                this.shippingCity,
                this.shippingState,
                this.shippingZip,
                this.shippingFromZip,
                this.shippingCountry,
                this.shippingEmail,
                this.shippingPhone,
                this.summaryCommodityCode,
                this.items,
                this.customer,
                this.paylinkId,
                this.billEvents,
                this.scheduledOptions,
                this.paypointLegalname,
                this.paypointDbaname,
                this.paypointEntryname,
                this.parentOrgId,
                this.parentOrgName,
                this.additionalData,
                this.documentsRef,
                this.externalPaypointId,
                this.pageIdentifier);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static InvoiceIdStage builder() {
        return new Builder();
    }

    public interface InvoiceIdStage {
        CustomerIdStage invoiceId(long invoiceId);

        Builder from(QueryInvoiceResponseRecordsItem other);
    }

    public interface CustomerIdStage {
        PaypointIdStage customerId(long customerId);
    }

    public interface PaypointIdStage {
        InvoiceNumberStage paypointId(long paypointId);
    }

    public interface InvoiceNumberStage {
        CreatedAtStage invoiceNumber(@NotNull String invoiceNumber);
    }

    public interface CreatedAtStage {
        InvoiceStatusStage createdAt(@NotNull OffsetDateTime createdAt);
    }

    public interface InvoiceStatusStage {
        InvoiceTypeStage invoiceStatus(int invoiceStatus);
    }

    public interface InvoiceTypeStage {
        FrequencyStage invoiceType(int invoiceType);
    }

    public interface FrequencyStage {
        /**
         * <p>Frequency of scheduled invoice.</p>
         */
        PaymentTermsStage frequency(@NotNull Frequency frequency);
    }

    public interface PaymentTermsStage {
        InvoiceAmountStage paymentTerms(@NotNull String paymentTerms);
    }

    public interface InvoiceAmountStage {
        InvoicePaidAmountStage invoiceAmount(double invoiceAmount);
    }

    public interface InvoicePaidAmountStage {
        FirstNameStage invoicePaidAmount(double invoicePaidAmount);
    }

    public interface FirstNameStage {
        /**
         * <p>First name of the recipient of the invoice.</p>
         */
        LastNameStage firstName(@NotNull String firstName);
    }

    public interface LastNameStage {
        /**
         * <p>Last name of the recipient of the invoice.</p>
         */
        ShippingAddress1Stage lastName(@NotNull String lastName);
    }

    public interface ShippingAddress1Stage {
        ShippingAddress2Stage shippingAddress1(@NotNull String shippingAddress1);
    }

    public interface ShippingAddress2Stage {
        ShippingCityStage shippingAddress2(@NotNull String shippingAddress2);
    }

    public interface ShippingCityStage {
        ShippingStateStage shippingCity(@NotNull String shippingCity);
    }

    public interface ShippingStateStage {
        ShippingZipStage shippingState(@NotNull String shippingState);
    }

    public interface ShippingZipStage {
        ShippingFromZipStage shippingZip(@NotNull String shippingZip);
    }

    public interface ShippingFromZipStage {
        ShippingCountryStage shippingFromZip(@NotNull String shippingFromZip);
    }

    public interface ShippingCountryStage {
        ShippingEmailStage shippingCountry(@NotNull String shippingCountry);
    }

    public interface ShippingEmailStage {
        /**
         * <p>Shipping recipient's contact email address.</p>
         */
        ShippingPhoneStage shippingEmail(@NotNull String shippingEmail);
    }

    public interface ShippingPhoneStage {
        /**
         * <p>Recipient phone number.</p>
         */
        CustomerStage shippingPhone(@NotNull String shippingPhone);
    }

    public interface CustomerStage {
        PaylinkIdStage customer(@NotNull PayorDataResponse customer);
    }

    public interface PaylinkIdStage {
        PaypointLegalnameStage paylinkId(@NotNull String paylinkId);
    }

    public interface PaypointLegalnameStage {
        /**
         * <p>Paypoint's legal name.</p>
         */
        PaypointDbanameStage paypointLegalname(@NotNull String paypointLegalname);
    }

    public interface PaypointDbanameStage {
        /**
         * <p>Paypoint's DBA name.</p>
         */
        PaypointEntrynameStage paypointDbaname(@NotNull String paypointDbaname);
    }

    public interface PaypointEntrynameStage {
        /**
         * <p>Paypoint's entryname.</p>
         */
        ParentOrgIdStage paypointEntryname(@NotNull String paypointEntryname);
    }

    public interface ParentOrgIdStage {
        ParentOrgNameStage parentOrgId(long parentOrgId);
    }

    public interface ParentOrgNameStage {
        ExternalPaypointIdStage parentOrgName(@NotNull String parentOrgName);
    }

    public interface ExternalPaypointIdStage {
        _FinalStage externalPaypointId(@NotNull String externalPaypointId);
    }

    public interface _FinalStage {
        QueryInvoiceResponseRecordsItem build();

        /**
         * <p>Invoice date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         */
        _FinalStage invoiceDate(Optional<String> invoiceDate);

        _FinalStage invoiceDate(String invoiceDate);

        /**
         * <p>Invoice due date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         */
        _FinalStage invoiceDueDate(Optional<String> invoiceDueDate);

        _FinalStage invoiceDueDate(String invoiceDueDate);

        /**
         * <p>Invoice sent date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         */
        _FinalStage invoiceSentDate(Optional<String> invoiceSentDate);

        _FinalStage invoiceSentDate(String invoiceSentDate);

        /**
         * <p>The end date for a scheduled invoice cycle (<code>invoiceType</code> = 1).</p>
         */
        _FinalStage invoiceEndDate(Optional<String> invoiceEndDate);

        _FinalStage invoiceEndDate(String invoiceEndDate);

        /**
         * <p>Timestamp of last payment.</p>
         */
        _FinalStage lastPaymentDate(Optional<OffsetDateTime> lastPaymentDate);

        _FinalStage lastPaymentDate(OffsetDateTime lastPaymentDate);

        _FinalStage termsConditions(Optional<String> termsConditions);

        _FinalStage termsConditions(String termsConditions);

        _FinalStage termsConditions(Nullable<String> termsConditions);

        /**
         * <p>Invoice notes.</p>
         */
        _FinalStage notes(Optional<String> notes);

        _FinalStage notes(String notes);

        _FinalStage notes(Nullable<String> notes);

        _FinalStage tax(Optional<Double> tax);

        _FinalStage tax(Double tax);

        _FinalStage discount(Optional<Double> discount);

        _FinalStage discount(Double discount);

        _FinalStage freightAmount(Optional<Double> freightAmount);

        _FinalStage freightAmount(Double freightAmount);

        _FinalStage dutyAmount(Optional<Double> dutyAmount);

        _FinalStage dutyAmount(Double dutyAmount);

        _FinalStage purchaseOrder(Optional<String> purchaseOrder);

        _FinalStage purchaseOrder(String purchaseOrder);

        _FinalStage purchaseOrder(Nullable<String> purchaseOrder);

        /**
         * <p>Company name of the recipient of the invoice.</p>
         */
        _FinalStage company(Optional<String> company);

        _FinalStage company(String company);

        _FinalStage company(Nullable<String> company);

        _FinalStage summaryCommodityCode(Optional<String> summaryCommodityCode);

        _FinalStage summaryCommodityCode(String summaryCommodityCode);

        _FinalStage summaryCommodityCode(Nullable<String> summaryCommodityCode);

        /**
         * <p>Array of line items included in the invoice.</p>
         */
        _FinalStage items(List<BillItem> items);

        _FinalStage addItems(BillItem items);

        _FinalStage addAllItems(List<BillItem> items);

        _FinalStage billEvents(Optional<List<GeneralEvents>> billEvents);

        _FinalStage billEvents(List<GeneralEvents> billEvents);

        /**
         * <p>Object with options for scheduled invoices.</p>
         */
        _FinalStage scheduledOptions(Optional<BillOptions> scheduledOptions);

        _FinalStage scheduledOptions(BillOptions scheduledOptions);

        _FinalStage scheduledOptions(Nullable<BillOptions> scheduledOptions);

        /**
         * <p>Custom list of key:value pairs. This field is used to store any data related to the invoice or for your system.</p>
         */
        _FinalStage additionalData(Optional<Map<String, Object>> additionalData);

        _FinalStage additionalData(Map<String, Object> additionalData);

        _FinalStage additionalData(Nullable<Map<String, Object>> additionalData);

        /**
         * <p>Object containing attachments associated to the invoice.</p>
         */
        _FinalStage documentsRef(Optional<DocumentsRef> documentsRef);

        _FinalStage documentsRef(DocumentsRef documentsRef);

        _FinalStage documentsRef(Nullable<DocumentsRef> documentsRef);

        _FinalStage pageIdentifier(Optional<String> pageIdentifier);

        _FinalStage pageIdentifier(String pageIdentifier);

        _FinalStage pageIdentifier(Nullable<String> pageIdentifier);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements InvoiceIdStage,
                    CustomerIdStage,
                    PaypointIdStage,
                    InvoiceNumberStage,
                    CreatedAtStage,
                    InvoiceStatusStage,
                    InvoiceTypeStage,
                    FrequencyStage,
                    PaymentTermsStage,
                    InvoiceAmountStage,
                    InvoicePaidAmountStage,
                    FirstNameStage,
                    LastNameStage,
                    ShippingAddress1Stage,
                    ShippingAddress2Stage,
                    ShippingCityStage,
                    ShippingStateStage,
                    ShippingZipStage,
                    ShippingFromZipStage,
                    ShippingCountryStage,
                    ShippingEmailStage,
                    ShippingPhoneStage,
                    CustomerStage,
                    PaylinkIdStage,
                    PaypointLegalnameStage,
                    PaypointDbanameStage,
                    PaypointEntrynameStage,
                    ParentOrgIdStage,
                    ParentOrgNameStage,
                    ExternalPaypointIdStage,
                    _FinalStage {
        private long invoiceId;

        private long customerId;

        private long paypointId;

        private String invoiceNumber;

        private OffsetDateTime createdAt;

        private int invoiceStatus;

        private int invoiceType;

        private Frequency frequency;

        private String paymentTerms;

        private double invoiceAmount;

        private double invoicePaidAmount;

        private String firstName;

        private String lastName;

        private String shippingAddress1;

        private String shippingAddress2;

        private String shippingCity;

        private String shippingState;

        private String shippingZip;

        private String shippingFromZip;

        private String shippingCountry;

        private String shippingEmail;

        private String shippingPhone;

        private PayorDataResponse customer;

        private String paylinkId;

        private String paypointLegalname;

        private String paypointDbaname;

        private String paypointEntryname;

        private long parentOrgId;

        private String parentOrgName;

        private String externalPaypointId;

        private Optional<String> pageIdentifier = Optional.empty();

        private Optional<DocumentsRef> documentsRef = Optional.empty();

        private Optional<Map<String, Object>> additionalData = Optional.empty();

        private Optional<BillOptions> scheduledOptions = Optional.empty();

        private Optional<List<GeneralEvents>> billEvents = Optional.empty();

        private List<BillItem> items = new ArrayList<>();

        private Optional<String> summaryCommodityCode = Optional.empty();

        private Optional<String> company = Optional.empty();

        private Optional<String> purchaseOrder = Optional.empty();

        private Optional<Double> dutyAmount = Optional.empty();

        private Optional<Double> freightAmount = Optional.empty();

        private Optional<Double> discount = Optional.empty();

        private Optional<Double> tax = Optional.empty();

        private Optional<String> notes = Optional.empty();

        private Optional<String> termsConditions = Optional.empty();

        private Optional<OffsetDateTime> lastPaymentDate = Optional.empty();

        private Optional<String> invoiceEndDate = Optional.empty();

        private Optional<String> invoiceSentDate = Optional.empty();

        private Optional<String> invoiceDueDate = Optional.empty();

        private Optional<String> invoiceDate = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(QueryInvoiceResponseRecordsItem other) {
            invoiceId(other.getInvoiceId());
            customerId(other.getCustomerId());
            paypointId(other.getPaypointId());
            invoiceNumber(other.getInvoiceNumber());
            invoiceDate(other.getInvoiceDate());
            invoiceDueDate(other.getInvoiceDueDate());
            invoiceSentDate(other.getInvoiceSentDate());
            invoiceEndDate(other.getInvoiceEndDate());
            lastPaymentDate(other.getLastPaymentDate());
            createdAt(other.getCreatedAt());
            invoiceStatus(other.getInvoiceStatus());
            invoiceType(other.getInvoiceType());
            frequency(other.getFrequency());
            paymentTerms(other.getPaymentTerms());
            termsConditions(other.getTermsConditions());
            notes(other.getNotes());
            tax(other.getTax());
            discount(other.getDiscount());
            invoiceAmount(other.getInvoiceAmount());
            invoicePaidAmount(other.getInvoicePaidAmount());
            freightAmount(other.getFreightAmount());
            dutyAmount(other.getDutyAmount());
            purchaseOrder(other.getPurchaseOrder());
            firstName(other.getFirstName());
            lastName(other.getLastName());
            company(other.getCompany());
            shippingAddress1(other.getShippingAddress1());
            shippingAddress2(other.getShippingAddress2());
            shippingCity(other.getShippingCity());
            shippingState(other.getShippingState());
            shippingZip(other.getShippingZip());
            shippingFromZip(other.getShippingFromZip());
            shippingCountry(other.getShippingCountry());
            shippingEmail(other.getShippingEmail());
            shippingPhone(other.getShippingPhone());
            summaryCommodityCode(other.getSummaryCommodityCode());
            items(other.getItems());
            customer(other.getCustomer());
            paylinkId(other.getPaylinkId());
            billEvents(other.getBillEvents());
            scheduledOptions(other.getScheduledOptions());
            paypointLegalname(other.getPaypointLegalname());
            paypointDbaname(other.getPaypointDbaname());
            paypointEntryname(other.getPaypointEntryname());
            parentOrgId(other.getParentOrgId());
            parentOrgName(other.getParentOrgName());
            additionalData(other.getAdditionalData());
            documentsRef(other.getDocumentsRef());
            externalPaypointId(other.getExternalPaypointId());
            pageIdentifier(other.getPageIdentifier());
            return this;
        }

        @java.lang.Override
        @JsonSetter("invoiceId")
        public CustomerIdStage invoiceId(long invoiceId) {
            this.invoiceId = invoiceId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("customerId")
        public PaypointIdStage customerId(long customerId) {
            this.customerId = customerId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("paypointId")
        public InvoiceNumberStage paypointId(long paypointId) {
            this.paypointId = paypointId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("invoiceNumber")
        public CreatedAtStage invoiceNumber(@NotNull String invoiceNumber) {
            this.invoiceNumber = Objects.requireNonNull(invoiceNumber, "invoiceNumber must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("createdAt")
        public InvoiceStatusStage createdAt(@NotNull OffsetDateTime createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt, "createdAt must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("invoiceStatus")
        public InvoiceTypeStage invoiceStatus(int invoiceStatus) {
            this.invoiceStatus = invoiceStatus;
            return this;
        }

        @java.lang.Override
        @JsonSetter("invoiceType")
        public FrequencyStage invoiceType(int invoiceType) {
            this.invoiceType = invoiceType;
            return this;
        }

        /**
         * <p>Frequency of scheduled invoice.</p>
         * <p>Frequency of scheduled invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("frequency")
        public PaymentTermsStage frequency(@NotNull Frequency frequency) {
            this.frequency = Objects.requireNonNull(frequency, "frequency must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("paymentTerms")
        public InvoiceAmountStage paymentTerms(@NotNull String paymentTerms) {
            this.paymentTerms = Objects.requireNonNull(paymentTerms, "paymentTerms must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("invoiceAmount")
        public InvoicePaidAmountStage invoiceAmount(double invoiceAmount) {
            this.invoiceAmount = invoiceAmount;
            return this;
        }

        @java.lang.Override
        @JsonSetter("invoicePaidAmount")
        public FirstNameStage invoicePaidAmount(double invoicePaidAmount) {
            this.invoicePaidAmount = invoicePaidAmount;
            return this;
        }

        /**
         * <p>First name of the recipient of the invoice.</p>
         * <p>First name of the recipient of the invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("firstName")
        public LastNameStage firstName(@NotNull String firstName) {
            this.firstName = Objects.requireNonNull(firstName, "firstName must not be null");
            return this;
        }

        /**
         * <p>Last name of the recipient of the invoice.</p>
         * <p>Last name of the recipient of the invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("lastName")
        public ShippingAddress1Stage lastName(@NotNull String lastName) {
            this.lastName = Objects.requireNonNull(lastName, "lastName must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("shippingAddress1")
        public ShippingAddress2Stage shippingAddress1(@NotNull String shippingAddress1) {
            this.shippingAddress1 = Objects.requireNonNull(shippingAddress1, "shippingAddress1 must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("shippingAddress2")
        public ShippingCityStage shippingAddress2(@NotNull String shippingAddress2) {
            this.shippingAddress2 = Objects.requireNonNull(shippingAddress2, "shippingAddress2 must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("shippingCity")
        public ShippingStateStage shippingCity(@NotNull String shippingCity) {
            this.shippingCity = Objects.requireNonNull(shippingCity, "shippingCity must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("shippingState")
        public ShippingZipStage shippingState(@NotNull String shippingState) {
            this.shippingState = Objects.requireNonNull(shippingState, "shippingState must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("shippingZip")
        public ShippingFromZipStage shippingZip(@NotNull String shippingZip) {
            this.shippingZip = Objects.requireNonNull(shippingZip, "shippingZip must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("shippingFromZip")
        public ShippingCountryStage shippingFromZip(@NotNull String shippingFromZip) {
            this.shippingFromZip = Objects.requireNonNull(shippingFromZip, "shippingFromZip must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("shippingCountry")
        public ShippingEmailStage shippingCountry(@NotNull String shippingCountry) {
            this.shippingCountry = Objects.requireNonNull(shippingCountry, "shippingCountry must not be null");
            return this;
        }

        /**
         * <p>Shipping recipient's contact email address.</p>
         * <p>Shipping recipient's contact email address.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("shippingEmail")
        public ShippingPhoneStage shippingEmail(@NotNull String shippingEmail) {
            this.shippingEmail = Objects.requireNonNull(shippingEmail, "shippingEmail must not be null");
            return this;
        }

        /**
         * <p>Recipient phone number.</p>
         * <p>Recipient phone number.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("shippingPhone")
        public CustomerStage shippingPhone(@NotNull String shippingPhone) {
            this.shippingPhone = Objects.requireNonNull(shippingPhone, "shippingPhone must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("Customer")
        public PaylinkIdStage customer(@NotNull PayorDataResponse customer) {
            this.customer = Objects.requireNonNull(customer, "customer must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("paylinkId")
        public PaypointLegalnameStage paylinkId(@NotNull String paylinkId) {
            this.paylinkId = Objects.requireNonNull(paylinkId, "paylinkId must not be null");
            return this;
        }

        /**
         * <p>Paypoint's legal name.</p>
         * <p>Paypoint's legal name.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("PaypointLegalname")
        public PaypointDbanameStage paypointLegalname(@NotNull String paypointLegalname) {
            this.paypointLegalname = Objects.requireNonNull(paypointLegalname, "paypointLegalname must not be null");
            return this;
        }

        /**
         * <p>Paypoint's DBA name.</p>
         * <p>Paypoint's DBA name.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("PaypointDbaname")
        public PaypointEntrynameStage paypointDbaname(@NotNull String paypointDbaname) {
            this.paypointDbaname = Objects.requireNonNull(paypointDbaname, "paypointDbaname must not be null");
            return this;
        }

        /**
         * <p>Paypoint's entryname.</p>
         * <p>Paypoint's entryname.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("PaypointEntryname")
        public ParentOrgIdStage paypointEntryname(@NotNull String paypointEntryname) {
            this.paypointEntryname = Objects.requireNonNull(paypointEntryname, "paypointEntryname must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("ParentOrgId")
        public ParentOrgNameStage parentOrgId(long parentOrgId) {
            this.parentOrgId = parentOrgId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("ParentOrgName")
        public ExternalPaypointIdStage parentOrgName(@NotNull String parentOrgName) {
            this.parentOrgName = Objects.requireNonNull(parentOrgName, "parentOrgName must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("externalPaypointID")
        public _FinalStage externalPaypointId(@NotNull String externalPaypointId) {
            this.externalPaypointId = Objects.requireNonNull(externalPaypointId, "externalPaypointId must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage pageIdentifier(Nullable<String> pageIdentifier) {
            if (pageIdentifier.isNull()) {
                this.pageIdentifier = null;
            } else if (pageIdentifier.isEmpty()) {
                this.pageIdentifier = Optional.empty();
            } else {
                this.pageIdentifier = Optional.of(pageIdentifier.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage pageIdentifier(String pageIdentifier) {
            this.pageIdentifier = Optional.ofNullable(pageIdentifier);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "pageIdentifier", nulls = Nulls.SKIP)
        public _FinalStage pageIdentifier(Optional<String> pageIdentifier) {
            this.pageIdentifier = pageIdentifier;
            return this;
        }

        /**
         * <p>Object containing attachments associated to the invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage documentsRef(Nullable<DocumentsRef> documentsRef) {
            if (documentsRef.isNull()) {
                this.documentsRef = null;
            } else if (documentsRef.isEmpty()) {
                this.documentsRef = Optional.empty();
            } else {
                this.documentsRef = Optional.of(documentsRef.get());
            }
            return this;
        }

        /**
         * <p>Object containing attachments associated to the invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage documentsRef(DocumentsRef documentsRef) {
            this.documentsRef = Optional.ofNullable(documentsRef);
            return this;
        }

        /**
         * <p>Object containing attachments associated to the invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "DocumentsRef", nulls = Nulls.SKIP)
        public _FinalStage documentsRef(Optional<DocumentsRef> documentsRef) {
            this.documentsRef = documentsRef;
            return this;
        }

        /**
         * <p>Custom list of key:value pairs. This field is used to store any data related to the invoice or for your system.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage additionalData(Nullable<Map<String, Object>> additionalData) {
            if (additionalData.isNull()) {
                this.additionalData = null;
            } else if (additionalData.isEmpty()) {
                this.additionalData = Optional.empty();
            } else {
                this.additionalData = Optional.of(additionalData.get());
            }
            return this;
        }

        /**
         * <p>Custom list of key:value pairs. This field is used to store any data related to the invoice or for your system.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage additionalData(Map<String, Object> additionalData) {
            this.additionalData = Optional.ofNullable(additionalData);
            return this;
        }

        /**
         * <p>Custom list of key:value pairs. This field is used to store any data related to the invoice or for your system.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "AdditionalData", nulls = Nulls.SKIP)
        public _FinalStage additionalData(Optional<Map<String, Object>> additionalData) {
            this.additionalData = additionalData;
            return this;
        }

        /**
         * <p>Object with options for scheduled invoices.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage scheduledOptions(Nullable<BillOptions> scheduledOptions) {
            if (scheduledOptions.isNull()) {
                this.scheduledOptions = null;
            } else if (scheduledOptions.isEmpty()) {
                this.scheduledOptions = Optional.empty();
            } else {
                this.scheduledOptions = Optional.of(scheduledOptions.get());
            }
            return this;
        }

        /**
         * <p>Object with options for scheduled invoices.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage scheduledOptions(BillOptions scheduledOptions) {
            this.scheduledOptions = Optional.ofNullable(scheduledOptions);
            return this;
        }

        /**
         * <p>Object with options for scheduled invoices.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "scheduledOptions", nulls = Nulls.SKIP)
        public _FinalStage scheduledOptions(Optional<BillOptions> scheduledOptions) {
            this.scheduledOptions = scheduledOptions;
            return this;
        }

        @java.lang.Override
        public _FinalStage billEvents(List<GeneralEvents> billEvents) {
            this.billEvents = Optional.ofNullable(billEvents);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "billEvents", nulls = Nulls.SKIP)
        public _FinalStage billEvents(Optional<List<GeneralEvents>> billEvents) {
            this.billEvents = billEvents;
            return this;
        }

        /**
         * <p>Array of line items included in the invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllItems(List<BillItem> items) {
            if (items != null) {
                this.items.addAll(items);
            }
            return this;
        }

        /**
         * <p>Array of line items included in the invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addItems(BillItem items) {
            this.items.add(items);
            return this;
        }

        /**
         * <p>Array of line items included in the invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "items", nulls = Nulls.SKIP)
        public _FinalStage items(List<BillItem> items) {
            this.items.clear();
            this.items.addAll(items);
            return this;
        }

        @java.lang.Override
        public _FinalStage summaryCommodityCode(Nullable<String> summaryCommodityCode) {
            if (summaryCommodityCode.isNull()) {
                this.summaryCommodityCode = null;
            } else if (summaryCommodityCode.isEmpty()) {
                this.summaryCommodityCode = Optional.empty();
            } else {
                this.summaryCommodityCode = Optional.of(summaryCommodityCode.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage summaryCommodityCode(String summaryCommodityCode) {
            this.summaryCommodityCode = Optional.ofNullable(summaryCommodityCode);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "summaryCommodityCode", nulls = Nulls.SKIP)
        public _FinalStage summaryCommodityCode(Optional<String> summaryCommodityCode) {
            this.summaryCommodityCode = summaryCommodityCode;
            return this;
        }

        /**
         * <p>Company name of the recipient of the invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage company(Nullable<String> company) {
            if (company.isNull()) {
                this.company = null;
            } else if (company.isEmpty()) {
                this.company = Optional.empty();
            } else {
                this.company = Optional.of(company.get());
            }
            return this;
        }

        /**
         * <p>Company name of the recipient of the invoice.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage company(String company) {
            this.company = Optional.ofNullable(company);
            return this;
        }

        /**
         * <p>Company name of the recipient of the invoice.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "company", nulls = Nulls.SKIP)
        public _FinalStage company(Optional<String> company) {
            this.company = company;
            return this;
        }

        @java.lang.Override
        public _FinalStage purchaseOrder(Nullable<String> purchaseOrder) {
            if (purchaseOrder.isNull()) {
                this.purchaseOrder = null;
            } else if (purchaseOrder.isEmpty()) {
                this.purchaseOrder = Optional.empty();
            } else {
                this.purchaseOrder = Optional.of(purchaseOrder.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage purchaseOrder(String purchaseOrder) {
            this.purchaseOrder = Optional.ofNullable(purchaseOrder);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "purchaseOrder", nulls = Nulls.SKIP)
        public _FinalStage purchaseOrder(Optional<String> purchaseOrder) {
            this.purchaseOrder = purchaseOrder;
            return this;
        }

        @java.lang.Override
        public _FinalStage dutyAmount(Double dutyAmount) {
            this.dutyAmount = Optional.ofNullable(dutyAmount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "dutyAmount", nulls = Nulls.SKIP)
        public _FinalStage dutyAmount(Optional<Double> dutyAmount) {
            this.dutyAmount = dutyAmount;
            return this;
        }

        @java.lang.Override
        public _FinalStage freightAmount(Double freightAmount) {
            this.freightAmount = Optional.ofNullable(freightAmount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "freightAmount", nulls = Nulls.SKIP)
        public _FinalStage freightAmount(Optional<Double> freightAmount) {
            this.freightAmount = freightAmount;
            return this;
        }

        @java.lang.Override
        public _FinalStage discount(Double discount) {
            this.discount = Optional.ofNullable(discount);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "discount", nulls = Nulls.SKIP)
        public _FinalStage discount(Optional<Double> discount) {
            this.discount = discount;
            return this;
        }

        @java.lang.Override
        public _FinalStage tax(Double tax) {
            this.tax = Optional.ofNullable(tax);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "tax", nulls = Nulls.SKIP)
        public _FinalStage tax(Optional<Double> tax) {
            this.tax = tax;
            return this;
        }

        /**
         * <p>Invoice notes.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage notes(Nullable<String> notes) {
            if (notes.isNull()) {
                this.notes = null;
            } else if (notes.isEmpty()) {
                this.notes = Optional.empty();
            } else {
                this.notes = Optional.of(notes.get());
            }
            return this;
        }

        /**
         * <p>Invoice notes.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage notes(String notes) {
            this.notes = Optional.ofNullable(notes);
            return this;
        }

        /**
         * <p>Invoice notes.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "notes", nulls = Nulls.SKIP)
        public _FinalStage notes(Optional<String> notes) {
            this.notes = notes;
            return this;
        }

        @java.lang.Override
        public _FinalStage termsConditions(Nullable<String> termsConditions) {
            if (termsConditions.isNull()) {
                this.termsConditions = null;
            } else if (termsConditions.isEmpty()) {
                this.termsConditions = Optional.empty();
            } else {
                this.termsConditions = Optional.of(termsConditions.get());
            }
            return this;
        }

        @java.lang.Override
        public _FinalStage termsConditions(String termsConditions) {
            this.termsConditions = Optional.ofNullable(termsConditions);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "termsConditions", nulls = Nulls.SKIP)
        public _FinalStage termsConditions(Optional<String> termsConditions) {
            this.termsConditions = termsConditions;
            return this;
        }

        /**
         * <p>Timestamp of last payment.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage lastPaymentDate(OffsetDateTime lastPaymentDate) {
            this.lastPaymentDate = Optional.ofNullable(lastPaymentDate);
            return this;
        }

        /**
         * <p>Timestamp of last payment.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "lastPaymentDate", nulls = Nulls.SKIP)
        public _FinalStage lastPaymentDate(Optional<OffsetDateTime> lastPaymentDate) {
            this.lastPaymentDate = lastPaymentDate;
            return this;
        }

        /**
         * <p>The end date for a scheduled invoice cycle (<code>invoiceType</code> = 1).</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage invoiceEndDate(String invoiceEndDate) {
            this.invoiceEndDate = Optional.ofNullable(invoiceEndDate);
            return this;
        }

        /**
         * <p>The end date for a scheduled invoice cycle (<code>invoiceType</code> = 1).</p>
         */
        @java.lang.Override
        @JsonSetter(value = "invoiceEndDate", nulls = Nulls.SKIP)
        public _FinalStage invoiceEndDate(Optional<String> invoiceEndDate) {
            this.invoiceEndDate = invoiceEndDate;
            return this;
        }

        /**
         * <p>Invoice sent date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage invoiceSentDate(String invoiceSentDate) {
            this.invoiceSentDate = Optional.ofNullable(invoiceSentDate);
            return this;
        }

        /**
         * <p>Invoice sent date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "invoiceSentDate", nulls = Nulls.SKIP)
        public _FinalStage invoiceSentDate(Optional<String> invoiceSentDate) {
            this.invoiceSentDate = invoiceSentDate;
            return this;
        }

        /**
         * <p>Invoice due date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage invoiceDueDate(String invoiceDueDate) {
            this.invoiceDueDate = Optional.ofNullable(invoiceDueDate);
            return this;
        }

        /**
         * <p>Invoice due date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "invoiceDueDate", nulls = Nulls.SKIP)
        public _FinalStage invoiceDueDate(Optional<String> invoiceDueDate) {
            this.invoiceDueDate = invoiceDueDate;
            return this;
        }

        /**
         * <p>Invoice date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage invoiceDate(String invoiceDate) {
            this.invoiceDate = Optional.ofNullable(invoiceDate);
            return this;
        }

        /**
         * <p>Invoice date in any of the accepted formats: YYYY-MM-DD, MM/DD/YYYY.</p>
         */
        @java.lang.Override
        @JsonSetter(value = "invoiceDate", nulls = Nulls.SKIP)
        public _FinalStage invoiceDate(Optional<String> invoiceDate) {
            this.invoiceDate = invoiceDate;
            return this;
        }

        @java.lang.Override
        public QueryInvoiceResponseRecordsItem build() {
            return new QueryInvoiceResponseRecordsItem(
                    invoiceId,
                    customerId,
                    paypointId,
                    invoiceNumber,
                    invoiceDate,
                    invoiceDueDate,
                    invoiceSentDate,
                    invoiceEndDate,
                    lastPaymentDate,
                    createdAt,
                    invoiceStatus,
                    invoiceType,
                    frequency,
                    paymentTerms,
                    termsConditions,
                    notes,
                    tax,
                    discount,
                    invoiceAmount,
                    invoicePaidAmount,
                    freightAmount,
                    dutyAmount,
                    purchaseOrder,
                    firstName,
                    lastName,
                    company,
                    shippingAddress1,
                    shippingAddress2,
                    shippingCity,
                    shippingState,
                    shippingZip,
                    shippingFromZip,
                    shippingCountry,
                    shippingEmail,
                    shippingPhone,
                    summaryCommodityCode,
                    items,
                    customer,
                    paylinkId,
                    billEvents,
                    scheduledOptions,
                    paypointLegalname,
                    paypointDbaname,
                    paypointEntryname,
                    parentOrgId,
                    parentOrgName,
                    additionalData,
                    documentsRef,
                    externalPaypointId,
                    pageIdentifier,
                    additionalProperties);
        }
    }
}
