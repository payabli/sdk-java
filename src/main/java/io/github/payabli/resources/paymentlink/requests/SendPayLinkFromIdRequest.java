/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.paymentlink.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = SendPayLinkFromIdRequest.Builder.class)
public final class SendPayLinkFromIdRequest {
    private final Optional<Boolean> attachfile;

    private final Optional<String> mail2;

    private final Map<String, Object> additionalProperties;

    private SendPayLinkFromIdRequest(
            Optional<Boolean> attachfile, Optional<String> mail2, Map<String, Object> additionalProperties) {
        this.attachfile = attachfile;
        this.mail2 = mail2;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return When <code>true</code>, attaches a PDF version of invoice to the email.
     */
    @JsonProperty("attachfile")
    public Optional<Boolean> getAttachfile() {
        return attachfile;
    }

    /**
     * @return List of recipient email addresses. When there is more than one, separate them by a semicolon (;).
     */
    @JsonProperty("mail2")
    public Optional<String> getMail2() {
        return mail2;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof SendPayLinkFromIdRequest && equalTo((SendPayLinkFromIdRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(SendPayLinkFromIdRequest other) {
        return attachfile.equals(other.attachfile) && mail2.equals(other.mail2);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.attachfile, this.mail2);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> attachfile = Optional.empty();

        private Optional<String> mail2 = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(SendPayLinkFromIdRequest other) {
            attachfile(other.getAttachfile());
            mail2(other.getMail2());
            return this;
        }

        /**
         * <p>When <code>true</code>, attaches a PDF version of invoice to the email.</p>
         */
        @JsonSetter(value = "attachfile", nulls = Nulls.SKIP)
        public Builder attachfile(Optional<Boolean> attachfile) {
            this.attachfile = attachfile;
            return this;
        }

        public Builder attachfile(Boolean attachfile) {
            this.attachfile = Optional.ofNullable(attachfile);
            return this;
        }

        /**
         * <p>List of recipient email addresses. When there is more than one, separate them by a semicolon (;).</p>
         */
        @JsonSetter(value = "mail2", nulls = Nulls.SKIP)
        public Builder mail2(Optional<String> mail2) {
            this.mail2 = mail2;
            return this;
        }

        public Builder mail2(String mail2) {
            this.mail2 = Optional.ofNullable(mail2);
            return this;
        }

        public SendPayLinkFromIdRequest build() {
            return new SendPayLinkFromIdRequest(attachfile, mail2, additionalProperties);
        }
    }
}
