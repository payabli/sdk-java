/**
 * This file was auto-generated by Fern from our API Definition.
 */
package io.github.payabli.resources.querytypes.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.github.payabli.core.ObjectMappers;
import io.github.payabli.types.AchHolderType;
import io.github.payabli.types.BillData;
import io.github.payabli.types.BillingFeeDetail;
import io.github.payabli.types.QueryCFeeTransaction;
import io.github.payabli.types.QueryPaymentData;
import io.github.payabli.types.QueryResponseData;
import io.github.payabli.types.QueryTransactionEvents;
import io.github.payabli.types.QueryTransactionPayorData;
import io.github.payabli.types.SplitFundingContent;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = TransferDetailRecord.Builder.class)
public final class TransferDetailRecord {
    private final Optional<Integer> transferDetailId;

    private final Optional<Integer> transferId;

    private final Optional<String> transactionId;

    private final Optional<String> transactionNumber;

    private final Optional<String> type;

    private final Optional<String> category;

    private final Optional<Double> grossAmount;

    private final Optional<Double> chargeBackAmount;

    private final Optional<Double> returnedAmount;

    private final Optional<Double> refundAmount;

    private final Optional<Double> holdAmount;

    private final Optional<Double> releasedAmount;

    private final Optional<Double> billingFeesAmount;

    private final Optional<Double> thirdPartyPaidAmount;

    private final Optional<Double> adjustmentsAmount;

    private final Optional<Double> netTransferAmount;

    private final Optional<Double> splitFundingAmount;

    private final Optional<List<BillingFeeDetail>> billingFeesDetails;

    private final Optional<String> parentOrgName;

    private final Optional<String> paypointDbaname;

    private final Optional<String> paypointLegalname;

    private final Optional<String> paypointEntryname;

    private final Optional<String> paymentTransId;

    private final Optional<String> connectorName;

    private final Optional<String> externalProcessorInformation;

    private final Optional<String> gatewayTransId;

    private final Optional<String> orderId;

    private final Optional<String> method;

    private final Optional<String> batchNumber;

    private final Optional<Double> batchAmount;

    private final Optional<Long> payorId;

    private final Optional<QueryPaymentData> paymentData;

    private final Optional<Integer> transStatus;

    private final Optional<Long> paypointId;

    private final Optional<Double> totalAmount;

    private final Optional<Double> netAmount;

    private final Optional<Double> feeAmount;

    private final Optional<Integer> settlementStatus;

    private final Optional<String> operation;

    private final Optional<QueryResponseData> responseData;

    private final Optional<String> source;

    private final Optional<Integer> scheduleReference;

    private final Optional<Long> orgId;

    private final Optional<Long> refundId;

    private final Optional<Long> returnedId;

    private final Optional<Long> chargebackId;

    private final Optional<Long> retrievalId;

    private final Optional<Object> transAdditionalData;

    private final Optional<BillData> invoiceData;

    private final Optional<Long> entrypageId;

    private final Optional<String> externalPaypointId;

    private final Optional<Boolean> isValidatedAch;

    private final Optional<OffsetDateTime> transactionTime;

    private final Optional<QueryTransactionPayorData> customer;

    private final Optional<List<SplitFundingContent>> splitFundingInstructions;

    private final Optional<List<QueryCFeeTransaction>> cfeeTransactions;

    private final Optional<List<QueryTransactionEvents>> transactionEvents;

    private final Optional<Double> pendingFeeAmount;

    private final Optional<Boolean> riskFlagged;

    private final Optional<OffsetDateTime> riskFlaggedOn;

    private final Optional<String> riskStatus;

    private final Optional<String> riskReason;

    private final Optional<String> riskAction;

    private final Optional<Integer> riskActionCode;

    private final Optional<String> deviceId;

    private final Optional<String> achSecCode;

    private final Optional<AchHolderType> achHolderType;

    private final Optional<String> ipAddress;

    private final Optional<Boolean> isSameDayAch;

    private final Optional<String> walletType;

    private final Map<String, Object> additionalProperties;

    private TransferDetailRecord(
            Optional<Integer> transferDetailId,
            Optional<Integer> transferId,
            Optional<String> transactionId,
            Optional<String> transactionNumber,
            Optional<String> type,
            Optional<String> category,
            Optional<Double> grossAmount,
            Optional<Double> chargeBackAmount,
            Optional<Double> returnedAmount,
            Optional<Double> refundAmount,
            Optional<Double> holdAmount,
            Optional<Double> releasedAmount,
            Optional<Double> billingFeesAmount,
            Optional<Double> thirdPartyPaidAmount,
            Optional<Double> adjustmentsAmount,
            Optional<Double> netTransferAmount,
            Optional<Double> splitFundingAmount,
            Optional<List<BillingFeeDetail>> billingFeesDetails,
            Optional<String> parentOrgName,
            Optional<String> paypointDbaname,
            Optional<String> paypointLegalname,
            Optional<String> paypointEntryname,
            Optional<String> paymentTransId,
            Optional<String> connectorName,
            Optional<String> externalProcessorInformation,
            Optional<String> gatewayTransId,
            Optional<String> orderId,
            Optional<String> method,
            Optional<String> batchNumber,
            Optional<Double> batchAmount,
            Optional<Long> payorId,
            Optional<QueryPaymentData> paymentData,
            Optional<Integer> transStatus,
            Optional<Long> paypointId,
            Optional<Double> totalAmount,
            Optional<Double> netAmount,
            Optional<Double> feeAmount,
            Optional<Integer> settlementStatus,
            Optional<String> operation,
            Optional<QueryResponseData> responseData,
            Optional<String> source,
            Optional<Integer> scheduleReference,
            Optional<Long> orgId,
            Optional<Long> refundId,
            Optional<Long> returnedId,
            Optional<Long> chargebackId,
            Optional<Long> retrievalId,
            Optional<Object> transAdditionalData,
            Optional<BillData> invoiceData,
            Optional<Long> entrypageId,
            Optional<String> externalPaypointId,
            Optional<Boolean> isValidatedAch,
            Optional<OffsetDateTime> transactionTime,
            Optional<QueryTransactionPayorData> customer,
            Optional<List<SplitFundingContent>> splitFundingInstructions,
            Optional<List<QueryCFeeTransaction>> cfeeTransactions,
            Optional<List<QueryTransactionEvents>> transactionEvents,
            Optional<Double> pendingFeeAmount,
            Optional<Boolean> riskFlagged,
            Optional<OffsetDateTime> riskFlaggedOn,
            Optional<String> riskStatus,
            Optional<String> riskReason,
            Optional<String> riskAction,
            Optional<Integer> riskActionCode,
            Optional<String> deviceId,
            Optional<String> achSecCode,
            Optional<AchHolderType> achHolderType,
            Optional<String> ipAddress,
            Optional<Boolean> isSameDayAch,
            Optional<String> walletType,
            Map<String, Object> additionalProperties) {
        this.transferDetailId = transferDetailId;
        this.transferId = transferId;
        this.transactionId = transactionId;
        this.transactionNumber = transactionNumber;
        this.type = type;
        this.category = category;
        this.grossAmount = grossAmount;
        this.chargeBackAmount = chargeBackAmount;
        this.returnedAmount = returnedAmount;
        this.refundAmount = refundAmount;
        this.holdAmount = holdAmount;
        this.releasedAmount = releasedAmount;
        this.billingFeesAmount = billingFeesAmount;
        this.thirdPartyPaidAmount = thirdPartyPaidAmount;
        this.adjustmentsAmount = adjustmentsAmount;
        this.netTransferAmount = netTransferAmount;
        this.splitFundingAmount = splitFundingAmount;
        this.billingFeesDetails = billingFeesDetails;
        this.parentOrgName = parentOrgName;
        this.paypointDbaname = paypointDbaname;
        this.paypointLegalname = paypointLegalname;
        this.paypointEntryname = paypointEntryname;
        this.paymentTransId = paymentTransId;
        this.connectorName = connectorName;
        this.externalProcessorInformation = externalProcessorInformation;
        this.gatewayTransId = gatewayTransId;
        this.orderId = orderId;
        this.method = method;
        this.batchNumber = batchNumber;
        this.batchAmount = batchAmount;
        this.payorId = payorId;
        this.paymentData = paymentData;
        this.transStatus = transStatus;
        this.paypointId = paypointId;
        this.totalAmount = totalAmount;
        this.netAmount = netAmount;
        this.feeAmount = feeAmount;
        this.settlementStatus = settlementStatus;
        this.operation = operation;
        this.responseData = responseData;
        this.source = source;
        this.scheduleReference = scheduleReference;
        this.orgId = orgId;
        this.refundId = refundId;
        this.returnedId = returnedId;
        this.chargebackId = chargebackId;
        this.retrievalId = retrievalId;
        this.transAdditionalData = transAdditionalData;
        this.invoiceData = invoiceData;
        this.entrypageId = entrypageId;
        this.externalPaypointId = externalPaypointId;
        this.isValidatedAch = isValidatedAch;
        this.transactionTime = transactionTime;
        this.customer = customer;
        this.splitFundingInstructions = splitFundingInstructions;
        this.cfeeTransactions = cfeeTransactions;
        this.transactionEvents = transactionEvents;
        this.pendingFeeAmount = pendingFeeAmount;
        this.riskFlagged = riskFlagged;
        this.riskFlaggedOn = riskFlaggedOn;
        this.riskStatus = riskStatus;
        this.riskReason = riskReason;
        this.riskAction = riskAction;
        this.riskActionCode = riskActionCode;
        this.deviceId = deviceId;
        this.achSecCode = achSecCode;
        this.achHolderType = achHolderType;
        this.ipAddress = ipAddress;
        this.isSameDayAch = isSameDayAch;
        this.walletType = walletType;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Unique identifier for the transfer detail record
     */
    @JsonProperty("transferDetailId")
    public Optional<Integer> getTransferDetailId() {
        return transferDetailId;
    }

    /**
     * @return The ID of the transfer this detail belongs to
     */
    @JsonProperty("transferId")
    public Optional<Integer> getTransferId() {
        return transferId;
    }

    /**
     * @return The transaction ID in Payabli's system
     */
    @JsonProperty("transactionId")
    public Optional<String> getTransactionId() {
        return transactionId;
    }

    /**
     * @return External transaction reference number
     */
    @JsonProperty("transactionNumber")
    public Optional<String> getTransactionNumber() {
        return transactionNumber;
    }

    /**
     * @return The transaction type (credit or debit)
     */
    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    /**
     * @return A field used to categorize the transaction details. Values include: auth, decline, refund, adj, cb, split
     */
    @JsonProperty("category")
    public Optional<String> getCategory() {
        return category;
    }

    /**
     * @return The gross amount of the transaction
     */
    @JsonProperty("grossAmount")
    public Optional<Double> getGrossAmount() {
        return grossAmount;
    }

    /**
     * @return Chargeback amount deducted from transaction
     */
    @JsonProperty("chargeBackAmount")
    public Optional<Double> getChargeBackAmount() {
        return chargeBackAmount;
    }

    /**
     * @return ACH return amount deducted from transaction
     */
    @JsonProperty("returnedAmount")
    public Optional<Double> getReturnedAmount() {
        return returnedAmount;
    }

    /**
     * @return Refund amount deducted from transaction
     */
    @JsonProperty("refundAmount")
    public Optional<Double> getRefundAmount() {
        return refundAmount;
    }

    /**
     * @return Amount being held for fraud or risk concerns
     */
    @JsonProperty("holdAmount")
    public Optional<Double> getHoldAmount() {
        return holdAmount;
    }

    /**
     * @return Previously held funds that have been released after a risk review
     */
    @JsonProperty("releasedAmount")
    public Optional<Double> getReleasedAmount() {
        return releasedAmount;
    }

    /**
     * @return Charges applied for transactions and services
     */
    @JsonProperty("billingFeesAmount")
    public Optional<Double> getBillingFeesAmount() {
        return billingFeesAmount;
    }

    /**
     * @return Payments captured in the batch cycle that are deposited separately. For example,  checks or cash payments recorded in the batch but not deposited via Payabli,  or card brands making a direct transfer in certain situations.
     */
    @JsonProperty("thirdPartyPaidAmount")
    public Optional<Double> getThirdPartyPaidAmount() {
        return thirdPartyPaidAmount;
    }

    /**
     * @return Corrections applied to Billing &amp; Fees charges
     */
    @JsonProperty("adjustmentsAmount")
    public Optional<Double> getAdjustmentsAmount() {
        return adjustmentsAmount;
    }

    /**
     * @return The net amount after all deductions
     */
    @JsonProperty("netTransferAmount")
    public Optional<Double> getNetTransferAmount() {
        return netTransferAmount;
    }

    /**
     * @return Total amount directed to split funding destinations
     */
    @JsonProperty("splitFundingAmount")
    public Optional<Double> getSplitFundingAmount() {
        return splitFundingAmount;
    }

    @JsonProperty("billingFeesDetails")
    public Optional<List<BillingFeeDetail>> getBillingFeesDetails() {
        return billingFeesDetails;
    }

    @JsonProperty("ParentOrgName")
    public Optional<String> getParentOrgName() {
        return parentOrgName;
    }

    @JsonProperty("PaypointDbaname")
    public Optional<String> getPaypointDbaname() {
        return paypointDbaname;
    }

    @JsonProperty("PaypointLegalname")
    public Optional<String> getPaypointLegalname() {
        return paypointLegalname;
    }

    /**
     * @return The paypoint's entryname
     */
    @JsonProperty("PaypointEntryname")
    public Optional<String> getPaypointEntryname() {
        return paypointEntryname;
    }

    /**
     * @return The transaction ID for the payment
     */
    @JsonProperty("PaymentTransId")
    public Optional<String> getPaymentTransId() {
        return paymentTransId;
    }

    /**
     * @return The payment connector used to process the transaction
     */
    @JsonProperty("ConnectorName")
    public Optional<String> getConnectorName() {
        return connectorName;
    }

    @JsonProperty("ExternalProcessorInformation")
    public Optional<String> getExternalProcessorInformation() {
        return externalProcessorInformation;
    }

    /**
     * @return Internal identifier used for processing
     */
    @JsonProperty("GatewayTransId")
    public Optional<String> getGatewayTransId() {
        return gatewayTransId;
    }

    @JsonProperty("OrderId")
    public Optional<String> getOrderId() {
        return orderId;
    }

    /**
     * @return Payment method used: card, ach, or wallet
     */
    @JsonProperty("Method")
    public Optional<String> getMethod() {
        return method;
    }

    @JsonProperty("BatchNumber")
    public Optional<String> getBatchNumber() {
        return batchNumber;
    }

    /**
     * @return The amount of the batch
     */
    @JsonProperty("BatchAmount")
    public Optional<Double> getBatchAmount() {
        return batchAmount;
    }

    /**
     * @return Unique ID for customer linked to the transaction
     */
    @JsonProperty("PayorId")
    public Optional<Long> getPayorId() {
        return payorId;
    }

    @JsonProperty("PaymentData")
    public Optional<QueryPaymentData> getPaymentData() {
        return paymentData;
    }

    /**
     * @return Status of transaction. See <a href="/developers/references/money-in-statuses#money-in-transaction-status">the
     * docs</a> for a
     * full reference.
     */
    @JsonProperty("TransStatus")
    public Optional<Integer> getTransStatus() {
        return transStatus;
    }

    @JsonProperty("PaypointId")
    public Optional<Long> getPaypointId() {
        return paypointId;
    }

    /**
     * @return Transaction total amount (including service fee or sub-charge)
     */
    @JsonProperty("TotalAmount")
    public Optional<Double> getTotalAmount() {
        return totalAmount;
    }

    /**
     * @return Net amount paid
     */
    @JsonProperty("NetAmount")
    public Optional<Double> getNetAmount() {
        return netAmount;
    }

    @JsonProperty("FeeAmount")
    public Optional<Double> getFeeAmount() {
        return feeAmount;
    }

    /**
     * @return Settlement status for transaction. See <a href="/developers/references/money-in-statuses#payment-funding-status">the docs</a> for a full reference.
     */
    @JsonProperty("SettlementStatus")
    public Optional<Integer> getSettlementStatus() {
        return settlementStatus;
    }

    @JsonProperty("Operation")
    public Optional<String> getOperation() {
        return operation;
    }

    @JsonProperty("ResponseData")
    public Optional<QueryResponseData> getResponseData() {
        return responseData;
    }

    @JsonProperty("Source")
    public Optional<String> getSource() {
        return source;
    }

    /**
     * @return Reference to the subscription or schedule that originated the transaction
     */
    @JsonProperty("ScheduleReference")
    public Optional<Integer> getScheduleReference() {
        return scheduleReference;
    }

    @JsonProperty("OrgId")
    public Optional<Long> getOrgId() {
        return orgId;
    }

    @JsonProperty("RefundId")
    public Optional<Long> getRefundId() {
        return refundId;
    }

    @JsonProperty("ReturnedId")
    public Optional<Long> getReturnedId() {
        return returnedId;
    }

    @JsonProperty("ChargebackId")
    public Optional<Long> getChargebackId() {
        return chargebackId;
    }

    @JsonProperty("RetrievalId")
    public Optional<Long> getRetrievalId() {
        return retrievalId;
    }

    /**
     * @return Additional transaction data
     */
    @JsonProperty("TransAdditionalData")
    public Optional<Object> getTransAdditionalData() {
        return transAdditionalData;
    }

    /**
     * @return Associated invoice data
     */
    @JsonProperty("invoiceData")
    public Optional<BillData> getInvoiceData() {
        return invoiceData;
    }

    @JsonProperty("EntrypageId")
    public Optional<Long> getEntrypageId() {
        return entrypageId;
    }

    @JsonProperty("externalPaypointID")
    public Optional<String> getExternalPaypointId() {
        return externalPaypointId;
    }

    /**
     * @return Indicates whether the ACH account has been validated
     */
    @JsonProperty("IsValidatedACH")
    public Optional<Boolean> getIsValidatedAch() {
        return isValidatedAch;
    }

    /**
     * @return Transaction date and time, in UTC
     */
    @JsonProperty("TransactionTime")
    public Optional<OffsetDateTime> getTransactionTime() {
        return transactionTime;
    }

    @JsonProperty("Customer")
    public Optional<QueryTransactionPayorData> getCustomer() {
        return customer;
    }

    @JsonProperty("splitFundingInstructions")
    public Optional<List<SplitFundingContent>> getSplitFundingInstructions() {
        return splitFundingInstructions;
    }

    @JsonProperty("CfeeTransactions")
    public Optional<List<QueryCFeeTransaction>> getCfeeTransactions() {
        return cfeeTransactions;
    }

    @JsonProperty("TransactionEvents")
    public Optional<List<QueryTransactionEvents>> getTransactionEvents() {
        return transactionEvents;
    }

    @JsonProperty("PendingFeeAmount")
    public Optional<Double> getPendingFeeAmount() {
        return pendingFeeAmount;
    }

    @JsonProperty("RiskFlagged")
    public Optional<Boolean> getRiskFlagged() {
        return riskFlagged;
    }

    @JsonProperty("RiskFlaggedOn")
    public Optional<OffsetDateTime> getRiskFlaggedOn() {
        return riskFlaggedOn;
    }

    @JsonProperty("RiskStatus")
    public Optional<String> getRiskStatus() {
        return riskStatus;
    }

    @JsonProperty("RiskReason")
    public Optional<String> getRiskReason() {
        return riskReason;
    }

    @JsonProperty("RiskAction")
    public Optional<String> getRiskAction() {
        return riskAction;
    }

    @JsonProperty("RiskActionCode")
    public Optional<Integer> getRiskActionCode() {
        return riskActionCode;
    }

    @JsonProperty("DeviceId")
    public Optional<String> getDeviceId() {
        return deviceId;
    }

    @JsonProperty("AchSecCode")
    public Optional<String> getAchSecCode() {
        return achSecCode;
    }

    @JsonProperty("AchHolderType")
    public Optional<AchHolderType> getAchHolderType() {
        return achHolderType;
    }

    @JsonProperty("IpAddress")
    public Optional<String> getIpAddress() {
        return ipAddress;
    }

    /**
     * @return Indicates if this was a same-day ACH transaction.
     */
    @JsonProperty("IsSameDayACH")
    public Optional<Boolean> getIsSameDayAch() {
        return isSameDayAch;
    }

    /**
     * @return Type of wallet used for the transaction (if applicable)
     */
    @JsonProperty("WalletType")
    public Optional<String> getWalletType() {
        return walletType;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof TransferDetailRecord && equalTo((TransferDetailRecord) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(TransferDetailRecord other) {
        return transferDetailId.equals(other.transferDetailId)
                && transferId.equals(other.transferId)
                && transactionId.equals(other.transactionId)
                && transactionNumber.equals(other.transactionNumber)
                && type.equals(other.type)
                && category.equals(other.category)
                && grossAmount.equals(other.grossAmount)
                && chargeBackAmount.equals(other.chargeBackAmount)
                && returnedAmount.equals(other.returnedAmount)
                && refundAmount.equals(other.refundAmount)
                && holdAmount.equals(other.holdAmount)
                && releasedAmount.equals(other.releasedAmount)
                && billingFeesAmount.equals(other.billingFeesAmount)
                && thirdPartyPaidAmount.equals(other.thirdPartyPaidAmount)
                && adjustmentsAmount.equals(other.adjustmentsAmount)
                && netTransferAmount.equals(other.netTransferAmount)
                && splitFundingAmount.equals(other.splitFundingAmount)
                && billingFeesDetails.equals(other.billingFeesDetails)
                && parentOrgName.equals(other.parentOrgName)
                && paypointDbaname.equals(other.paypointDbaname)
                && paypointLegalname.equals(other.paypointLegalname)
                && paypointEntryname.equals(other.paypointEntryname)
                && paymentTransId.equals(other.paymentTransId)
                && connectorName.equals(other.connectorName)
                && externalProcessorInformation.equals(other.externalProcessorInformation)
                && gatewayTransId.equals(other.gatewayTransId)
                && orderId.equals(other.orderId)
                && method.equals(other.method)
                && batchNumber.equals(other.batchNumber)
                && batchAmount.equals(other.batchAmount)
                && payorId.equals(other.payorId)
                && paymentData.equals(other.paymentData)
                && transStatus.equals(other.transStatus)
                && paypointId.equals(other.paypointId)
                && totalAmount.equals(other.totalAmount)
                && netAmount.equals(other.netAmount)
                && feeAmount.equals(other.feeAmount)
                && settlementStatus.equals(other.settlementStatus)
                && operation.equals(other.operation)
                && responseData.equals(other.responseData)
                && source.equals(other.source)
                && scheduleReference.equals(other.scheduleReference)
                && orgId.equals(other.orgId)
                && refundId.equals(other.refundId)
                && returnedId.equals(other.returnedId)
                && chargebackId.equals(other.chargebackId)
                && retrievalId.equals(other.retrievalId)
                && transAdditionalData.equals(other.transAdditionalData)
                && invoiceData.equals(other.invoiceData)
                && entrypageId.equals(other.entrypageId)
                && externalPaypointId.equals(other.externalPaypointId)
                && isValidatedAch.equals(other.isValidatedAch)
                && transactionTime.equals(other.transactionTime)
                && customer.equals(other.customer)
                && splitFundingInstructions.equals(other.splitFundingInstructions)
                && cfeeTransactions.equals(other.cfeeTransactions)
                && transactionEvents.equals(other.transactionEvents)
                && pendingFeeAmount.equals(other.pendingFeeAmount)
                && riskFlagged.equals(other.riskFlagged)
                && riskFlaggedOn.equals(other.riskFlaggedOn)
                && riskStatus.equals(other.riskStatus)
                && riskReason.equals(other.riskReason)
                && riskAction.equals(other.riskAction)
                && riskActionCode.equals(other.riskActionCode)
                && deviceId.equals(other.deviceId)
                && achSecCode.equals(other.achSecCode)
                && achHolderType.equals(other.achHolderType)
                && ipAddress.equals(other.ipAddress)
                && isSameDayAch.equals(other.isSameDayAch)
                && walletType.equals(other.walletType);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.transferDetailId,
                this.transferId,
                this.transactionId,
                this.transactionNumber,
                this.type,
                this.category,
                this.grossAmount,
                this.chargeBackAmount,
                this.returnedAmount,
                this.refundAmount,
                this.holdAmount,
                this.releasedAmount,
                this.billingFeesAmount,
                this.thirdPartyPaidAmount,
                this.adjustmentsAmount,
                this.netTransferAmount,
                this.splitFundingAmount,
                this.billingFeesDetails,
                this.parentOrgName,
                this.paypointDbaname,
                this.paypointLegalname,
                this.paypointEntryname,
                this.paymentTransId,
                this.connectorName,
                this.externalProcessorInformation,
                this.gatewayTransId,
                this.orderId,
                this.method,
                this.batchNumber,
                this.batchAmount,
                this.payorId,
                this.paymentData,
                this.transStatus,
                this.paypointId,
                this.totalAmount,
                this.netAmount,
                this.feeAmount,
                this.settlementStatus,
                this.operation,
                this.responseData,
                this.source,
                this.scheduleReference,
                this.orgId,
                this.refundId,
                this.returnedId,
                this.chargebackId,
                this.retrievalId,
                this.transAdditionalData,
                this.invoiceData,
                this.entrypageId,
                this.externalPaypointId,
                this.isValidatedAch,
                this.transactionTime,
                this.customer,
                this.splitFundingInstructions,
                this.cfeeTransactions,
                this.transactionEvents,
                this.pendingFeeAmount,
                this.riskFlagged,
                this.riskFlaggedOn,
                this.riskStatus,
                this.riskReason,
                this.riskAction,
                this.riskActionCode,
                this.deviceId,
                this.achSecCode,
                this.achHolderType,
                this.ipAddress,
                this.isSameDayAch,
                this.walletType);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> transferDetailId = Optional.empty();

        private Optional<Integer> transferId = Optional.empty();

        private Optional<String> transactionId = Optional.empty();

        private Optional<String> transactionNumber = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<String> category = Optional.empty();

        private Optional<Double> grossAmount = Optional.empty();

        private Optional<Double> chargeBackAmount = Optional.empty();

        private Optional<Double> returnedAmount = Optional.empty();

        private Optional<Double> refundAmount = Optional.empty();

        private Optional<Double> holdAmount = Optional.empty();

        private Optional<Double> releasedAmount = Optional.empty();

        private Optional<Double> billingFeesAmount = Optional.empty();

        private Optional<Double> thirdPartyPaidAmount = Optional.empty();

        private Optional<Double> adjustmentsAmount = Optional.empty();

        private Optional<Double> netTransferAmount = Optional.empty();

        private Optional<Double> splitFundingAmount = Optional.empty();

        private Optional<List<BillingFeeDetail>> billingFeesDetails = Optional.empty();

        private Optional<String> parentOrgName = Optional.empty();

        private Optional<String> paypointDbaname = Optional.empty();

        private Optional<String> paypointLegalname = Optional.empty();

        private Optional<String> paypointEntryname = Optional.empty();

        private Optional<String> paymentTransId = Optional.empty();

        private Optional<String> connectorName = Optional.empty();

        private Optional<String> externalProcessorInformation = Optional.empty();

        private Optional<String> gatewayTransId = Optional.empty();

        private Optional<String> orderId = Optional.empty();

        private Optional<String> method = Optional.empty();

        private Optional<String> batchNumber = Optional.empty();

        private Optional<Double> batchAmount = Optional.empty();

        private Optional<Long> payorId = Optional.empty();

        private Optional<QueryPaymentData> paymentData = Optional.empty();

        private Optional<Integer> transStatus = Optional.empty();

        private Optional<Long> paypointId = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<Double> netAmount = Optional.empty();

        private Optional<Double> feeAmount = Optional.empty();

        private Optional<Integer> settlementStatus = Optional.empty();

        private Optional<String> operation = Optional.empty();

        private Optional<QueryResponseData> responseData = Optional.empty();

        private Optional<String> source = Optional.empty();

        private Optional<Integer> scheduleReference = Optional.empty();

        private Optional<Long> orgId = Optional.empty();

        private Optional<Long> refundId = Optional.empty();

        private Optional<Long> returnedId = Optional.empty();

        private Optional<Long> chargebackId = Optional.empty();

        private Optional<Long> retrievalId = Optional.empty();

        private Optional<Object> transAdditionalData = Optional.empty();

        private Optional<BillData> invoiceData = Optional.empty();

        private Optional<Long> entrypageId = Optional.empty();

        private Optional<String> externalPaypointId = Optional.empty();

        private Optional<Boolean> isValidatedAch = Optional.empty();

        private Optional<OffsetDateTime> transactionTime = Optional.empty();

        private Optional<QueryTransactionPayorData> customer = Optional.empty();

        private Optional<List<SplitFundingContent>> splitFundingInstructions = Optional.empty();

        private Optional<List<QueryCFeeTransaction>> cfeeTransactions = Optional.empty();

        private Optional<List<QueryTransactionEvents>> transactionEvents = Optional.empty();

        private Optional<Double> pendingFeeAmount = Optional.empty();

        private Optional<Boolean> riskFlagged = Optional.empty();

        private Optional<OffsetDateTime> riskFlaggedOn = Optional.empty();

        private Optional<String> riskStatus = Optional.empty();

        private Optional<String> riskReason = Optional.empty();

        private Optional<String> riskAction = Optional.empty();

        private Optional<Integer> riskActionCode = Optional.empty();

        private Optional<String> deviceId = Optional.empty();

        private Optional<String> achSecCode = Optional.empty();

        private Optional<AchHolderType> achHolderType = Optional.empty();

        private Optional<String> ipAddress = Optional.empty();

        private Optional<Boolean> isSameDayAch = Optional.empty();

        private Optional<String> walletType = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(TransferDetailRecord other) {
            transferDetailId(other.getTransferDetailId());
            transferId(other.getTransferId());
            transactionId(other.getTransactionId());
            transactionNumber(other.getTransactionNumber());
            type(other.getType());
            category(other.getCategory());
            grossAmount(other.getGrossAmount());
            chargeBackAmount(other.getChargeBackAmount());
            returnedAmount(other.getReturnedAmount());
            refundAmount(other.getRefundAmount());
            holdAmount(other.getHoldAmount());
            releasedAmount(other.getReleasedAmount());
            billingFeesAmount(other.getBillingFeesAmount());
            thirdPartyPaidAmount(other.getThirdPartyPaidAmount());
            adjustmentsAmount(other.getAdjustmentsAmount());
            netTransferAmount(other.getNetTransferAmount());
            splitFundingAmount(other.getSplitFundingAmount());
            billingFeesDetails(other.getBillingFeesDetails());
            parentOrgName(other.getParentOrgName());
            paypointDbaname(other.getPaypointDbaname());
            paypointLegalname(other.getPaypointLegalname());
            paypointEntryname(other.getPaypointEntryname());
            paymentTransId(other.getPaymentTransId());
            connectorName(other.getConnectorName());
            externalProcessorInformation(other.getExternalProcessorInformation());
            gatewayTransId(other.getGatewayTransId());
            orderId(other.getOrderId());
            method(other.getMethod());
            batchNumber(other.getBatchNumber());
            batchAmount(other.getBatchAmount());
            payorId(other.getPayorId());
            paymentData(other.getPaymentData());
            transStatus(other.getTransStatus());
            paypointId(other.getPaypointId());
            totalAmount(other.getTotalAmount());
            netAmount(other.getNetAmount());
            feeAmount(other.getFeeAmount());
            settlementStatus(other.getSettlementStatus());
            operation(other.getOperation());
            responseData(other.getResponseData());
            source(other.getSource());
            scheduleReference(other.getScheduleReference());
            orgId(other.getOrgId());
            refundId(other.getRefundId());
            returnedId(other.getReturnedId());
            chargebackId(other.getChargebackId());
            retrievalId(other.getRetrievalId());
            transAdditionalData(other.getTransAdditionalData());
            invoiceData(other.getInvoiceData());
            entrypageId(other.getEntrypageId());
            externalPaypointId(other.getExternalPaypointId());
            isValidatedAch(other.getIsValidatedAch());
            transactionTime(other.getTransactionTime());
            customer(other.getCustomer());
            splitFundingInstructions(other.getSplitFundingInstructions());
            cfeeTransactions(other.getCfeeTransactions());
            transactionEvents(other.getTransactionEvents());
            pendingFeeAmount(other.getPendingFeeAmount());
            riskFlagged(other.getRiskFlagged());
            riskFlaggedOn(other.getRiskFlaggedOn());
            riskStatus(other.getRiskStatus());
            riskReason(other.getRiskReason());
            riskAction(other.getRiskAction());
            riskActionCode(other.getRiskActionCode());
            deviceId(other.getDeviceId());
            achSecCode(other.getAchSecCode());
            achHolderType(other.getAchHolderType());
            ipAddress(other.getIpAddress());
            isSameDayAch(other.getIsSameDayAch());
            walletType(other.getWalletType());
            return this;
        }

        /**
         * <p>Unique identifier for the transfer detail record</p>
         */
        @JsonSetter(value = "transferDetailId", nulls = Nulls.SKIP)
        public Builder transferDetailId(Optional<Integer> transferDetailId) {
            this.transferDetailId = transferDetailId;
            return this;
        }

        public Builder transferDetailId(Integer transferDetailId) {
            this.transferDetailId = Optional.ofNullable(transferDetailId);
            return this;
        }

        /**
         * <p>The ID of the transfer this detail belongs to</p>
         */
        @JsonSetter(value = "transferId", nulls = Nulls.SKIP)
        public Builder transferId(Optional<Integer> transferId) {
            this.transferId = transferId;
            return this;
        }

        public Builder transferId(Integer transferId) {
            this.transferId = Optional.ofNullable(transferId);
            return this;
        }

        /**
         * <p>The transaction ID in Payabli's system</p>
         */
        @JsonSetter(value = "transactionId", nulls = Nulls.SKIP)
        public Builder transactionId(Optional<String> transactionId) {
            this.transactionId = transactionId;
            return this;
        }

        public Builder transactionId(String transactionId) {
            this.transactionId = Optional.ofNullable(transactionId);
            return this;
        }

        /**
         * <p>External transaction reference number</p>
         */
        @JsonSetter(value = "transactionNumber", nulls = Nulls.SKIP)
        public Builder transactionNumber(Optional<String> transactionNumber) {
            this.transactionNumber = transactionNumber;
            return this;
        }

        public Builder transactionNumber(String transactionNumber) {
            this.transactionNumber = Optional.ofNullable(transactionNumber);
            return this;
        }

        /**
         * <p>The transaction type (credit or debit)</p>
         */
        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>A field used to categorize the transaction details. Values include: auth, decline, refund, adj, cb, split</p>
         */
        @JsonSetter(value = "category", nulls = Nulls.SKIP)
        public Builder category(Optional<String> category) {
            this.category = category;
            return this;
        }

        public Builder category(String category) {
            this.category = Optional.ofNullable(category);
            return this;
        }

        /**
         * <p>The gross amount of the transaction</p>
         */
        @JsonSetter(value = "grossAmount", nulls = Nulls.SKIP)
        public Builder grossAmount(Optional<Double> grossAmount) {
            this.grossAmount = grossAmount;
            return this;
        }

        public Builder grossAmount(Double grossAmount) {
            this.grossAmount = Optional.ofNullable(grossAmount);
            return this;
        }

        /**
         * <p>Chargeback amount deducted from transaction</p>
         */
        @JsonSetter(value = "chargeBackAmount", nulls = Nulls.SKIP)
        public Builder chargeBackAmount(Optional<Double> chargeBackAmount) {
            this.chargeBackAmount = chargeBackAmount;
            return this;
        }

        public Builder chargeBackAmount(Double chargeBackAmount) {
            this.chargeBackAmount = Optional.ofNullable(chargeBackAmount);
            return this;
        }

        /**
         * <p>ACH return amount deducted from transaction</p>
         */
        @JsonSetter(value = "returnedAmount", nulls = Nulls.SKIP)
        public Builder returnedAmount(Optional<Double> returnedAmount) {
            this.returnedAmount = returnedAmount;
            return this;
        }

        public Builder returnedAmount(Double returnedAmount) {
            this.returnedAmount = Optional.ofNullable(returnedAmount);
            return this;
        }

        /**
         * <p>Refund amount deducted from transaction</p>
         */
        @JsonSetter(value = "refundAmount", nulls = Nulls.SKIP)
        public Builder refundAmount(Optional<Double> refundAmount) {
            this.refundAmount = refundAmount;
            return this;
        }

        public Builder refundAmount(Double refundAmount) {
            this.refundAmount = Optional.ofNullable(refundAmount);
            return this;
        }

        /**
         * <p>Amount being held for fraud or risk concerns</p>
         */
        @JsonSetter(value = "holdAmount", nulls = Nulls.SKIP)
        public Builder holdAmount(Optional<Double> holdAmount) {
            this.holdAmount = holdAmount;
            return this;
        }

        public Builder holdAmount(Double holdAmount) {
            this.holdAmount = Optional.ofNullable(holdAmount);
            return this;
        }

        /**
         * <p>Previously held funds that have been released after a risk review</p>
         */
        @JsonSetter(value = "releasedAmount", nulls = Nulls.SKIP)
        public Builder releasedAmount(Optional<Double> releasedAmount) {
            this.releasedAmount = releasedAmount;
            return this;
        }

        public Builder releasedAmount(Double releasedAmount) {
            this.releasedAmount = Optional.ofNullable(releasedAmount);
            return this;
        }

        /**
         * <p>Charges applied for transactions and services</p>
         */
        @JsonSetter(value = "billingFeesAmount", nulls = Nulls.SKIP)
        public Builder billingFeesAmount(Optional<Double> billingFeesAmount) {
            this.billingFeesAmount = billingFeesAmount;
            return this;
        }

        public Builder billingFeesAmount(Double billingFeesAmount) {
            this.billingFeesAmount = Optional.ofNullable(billingFeesAmount);
            return this;
        }

        /**
         * <p>Payments captured in the batch cycle that are deposited separately. For example,  checks or cash payments recorded in the batch but not deposited via Payabli,  or card brands making a direct transfer in certain situations.</p>
         */
        @JsonSetter(value = "thirdPartyPaidAmount", nulls = Nulls.SKIP)
        public Builder thirdPartyPaidAmount(Optional<Double> thirdPartyPaidAmount) {
            this.thirdPartyPaidAmount = thirdPartyPaidAmount;
            return this;
        }

        public Builder thirdPartyPaidAmount(Double thirdPartyPaidAmount) {
            this.thirdPartyPaidAmount = Optional.ofNullable(thirdPartyPaidAmount);
            return this;
        }

        /**
         * <p>Corrections applied to Billing &amp; Fees charges</p>
         */
        @JsonSetter(value = "adjustmentsAmount", nulls = Nulls.SKIP)
        public Builder adjustmentsAmount(Optional<Double> adjustmentsAmount) {
            this.adjustmentsAmount = adjustmentsAmount;
            return this;
        }

        public Builder adjustmentsAmount(Double adjustmentsAmount) {
            this.adjustmentsAmount = Optional.ofNullable(adjustmentsAmount);
            return this;
        }

        /**
         * <p>The net amount after all deductions</p>
         */
        @JsonSetter(value = "netTransferAmount", nulls = Nulls.SKIP)
        public Builder netTransferAmount(Optional<Double> netTransferAmount) {
            this.netTransferAmount = netTransferAmount;
            return this;
        }

        public Builder netTransferAmount(Double netTransferAmount) {
            this.netTransferAmount = Optional.ofNullable(netTransferAmount);
            return this;
        }

        /**
         * <p>Total amount directed to split funding destinations</p>
         */
        @JsonSetter(value = "splitFundingAmount", nulls = Nulls.SKIP)
        public Builder splitFundingAmount(Optional<Double> splitFundingAmount) {
            this.splitFundingAmount = splitFundingAmount;
            return this;
        }

        public Builder splitFundingAmount(Double splitFundingAmount) {
            this.splitFundingAmount = Optional.ofNullable(splitFundingAmount);
            return this;
        }

        @JsonSetter(value = "billingFeesDetails", nulls = Nulls.SKIP)
        public Builder billingFeesDetails(Optional<List<BillingFeeDetail>> billingFeesDetails) {
            this.billingFeesDetails = billingFeesDetails;
            return this;
        }

        public Builder billingFeesDetails(List<BillingFeeDetail> billingFeesDetails) {
            this.billingFeesDetails = Optional.ofNullable(billingFeesDetails);
            return this;
        }

        @JsonSetter(value = "ParentOrgName", nulls = Nulls.SKIP)
        public Builder parentOrgName(Optional<String> parentOrgName) {
            this.parentOrgName = parentOrgName;
            return this;
        }

        public Builder parentOrgName(String parentOrgName) {
            this.parentOrgName = Optional.ofNullable(parentOrgName);
            return this;
        }

        @JsonSetter(value = "PaypointDbaname", nulls = Nulls.SKIP)
        public Builder paypointDbaname(Optional<String> paypointDbaname) {
            this.paypointDbaname = paypointDbaname;
            return this;
        }

        public Builder paypointDbaname(String paypointDbaname) {
            this.paypointDbaname = Optional.ofNullable(paypointDbaname);
            return this;
        }

        @JsonSetter(value = "PaypointLegalname", nulls = Nulls.SKIP)
        public Builder paypointLegalname(Optional<String> paypointLegalname) {
            this.paypointLegalname = paypointLegalname;
            return this;
        }

        public Builder paypointLegalname(String paypointLegalname) {
            this.paypointLegalname = Optional.ofNullable(paypointLegalname);
            return this;
        }

        /**
         * <p>The paypoint's entryname</p>
         */
        @JsonSetter(value = "PaypointEntryname", nulls = Nulls.SKIP)
        public Builder paypointEntryname(Optional<String> paypointEntryname) {
            this.paypointEntryname = paypointEntryname;
            return this;
        }

        public Builder paypointEntryname(String paypointEntryname) {
            this.paypointEntryname = Optional.ofNullable(paypointEntryname);
            return this;
        }

        /**
         * <p>The transaction ID for the payment</p>
         */
        @JsonSetter(value = "PaymentTransId", nulls = Nulls.SKIP)
        public Builder paymentTransId(Optional<String> paymentTransId) {
            this.paymentTransId = paymentTransId;
            return this;
        }

        public Builder paymentTransId(String paymentTransId) {
            this.paymentTransId = Optional.ofNullable(paymentTransId);
            return this;
        }

        /**
         * <p>The payment connector used to process the transaction</p>
         */
        @JsonSetter(value = "ConnectorName", nulls = Nulls.SKIP)
        public Builder connectorName(Optional<String> connectorName) {
            this.connectorName = connectorName;
            return this;
        }

        public Builder connectorName(String connectorName) {
            this.connectorName = Optional.ofNullable(connectorName);
            return this;
        }

        @JsonSetter(value = "ExternalProcessorInformation", nulls = Nulls.SKIP)
        public Builder externalProcessorInformation(Optional<String> externalProcessorInformation) {
            this.externalProcessorInformation = externalProcessorInformation;
            return this;
        }

        public Builder externalProcessorInformation(String externalProcessorInformation) {
            this.externalProcessorInformation = Optional.ofNullable(externalProcessorInformation);
            return this;
        }

        /**
         * <p>Internal identifier used for processing</p>
         */
        @JsonSetter(value = "GatewayTransId", nulls = Nulls.SKIP)
        public Builder gatewayTransId(Optional<String> gatewayTransId) {
            this.gatewayTransId = gatewayTransId;
            return this;
        }

        public Builder gatewayTransId(String gatewayTransId) {
            this.gatewayTransId = Optional.ofNullable(gatewayTransId);
            return this;
        }

        @JsonSetter(value = "OrderId", nulls = Nulls.SKIP)
        public Builder orderId(Optional<String> orderId) {
            this.orderId = orderId;
            return this;
        }

        public Builder orderId(String orderId) {
            this.orderId = Optional.ofNullable(orderId);
            return this;
        }

        /**
         * <p>Payment method used: card, ach, or wallet</p>
         */
        @JsonSetter(value = "Method", nulls = Nulls.SKIP)
        public Builder method(Optional<String> method) {
            this.method = method;
            return this;
        }

        public Builder method(String method) {
            this.method = Optional.ofNullable(method);
            return this;
        }

        @JsonSetter(value = "BatchNumber", nulls = Nulls.SKIP)
        public Builder batchNumber(Optional<String> batchNumber) {
            this.batchNumber = batchNumber;
            return this;
        }

        public Builder batchNumber(String batchNumber) {
            this.batchNumber = Optional.ofNullable(batchNumber);
            return this;
        }

        /**
         * <p>The amount of the batch</p>
         */
        @JsonSetter(value = "BatchAmount", nulls = Nulls.SKIP)
        public Builder batchAmount(Optional<Double> batchAmount) {
            this.batchAmount = batchAmount;
            return this;
        }

        public Builder batchAmount(Double batchAmount) {
            this.batchAmount = Optional.ofNullable(batchAmount);
            return this;
        }

        /**
         * <p>Unique ID for customer linked to the transaction</p>
         */
        @JsonSetter(value = "PayorId", nulls = Nulls.SKIP)
        public Builder payorId(Optional<Long> payorId) {
            this.payorId = payorId;
            return this;
        }

        public Builder payorId(Long payorId) {
            this.payorId = Optional.ofNullable(payorId);
            return this;
        }

        @JsonSetter(value = "PaymentData", nulls = Nulls.SKIP)
        public Builder paymentData(Optional<QueryPaymentData> paymentData) {
            this.paymentData = paymentData;
            return this;
        }

        public Builder paymentData(QueryPaymentData paymentData) {
            this.paymentData = Optional.ofNullable(paymentData);
            return this;
        }

        /**
         * <p>Status of transaction. See <a href="/developers/references/money-in-statuses#money-in-transaction-status">the
         * docs</a> for a
         * full reference.</p>
         */
        @JsonSetter(value = "TransStatus", nulls = Nulls.SKIP)
        public Builder transStatus(Optional<Integer> transStatus) {
            this.transStatus = transStatus;
            return this;
        }

        public Builder transStatus(Integer transStatus) {
            this.transStatus = Optional.ofNullable(transStatus);
            return this;
        }

        @JsonSetter(value = "PaypointId", nulls = Nulls.SKIP)
        public Builder paypointId(Optional<Long> paypointId) {
            this.paypointId = paypointId;
            return this;
        }

        public Builder paypointId(Long paypointId) {
            this.paypointId = Optional.ofNullable(paypointId);
            return this;
        }

        /**
         * <p>Transaction total amount (including service fee or sub-charge)</p>
         */
        @JsonSetter(value = "TotalAmount", nulls = Nulls.SKIP)
        public Builder totalAmount(Optional<Double> totalAmount) {
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder totalAmount(Double totalAmount) {
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * <p>Net amount paid</p>
         */
        @JsonSetter(value = "NetAmount", nulls = Nulls.SKIP)
        public Builder netAmount(Optional<Double> netAmount) {
            this.netAmount = netAmount;
            return this;
        }

        public Builder netAmount(Double netAmount) {
            this.netAmount = Optional.ofNullable(netAmount);
            return this;
        }

        @JsonSetter(value = "FeeAmount", nulls = Nulls.SKIP)
        public Builder feeAmount(Optional<Double> feeAmount) {
            this.feeAmount = feeAmount;
            return this;
        }

        public Builder feeAmount(Double feeAmount) {
            this.feeAmount = Optional.ofNullable(feeAmount);
            return this;
        }

        /**
         * <p>Settlement status for transaction. See <a href="/developers/references/money-in-statuses#payment-funding-status">the docs</a> for a full reference.</p>
         */
        @JsonSetter(value = "SettlementStatus", nulls = Nulls.SKIP)
        public Builder settlementStatus(Optional<Integer> settlementStatus) {
            this.settlementStatus = settlementStatus;
            return this;
        }

        public Builder settlementStatus(Integer settlementStatus) {
            this.settlementStatus = Optional.ofNullable(settlementStatus);
            return this;
        }

        @JsonSetter(value = "Operation", nulls = Nulls.SKIP)
        public Builder operation(Optional<String> operation) {
            this.operation = operation;
            return this;
        }

        public Builder operation(String operation) {
            this.operation = Optional.ofNullable(operation);
            return this;
        }

        @JsonSetter(value = "ResponseData", nulls = Nulls.SKIP)
        public Builder responseData(Optional<QueryResponseData> responseData) {
            this.responseData = responseData;
            return this;
        }

        public Builder responseData(QueryResponseData responseData) {
            this.responseData = Optional.ofNullable(responseData);
            return this;
        }

        @JsonSetter(value = "Source", nulls = Nulls.SKIP)
        public Builder source(Optional<String> source) {
            this.source = source;
            return this;
        }

        public Builder source(String source) {
            this.source = Optional.ofNullable(source);
            return this;
        }

        /**
         * <p>Reference to the subscription or schedule that originated the transaction</p>
         */
        @JsonSetter(value = "ScheduleReference", nulls = Nulls.SKIP)
        public Builder scheduleReference(Optional<Integer> scheduleReference) {
            this.scheduleReference = scheduleReference;
            return this;
        }

        public Builder scheduleReference(Integer scheduleReference) {
            this.scheduleReference = Optional.ofNullable(scheduleReference);
            return this;
        }

        @JsonSetter(value = "OrgId", nulls = Nulls.SKIP)
        public Builder orgId(Optional<Long> orgId) {
            this.orgId = orgId;
            return this;
        }

        public Builder orgId(Long orgId) {
            this.orgId = Optional.ofNullable(orgId);
            return this;
        }

        @JsonSetter(value = "RefundId", nulls = Nulls.SKIP)
        public Builder refundId(Optional<Long> refundId) {
            this.refundId = refundId;
            return this;
        }

        public Builder refundId(Long refundId) {
            this.refundId = Optional.ofNullable(refundId);
            return this;
        }

        @JsonSetter(value = "ReturnedId", nulls = Nulls.SKIP)
        public Builder returnedId(Optional<Long> returnedId) {
            this.returnedId = returnedId;
            return this;
        }

        public Builder returnedId(Long returnedId) {
            this.returnedId = Optional.ofNullable(returnedId);
            return this;
        }

        @JsonSetter(value = "ChargebackId", nulls = Nulls.SKIP)
        public Builder chargebackId(Optional<Long> chargebackId) {
            this.chargebackId = chargebackId;
            return this;
        }

        public Builder chargebackId(Long chargebackId) {
            this.chargebackId = Optional.ofNullable(chargebackId);
            return this;
        }

        @JsonSetter(value = "RetrievalId", nulls = Nulls.SKIP)
        public Builder retrievalId(Optional<Long> retrievalId) {
            this.retrievalId = retrievalId;
            return this;
        }

        public Builder retrievalId(Long retrievalId) {
            this.retrievalId = Optional.ofNullable(retrievalId);
            return this;
        }

        /**
         * <p>Additional transaction data</p>
         */
        @JsonSetter(value = "TransAdditionalData", nulls = Nulls.SKIP)
        public Builder transAdditionalData(Optional<Object> transAdditionalData) {
            this.transAdditionalData = transAdditionalData;
            return this;
        }

        public Builder transAdditionalData(Object transAdditionalData) {
            this.transAdditionalData = Optional.ofNullable(transAdditionalData);
            return this;
        }

        /**
         * <p>Associated invoice data</p>
         */
        @JsonSetter(value = "invoiceData", nulls = Nulls.SKIP)
        public Builder invoiceData(Optional<BillData> invoiceData) {
            this.invoiceData = invoiceData;
            return this;
        }

        public Builder invoiceData(BillData invoiceData) {
            this.invoiceData = Optional.ofNullable(invoiceData);
            return this;
        }

        @JsonSetter(value = "EntrypageId", nulls = Nulls.SKIP)
        public Builder entrypageId(Optional<Long> entrypageId) {
            this.entrypageId = entrypageId;
            return this;
        }

        public Builder entrypageId(Long entrypageId) {
            this.entrypageId = Optional.ofNullable(entrypageId);
            return this;
        }

        @JsonSetter(value = "externalPaypointID", nulls = Nulls.SKIP)
        public Builder externalPaypointId(Optional<String> externalPaypointId) {
            this.externalPaypointId = externalPaypointId;
            return this;
        }

        public Builder externalPaypointId(String externalPaypointId) {
            this.externalPaypointId = Optional.ofNullable(externalPaypointId);
            return this;
        }

        /**
         * <p>Indicates whether the ACH account has been validated</p>
         */
        @JsonSetter(value = "IsValidatedACH", nulls = Nulls.SKIP)
        public Builder isValidatedAch(Optional<Boolean> isValidatedAch) {
            this.isValidatedAch = isValidatedAch;
            return this;
        }

        public Builder isValidatedAch(Boolean isValidatedAch) {
            this.isValidatedAch = Optional.ofNullable(isValidatedAch);
            return this;
        }

        /**
         * <p>Transaction date and time, in UTC</p>
         */
        @JsonSetter(value = "TransactionTime", nulls = Nulls.SKIP)
        public Builder transactionTime(Optional<OffsetDateTime> transactionTime) {
            this.transactionTime = transactionTime;
            return this;
        }

        public Builder transactionTime(OffsetDateTime transactionTime) {
            this.transactionTime = Optional.ofNullable(transactionTime);
            return this;
        }

        @JsonSetter(value = "Customer", nulls = Nulls.SKIP)
        public Builder customer(Optional<QueryTransactionPayorData> customer) {
            this.customer = customer;
            return this;
        }

        public Builder customer(QueryTransactionPayorData customer) {
            this.customer = Optional.ofNullable(customer);
            return this;
        }

        @JsonSetter(value = "splitFundingInstructions", nulls = Nulls.SKIP)
        public Builder splitFundingInstructions(Optional<List<SplitFundingContent>> splitFundingInstructions) {
            this.splitFundingInstructions = splitFundingInstructions;
            return this;
        }

        public Builder splitFundingInstructions(List<SplitFundingContent> splitFundingInstructions) {
            this.splitFundingInstructions = Optional.ofNullable(splitFundingInstructions);
            return this;
        }

        @JsonSetter(value = "CfeeTransactions", nulls = Nulls.SKIP)
        public Builder cfeeTransactions(Optional<List<QueryCFeeTransaction>> cfeeTransactions) {
            this.cfeeTransactions = cfeeTransactions;
            return this;
        }

        public Builder cfeeTransactions(List<QueryCFeeTransaction> cfeeTransactions) {
            this.cfeeTransactions = Optional.ofNullable(cfeeTransactions);
            return this;
        }

        @JsonSetter(value = "TransactionEvents", nulls = Nulls.SKIP)
        public Builder transactionEvents(Optional<List<QueryTransactionEvents>> transactionEvents) {
            this.transactionEvents = transactionEvents;
            return this;
        }

        public Builder transactionEvents(List<QueryTransactionEvents> transactionEvents) {
            this.transactionEvents = Optional.ofNullable(transactionEvents);
            return this;
        }

        @JsonSetter(value = "PendingFeeAmount", nulls = Nulls.SKIP)
        public Builder pendingFeeAmount(Optional<Double> pendingFeeAmount) {
            this.pendingFeeAmount = pendingFeeAmount;
            return this;
        }

        public Builder pendingFeeAmount(Double pendingFeeAmount) {
            this.pendingFeeAmount = Optional.ofNullable(pendingFeeAmount);
            return this;
        }

        @JsonSetter(value = "RiskFlagged", nulls = Nulls.SKIP)
        public Builder riskFlagged(Optional<Boolean> riskFlagged) {
            this.riskFlagged = riskFlagged;
            return this;
        }

        public Builder riskFlagged(Boolean riskFlagged) {
            this.riskFlagged = Optional.ofNullable(riskFlagged);
            return this;
        }

        @JsonSetter(value = "RiskFlaggedOn", nulls = Nulls.SKIP)
        public Builder riskFlaggedOn(Optional<OffsetDateTime> riskFlaggedOn) {
            this.riskFlaggedOn = riskFlaggedOn;
            return this;
        }

        public Builder riskFlaggedOn(OffsetDateTime riskFlaggedOn) {
            this.riskFlaggedOn = Optional.ofNullable(riskFlaggedOn);
            return this;
        }

        @JsonSetter(value = "RiskStatus", nulls = Nulls.SKIP)
        public Builder riskStatus(Optional<String> riskStatus) {
            this.riskStatus = riskStatus;
            return this;
        }

        public Builder riskStatus(String riskStatus) {
            this.riskStatus = Optional.ofNullable(riskStatus);
            return this;
        }

        @JsonSetter(value = "RiskReason", nulls = Nulls.SKIP)
        public Builder riskReason(Optional<String> riskReason) {
            this.riskReason = riskReason;
            return this;
        }

        public Builder riskReason(String riskReason) {
            this.riskReason = Optional.ofNullable(riskReason);
            return this;
        }

        @JsonSetter(value = "RiskAction", nulls = Nulls.SKIP)
        public Builder riskAction(Optional<String> riskAction) {
            this.riskAction = riskAction;
            return this;
        }

        public Builder riskAction(String riskAction) {
            this.riskAction = Optional.ofNullable(riskAction);
            return this;
        }

        @JsonSetter(value = "RiskActionCode", nulls = Nulls.SKIP)
        public Builder riskActionCode(Optional<Integer> riskActionCode) {
            this.riskActionCode = riskActionCode;
            return this;
        }

        public Builder riskActionCode(Integer riskActionCode) {
            this.riskActionCode = Optional.ofNullable(riskActionCode);
            return this;
        }

        @JsonSetter(value = "DeviceId", nulls = Nulls.SKIP)
        public Builder deviceId(Optional<String> deviceId) {
            this.deviceId = deviceId;
            return this;
        }

        public Builder deviceId(String deviceId) {
            this.deviceId = Optional.ofNullable(deviceId);
            return this;
        }

        @JsonSetter(value = "AchSecCode", nulls = Nulls.SKIP)
        public Builder achSecCode(Optional<String> achSecCode) {
            this.achSecCode = achSecCode;
            return this;
        }

        public Builder achSecCode(String achSecCode) {
            this.achSecCode = Optional.ofNullable(achSecCode);
            return this;
        }

        @JsonSetter(value = "AchHolderType", nulls = Nulls.SKIP)
        public Builder achHolderType(Optional<AchHolderType> achHolderType) {
            this.achHolderType = achHolderType;
            return this;
        }

        public Builder achHolderType(AchHolderType achHolderType) {
            this.achHolderType = Optional.ofNullable(achHolderType);
            return this;
        }

        @JsonSetter(value = "IpAddress", nulls = Nulls.SKIP)
        public Builder ipAddress(Optional<String> ipAddress) {
            this.ipAddress = ipAddress;
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            this.ipAddress = Optional.ofNullable(ipAddress);
            return this;
        }

        /**
         * <p>Indicates if this was a same-day ACH transaction.</p>
         */
        @JsonSetter(value = "IsSameDayACH", nulls = Nulls.SKIP)
        public Builder isSameDayAch(Optional<Boolean> isSameDayAch) {
            this.isSameDayAch = isSameDayAch;
            return this;
        }

        public Builder isSameDayAch(Boolean isSameDayAch) {
            this.isSameDayAch = Optional.ofNullable(isSameDayAch);
            return this;
        }

        /**
         * <p>Type of wallet used for the transaction (if applicable)</p>
         */
        @JsonSetter(value = "WalletType", nulls = Nulls.SKIP)
        public Builder walletType(Optional<String> walletType) {
            this.walletType = walletType;
            return this;
        }

        public Builder walletType(String walletType) {
            this.walletType = Optional.ofNullable(walletType);
            return this;
        }

        public TransferDetailRecord build() {
            return new TransferDetailRecord(
                    transferDetailId,
                    transferId,
                    transactionId,
                    transactionNumber,
                    type,
                    category,
                    grossAmount,
                    chargeBackAmount,
                    returnedAmount,
                    refundAmount,
                    holdAmount,
                    releasedAmount,
                    billingFeesAmount,
                    thirdPartyPaidAmount,
                    adjustmentsAmount,
                    netTransferAmount,
                    splitFundingAmount,
                    billingFeesDetails,
                    parentOrgName,
                    paypointDbaname,
                    paypointLegalname,
                    paypointEntryname,
                    paymentTransId,
                    connectorName,
                    externalProcessorInformation,
                    gatewayTransId,
                    orderId,
                    method,
                    batchNumber,
                    batchAmount,
                    payorId,
                    paymentData,
                    transStatus,
                    paypointId,
                    totalAmount,
                    netAmount,
                    feeAmount,
                    settlementStatus,
                    operation,
                    responseData,
                    source,
                    scheduleReference,
                    orgId,
                    refundId,
                    returnedId,
                    chargebackId,
                    retrievalId,
                    transAdditionalData,
                    invoiceData,
                    entrypageId,
                    externalPaypointId,
                    isValidatedAch,
                    transactionTime,
                    customer,
                    splitFundingInstructions,
                    cfeeTransactions,
                    transactionEvents,
                    pendingFeeAmount,
                    riskFlagged,
                    riskFlaggedOn,
                    riskStatus,
                    riskReason,
                    riskAction,
                    riskActionCode,
                    deviceId,
                    achSecCode,
                    achHolderType,
                    ipAddress,
                    isSameDayAch,
                    walletType,
                    additionalProperties);
        }
    }
}
